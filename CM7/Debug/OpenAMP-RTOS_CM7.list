
OpenAMP-RTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0800c188  0800c188  0000d188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4d0  0800c4d0  0000e230  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4d0  0800c4d0  0000d4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4d8  0800c4d8  0000e230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4d8  0800c4d8  0000d4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c4dc  0800c4dc  0000d4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  24000000  0800c4e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000170  0800c650  0000e170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240001d0  0800c6b0  0000e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051ec  24000230  0800c710  0000e230  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400541c  0800c710  0000e41c  2**0
                  ALLOC
 13 .openamp_section 0000008c  38000000  0800c710  0000f000  2**2
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0000e230  2**0
                  CONTENTS, READONLY
 15 .debug_info   0002d968  00000000  00000000  0000e25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000066a9  00000000  00000000  0003bbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000022e8  00000000  00000000  00042270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001a8f  00000000  00000000  00044558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00041658  00000000  00000000  00045fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002bb9c  00000000  00000000  0008763f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00197361  00000000  00000000  000b31db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0024a53c  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009b14  00000000  00000000  0024a580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006d  00000000  00000000  00254094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000230 	.word	0x24000230
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c170 	.word	0x0800c170

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000234 	.word	0x24000234
 80002dc:	0800c170 	.word	0x0800c170

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003b4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ac <SystemInit+0xfc>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ba:	4a3c      	ldr	r2, [pc, #240]	@ (80004ac <SystemInit+0xfc>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003c4:	4b39      	ldr	r3, [pc, #228]	@ (80004ac <SystemInit+0xfc>)
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	4a38      	ldr	r2, [pc, #224]	@ (80004ac <SystemInit+0xfc>)
 80003ca:	f043 0310 	orr.w	r3, r3, #16
 80003ce:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003d0:	4b37      	ldr	r3, [pc, #220]	@ (80004b0 <SystemInit+0x100>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f003 030f 	and.w	r3, r3, #15
 80003d8:	2b06      	cmp	r3, #6
 80003da:	d807      	bhi.n	80003ec <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003dc:	4b34      	ldr	r3, [pc, #208]	@ (80004b0 <SystemInit+0x100>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f023 030f 	bic.w	r3, r3, #15
 80003e4:	4a32      	ldr	r2, [pc, #200]	@ (80004b0 <SystemInit+0x100>)
 80003e6:	f043 0307 	orr.w	r3, r3, #7
 80003ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003ec:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <SystemInit+0x104>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a30      	ldr	r2, [pc, #192]	@ (80004b4 <SystemInit+0x104>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003f8:	4b2e      	ldr	r3, [pc, #184]	@ (80004b4 <SystemInit+0x104>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003fe:	4b2d      	ldr	r3, [pc, #180]	@ (80004b4 <SystemInit+0x104>)
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	492c      	ldr	r1, [pc, #176]	@ (80004b4 <SystemInit+0x104>)
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <SystemInit+0x108>)
 8000406:	4013      	ands	r3, r2
 8000408:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800040a:	4b29      	ldr	r3, [pc, #164]	@ (80004b0 <SystemInit+0x100>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0308 	and.w	r3, r3, #8
 8000412:	2b00      	cmp	r3, #0
 8000414:	d007      	beq.n	8000426 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000416:	4b26      	ldr	r3, [pc, #152]	@ (80004b0 <SystemInit+0x100>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f023 030f 	bic.w	r3, r3, #15
 800041e:	4a24      	ldr	r2, [pc, #144]	@ (80004b0 <SystemInit+0x100>)
 8000420:	f043 0307 	orr.w	r3, r3, #7
 8000424:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000426:	4b23      	ldr	r3, [pc, #140]	@ (80004b4 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800042c:	4b21      	ldr	r3, [pc, #132]	@ (80004b4 <SystemInit+0x104>)
 800042e:	2200      	movs	r2, #0
 8000430:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000432:	4b20      	ldr	r3, [pc, #128]	@ (80004b4 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000438:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <SystemInit+0x104>)
 800043a:	4a20      	ldr	r2, [pc, #128]	@ (80004bc <SystemInit+0x10c>)
 800043c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <SystemInit+0x104>)
 8000440:	4a1f      	ldr	r2, [pc, #124]	@ (80004c0 <SystemInit+0x110>)
 8000442:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000444:	4b1b      	ldr	r3, [pc, #108]	@ (80004b4 <SystemInit+0x104>)
 8000446:	4a1f      	ldr	r2, [pc, #124]	@ (80004c4 <SystemInit+0x114>)
 8000448:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <SystemInit+0x104>)
 800044c:	2200      	movs	r2, #0
 800044e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000450:	4b18      	ldr	r3, [pc, #96]	@ (80004b4 <SystemInit+0x104>)
 8000452:	4a1c      	ldr	r2, [pc, #112]	@ (80004c4 <SystemInit+0x114>)
 8000454:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000456:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <SystemInit+0x104>)
 8000458:	2200      	movs	r2, #0
 800045a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <SystemInit+0x104>)
 800045e:	4a19      	ldr	r2, [pc, #100]	@ (80004c4 <SystemInit+0x114>)
 8000460:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <SystemInit+0x104>)
 8000464:	2200      	movs	r2, #0
 8000466:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000468:	4b12      	ldr	r3, [pc, #72]	@ (80004b4 <SystemInit+0x104>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a11      	ldr	r2, [pc, #68]	@ (80004b4 <SystemInit+0x104>)
 800046e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000472:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <SystemInit+0x104>)
 8000476:	2200      	movs	r2, #0
 8000478:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800047a:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <SystemInit+0x118>)
 800047c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800047e:	4a12      	ldr	r2, [pc, #72]	@ (80004c8 <SystemInit+0x118>)
 8000480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000484:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <SystemInit+0x11c>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <SystemInit+0x120>)
 800048c:	4013      	ands	r3, r2
 800048e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000492:	d202      	bcs.n	800049a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <SystemInit+0x124>)
 8000496:	2201      	movs	r2, #1
 8000498:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <SystemInit+0x128>)
 800049c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80004a0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	52002000 	.word	0x52002000
 80004b4:	58024400 	.word	0x58024400
 80004b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004bc:	02020200 	.word	0x02020200
 80004c0:	01ff0000 	.word	0x01ff0000
 80004c4:	01010280 	.word	0x01010280
 80004c8:	580000c0 	.word	0x580000c0
 80004cc:	5c001000 	.word	0x5c001000
 80004d0:	ffff0000 	.word	0xffff0000
 80004d4:	51008108 	.word	0x51008108
 80004d8:	52004000 	.word	0x52004000

080004dc <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af02      	add	r7, sp, #8
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80004ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80004f0:	d101      	bne.n	80004f6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80004f2:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <rpmsg_send+0x3c>)
 80004f4:	e00c      	b.n	8000510 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80004fe:	2301      	movs	r3, #1
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	68f8      	ldr	r0, [r7, #12]
 800050a:	f009 f983 	bl	8009814 <rpmsg_send_offchannel_raw>
 800050e:	4603      	mov	r3, r0
					 len, true);
}
 8000510:	4618      	mov	r0, r3
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	fffff829 	.word	0xfffff829

0800051c <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2220      	movs	r2, #32
 800052e:	68b9      	ldr	r1, [r7, #8]
 8000530:	4618      	mov	r0, r3
 8000532:	f00b f803 	bl	800b53c <strncpy>
	ept->addr = src;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	69fa      	ldr	r2, [r7, #28]
 800054c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800055e:	f000 fae7 	bl	8000b30 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000562:	4b60      	ldr	r3, [pc, #384]	@ (80006e4 <main+0x18c>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d11b      	bne.n	80005a6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800056e:	f3bf 8f4f 	dsb	sy
}
 8000572:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000574:	f3bf 8f6f 	isb	sy
}
 8000578:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800057a:	4b5a      	ldr	r3, [pc, #360]	@ (80006e4 <main+0x18c>)
 800057c:	2200      	movs	r2, #0
 800057e:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000582:	f3bf 8f4f 	dsb	sy
}
 8000586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000588:	f3bf 8f6f 	isb	sy
}
 800058c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800058e:	4b55      	ldr	r3, [pc, #340]	@ (80006e4 <main+0x18c>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a54      	ldr	r2, [pc, #336]	@ (80006e4 <main+0x18c>)
 8000594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000598:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800059a:	f3bf 8f4f 	dsb	sy
}
 800059e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005a0:	f3bf 8f6f 	isb	sy
}
 80005a4:	e000      	b.n	80005a8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005a6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80005a8:	4b4e      	ldr	r3, [pc, #312]	@ (80006e4 <main+0x18c>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d138      	bne.n	8000626 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80005b4:	4b4b      	ldr	r3, [pc, #300]	@ (80006e4 <main+0x18c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005bc:	f3bf 8f4f 	dsb	sy
}
 80005c0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005c2:	4b48      	ldr	r3, [pc, #288]	@ (80006e4 <main+0x18c>)
 80005c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80005c8:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	0b5b      	lsrs	r3, r3, #13
 80005ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005d2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	08db      	lsrs	r3, r3, #3
 80005d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005dc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	015a      	lsls	r2, r3, #5
 80005e2:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80005e6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ec:	493d      	ldr	r1, [pc, #244]	@ (80006e4 <main+0x18c>)
 80005ee:	4313      	orrs	r3, r2
 80005f0:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1e5a      	subs	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1ef      	bne.n	80005de <main+0x86>
    } while(sets-- != 0U);
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	1e5a      	subs	r2, r3, #1
 8000602:	60fa      	str	r2, [r7, #12]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1e5      	bne.n	80005d4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800060e:	4b35      	ldr	r3, [pc, #212]	@ (80006e4 <main+0x18c>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a34      	ldr	r2, [pc, #208]	@ (80006e4 <main+0x18c>)
 8000614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000618:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800061a:	f3bf 8f4f 	dsb	sy
}
 800061e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000620:	f3bf 8f6f 	isb	sy
}
 8000624:	e000      	b.n	8000628 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000626:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000628:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800062c:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800062e:	bf00      	nop
 8000630:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <main+0x190>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <main+0xee>
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	1e5a      	subs	r2, r3, #1
 8000640:	617a      	str	r2, [r7, #20]
 8000642:	2b00      	cmp	r3, #0
 8000644:	dcf4      	bgt.n	8000630 <main+0xd8>
  if ( timeout < 0 )
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b00      	cmp	r3, #0
 800064a:	da01      	bge.n	8000650 <main+0xf8>
  {
  Error_Handler();
 800064c:	f000 fab0 	bl	8000bb0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 fdbc 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f856 	bl	8000704 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <main+0x190>)
 800065a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065e:	4a22      	ldr	r2, [pc, #136]	@ (80006e8 <main+0x190>)
 8000660:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000664:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <main+0x190>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000676:	2000      	movs	r0, #0
 8000678:	f001 fdb8 	bl	80021ec <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f001 fdce 	bl	8002220 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000684:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000688:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800068a:	bf00      	nop
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <main+0x190>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d104      	bne.n	80006a2 <main+0x14a>
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	617a      	str	r2, [r7, #20]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dcf4      	bgt.n	800068c <main+0x134>
if ( timeout < 0 )
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da01      	bge.n	80006ac <main+0x154>
{
Error_Handler();
 80006a8:	f000 fa82 	bl	8000bb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 f926 	bl	80008fc <MX_GPIO_Init>
  MX_ETH_Init();
 80006b0:	f000 f8a6 	bl	8000800 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b4:	f000 f8f0 	bl	8000898 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b8:	f005 f926 	bl	8005908 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RxTask */
  RxTaskHandle = osThreadNew(StartRxTask, NULL, &RxTask_attributes);
 80006bc:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <main+0x194>)
 80006be:	2100      	movs	r1, #0
 80006c0:	480b      	ldr	r0, [pc, #44]	@ (80006f0 <main+0x198>)
 80006c2:	f005 f96b 	bl	800599c <osThreadNew>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <main+0x19c>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(StartTxTask, NULL, &TxTask_attributes);
 80006cc:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <main+0x1a0>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	480a      	ldr	r0, [pc, #40]	@ (80006fc <main+0x1a4>)
 80006d2:	f005 f963 	bl	800599c <osThreadNew>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <main+0x1a8>)
 80006da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006dc:	f005 f938 	bl	8005950 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <main+0x188>
 80006e4:	e000ed00 	.word	0xe000ed00
 80006e8:	58024400 	.word	0x58024400
 80006ec:	0800c3b4 	.word	0x0800c3b4
 80006f0:	08000a71 	.word	0x08000a71
 80006f4:	24000818 	.word	0x24000818
 80006f8:	0800c3d8 	.word	0x0800c3d8
 80006fc:	08000add 	.word	0x08000add
 8000700:	2400081c 	.word	0x2400081c

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	@ 0x70
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070e:	224c      	movs	r2, #76	@ 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00a ff25 	bl	800b562 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a ff1f 	bl	800b562 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000724:	2004      	movs	r0, #4
 8000726:	f001 feeb 	bl	8002500 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b32      	ldr	r3, [pc, #200]	@ (80007f8 <SystemClock_Config+0xf4>)
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	4a31      	ldr	r2, [pc, #196]	@ (80007f8 <SystemClock_Config+0xf4>)
 8000734:	f023 0301 	bic.w	r3, r3, #1
 8000738:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073a:	4b2f      	ldr	r3, [pc, #188]	@ (80007f8 <SystemClock_Config+0xf4>)
 800073c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <SystemClock_Config+0xf8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800074c:	4a2b      	ldr	r2, [pc, #172]	@ (80007fc <SystemClock_Config+0xf8>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <SystemClock_Config+0xf8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <SystemClock_Config+0xf8>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	2302      	movs	r3, #2
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000786:	2312      	movs	r3, #18
 8000788:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000796:	230c      	movs	r3, #12
 8000798:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800079a:	2302      	movs	r3, #2
 800079c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800079e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 ff13 	bl	80025d4 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007b4:	f000 f9fc 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	233f      	movs	r3, #63	@ 0x3f
 80007ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2303      	movs	r3, #3
 80007be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d6:	2340      	movs	r3, #64	@ 0x40
 80007d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fb52 	bl	8002e88 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007ea:	f000 f9e1 	bl	8000bb0 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3770      	adds	r7, #112	@ 0x70
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58000400 	.word	0x58000400
 80007fc:	58024800 	.word	0x58024800

08000800 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ETH_Init+0x80>)
 8000806:	4a1f      	ldr	r2, [pc, #124]	@ (8000884 <MX_ETH_Init+0x84>)
 8000808:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_ETH_Init+0x88>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ETH_Init+0x88>)
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_ETH_Init+0x88>)
 8000818:	22e1      	movs	r2, #225	@ 0xe1
 800081a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_ETH_Init+0x88>)
 800081e:	2200      	movs	r2, #0
 8000820:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ETH_Init+0x88>)
 8000824:	2200      	movs	r2, #0
 8000826:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_ETH_Init+0x88>)
 800082a:	2200      	movs	r2, #0
 800082c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_ETH_Init+0x80>)
 8000830:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <MX_ETH_Init+0x88>)
 8000832:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_ETH_Init+0x80>)
 8000836:	2201      	movs	r2, #1
 8000838:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_ETH_Init+0x80>)
 800083c:	4a13      	ldr	r2, [pc, #76]	@ (800088c <MX_ETH_Init+0x8c>)
 800083e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_ETH_Init+0x80>)
 8000842:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <MX_ETH_Init+0x90>)
 8000844:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_ETH_Init+0x80>)
 8000848:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800084c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800084e:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_ETH_Init+0x80>)
 8000850:	f000 feb4 	bl	80015bc <HAL_ETH_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800085a:	f000 f9a9 	bl	8000bb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800085e:	2238      	movs	r2, #56	@ 0x38
 8000860:	2100      	movs	r1, #0
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_ETH_Init+0x94>)
 8000864:	f00a fe7d 	bl	800b562 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_ETH_Init+0x94>)
 800086a:	2221      	movs	r2, #33	@ 0x21
 800086c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_ETH_Init+0x94>)
 8000870:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000874:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_ETH_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000284 	.word	0x24000284
 8000884:	40028000 	.word	0x40028000
 8000888:	2400086c 	.word	0x2400086c
 800088c:	240001d0 	.word	0x240001d0
 8000890:	24000170 	.word	0x24000170
 8000894:	2400024c 	.word	0x2400024c

08000898 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089e:	4a16      	ldr	r2, [pc, #88]	@ (80008f8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e0:	f001 fcde 	bl	80022a0 <HAL_PCD_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008ea:	f000 f961 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	24000334 	.word	0x24000334
 80008f8:	40080000 	.word	0x40080000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b31      	ldr	r3, [pc, #196]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000918:	4a2f      	ldr	r2, [pc, #188]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000930:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000936:	4a28      	ldr	r2, [pc, #160]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	4a20      	ldr	r2, [pc, #128]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095e:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	4a19      	ldr	r2, [pc, #100]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800097c:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	4a11      	ldr	r2, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 8000992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800099a:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_GPIO_Init+0xdc>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2101      	movs	r1, #1
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <MX_GPIO_Init+0xe0>)
 80009ae:	f001 fbe9 	bl	8002184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_GPIO_Init+0xe0>)
 80009ca:	f001 fa2b 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	@ 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	58024400 	.word	0x58024400
 80009dc:	58020400 	.word	0x58020400

080009e0 <rpmsg_recv_callback>:

/* USER CODE BEGIN 4 */
static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
                size_t len, uint32_t src, void *priv)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	603b      	str	r3, [r7, #0]
  received_data_str = *((unsigned int *) data);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <rpmsg_recv_callback+0x2c>)
 80009f4:	6013      	str	r3, [r2, #0]
  message_received = 1;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <rpmsg_recv_callback+0x30>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]

  return 0;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	24000828 	.word	0x24000828
 8000a10:	24000820 	.word	0x24000820

08000a14 <service_destroy_cb>:

void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* this function is called while remote endpoint as been destroyed, the
   * service is no more available
   */
  service_created = 0;
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <service_destroy_cb+0x1c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	24000824 	.word	0x24000824

08000a34 <new_service_cb>:
 * When the remote core (Cortex-M4) initializes its communication system and registers a new RPMsg endpoint (service),
 * the OpenAMP framework triggers the new_service_cb() on the local core (Cortex-M7) to notify it about
 * the availability of this new service.
 */
void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  /* create a endpoint for rmpsg communication */
  OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000a40:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <new_service_cb+0x2c>)
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <new_service_cb+0x30>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	4807      	ldr	r0, [pc, #28]	@ (8000a68 <new_service_cb+0x34>)
 8000a4c:	f00a fb28 	bl	800b0a0 <OPENAMP_create_endpoint>
                          service_destroy_cb);

  service_created = 1;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <new_service_cb+0x38>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	08000a15 	.word	0x08000a15
 8000a64:	080009e1 	.word	0x080009e1
 8000a68:	2400082c 	.word	0x2400082c
 8000a6c:	24000824 	.word	0x24000824

08000a70 <StartRxTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRxTask */
void StartRxTask(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int32_t status = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]

  /* Initialize the mailbox use notify the other core on new message */
  MAILBOX_Init();
 8000a7c:	f00a f954 	bl	800ad28 <MAILBOX_Init>

  /* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
  rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY, NULL, NULL);
 8000a80:	2300      	movs	r3, #0
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	2300      	movs	r3, #0
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a90:	490e      	ldr	r1, [pc, #56]	@ (8000acc <StartRxTask+0x5c>)
 8000a92:	480f      	ldr	r0, [pc, #60]	@ (8000ad0 <StartRxTask+0x60>)
 8000a94:	f7ff fd42 	bl	800051c <rpmsg_init_ept>

  /* Initialize OpenAmp and libmetal libraries. ALso register the callback */
  if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 8000a98:	490e      	ldr	r1, [pc, #56]	@ (8000ad4 <StartRxTask+0x64>)
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f00a fa5e 	bl	800af5c <MX_OPENAMP_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <StartRxTask+0x3a>
  {
	Error_Handler();
 8000aa6:	f000 f883 	bl	8000bb0 <Error_Handler>
   * initialized and ready to handle message transfers.
   * The rpmsg service is initiated by the remote processor (M4), here,on M7, new_service_cb
   * callback is received on service creation.
   * hen the endpoint becones avalable, the new_service_cb callback is received.
   */
  OPENAMP_Wait_EndPointready(&rp_endpoint);
 8000aaa:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <StartRxTask+0x60>)
 8000aac:	f00a fb22 	bl	800b0f4 <OPENAMP_Wait_EndPointready>

  /* Infinite loop */
  for(;;)
  {
	if (service_created){
 8000ab0:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <StartRxTask+0x68>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <StartRxTask+0x4e>
	  /* Check if the service is destroyed on the remote side
	   * If the service is already created and a new message arrives, it means that the
	   * remote (M4) has destroyeed the endpoint communication channel
	  */
	  OPENAMP_check_for_message(); // Once a message is detected, the function triggers rpmsg_recv_callback() callback
 8000ab8:	f00a fb10 	bl	800b0dc <OPENAMP_check_for_message>
 8000abc:	e001      	b.n	8000ac2 <StartRxTask+0x52>
	}
	else {
	  OPENAMP_DeInit();
 8000abe:	f00a fae3 	bl	800b088 <OPENAMP_DeInit>
	}
    osDelay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f004 fffc 	bl	8005ac0 <osDelay>
	if (service_created){
 8000ac8:	e7f2      	b.n	8000ab0 <StartRxTask+0x40>
 8000aca:	bf00      	nop
 8000acc:	0800c198 	.word	0x0800c198
 8000ad0:	2400082c 	.word	0x2400082c
 8000ad4:	08000a35 	.word	0x08000a35
 8000ad8:	24000824 	.word	0x24000824

08000adc <StartTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTxTask */
void StartTxTask(void *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTxTask */
  /* Infinite loop */
  for(;;)
  {
	// Send the messsage to the M4 core:
	if (OPENAMP_send(&rp_endpoint, str2cm4, strlen(str2cm4) + 1) < 0) {
 8000ae4:	480f      	ldr	r0, [pc, #60]	@ (8000b24 <StartTxTask+0x48>)
 8000ae6:	f7ff fbfb 	bl	80002e0 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	3301      	adds	r3, #1
 8000aee:	461a      	mov	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	@ (8000b24 <StartTxTask+0x48>)
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <StartTxTask+0x4c>)
 8000af4:	f7ff fcf2 	bl	80004dc <rpmsg_send>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da01      	bge.n	8000b02 <StartTxTask+0x26>
		Error_Handler();
 8000afe:	f000 f857 	bl	8000bb0 <Error_Handler>
	}
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b02:	2101      	movs	r1, #1
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <StartTxTask+0x50>)
 8000b06:	f001 fb56 	bl	80021b6 <HAL_GPIO_TogglePin>
	osDelay(100);
 8000b0a:	2064      	movs	r0, #100	@ 0x64
 8000b0c:	f004 ffd8 	bl	8005ac0 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b10:	2101      	movs	r1, #1
 8000b12:	4806      	ldr	r0, [pc, #24]	@ (8000b2c <StartTxTask+0x50>)
 8000b14:	f001 fb4f 	bl	80021b6 <HAL_GPIO_TogglePin>
    osDelay(900);
 8000b18:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8000b1c:	f004 ffd0 	bl	8005ac0 <osDelay>
	if (OPENAMP_send(&rp_endpoint, str2cm4, strlen(str2cm4) + 1) < 0) {
 8000b20:	e7e0      	b.n	8000ae4 <StartTxTask+0x8>
 8000b22:	bf00      	nop
 8000b24:	24000008 	.word	0x24000008
 8000b28:	2400082c 	.word	0x2400082c
 8000b2c:	58020400 	.word	0x58020400

08000b30 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b42:	f000 fcc3 	bl	80014cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 8000b4e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000b52:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000b54:	230f      	movs	r3, #15
 8000b56:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b60:	2303      	movs	r3, #3
 8000b62:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b74:	463b      	mov	r3, r7
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fce0 	bl	800153c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b7c:	2004      	movs	r0, #4
 8000b7e:	f000 fcbd 	bl	80014fc <HAL_MPU_Enable>

}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9e:	f000 fb51 	bl	8001244 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40001000 	.word	0x40001000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_MspInit+0x48>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <HAL_MspInit+0x48>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <HAL_MspInit+0x48>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	210f      	movs	r1, #15
 8000be4:	f06f 0001 	mvn.w	r0, #1
 8000be8:	f000 fc48 	bl	800147c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2105      	movs	r1, #5
 8000bf0:	207d      	movs	r0, #125	@ 0x7d
 8000bf2:	f000 fc43 	bl	800147c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000bf6:	207d      	movs	r0, #125	@ 0x7d
 8000bf8:	f000 fc5a 	bl	80014b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	58024400 	.word	0x58024400

08000c08 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	@ 0x38
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a59      	ldr	r2, [pc, #356]	@ (8000d8c <HAL_ETH_MspInit+0x184>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f040 80ab 	bne.w	8000d82 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c2c:	4b58      	ldr	r3, [pc, #352]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c32:	4a57      	ldr	r2, [pc, #348]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c3c:	4b54      	ldr	r3, [pc, #336]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c4a:	4b51      	ldr	r3, [pc, #324]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c50:	4a4f      	ldr	r2, [pc, #316]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c68:	4b49      	ldr	r3, [pc, #292]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c6e:	4a48      	ldr	r2, [pc, #288]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c78:	4b45      	ldr	r3, [pc, #276]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b42      	ldr	r3, [pc, #264]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a40      	ldr	r2, [pc, #256]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b3e      	ldr	r3, [pc, #248]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	4a39      	ldr	r2, [pc, #228]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb4:	4b36      	ldr	r3, [pc, #216]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b33      	ldr	r3, [pc, #204]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a31      	ldr	r2, [pc, #196]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <HAL_ETH_MspInit+0x188>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cfe:	2332      	movs	r3, #50	@ 0x32
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0e:	230b      	movs	r3, #11
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	481e      	ldr	r0, [pc, #120]	@ (8000d94 <HAL_ETH_MspInit+0x18c>)
 8000d1a:	f001 f883 	bl	8001e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d1e:	2386      	movs	r3, #134	@ 0x86
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	4817      	ldr	r0, [pc, #92]	@ (8000d98 <HAL_ETH_MspInit+0x190>)
 8000d3a:	f001 f873 	bl	8001e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d50:	230b      	movs	r3, #11
 8000d52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4810      	ldr	r0, [pc, #64]	@ (8000d9c <HAL_ETH_MspInit+0x194>)
 8000d5c:	f001 f862 	bl	8001e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d72:	230b      	movs	r3, #11
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <HAL_ETH_MspInit+0x198>)
 8000d7e:	f001 f851 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3738      	adds	r7, #56	@ 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40028000 	.word	0x40028000
 8000d90:	58024400 	.word	0x58024400
 8000d94:	58020800 	.word	0x58020800
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	58020400 	.word	0x58020400
 8000da0:	58021800 	.word	0x58021800

08000da4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ba      	sub	sp, #232	@ 0xe8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	22c0      	movs	r2, #192	@ 0xc0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00a fbcc 	bl	800b562 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a38      	ldr	r2, [pc, #224]	@ (8000eb0 <HAL_PCD_MspInit+0x10c>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d169      	bne.n	8000ea8 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dd4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000de4:	2312      	movs	r3, #18
 8000de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8000dec:	2303      	movs	r3, #3
 8000dee:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000df4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000df8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8000dfa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dfe:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000e00:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fbf3 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8000e18:	f7ff feca 	bl	8000bb0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e1c:	f001 fbca 	bl	80025b4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <HAL_PCD_MspInit+0x110>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	4a23      	ldr	r2, [pc, #140]	@ (8000eb4 <HAL_PCD_MspInit+0x110>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <HAL_PCD_MspInit+0x110>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e3e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e58:	230a      	movs	r3, #10
 8000e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4814      	ldr	r0, [pc, #80]	@ (8000eb8 <HAL_PCD_MspInit+0x114>)
 8000e66:	f000 ffdd 	bl	8001e24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <HAL_PCD_MspInit+0x114>)
 8000e86:	f000 ffcd 	bl	8001e24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_PCD_MspInit+0x110>)
 8000e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e90:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <HAL_PCD_MspInit+0x110>)
 8000e92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_PCD_MspInit+0x110>)
 8000e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37e8      	adds	r7, #232	@ 0xe8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40080000 	.word	0x40080000
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	58020000 	.word	0x58020000

08000ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b090      	sub	sp, #64	@ 0x40
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b0f      	cmp	r3, #15
 8000ec8:	d827      	bhi.n	8000f1a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	2036      	movs	r0, #54	@ 0x36
 8000ed0:	f000 fad4 	bl	800147c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ed4:	2036      	movs	r0, #54	@ 0x36
 8000ed6:	f000 faeb 	bl	80014b0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000eda:	4a29      	ldr	r2, [pc, #164]	@ (8000f80 <HAL_InitTick+0xc4>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee0:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <HAL_InitTick+0xc8>)
 8000ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ee6:	4a27      	ldr	r2, [pc, #156]	@ (8000f84 <HAL_InitTick+0xc8>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ef0:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <HAL_InitTick+0xc8>)
 8000ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000efe:	f107 0210 	add.w	r2, r7, #16
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fb33 	bl	8003574 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <HAL_InitTick+0x6a>
 8000f18:	e001      	b.n	8000f1e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e02b      	b.n	8000f76 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f1e:	f002 fb13 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8000f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000f24:	e004      	b.n	8000f30 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f26:	f002 fb0f 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f32:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <HAL_InitTick+0xcc>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	0c9b      	lsrs	r3, r3, #18
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <HAL_InitTick+0xd0>)
 8000f40:	4a13      	ldr	r2, [pc, #76]	@ (8000f90 <HAL_InitTick+0xd4>)
 8000f42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <HAL_InitTick+0xd0>)
 8000f46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <HAL_InitTick+0xd0>)
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <HAL_InitTick+0xd0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_InitTick+0xd0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <HAL_InitTick+0xd0>)
 8000f60:	f003 feb8 	bl	8004cd4 <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d104      	bne.n	8000f74 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f6a:	4808      	ldr	r0, [pc, #32]	@ (8000f8c <HAL_InitTick+0xd0>)
 8000f6c:	f003 ff14 	bl	8004d98 <HAL_TIM_Base_Start_IT>
 8000f70:	4603      	mov	r3, r0
 8000f72:	e000      	b.n	8000f76 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3740      	adds	r7, #64	@ 0x40
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000060 	.word	0x24000060
 8000f84:	58024400 	.word	0x58024400
 8000f88:	431bde83 	.word	0x431bde83
 8000f8c:	24000874 	.word	0x24000874
 8000f90:	40001000 	.word	0x40001000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <TIM6_DAC_IRQHandler+0x10>)
 8000fd2:	f003 ff59 	bl	8004e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	24000874 	.word	0x24000874

08000fe0 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000fe4:	f001 f942 	bl	800226c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return 1;
 8000ff0:	2301      	movs	r3, #1
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <_kill>:

int _kill(int pid, int sig)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001006:	f00a fac5 	bl	800b594 <__errno>
 800100a:	4603      	mov	r3, r0
 800100c:	2216      	movs	r2, #22
 800100e:	601a      	str	r2, [r3, #0]
  return -1;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <_exit>:

void _exit (int status)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001024:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffe7 	bl	8000ffc <_kill>
  while (1) {}    /* Make sure we hang here */
 800102e:	bf00      	nop
 8001030:	e7fd      	b.n	800102e <_exit+0x12>

08001032 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e00a      	b.n	800105a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001044:	f3af 8000 	nop.w
 8001048:	4601      	mov	r1, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60ba      	str	r2, [r7, #8]
 8001050:	b2ca      	uxtb	r2, r1
 8001052:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	3301      	adds	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	dbf0      	blt.n	8001044 <_read+0x12>
  }

  return len;
 8001062:	687b      	ldr	r3, [r7, #4]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e009      	b.n	8001092 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	60ba      	str	r2, [r7, #8]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf1      	blt.n	800107e <_write+0x12>
  }
  return len;
 800109a:	687b      	ldr	r3, [r7, #4]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_close>:

int _close(int file)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010cc:	605a      	str	r2, [r3, #4]
  return 0;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <_isatty>:

int _isatty(int file)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010e4:	2301      	movs	r3, #1
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b085      	sub	sp, #20
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	@ (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f00a fa2a 	bl	800b594 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24080000 	.word	0x24080000
 800116c:	00000400 	.word	0x00000400
 8001170:	240008c0 	.word	0x240008c0
 8001174:	24005420 	.word	0x24005420

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800117c:	f7ff f918 	bl	80003b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	@ (80011b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	@ (80011c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f00a f9fb 	bl	800b5a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff f9d5 	bl	8000558 <main>
  bx  lr
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011b8:	24000170 	.word	0x24000170
  ldr r2, =_sidata
 80011bc:	0800c4e0 	.word	0x0800c4e0
  ldr r2, =_sbss
 80011c0:	24000230 	.word	0x24000230
  ldr r4, =_ebss
 80011c4:	2400541c 	.word	0x2400541c

080011c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC3_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f000 f947 	bl	8001466 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011d8:	f002 f80c 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80011dc:	4602      	mov	r2, r0
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_Init+0x68>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	4913      	ldr	r1, [pc, #76]	@ (8001238 <HAL_Init+0x6c>)
 80011ea:	5ccb      	ldrb	r3, [r1, r3]
 80011ec:	f003 031f 	and.w	r3, r3, #31
 80011f0:	fa22 f303 	lsr.w	r3, r2, r3
 80011f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <HAL_Init+0x68>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <HAL_Init+0x6c>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	4a0b      	ldr	r2, [pc, #44]	@ (800123c <HAL_Init+0x70>)
 800120e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001210:	4a0b      	ldr	r2, [pc, #44]	@ (8001240 <HAL_Init+0x74>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001216:	200f      	movs	r0, #15
 8001218:	f7ff fe50 	bl	8000ebc <HAL_InitTick>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e002      	b.n	800122c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001226:	f7ff fcc9 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	58024400 	.word	0x58024400
 8001238:	0800c3a4 	.word	0x0800c3a4
 800123c:	24000004 	.word	0x24000004
 8001240:	24000000 	.word	0x24000000

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	24000064 	.word	0x24000064
 8001268:	240008c4 	.word	0x240008c4

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	240008c4 	.word	0x240008c4

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	24000064 	.word	0x24000064

080012cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_GetREVID+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0c1b      	lsrs	r3, r3, #16
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	5c001000 	.word	0x5c001000

080012e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80012f4:	4904      	ldr	r1, [pc, #16]	@ (8001308 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	604b      	str	r3, [r1, #4]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	58000400 	.word	0x58000400

0800130c <__NVIC_SetPriorityGrouping>:
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	4313      	orrs	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	@ (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	05fa0000 	.word	0x05fa0000

08001354 <__NVIC_GetPriorityGrouping>:
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff4c 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148a:	f7ff ff63 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800148e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	6978      	ldr	r0, [r7, #20]
 8001496:	f7ff ffb3 	bl	8001400 <NVIC_EncodePriority>
 800149a:	4602      	mov	r2, r0
 800149c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff82 	bl	80013ac <__NVIC_SetPriority>
}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff56 	bl	8001370 <__NVIC_EnableIRQ>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014d0:	f3bf 8f5f 	dmb	sy
}
 80014d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <HAL_MPU_Disable+0x28>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <HAL_MPU_Disable+0x28>)
 80014dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014e2:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_MPU_Disable+0x2c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00
 80014f8:	e000ed90 	.word	0xe000ed90

080014fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <HAL_MPU_Enable+0x38>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_MPU_Enable+0x3c>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_MPU_Enable+0x3c>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001518:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800151a:	f3bf 8f4f 	dsb	sy
}
 800151e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001520:	f3bf 8f6f 	isb	sy
}
 8001524:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed90 	.word	0xe000ed90
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785a      	ldrb	r2, [r3, #1]
 8001548:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_MPU_ConfigRegion+0x7c>)
 800154a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800154c:	4b1a      	ldr	r3, [pc, #104]	@ (80015b8 <HAL_MPU_ConfigRegion+0x7c>)
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <HAL_MPU_ConfigRegion+0x7c>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001558:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <HAL_MPU_ConfigRegion+0x7c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b1b      	ldrb	r3, [r3, #12]
 8001564:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7adb      	ldrb	r3, [r3, #11]
 800156a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800156c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7a9b      	ldrb	r3, [r3, #10]
 8001572:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001574:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7b5b      	ldrb	r3, [r3, #13]
 800157a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800157c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7b9b      	ldrb	r3, [r3, #14]
 8001582:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001584:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7bdb      	ldrb	r3, [r3, #15]
 800158a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800158c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7a5b      	ldrb	r3, [r3, #9]
 8001592:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001594:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7a1b      	ldrb	r3, [r3, #8]
 800159a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800159c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015a4:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015a8:	6113      	str	r3, [r2, #16]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed90 	.word	0xe000ed90

080015bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0e3      	b.n	8001796 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d106      	bne.n	80015e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2223      	movs	r2, #35	@ 0x23
 80015dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fb11 	bl	8000c08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	4b6e      	ldr	r3, [pc, #440]	@ (80017a0 <HAL_ETH_Init+0x1e4>)
 80015e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015ec:	4a6c      	ldr	r2, [pc, #432]	@ (80017a0 <HAL_ETH_Init+0x1e4>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015f6:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <HAL_ETH_Init+0x1e4>)
 80015f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	7a1b      	ldrb	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fe69 	bl	80012e4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001612:	e003      	b.n	800161c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001614:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001618:	f7ff fe64 	bl	80012e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800161c:	4b61      	ldr	r3, [pc, #388]	@ (80017a4 <HAL_ETH_Init+0x1e8>)
 800161e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001636:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff fe18 	bl	800126c <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800163e:	e011      	b.n	8001664 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001640:	f7ff fe14 	bl	800126c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800164e:	d909      	bls.n	8001664 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	22e0      	movs	r2, #224	@ 0xe0
 800165c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e098      	b.n	8001796 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e4      	bne.n	8001640 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f89e 	bl	80017b8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800167c:	f001 ff34 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 8001680:	4603      	mov	r3, r0
 8001682:	4a49      	ldr	r2, [pc, #292]	@ (80017a8 <HAL_ETH_Init+0x1ec>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	0c9a      	lsrs	r2, r3, #18
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3a01      	subs	r2, #1
 8001690:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 fa81 	bl	8001b9c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80016a6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016b6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	22e0      	movs	r2, #224	@ 0xe0
 80016d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e05d      	b.n	8001796 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80016e6:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <HAL_ETH_Init+0x1f0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6952      	ldr	r2, [r2, #20]
 80016ee:	0051      	lsls	r1, r2, #1
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016fa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fae9 	bl	8001cd6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fb2f 	bl	8001d68 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	3305      	adds	r3, #5
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	021a      	lsls	r2, r3, #8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	3304      	adds	r3, #4
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	3303      	adds	r3, #3
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	061a      	lsls	r2, r3, #24
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	3302      	adds	r3, #2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	3301      	adds	r3, #1
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001748:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001756:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001758:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_ETH_Init+0x1f4>)
 800176a:	430b      	orrs	r3, r1
 800176c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <HAL_ETH_Init+0x1f8>)
 800177e:	430b      	orrs	r3, r1
 8001780:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2210      	movs	r2, #16
 8001790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	58024400 	.word	0x58024400
 80017a4:	58000400 	.word	0x58000400
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	ffff8001 	.word	0xffff8001
 80017b0:	0c020060 	.word	0x0c020060
 80017b4:	0c20c000 	.word	0x0c20c000

080017b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017d2:	f001 fe89 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 80017d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4a1a      	ldr	r2, [pc, #104]	@ (8001844 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d804      	bhi.n	80017ea <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e022      	b.n	8001830 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	4a16      	ldr	r2, [pc, #88]	@ (8001848 <HAL_ETH_SetMDIOClockRange+0x90>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d204      	bcs.n	80017fc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e019      	b.n	8001830 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4a13      	ldr	r2, [pc, #76]	@ (800184c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d915      	bls.n	8001830 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d804      	bhi.n	8001816 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e00c      	b.n	8001830 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d804      	bhi.n	8001828 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e003      	b.n	8001830 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800182e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	02160ebf 	.word	0x02160ebf
 8001848:	03938700 	.word	0x03938700
 800184c:	05f5e0ff 	.word	0x05f5e0ff
 8001850:	08f0d17f 	.word	0x08f0d17f
 8001854:	0ee6b27f 	.word	0x0ee6b27f

08001858 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800186a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	791b      	ldrb	r3, [r3, #4]
 8001870:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7b1b      	ldrb	r3, [r3, #12]
 8001878:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800187a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	7b5b      	ldrb	r3, [r3, #13]
 8001880:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	7b9b      	ldrb	r3, [r3, #14]
 8001888:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800188a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	7bdb      	ldrb	r3, [r3, #15]
 8001890:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001892:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	7c12      	ldrb	r2, [r2, #16]
 8001898:	2a00      	cmp	r2, #0
 800189a:	d102      	bne.n	80018a2 <ETH_SetMACConfig+0x4a>
 800189c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018a0:	e000      	b.n	80018a4 <ETH_SetMACConfig+0x4c>
 80018a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	7c52      	ldrb	r2, [r2, #17]
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d102      	bne.n	80018b4 <ETH_SetMACConfig+0x5c>
 80018ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018b2:	e000      	b.n	80018b6 <ETH_SetMACConfig+0x5e>
 80018b4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7c9b      	ldrb	r3, [r3, #18]
 80018bc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018be:	431a      	orrs	r2, r3
               macconf->Speed |
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018c4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	7f1b      	ldrb	r3, [r3, #28]
 80018d0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	7f5b      	ldrb	r3, [r3, #29]
 80018d8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018da:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	7f92      	ldrb	r2, [r2, #30]
 80018e0:	2a00      	cmp	r2, #0
 80018e2:	d102      	bne.n	80018ea <ETH_SetMACConfig+0x92>
 80018e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e8:	e000      	b.n	80018ec <ETH_SetMACConfig+0x94>
 80018ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	7fdb      	ldrb	r3, [r3, #31]
 80018f2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	d102      	bne.n	8001906 <ETH_SetMACConfig+0xae>
 8001900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001904:	e000      	b.n	8001908 <ETH_SetMACConfig+0xb0>
 8001906:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001908:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800190e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001916:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001918:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b56      	ldr	r3, [pc, #344]	@ (8001a84 <ETH_SetMACConfig+0x22c>)
 800192a:	4013      	ands	r3, r2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	68f9      	ldr	r1, [r7, #12]
 8001932:	430b      	orrs	r3, r1
 8001934:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001942:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001944:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800194c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800194e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001956:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001958:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001960:	2a00      	cmp	r2, #0
 8001962:	d102      	bne.n	800196a <ETH_SetMACConfig+0x112>
 8001964:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001968:	e000      	b.n	800196c <ETH_SetMACConfig+0x114>
 800196a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800196c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4b42      	ldr	r3, [pc, #264]	@ (8001a88 <ETH_SetMACConfig+0x230>)
 800197e:	4013      	ands	r3, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	430b      	orrs	r3, r1
 8001988:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001990:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a8c <ETH_SetMACConfig+0x234>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	68f9      	ldr	r1, [r7, #12]
 80019aa:	430b      	orrs	r3, r1
 80019ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019ba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019c2:	2a00      	cmp	r2, #0
 80019c4:	d101      	bne.n	80019ca <ETH_SetMACConfig+0x172>
 80019c6:	2280      	movs	r2, #128	@ 0x80
 80019c8:	e000      	b.n	80019cc <ETH_SetMACConfig+0x174>
 80019ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019cc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019de:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	430b      	orrs	r3, r1
 80019ec:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80019f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80019fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	f023 0103 	bic.w	r1, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a22:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d101      	bne.n	8001a46 <ETH_SetMACConfig+0x1ee>
 8001a42:	2240      	movs	r2, #64	@ 0x40
 8001a44:	e000      	b.n	8001a48 <ETH_SetMACConfig+0x1f0>
 8001a46:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a50:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a5a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a68:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	00048083 	.word	0x00048083
 8001a88:	c0f88000 	.word	0xc0f88000
 8001a8c:	fffffef0 	.word	0xfffffef0

08001a90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b38      	ldr	r3, [pc, #224]	@ (8001b88 <ETH_SetDMAConfig+0xf8>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	6811      	ldr	r1, [r2, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ab6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	791b      	ldrb	r3, [r3, #4]
 8001abc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ac2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	7b1b      	ldrb	r3, [r3, #12]
 8001ac8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b8c <ETH_SetDMAConfig+0xfc>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ae8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	7b5b      	ldrb	r3, [r3, #13]
 8001aee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b00:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <ETH_SetDMAConfig+0x100>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b14:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	7d1b      	ldrb	r3, [r3, #20]
 8001b20:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b22:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	7f5b      	ldrb	r3, [r3, #29]
 8001b28:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b36:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <ETH_SetDMAConfig+0x104>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	68f9      	ldr	r1, [r7, #12]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b4a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	7f1b      	ldrb	r3, [r3, #28]
 8001b52:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b64:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <ETH_SetDMAConfig+0x108>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	430b      	orrs	r3, r1
 8001b74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b78:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	ffff87fd 	.word	0xffff87fd
 8001b8c:	ffff2ffe 	.word	0xffff2ffe
 8001b90:	fffec000 	.word	0xfffec000
 8001b94:	ffc0efef 	.word	0xffc0efef
 8001b98:	7fc0ffff 	.word	0x7fc0ffff

08001b9c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0a4      	sub	sp, #144	@ 0x90
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001baa:	2300      	movs	r3, #0
 8001bac:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bdc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001bf4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001bf8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c16:	2300      	movs	r3, #0
 8001c18:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c34:	2320      	movs	r3, #32
 8001c36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c46:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c50:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c76:	2300      	movs	r3, #0
 8001c78:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c84:	4619      	mov	r1, r3
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fde6 	bl	8001858 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c90:	2301      	movs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ca6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001caa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cb0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cb4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001cbc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cc2:	f107 0308 	add.w	r3, r7, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff fee1 	bl	8001a90 <ETH_SetDMAConfig>
}
 8001cce:	bf00      	nop
 8001cd0:	3790      	adds	r7, #144	@ 0x90
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e01d      	b.n	8001d20 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68d9      	ldr	r1, [r3, #12]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	3206      	adds	r2, #6
 8001d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d9de      	bls.n	8001ce4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d34:	461a      	mov	r2, r3
 8001d36:	2303      	movs	r3, #3
 8001d38:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d48:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d58:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	e023      	b.n	8001dbe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6919      	ldr	r1, [r3, #16]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	440b      	add	r3, r1
 8001d86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	3212      	adds	r2, #18
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d9d8      	bls.n	8001d76 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dea:	461a      	mov	r2, r3
 8001dec:	2303      	movs	r3, #3
 8001dee:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e12:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e32:	4b89      	ldr	r3, [pc, #548]	@ (8002058 <HAL_GPIO_Init+0x234>)
 8001e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e36:	e194      	b.n	8002162 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8186 	beq.w	800215c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_GPIO_Init+0x44>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d130      	bne.n	8001eca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	091b      	lsrs	r3, r3, #4
 8001eb4:	f003 0201 	and.w	r2, r3, #1
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d017      	beq.n	8001f06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d123      	bne.n	8001f5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	2203      	movs	r2, #3
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0203 	and.w	r2, r3, #3
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80e0 	beq.w	800215c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800205c <HAL_GPIO_Init+0x238>)
 8001f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <HAL_GPIO_Init+0x238>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fac:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <HAL_GPIO_Init+0x238>)
 8001fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a29      	ldr	r2, [pc, #164]	@ (8002060 <HAL_GPIO_Init+0x23c>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a20      	ldr	r2, [pc, #128]	@ (8002064 <HAL_GPIO_Init+0x240>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d052      	beq.n	800208c <HAL_GPIO_Init+0x268>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8002068 <HAL_GPIO_Init+0x244>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d031      	beq.n	8002052 <HAL_GPIO_Init+0x22e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800206c <HAL_GPIO_Init+0x248>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <HAL_GPIO_Init+0x22a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8002070 <HAL_GPIO_Init+0x24c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d025      	beq.n	800204a <HAL_GPIO_Init+0x226>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1c      	ldr	r2, [pc, #112]	@ (8002074 <HAL_GPIO_Init+0x250>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <HAL_GPIO_Init+0x222>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1b      	ldr	r2, [pc, #108]	@ (8002078 <HAL_GPIO_Init+0x254>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x21e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1a      	ldr	r2, [pc, #104]	@ (800207c <HAL_GPIO_Init+0x258>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x21a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <HAL_GPIO_Init+0x25c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x216>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a18      	ldr	r2, [pc, #96]	@ (8002084 <HAL_GPIO_Init+0x260>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x212>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_GPIO_Init+0x264>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x20e>
 800202e:	2309      	movs	r3, #9
 8002030:	e02d      	b.n	800208e <HAL_GPIO_Init+0x26a>
 8002032:	230a      	movs	r3, #10
 8002034:	e02b      	b.n	800208e <HAL_GPIO_Init+0x26a>
 8002036:	2308      	movs	r3, #8
 8002038:	e029      	b.n	800208e <HAL_GPIO_Init+0x26a>
 800203a:	2307      	movs	r3, #7
 800203c:	e027      	b.n	800208e <HAL_GPIO_Init+0x26a>
 800203e:	2306      	movs	r3, #6
 8002040:	e025      	b.n	800208e <HAL_GPIO_Init+0x26a>
 8002042:	2305      	movs	r3, #5
 8002044:	e023      	b.n	800208e <HAL_GPIO_Init+0x26a>
 8002046:	2304      	movs	r3, #4
 8002048:	e021      	b.n	800208e <HAL_GPIO_Init+0x26a>
 800204a:	2303      	movs	r3, #3
 800204c:	e01f      	b.n	800208e <HAL_GPIO_Init+0x26a>
 800204e:	2302      	movs	r3, #2
 8002050:	e01d      	b.n	800208e <HAL_GPIO_Init+0x26a>
 8002052:	2301      	movs	r3, #1
 8002054:	e01b      	b.n	800208e <HAL_GPIO_Init+0x26a>
 8002056:	bf00      	nop
 8002058:	58000080 	.word	0x58000080
 800205c:	58024400 	.word	0x58024400
 8002060:	58000400 	.word	0x58000400
 8002064:	58020000 	.word	0x58020000
 8002068:	58020400 	.word	0x58020400
 800206c:	58020800 	.word	0x58020800
 8002070:	58020c00 	.word	0x58020c00
 8002074:	58021000 	.word	0x58021000
 8002078:	58021400 	.word	0x58021400
 800207c:	58021800 	.word	0x58021800
 8002080:	58021c00 	.word	0x58021c00
 8002084:	58022000 	.word	0x58022000
 8002088:	58022400 	.word	0x58022400
 800208c:	2300      	movs	r3, #0
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	f002 0203 	and.w	r2, r2, #3
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	4093      	lsls	r3, r2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800209e:	4938      	ldr	r1, [pc, #224]	@ (8002180 <HAL_GPIO_Init+0x35c>)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002100:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3301      	adds	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f ae63 	bne.w	8001e38 <HAL_GPIO_Init+0x14>
  }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	3724      	adds	r7, #36	@ 0x24
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	58000400 	.word	0x58000400

08002184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
 8002190:	4613      	mov	r3, r2
 8002192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002194:	787b      	ldrb	r3, [r7, #1]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021a0:	e003      	b.n	80021aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021a2:	887b      	ldrh	r3, [r7, #2]
 80021a4:	041a      	lsls	r2, r3, #16
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021c8:	887a      	ldrh	r2, [r7, #2]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4013      	ands	r3, r2
 80021ce:	041a      	lsls	r2, r3, #16
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	887b      	ldrh	r3, [r7, #2]
 80021d6:	400b      	ands	r3, r1
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021f4:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HAL_HSEM_FastTake+0x2c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3320      	adds	r3, #32
 80021fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fe:	4a07      	ldr	r2, [pc, #28]	@ (800221c <HAL_HSEM_FastTake+0x30>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	58026400 	.word	0x58026400
 800221c:	80000300 	.word	0x80000300

08002220 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800222a:	4906      	ldr	r1, [pc, #24]	@ (8002244 <HAL_HSEM_Release+0x24>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	58026400 	.word	0x58026400

08002248 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_HSEM_ActivateNotification+0x20>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4904      	ldr	r1, [pc, #16]	@ (8002268 <HAL_HSEM_ActivateNotification+0x20>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
#endif
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	58026500 	.word	0x58026500

0800226c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_HSEM_IRQHandler+0x30>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_HSEM_IRQHandler+0x30>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	43db      	mvns	r3, r3
 8002280:	4906      	ldr	r1, [pc, #24]	@ (800229c <HAL_HSEM_IRQHandler+0x30>)
 8002282:	4013      	ands	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <HAL_HSEM_IRQHandler+0x30>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f008 fd3b 	bl	800ad08 <HAL_HSEM_FreeCallback>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	58026500 	.word	0x58026500

080022a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af02      	add	r7, sp, #8
 80022a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0fe      	b.n	80024b0 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fd6c 	bl	8000da4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2203      	movs	r2, #3
 80022d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 f83b 	bl	8005354 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7c1a      	ldrb	r2, [r3, #16]
 80022e6:	f88d 2000 	strb.w	r2, [sp]
 80022ea:	3304      	adds	r3, #4
 80022ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ee:	f002 ffbf 	bl	8005270 <USB_CoreInit>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0d5      	b.n	80024b0 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f003 f833 	bl	8005376 <USB_SetCurrentMode>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0c6      	b.n	80024b0 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e04a      	b.n	80023be <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3315      	adds	r3, #21
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3314      	adds	r3, #20
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	b298      	uxth	r0, r3
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	332e      	adds	r3, #46	@ 0x2e
 8002364:	4602      	mov	r2, r0
 8002366:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3318      	adds	r3, #24
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800237c:	7bfa      	ldrb	r2, [r7, #15]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	331c      	adds	r3, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002390:	7bfa      	ldrb	r2, [r7, #15]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3320      	adds	r3, #32
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	3324      	adds	r3, #36	@ 0x24
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	3301      	adds	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	791b      	ldrb	r3, [r3, #4]
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3af      	bcc.n	8002328 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e044      	b.n	8002458 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023fa:	7bfa      	ldrb	r2, [r7, #15]
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002426:	7bfa      	ldrb	r2, [r7, #15]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	3301      	adds	r3, #1
 8002456:	73fb      	strb	r3, [r7, #15]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	791b      	ldrb	r3, [r3, #4]
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	429a      	cmp	r2, r3
 8002460:	d3b5      	bcc.n	80023ce <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7c1a      	ldrb	r2, [r3, #16]
 800246a:	f88d 2000 	strb.w	r2, [sp]
 800246e:	3304      	adds	r3, #4
 8002470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002472:	f002 ffcd 	bl	8005410 <USB_DevInit>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e013      	b.n	80024b0 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7b1b      	ldrb	r3, [r3, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f80a 	bl	80024b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 f988 	bl	80057be <USB_DevDisconnect>

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <HAL_PCDEx_ActivateLPM+0x44>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	10000003 	.word	0x10000003

08002500 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002508:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	2b06      	cmp	r3, #6
 8002512:	d00a      	beq.n	800252a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002514:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	d001      	beq.n	8002526 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e040      	b.n	80025a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e03e      	b.n	80025a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800252a:	4b21      	ldr	r3, [pc, #132]	@ (80025b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002532:	491f      	ldr	r1, [pc, #124]	@ (80025b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800253a:	f7fe fe97 	bl	800126c <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002540:	e009      	b.n	8002556 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002542:	f7fe fe93 	bl	800126c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002550:	d901      	bls.n	8002556 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e028      	b.n	80025a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002556:	4b16      	ldr	r3, [pc, #88]	@ (80025b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002562:	d1ee      	bne.n	8002542 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b1e      	cmp	r3, #30
 8002568:	d008      	beq.n	800257c <HAL_PWREx_ConfigSupply+0x7c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b2e      	cmp	r3, #46	@ 0x2e
 800256e:	d005      	beq.n	800257c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b1d      	cmp	r3, #29
 8002574:	d002      	beq.n	800257c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b2d      	cmp	r3, #45	@ 0x2d
 800257a:	d114      	bne.n	80025a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800257c:	f7fe fe76 	bl	800126c <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002582:	e009      	b.n	8002598 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002584:	f7fe fe72 	bl	800126c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002592:	d901      	bls.n	8002598 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e007      	b.n	80025a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a4:	d1ee      	bne.n	8002584 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	58024800 	.word	0x58024800

080025b4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	58024800 	.word	0x58024800

080025d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08c      	sub	sp, #48	@ 0x30
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f000 bc48 	b.w	8002e78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8088 	beq.w	8002706 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f6:	4b99      	ldr	r3, [pc, #612]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002600:	4b96      	ldr	r3, [pc, #600]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002608:	2b10      	cmp	r3, #16
 800260a:	d007      	beq.n	800261c <HAL_RCC_OscConfig+0x48>
 800260c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260e:	2b18      	cmp	r3, #24
 8002610:	d111      	bne.n	8002636 <HAL_RCC_OscConfig+0x62>
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4b8f      	ldr	r3, [pc, #572]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d06d      	beq.n	8002704 <HAL_RCC_OscConfig+0x130>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d169      	bne.n	8002704 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f000 bc21 	b.w	8002e78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x7a>
 8002640:	4b86      	ldr	r3, [pc, #536]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a85      	ldr	r2, [pc, #532]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e02e      	b.n	80026ac <HAL_RCC_OscConfig+0xd8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x9c>
 8002656:	4b81      	ldr	r3, [pc, #516]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a80      	ldr	r2, [pc, #512]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b7e      	ldr	r3, [pc, #504]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a7d      	ldr	r2, [pc, #500]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002668:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0xd8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0xc0>
 800267a:	4b78      	ldr	r3, [pc, #480]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a77      	ldr	r2, [pc, #476]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b75      	ldr	r3, [pc, #468]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a74      	ldr	r2, [pc, #464]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xd8>
 8002694:	4b71      	ldr	r3, [pc, #452]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a70      	ldr	r2, [pc, #448]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b6e      	ldr	r3, [pc, #440]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6d      	ldr	r2, [pc, #436]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fdda 	bl	800126c <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fdd6 	bl	800126c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e3d4      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ce:	4b63      	ldr	r3, [pc, #396]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xe8>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fdc6 	bl	800126c <HAL_GetTick>
 80026e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fdc2 	bl	800126c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e3c0      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026f6:	4b59      	ldr	r3, [pc, #356]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x110>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80ca 	beq.w	80028a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002714:	4b51      	ldr	r3, [pc, #324]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800271c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800271e:	4b4f      	ldr	r3, [pc, #316]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d007      	beq.n	800273a <HAL_RCC_OscConfig+0x166>
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	2b18      	cmp	r3, #24
 800272e:	d156      	bne.n	80027de <HAL_RCC_OscConfig+0x20a>
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d151      	bne.n	80027de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273a:	4b48      	ldr	r3, [pc, #288]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x17e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e392      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002752:	4b42      	ldr	r3, [pc, #264]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0219 	bic.w	r2, r3, #25
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	493f      	ldr	r1, [pc, #252]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fd82 	bl	800126c <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276c:	f7fe fd7e 	bl	800126c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e37c      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277e:	4b37      	ldr	r3, [pc, #220]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278a:	f7fe fd9f 	bl	80012cc <HAL_GetREVID>
 800278e:	4603      	mov	r3, r0
 8002790:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002794:	4293      	cmp	r3, r2
 8002796:	d817      	bhi.n	80027c8 <HAL_RCC_OscConfig+0x1f4>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b40      	cmp	r3, #64	@ 0x40
 800279e:	d108      	bne.n	80027b2 <HAL_RCC_OscConfig+0x1de>
 80027a0:	4b2e      	ldr	r3, [pc, #184]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027a8:	4a2c      	ldr	r2, [pc, #176]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b0:	e07a      	b.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b2a      	ldr	r3, [pc, #168]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	031b      	lsls	r3, r3, #12
 80027c0:	4926      	ldr	r1, [pc, #152]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c6:	e06f      	b.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	4921      	ldr	r1, [pc, #132]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027dc:	e064      	b.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d047      	beq.n	8002876 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 0219 	bic.w	r2, r3, #25
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	491a      	ldr	r1, [pc, #104]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fd38 	bl	800126c <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7fe fd34 	bl	800126c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e332      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002812:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	f7fe fd55 	bl	80012cc <HAL_GetREVID>
 8002822:	4603      	mov	r3, r0
 8002824:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002828:	4293      	cmp	r3, r2
 800282a:	d819      	bhi.n	8002860 <HAL_RCC_OscConfig+0x28c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b40      	cmp	r3, #64	@ 0x40
 8002832:	d108      	bne.n	8002846 <HAL_RCC_OscConfig+0x272>
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800283c:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 800283e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002842:	6053      	str	r3, [r2, #4]
 8002844:	e030      	b.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	031b      	lsls	r3, r3, #12
 8002854:	4901      	ldr	r1, [pc, #4]	@ (800285c <HAL_RCC_OscConfig+0x288>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
 800285a:	e025      	b.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
 800285c:	58024400 	.word	0x58024400
 8002860:	4b9a      	ldr	r3, [pc, #616]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	4997      	ldr	r1, [pc, #604]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
 8002874:	e018      	b.n	80028a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b95      	ldr	r3, [pc, #596]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a94      	ldr	r2, [pc, #592]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fcf3 	bl	800126c <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fcef 	bl	800126c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e2ed      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800289c:	4b8b      	ldr	r3, [pc, #556]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80a9 	beq.w	8002a08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b6:	4b85      	ldr	r3, [pc, #532]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c0:	4b82      	ldr	r3, [pc, #520]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d007      	beq.n	80028dc <HAL_RCC_OscConfig+0x308>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b18      	cmp	r3, #24
 80028d0:	d13a      	bne.n	8002948 <HAL_RCC_OscConfig+0x374>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d135      	bne.n	8002948 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028dc:	4b7b      	ldr	r3, [pc, #492]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x320>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2b80      	cmp	r3, #128	@ 0x80
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e2c1      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028f4:	f7fe fcea 	bl	80012cc <HAL_GetREVID>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028fe:	4293      	cmp	r3, r2
 8002900:	d817      	bhi.n	8002932 <HAL_RCC_OscConfig+0x35e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	2b20      	cmp	r3, #32
 8002908:	d108      	bne.n	800291c <HAL_RCC_OscConfig+0x348>
 800290a:	4b70      	ldr	r3, [pc, #448]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002912:	4a6e      	ldr	r2, [pc, #440]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002914:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002918:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800291a:	e075      	b.n	8002a08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800291c:	4b6b      	ldr	r3, [pc, #428]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	069b      	lsls	r3, r3, #26
 800292a:	4968      	ldr	r1, [pc, #416]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002930:	e06a      	b.n	8002a08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002932:	4b66      	ldr	r3, [pc, #408]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	061b      	lsls	r3, r3, #24
 8002940:	4962      	ldr	r1, [pc, #392]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002942:	4313      	orrs	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002946:	e05f      	b.n	8002a08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d042      	beq.n	80029d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002950:	4b5e      	ldr	r3, [pc, #376]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5d      	ldr	r2, [pc, #372]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800295a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fc86 	bl	800126c <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002964:	f7fe fc82 	bl	800126c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e280      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002976:	4b55      	ldr	r3, [pc, #340]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002982:	f7fe fca3 	bl	80012cc <HAL_GetREVID>
 8002986:	4603      	mov	r3, r0
 8002988:	f241 0203 	movw	r2, #4099	@ 0x1003
 800298c:	4293      	cmp	r3, r2
 800298e:	d817      	bhi.n	80029c0 <HAL_RCC_OscConfig+0x3ec>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	2b20      	cmp	r3, #32
 8002996:	d108      	bne.n	80029aa <HAL_RCC_OscConfig+0x3d6>
 8002998:	4b4c      	ldr	r3, [pc, #304]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029a0:	4a4a      	ldr	r2, [pc, #296]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029a6:	6053      	str	r3, [r2, #4]
 80029a8:	e02e      	b.n	8002a08 <HAL_RCC_OscConfig+0x434>
 80029aa:	4b48      	ldr	r3, [pc, #288]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	069b      	lsls	r3, r3, #26
 80029b8:	4944      	ldr	r1, [pc, #272]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
 80029be:	e023      	b.n	8002a08 <HAL_RCC_OscConfig+0x434>
 80029c0:	4b42      	ldr	r3, [pc, #264]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	493f      	ldr	r1, [pc, #252]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60cb      	str	r3, [r1, #12]
 80029d4:	e018      	b.n	8002a08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029d6:	4b3d      	ldr	r3, [pc, #244]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3c      	ldr	r2, [pc, #240]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fc43 	bl	800126c <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029ea:	f7fe fc3f 	bl	800126c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e23d      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029fc:	4b33      	ldr	r3, [pc, #204]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d036      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d019      	beq.n	8002a50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	4a2a      	ldr	r2, [pc, #168]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fc20 	bl	800126c <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fe fc1c 	bl	800126c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e21a      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a42:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x45c>
 8002a4e:	e018      	b.n	8002a82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fc06 	bl	800126c <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a64:	f7fe fc02 	bl	800126c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e200      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d039      	beq.n	8002b02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fbe3 	bl	800126c <HAL_GetTick>
 8002aa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aaa:	f7fe fbdf 	bl	800126c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1dd      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002abc:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <HAL_RCC_OscConfig+0x4f8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4d6>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCC_OscConfig+0x52e>
 8002aca:	bf00      	nop
 8002acc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ad0:	4b9b      	ldr	r3, [pc, #620]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a9a      	ldr	r2, [pc, #616]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002adc:	f7fe fbc6 	bl	800126c <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae4:	f7fe fbc2 	bl	800126c <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1c0      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002af6:	4b92      	ldr	r3, [pc, #584]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8081 	beq.w	8002c12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b10:	4b8c      	ldr	r3, [pc, #560]	@ (8002d44 <HAL_RCC_OscConfig+0x770>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a8b      	ldr	r2, [pc, #556]	@ (8002d44 <HAL_RCC_OscConfig+0x770>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fba6 	bl	800126c <HAL_GetTick>
 8002b20:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b24:	f7fe fba2 	bl	800126c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	@ 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1a0      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b36:	4b83      	ldr	r3, [pc, #524]	@ (8002d44 <HAL_RCC_OscConfig+0x770>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0x584>
 8002b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	4a7c      	ldr	r2, [pc, #496]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b56:	e02d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5e0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10c      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5a6>
 8002b60:	4b77      	ldr	r3, [pc, #476]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a76      	ldr	r2, [pc, #472]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b6c:	4b74      	ldr	r3, [pc, #464]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b70:	4a73      	ldr	r2, [pc, #460]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b72:	f023 0304 	bic.w	r3, r3, #4
 8002b76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b78:	e01c      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5e0>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c8>
 8002b82:	4b6f      	ldr	r3, [pc, #444]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b86:	4a6e      	ldr	r2, [pc, #440]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b92:	4a6b      	ldr	r2, [pc, #428]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5e0>
 8002b9c:	4b68      	ldr	r3, [pc, #416]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba0:	4a67      	ldr	r2, [pc, #412]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba8:	4b65      	ldr	r3, [pc, #404]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bac:	4a64      	ldr	r2, [pc, #400]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fb56 	bl	800126c <HAL_GetTick>
 8002bc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fb52 	bl	800126c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e14e      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bda:	4b59      	ldr	r3, [pc, #356]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0ee      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x5f0>
 8002be6:	e014      	b.n	8002c12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fb40 	bl	800126c <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fb3c 	bl	800126c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e138      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c06:	4b4e      	ldr	r3, [pc, #312]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ee      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 812d 	beq.w	8002e76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c1c:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c24:	2b18      	cmp	r3, #24
 8002c26:	f000 80bd 	beq.w	8002da4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	f040 809e 	bne.w	8002d70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c34:	4b42      	ldr	r3, [pc, #264]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a41      	ldr	r2, [pc, #260]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fb14 	bl	800126c <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fb10 	bl	800126c <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e10e      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5a:	4b39      	ldr	r3, [pc, #228]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c66:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c6a:	4b37      	ldr	r3, [pc, #220]	@ (8002d48 <HAL_RCC_OscConfig+0x774>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	4931      	ldr	r1, [pc, #196]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	3b01      	subs	r3, #1
 8002c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	025b      	lsls	r3, r3, #9
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cb0:	4923      	ldr	r1, [pc, #140]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cb6:	4b22      	ldr	r3, [pc, #136]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	4a21      	ldr	r2, [pc, #132]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	f023 0301 	bic.w	r3, r3, #1
 8002cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cc6:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <HAL_RCC_OscConfig+0x778>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cce:	00d2      	lsls	r2, r2, #3
 8002cd0:	491b      	ldr	r1, [pc, #108]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	f023 020c 	bic.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	4917      	ldr	r1, [pc, #92]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ce8:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	f023 0202 	bic.w	r2, r3, #2
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf4:	4912      	ldr	r1, [pc, #72]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	4a10      	ldr	r2, [pc, #64]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d06:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d12:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d1e:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	4a07      	ldr	r2, [pc, #28]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a04      	ldr	r2, [pc, #16]	@ (8002d40 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fa99 	bl	800126c <HAL_GetTick>
 8002d3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d3c:	e011      	b.n	8002d62 <HAL_RCC_OscConfig+0x78e>
 8002d3e:	bf00      	nop
 8002d40:	58024400 	.word	0x58024400
 8002d44:	58024800 	.word	0x58024800
 8002d48:	fffffc0c 	.word	0xfffffc0c
 8002d4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fa8c 	bl	800126c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e08a      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d62:	4b47      	ldr	r3, [pc, #284]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x77c>
 8002d6e:	e082      	b.n	8002e76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b43      	ldr	r3, [pc, #268]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a42      	ldr	r2, [pc, #264]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fa76 	bl	800126c <HAL_GetTick>
 8002d80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fa72 	bl	800126c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e070      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d96:	4b3a      	ldr	r3, [pc, #232]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x7b0>
 8002da2:	e068      	b.n	8002e76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002da4:	4b36      	ldr	r3, [pc, #216]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002daa:	4b35      	ldr	r3, [pc, #212]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d031      	beq.n	8002e1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f003 0203 	and.w	r2, r3, #3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d12a      	bne.n	8002e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d122      	bne.n	8002e1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d11a      	bne.n	8002e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	0a5b      	lsrs	r3, r3, #9
 8002dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d111      	bne.n	8002e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	0e1b      	lsrs	r3, r3, #24
 8002e0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e02b      	b.n	8002e78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e20:	4b17      	ldr	r3, [pc, #92]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e24:	08db      	lsrs	r3, r3, #3
 8002e26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d01f      	beq.n	8002e76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e36:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e42:	f7fe fa13 	bl	800126c <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e48:	bf00      	nop
 8002e4a:	f7fe fa0f 	bl	800126c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d0f9      	beq.n	8002e4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e56:	4b0a      	ldr	r3, [pc, #40]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_RCC_OscConfig+0x8b0>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e62:	00d2      	lsls	r2, r2, #3
 8002e64:	4906      	ldr	r1, [pc, #24]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e6a:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <HAL_RCC_OscConfig+0x8ac>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3730      	adds	r7, #48	@ 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	58024400 	.word	0x58024400
 8002e84:	ffff0007 	.word	0xffff0007

08002e88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e19c      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b8a      	ldr	r3, [pc, #552]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d910      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b87      	ldr	r3, [pc, #540]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	4985      	ldr	r1, [pc, #532]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b83      	ldr	r3, [pc, #524]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e184      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	4b7b      	ldr	r3, [pc, #492]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d908      	bls.n	8002efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ee8:	4b78      	ldr	r3, [pc, #480]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	4975      	ldr	r1, [pc, #468]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	4b70      	ldr	r3, [pc, #448]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d908      	bls.n	8002f28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f16:	4b6d      	ldr	r3, [pc, #436]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	496a      	ldr	r1, [pc, #424]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	4b64      	ldr	r3, [pc, #400]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d908      	bls.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f44:	4b61      	ldr	r3, [pc, #388]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	495e      	ldr	r1, [pc, #376]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	4b59      	ldr	r3, [pc, #356]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f72:	4b56      	ldr	r3, [pc, #344]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4953      	ldr	r1, [pc, #332]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d010      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	4b4d      	ldr	r3, [pc, #308]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d908      	bls.n	8002fb2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f023 020f 	bic.w	r2, r3, #15
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4947      	ldr	r1, [pc, #284]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d055      	beq.n	800306a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fbe:	4b43      	ldr	r3, [pc, #268]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	4940      	ldr	r1, [pc, #256]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d121      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0f6      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d107      	bne.n	8003000 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff0:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d115      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0ea      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003008:	4b30      	ldr	r3, [pc, #192]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0de      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003018:	4b2c      	ldr	r3, [pc, #176]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e0d6      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003028:	4b28      	ldr	r3, [pc, #160]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f023 0207 	bic.w	r2, r3, #7
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4925      	ldr	r1, [pc, #148]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303a:	f7fe f917 	bl	800126c <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003040:	e00a      	b.n	8003058 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003042:	f7fe f913 	bl	800126c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e0be      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003058:	4b1c      	ldr	r3, [pc, #112]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	429a      	cmp	r2, r3
 8003068:	d1eb      	bne.n	8003042 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d010      	beq.n	8003098 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	429a      	cmp	r2, r3
 8003084:	d208      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003086:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f023 020f 	bic.w	r2, r3, #15
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	490e      	ldr	r1, [pc, #56]	@ (80030cc <HAL_RCC_ClockConfig+0x244>)
 8003094:	4313      	orrs	r3, r2
 8003096:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d214      	bcs.n	80030d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	4906      	ldr	r1, [pc, #24]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <HAL_RCC_ClockConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e086      	b.n	80031d6 <HAL_RCC_ClockConfig+0x34e>
 80030c8:	52002000 	.word	0x52002000
 80030cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	4b3f      	ldr	r3, [pc, #252]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d208      	bcs.n	80030fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030ec:	4b3c      	ldr	r3, [pc, #240]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	4939      	ldr	r1, [pc, #228]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	4b34      	ldr	r3, [pc, #208]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003116:	429a      	cmp	r2, r3
 8003118:	d208      	bcs.n	800312c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800311a:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	492e      	ldr	r1, [pc, #184]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003128:	4313      	orrs	r3, r2
 800312a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699a      	ldr	r2, [r3, #24]
 800313c:	4b28      	ldr	r3, [pc, #160]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003144:	429a      	cmp	r2, r3
 8003146:	d208      	bcs.n	800315a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003148:	4b25      	ldr	r3, [pc, #148]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4922      	ldr	r1, [pc, #136]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003156:	4313      	orrs	r3, r2
 8003158:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003172:	429a      	cmp	r2, r3
 8003174:	d208      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003176:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	4917      	ldr	r1, [pc, #92]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003184:	4313      	orrs	r3, r2
 8003186:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003188:	f000 f834 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b14      	ldr	r3, [pc, #80]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	4912      	ldr	r1, [pc, #72]	@ (80031e4 <HAL_RCC_ClockConfig+0x35c>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031a6:	4b0e      	ldr	r3, [pc, #56]	@ (80031e0 <HAL_RCC_ClockConfig+0x358>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <HAL_RCC_ClockConfig+0x35c>)
 80031b0:	5cd3      	ldrb	r3, [r2, r3]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
 80031bc:	4a0a      	ldr	r2, [pc, #40]	@ (80031e8 <HAL_RCC_ClockConfig+0x360>)
 80031be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c0:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <HAL_RCC_ClockConfig+0x364>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <HAL_RCC_ClockConfig+0x368>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd fe76 	bl	8000ebc <HAL_InitTick>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	0800c3a4 	.word	0x0800c3a4
 80031e8:	24000004 	.word	0x24000004
 80031ec:	24000000 	.word	0x24000000
 80031f0:	24000060 	.word	0x24000060

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031fa:	4bb3      	ldr	r3, [pc, #716]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003202:	2b18      	cmp	r3, #24
 8003204:	f200 8155 	bhi.w	80034b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003208:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <HAL_RCC_GetSysClockFreq+0x1c>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003275 	.word	0x08003275
 8003214:	080034b3 	.word	0x080034b3
 8003218:	080034b3 	.word	0x080034b3
 800321c:	080034b3 	.word	0x080034b3
 8003220:	080034b3 	.word	0x080034b3
 8003224:	080034b3 	.word	0x080034b3
 8003228:	080034b3 	.word	0x080034b3
 800322c:	080034b3 	.word	0x080034b3
 8003230:	0800329b 	.word	0x0800329b
 8003234:	080034b3 	.word	0x080034b3
 8003238:	080034b3 	.word	0x080034b3
 800323c:	080034b3 	.word	0x080034b3
 8003240:	080034b3 	.word	0x080034b3
 8003244:	080034b3 	.word	0x080034b3
 8003248:	080034b3 	.word	0x080034b3
 800324c:	080034b3 	.word	0x080034b3
 8003250:	080032a1 	.word	0x080032a1
 8003254:	080034b3 	.word	0x080034b3
 8003258:	080034b3 	.word	0x080034b3
 800325c:	080034b3 	.word	0x080034b3
 8003260:	080034b3 	.word	0x080034b3
 8003264:	080034b3 	.word	0x080034b3
 8003268:	080034b3 	.word	0x080034b3
 800326c:	080034b3 	.word	0x080034b3
 8003270:	080032a7 	.word	0x080032a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003274:	4b94      	ldr	r3, [pc, #592]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003280:	4b91      	ldr	r3, [pc, #580]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	4a90      	ldr	r2, [pc, #576]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003292:	e111      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003294:	4b8d      	ldr	r3, [pc, #564]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003296:	61bb      	str	r3, [r7, #24]
      break;
 8003298:	e10e      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800329a:	4b8d      	ldr	r3, [pc, #564]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800329c:	61bb      	str	r3, [r7, #24]
      break;
 800329e:	e10b      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032a0:	4b8c      	ldr	r3, [pc, #560]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032a2:	61bb      	str	r3, [r7, #24]
      break;
 80032a4:	e108      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032a6:	4b88      	ldr	r3, [pc, #544]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032b0:	4b85      	ldr	r3, [pc, #532]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032bc:	4b82      	ldr	r3, [pc, #520]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80032c6:	4b80      	ldr	r3, [pc, #512]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	08db      	lsrs	r3, r3, #3
 80032cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80e1 	beq.w	80034ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	f000 8083 	beq.w	80033f8 <HAL_RCC_GetSysClockFreq+0x204>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f200 80a1 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x248>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x114>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d056      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003306:	e099      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003308:	4b6f      	ldr	r3, [pc, #444]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02d      	beq.n	8003370 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003314:	4b6c      	ldr	r3, [pc, #432]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	4a6b      	ldr	r2, [pc, #428]	@ (80034cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333e:	4b62      	ldr	r3, [pc, #392]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003352:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800336e:	e087      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80034dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b51      	ldr	r3, [pc, #324]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a02 	vldr	s12, [r7, #8]
 8003396:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033b2:	e065      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80034e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033f6:	e043      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80034e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b2f      	ldr	r3, [pc, #188]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800343a:	e021      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80034e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b1e      	ldr	r3, [pc, #120]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80034d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	0a5b      	lsrs	r3, r3, #9
 8003486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800348a:	3301      	adds	r3, #1
 800348c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003498:	edd7 6a07 	vldr	s13, [r7, #28]
 800349c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a4:	ee17 3a90 	vmov	r3, s15
 80034a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034aa:	e005      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034b2:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034b4:	61bb      	str	r3, [r7, #24]
      break;
 80034b6:	bf00      	nop
  }

  return sysclockfreq;
 80034b8:	69bb      	ldr	r3, [r7, #24]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	@ 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	58024400 	.word	0x58024400
 80034cc:	03d09000 	.word	0x03d09000
 80034d0:	003d0900 	.word	0x003d0900
 80034d4:	007a1200 	.word	0x007a1200
 80034d8:	46000000 	.word	0x46000000
 80034dc:	4c742400 	.word	0x4c742400
 80034e0:	4a742400 	.word	0x4a742400
 80034e4:	4af42400 	.word	0x4af42400

080034e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ee:	f7ff fe81 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80034f2:	4602      	mov	r2, r0
 80034f4:	4b10      	ldr	r3, [pc, #64]	@ (8003538 <HAL_RCC_GetHCLKFreq+0x50>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	490f      	ldr	r1, [pc, #60]	@ (800353c <HAL_RCC_GetHCLKFreq+0x54>)
 8003500:	5ccb      	ldrb	r3, [r1, r3]
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800350c:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <HAL_RCC_GetHCLKFreq+0x50>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	4a09      	ldr	r2, [pc, #36]	@ (800353c <HAL_RCC_GetHCLKFreq+0x54>)
 8003516:	5cd3      	ldrb	r3, [r2, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a07      	ldr	r2, [pc, #28]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x58>)
 8003524:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003526:	4a07      	ldr	r2, [pc, #28]	@ (8003544 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800352c:	4b04      	ldr	r3, [pc, #16]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x58>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	58024400 	.word	0x58024400
 800353c:	0800c3a4 	.word	0x0800c3a4
 8003540:	24000004 	.word	0x24000004
 8003544:	24000000 	.word	0x24000000

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800354c:	f7ff ffcc 	bl	80034e8 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4904      	ldr	r1, [pc, #16]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x28>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	58024400 	.word	0x58024400
 8003570:	0800c3a4 	.word	0x0800c3a4

08003574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	223f      	movs	r2, #63	@ 0x3f
 8003582:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003584:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <HAL_RCC_GetClockConfig+0x7c>)
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f003 0207 	and.w	r2, r3, #7
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003590:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <HAL_RCC_GetClockConfig+0x7c>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_RCC_GetClockConfig+0x7c>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <HAL_RCC_GetClockConfig+0x7c>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80035b4:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <HAL_RCC_GetClockConfig+0x7c>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_RCC_GetClockConfig+0x7c>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_RCC_GetClockConfig+0x7c>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035d8:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <HAL_RCC_GetClockConfig+0x80>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	58024400 	.word	0x58024400
 80035f4:	52002000 	.word	0x52002000

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035fc:	b0ca      	sub	sp, #296	@ 0x128
 80035fe:	af00      	add	r7, sp, #0
 8003600:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800360a:	2300      	movs	r3, #0
 800360c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800361c:	2500      	movs	r5, #0
 800361e:	ea54 0305 	orrs.w	r3, r4, r5
 8003622:	d049      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800362a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800362e:	d02f      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003630:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003634:	d828      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800363a:	d01a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800363c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003640:	d822      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800364a:	d007      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800364c:	e01c      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364e:	4bb8      	ldr	r3, [pc, #736]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	4ab7      	ldr	r2, [pc, #732]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003658:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800365a:	e01a      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003660:	3308      	adds	r3, #8
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f9d1 	bl	8004a0c <RCCEx_PLL2_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003670:	e00f      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003676:	3328      	adds	r3, #40	@ 0x28
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f001 fa78 	bl	8004b70 <RCCEx_PLL3_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003686:	e004      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003690:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800369a:	4ba5      	ldr	r3, [pc, #660]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036a8:	4aa1      	ldr	r2, [pc, #644]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036aa:	430b      	orrs	r3, r1
 80036ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ae:	e003      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036c4:	f04f 0900 	mov.w	r9, #0
 80036c8:	ea58 0309 	orrs.w	r3, r8, r9
 80036cc:	d047      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d82a      	bhi.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036d8:	a201      	add	r2, pc, #4	@ (adr r2, 80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f5 	.word	0x080036f5
 80036e4:	08003703 	.word	0x08003703
 80036e8:	08003719 	.word	0x08003719
 80036ec:	08003737 	.word	0x08003737
 80036f0:	08003737 	.word	0x08003737
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	4a8d      	ldr	r2, [pc, #564]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003700:	e01a      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	3308      	adds	r3, #8
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f97e 	bl	8004a0c <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003716:	e00f      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371c:	3328      	adds	r3, #40	@ 0x28
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f001 fa25 	bl	8004b70 <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800372c:	e004      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003740:	4b7b      	ldr	r3, [pc, #492]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003744:	f023 0107 	bic.w	r1, r3, #7
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	4a78      	ldr	r2, [pc, #480]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003750:	430b      	orrs	r3, r1
 8003752:	6513      	str	r3, [r2, #80]	@ 0x50
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800376a:	f04f 0b00 	mov.w	fp, #0
 800376e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003772:	d04c      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	d030      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003784:	d829      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003786:	2bc0      	cmp	r3, #192	@ 0xc0
 8003788:	d02d      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800378a:	2bc0      	cmp	r3, #192	@ 0xc0
 800378c:	d825      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d018      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d821      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d007      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800379e:	e01c      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a0:	4b63      	ldr	r3, [pc, #396]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	4a62      	ldr	r2, [pc, #392]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037ac:	e01c      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	3308      	adds	r3, #8
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 f928 	bl	8004a0c <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037c2:	e011      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	3328      	adds	r3, #40	@ 0x28
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 f9cf 	bl	8004b70 <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003800:	430b      	orrs	r3, r1
 8003802:	6513      	str	r3, [r2, #80]	@ 0x50
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800381a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003824:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d053      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003836:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800383a:	d035      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800383c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003840:	d82e      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003842:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003846:	d031      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003848:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800384c:	d828      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003852:	d01a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003854:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003858:	d822      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800385e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003862:	d007      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003864:	e01c      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003866:	4b32      	ldr	r3, [pc, #200]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386a:	4a31      	ldr	r2, [pc, #196]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003872:	e01c      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003878:	3308      	adds	r3, #8
 800387a:	2100      	movs	r1, #0
 800387c:	4618      	mov	r0, r3
 800387e:	f001 f8c5 	bl	8004a0c <RCCEx_PLL2_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003888:	e011      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	3328      	adds	r3, #40	@ 0x28
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f96c 	bl	8004b70 <RCCEx_PLL3_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800389e:	e006      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a6:	e002      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80038cc:	e003      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80038e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80038f0:	460b      	mov	r3, r1
 80038f2:	4313      	orrs	r3, r2
 80038f4:	d056      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003902:	d038      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003908:	d831      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800390a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800390e:	d034      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003910:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003914:	d82b      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003916:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800391a:	d01d      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800391c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003920:	d825      	bhi.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d006      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800392c:	e01f      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003934:	4ba2      	ldr	r3, [pc, #648]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	4aa1      	ldr	r2, [pc, #644]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800393e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003940:	e01c      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	3308      	adds	r3, #8
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f85e 	bl	8004a0c <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003956:	e011      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395c:	3328      	adds	r3, #40	@ 0x28
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f905 	bl	8004b70 <RCCEx_PLL3_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800396c:	e006      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003974:	e002      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800397a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003984:	4b8e      	ldr	r3, [pc, #568]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003988:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003994:	4a8a      	ldr	r2, [pc, #552]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003996:	430b      	orrs	r3, r1
 8003998:	6593      	str	r3, [r2, #88]	@ 0x58
 800399a:	e003      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d03a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ca:	2b30      	cmp	r3, #48	@ 0x30
 80039cc:	d01f      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039ce:	2b30      	cmp	r3, #48	@ 0x30
 80039d0:	d819      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d00c      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d815      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d019      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d111      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e2:	4b77      	ldr	r3, [pc, #476]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	4a76      	ldr	r2, [pc, #472]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039ee:	e011      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f4:	3308      	adds	r3, #8
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 f807 	bl	8004a0c <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a0c:	e002      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a1c:	4b68      	ldr	r3, [pc, #416]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	4a65      	ldr	r2, [pc, #404]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4313      	orrs	r3, r2
 8003a58:	d051      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a64:	d035      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a6a:	d82e      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a70:	d031      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a76:	d828      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7c:	d01a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a82:	d822      	bhi.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a8c:	d007      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a8e:	e01c      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a90:	4b4b      	ldr	r3, [pc, #300]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a9c:	e01c      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f000 ffb0 	bl	8004a0c <RCCEx_PLL2_Config>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ab2:	e011      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	3328      	adds	r3, #40	@ 0x28
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 f857 	bl	8004b70 <RCCEx_PLL3_Config>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ae0:	4b37      	ldr	r3, [pc, #220]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	4a34      	ldr	r2, [pc, #208]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d056      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b28:	d033      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b2e:	d82c      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b34:	d02f      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b3a:	d826      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b40:	d02b      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b46:	d820      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b4c:	d012      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b52:	d81a      	bhi.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d022      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5c:	d115      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	3308      	adds	r3, #8
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ff50 	bl	8004a0c <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b72:	e015      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	3328      	adds	r3, #40	@ 0x28
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fff7 	bl	8004b70 <RCCEx_PLL3_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b92:	bf00      	nop
 8003b94:	e004      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb6:	4a02      	ldr	r2, [pc, #8]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bbc:	e006      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bbe:	bf00      	nop
 8003bc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003be2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d055      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf8:	d033      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bfe:	d82c      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c04:	d02f      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d826      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c10:	d02b      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c16:	d820      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c1c:	d012      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c22:	d81a      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d022      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c2c:	d115      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	3308      	adds	r3, #8
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fee8 	bl	8004a0c <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c42:	e015      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	3328      	adds	r3, #40	@ 0x28
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 ff8f 	bl	8004b70 <RCCEx_PLL3_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c58:	e00a      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c60:	e006      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c62:	bf00      	nop
 8003c64:	e004      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c66:	bf00      	nop
 8003c68:	e002      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e000      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c78:	4ba3      	ldr	r3, [pc, #652]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c88:	4a9f      	ldr	r2, [pc, #636]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003cae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d037      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cc8:	d816      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cd2:	d111      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd8:	4a8b      	ldr	r2, [pc, #556]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ce0:	e00f      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fe8e 	bl	8004a0c <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cf6:	e004      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10a      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d18:	4a7b      	ldr	r2, [pc, #492]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d1e:	e003      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d039      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d81c      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d52:	a201      	add	r2, pc, #4	@ (adr r2, 8003d58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d69 	.word	0x08003d69
 8003d60:	08003d77 	.word	0x08003d77
 8003d64:	08003d95 	.word	0x08003d95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d68:	4b67      	ldr	r3, [pc, #412]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	4a66      	ldr	r2, [pc, #408]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d74:	e00f      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fe44 	bl	8004a0c <RCCEx_PLL2_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d8a:	e004      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10a      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	f023 0103 	bic.w	r1, r3, #3
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	4a56      	ldr	r2, [pc, #344]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dae:	430b      	orrs	r3, r1
 8003db0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dd2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f000 809f 	beq.w	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dde:	4b4b      	ldr	r3, [pc, #300]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a4a      	ldr	r2, [pc, #296]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dea:	f7fd fa3f 	bl	800126c <HAL_GetTick>
 8003dee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df2:	e00b      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df4:	f7fd fa3a 	bl	800126c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b64      	cmp	r3, #100	@ 0x64
 8003e02:	d903      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e0a:	e005      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0ed      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d179      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e20:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e2c:	4053      	eors	r3, r2
 8003e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d015      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e36:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e42:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e46:	4a30      	ldr	r2, [pc, #192]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	4a2d      	ldr	r2, [pc, #180]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6e:	d118      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fd f9fc 	bl	800126c <HAL_GetTick>
 8003e74:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e78:	e00d      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd f9f7 	bl	800126c <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e84:	1ad2      	subs	r2, r2, r3
 8003e86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d903      	bls.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003e94:	e005      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e96:	4b1c      	ldr	r3, [pc, #112]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0eb      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d129      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eba:	d10e      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ebc:	4b12      	ldr	r3, [pc, #72]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ecc:	091a      	lsrs	r2, r3, #4
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6113      	str	r3, [r2, #16]
 8003ed8:	e005      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003eda:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	4a0a      	ldr	r2, [pc, #40]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ee4:	6113      	str	r3, [r2, #16]
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef6:	4a04      	ldr	r2, [pc, #16]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003efc:	e00e      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f06:	e009      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	58024800 	.word	0x58024800
 8003f10:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f002 0301 	and.w	r3, r2, #1
 8003f28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f000 8089 	beq.w	8004050 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f44:	2b28      	cmp	r3, #40	@ 0x28
 8003f46:	d86b      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f48:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08004029 	.word	0x08004029
 8003f54:	08004021 	.word	0x08004021
 8003f58:	08004021 	.word	0x08004021
 8003f5c:	08004021 	.word	0x08004021
 8003f60:	08004021 	.word	0x08004021
 8003f64:	08004021 	.word	0x08004021
 8003f68:	08004021 	.word	0x08004021
 8003f6c:	08004021 	.word	0x08004021
 8003f70:	08003ff5 	.word	0x08003ff5
 8003f74:	08004021 	.word	0x08004021
 8003f78:	08004021 	.word	0x08004021
 8003f7c:	08004021 	.word	0x08004021
 8003f80:	08004021 	.word	0x08004021
 8003f84:	08004021 	.word	0x08004021
 8003f88:	08004021 	.word	0x08004021
 8003f8c:	08004021 	.word	0x08004021
 8003f90:	0800400b 	.word	0x0800400b
 8003f94:	08004021 	.word	0x08004021
 8003f98:	08004021 	.word	0x08004021
 8003f9c:	08004021 	.word	0x08004021
 8003fa0:	08004021 	.word	0x08004021
 8003fa4:	08004021 	.word	0x08004021
 8003fa8:	08004021 	.word	0x08004021
 8003fac:	08004021 	.word	0x08004021
 8003fb0:	08004029 	.word	0x08004029
 8003fb4:	08004021 	.word	0x08004021
 8003fb8:	08004021 	.word	0x08004021
 8003fbc:	08004021 	.word	0x08004021
 8003fc0:	08004021 	.word	0x08004021
 8003fc4:	08004021 	.word	0x08004021
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08004029 	.word	0x08004029
 8003fd4:	08004021 	.word	0x08004021
 8003fd8:	08004021 	.word	0x08004021
 8003fdc:	08004021 	.word	0x08004021
 8003fe0:	08004021 	.word	0x08004021
 8003fe4:	08004021 	.word	0x08004021
 8003fe8:	08004021 	.word	0x08004021
 8003fec:	08004021 	.word	0x08004021
 8003ff0:	08004029 	.word	0x08004029
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fd05 	bl	8004a0c <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004008:	e00f      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	3328      	adds	r3, #40	@ 0x28
 8004010:	2101      	movs	r1, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fdac 	bl	8004b70 <RCCEx_PLL3_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800401e:	e004      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004032:	4bbf      	ldr	r3, [pc, #764]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004040:	4abb      	ldr	r2, [pc, #748]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004042:	430b      	orrs	r3, r1
 8004044:	6553      	str	r3, [r2, #84]	@ 0x54
 8004046:	e003      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f002 0302 	and.w	r3, r2, #2
 800405c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004066:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800406a:	460b      	mov	r3, r1
 800406c:	4313      	orrs	r3, r2
 800406e:	d041      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004076:	2b05      	cmp	r3, #5
 8004078:	d824      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800407a:	a201      	add	r2, pc, #4	@ (adr r2, 8004080 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040cd 	.word	0x080040cd
 8004084:	08004099 	.word	0x08004099
 8004088:	080040af 	.word	0x080040af
 800408c:	080040cd 	.word	0x080040cd
 8004090:	080040cd 	.word	0x080040cd
 8004094:	080040cd 	.word	0x080040cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	3308      	adds	r3, #8
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fcb3 	bl	8004a0c <RCCEx_PLL2_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040ac:	e00f      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	3328      	adds	r3, #40	@ 0x28
 80040b4:	2101      	movs	r1, #1
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fd5a 	bl	8004b70 <RCCEx_PLL3_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040c2:	e004      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040d6:	4b96      	ldr	r3, [pc, #600]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040da:	f023 0107 	bic.w	r1, r3, #7
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e4:	4a92      	ldr	r2, [pc, #584]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f002 0304 	and.w	r3, r2, #4
 8004100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800410a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800410e:	460b      	mov	r3, r1
 8004110:	4313      	orrs	r3, r2
 8004112:	d044      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411c:	2b05      	cmp	r3, #5
 800411e:	d825      	bhi.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004120:	a201      	add	r2, pc, #4	@ (adr r2, 8004128 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	08004175 	.word	0x08004175
 800412c:	08004141 	.word	0x08004141
 8004130:	08004157 	.word	0x08004157
 8004134:	08004175 	.word	0x08004175
 8004138:	08004175 	.word	0x08004175
 800413c:	08004175 	.word	0x08004175
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	3308      	adds	r3, #8
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 fc5f 	bl	8004a0c <RCCEx_PLL2_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004154:	e00f      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	3328      	adds	r3, #40	@ 0x28
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fd06 	bl	8004b70 <RCCEx_PLL3_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800416a:	e004      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004172:	e000      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800417e:	4b6c      	ldr	r3, [pc, #432]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f023 0107 	bic.w	r1, r3, #7
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418e:	4a68      	ldr	r2, [pc, #416]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004190:	430b      	orrs	r3, r1
 8004192:	6593      	str	r3, [r2, #88]	@ 0x58
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800419a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f002 0320 	and.w	r3, r2, #32
 80041aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d055      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ca:	d033      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041d0:	d82c      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d6:	d02f      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d826      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041e2:	d02b      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80041e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041e8:	d820      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ee:	d012      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041f4:	d81a      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d022      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041fe:	d115      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	3308      	adds	r3, #8
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fbff 	bl	8004a0c <RCCEx_PLL2_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004214:	e015      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	3328      	adds	r3, #40	@ 0x28
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fca6 	bl	8004b70 <RCCEx_PLL3_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800422a:	e00a      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004232:	e006      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004234:	bf00      	nop
 8004236:	e004      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004238:	bf00      	nop
 800423a:	e002      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800423c:	bf00      	nop
 800423e:	e000      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10b      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800424a:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800424c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425a:	4a35      	ldr	r2, [pc, #212]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800425c:	430b      	orrs	r3, r1
 800425e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800427a:	2300      	movs	r3, #0
 800427c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004280:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004284:	460b      	mov	r3, r1
 8004286:	4313      	orrs	r3, r2
 8004288:	d058      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004292:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004296:	d033      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004298:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800429c:	d82c      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a2:	d02f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a8:	d826      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042ae:	d02b      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042b4:	d820      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ba:	d012      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c0:	d81a      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d022      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ca:	d115      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d0:	3308      	adds	r3, #8
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fb99 	bl	8004a0c <RCCEx_PLL2_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042e0:	e015      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	3328      	adds	r3, #40	@ 0x28
 80042e8:	2102      	movs	r1, #2
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fc40 	bl	8004b70 <RCCEx_PLL3_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042f6:	e00a      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042fe:	e006      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004300:	bf00      	nop
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004304:	bf00      	nop
 8004306:	e002      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10e      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004326:	4a02      	ldr	r2, [pc, #8]	@ (8004330 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6593      	str	r3, [r2, #88]	@ 0x58
 800432c:	e006      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004352:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d055      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800435c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004360:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004364:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004368:	d033      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800436a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800436e:	d82c      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004374:	d02f      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437a:	d826      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800437c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004380:	d02b      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004382:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004386:	d820      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800438c:	d012      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800438e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004392:	d81a      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d022      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439c:	d115      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	3308      	adds	r3, #8
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fb30 	bl	8004a0c <RCCEx_PLL2_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043b2:	e015      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	3328      	adds	r3, #40	@ 0x28
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fbd7 	bl	8004b70 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043c8:	e00a      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d0:	e006      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043d2:	bf00      	nop
 80043d4:	e004      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043d6:	bf00      	nop
 80043d8:	e002      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043da:	bf00      	nop
 80043dc:	e000      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80043de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80043f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043f8:	4a9d      	ldr	r2, [pc, #628]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fa:	430b      	orrs	r3, r1
 80043fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043fe:	e003      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004404:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004410:	f002 0308 	and.w	r3, r2, #8
 8004414:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004418:	2300      	movs	r3, #0
 800441a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800441e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d01e      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004434:	d10c      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	3328      	adds	r3, #40	@ 0x28
 800443c:	2102      	movs	r1, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fb96 	bl	8004b70 <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004450:	4b87      	ldr	r3, [pc, #540]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004454:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	4a83      	ldr	r2, [pc, #524]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004462:	430b      	orrs	r3, r1
 8004464:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	f002 0310 	and.w	r3, r2, #16
 8004472:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800447c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004480:	460b      	mov	r3, r1
 8004482:	4313      	orrs	r3, r2
 8004484:	d01e      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800448e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004492:	d10c      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	3328      	adds	r3, #40	@ 0x28
 800449a:	2102      	movs	r1, #2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb67 	bl	8004b70 <RCCEx_PLL3_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ae:	4b70      	ldr	r3, [pc, #448]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044be:	4a6c      	ldr	r2, [pc, #432]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80044d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80044de:	460b      	mov	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	d03e      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f0:	d022      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80044f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044f6:	d81b      	bhi.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80044fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004500:	d00b      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004502:	e015      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004508:	3308      	adds	r3, #8
 800450a:	2100      	movs	r1, #0
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fa7d 	bl	8004a0c <RCCEx_PLL2_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004518:	e00f      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	3328      	adds	r3, #40	@ 0x28
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fb24 	bl	8004b70 <RCCEx_PLL3_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800452e:	e004      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004536:	e000      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800453a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10b      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004542:	4b4b      	ldr	r3, [pc, #300]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004546:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004552:	4a47      	ldr	r2, [pc, #284]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004554:	430b      	orrs	r3, r1
 8004556:	6593      	str	r3, [r2, #88]	@ 0x58
 8004558:	e003      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800456e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004570:	2300      	movs	r3, #0
 8004572:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004574:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004578:	460b      	mov	r3, r1
 800457a:	4313      	orrs	r3, r2
 800457c:	d03b      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004586:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800458a:	d01f      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800458c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004590:	d818      	bhi.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800459c:	d007      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800459e:	e011      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b33      	ldr	r3, [pc, #204]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	4a32      	ldr	r2, [pc, #200]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045ac:	e00f      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	3328      	adds	r3, #40	@ 0x28
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fada 	bl	8004b70 <RCCEx_PLL3_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045c2:	e004      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045d6:	4b26      	ldr	r3, [pc, #152]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	4a22      	ldr	r2, [pc, #136]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004602:	673b      	str	r3, [r7, #112]	@ 0x70
 8004604:	2300      	movs	r3, #0
 8004606:	677b      	str	r3, [r7, #116]	@ 0x74
 8004608:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800460c:	460b      	mov	r3, r1
 800460e:	4313      	orrs	r3, r2
 8004610:	d034      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004620:	d007      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004622:	e011      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004624:	4b12      	ldr	r3, [pc, #72]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800462a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800462e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004630:	e00e      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	3308      	adds	r3, #8
 8004638:	2102      	movs	r1, #2
 800463a:	4618      	mov	r0, r3
 800463c:	f000 f9e6 	bl	8004a0c <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800464e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004650:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10d      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004666:	4a02      	ldr	r2, [pc, #8]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004668:	430b      	orrs	r3, r1
 800466a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800466c:	e006      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800466e:	bf00      	nop
 8004670:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004678:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004688:	66bb      	str	r3, [r7, #104]	@ 0x68
 800468a:	2300      	movs	r3, #0
 800468c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800468e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d00c      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469c:	3328      	adds	r3, #40	@ 0x28
 800469e:	2102      	movs	r1, #2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fa65 	bl	8004b70 <RCCEx_PLL3_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046be:	663b      	str	r3, [r7, #96]	@ 0x60
 80046c0:	2300      	movs	r3, #0
 80046c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80046c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046c8:	460b      	mov	r3, r1
 80046ca:	4313      	orrs	r3, r2
 80046cc:	d038      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046da:	d018      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80046dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046e0:	d811      	bhi.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046e6:	d014      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ec:	d80b      	bhi.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d011      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f6:	d106      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f8:	4bc3      	ldr	r3, [pc, #780]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	4ac2      	ldr	r2, [pc, #776]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004704:	e008      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800470c:	e004      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800470e:	bf00      	nop
 8004710:	e002      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004720:	4bb9      	ldr	r3, [pc, #740]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004724:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004730:	4ab5      	ldr	r2, [pc, #724]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6553      	str	r3, [r2, #84]	@ 0x54
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800474c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800474e:	2300      	movs	r3, #0
 8004750:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004752:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004756:	460b      	mov	r3, r1
 8004758:	4313      	orrs	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800475c:	4baa      	ldr	r3, [pc, #680]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004760:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	4aa7      	ldr	r2, [pc, #668]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476c:	430b      	orrs	r3, r1
 800476e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800477c:	653b      	str	r3, [r7, #80]	@ 0x50
 800477e:	2300      	movs	r3, #0
 8004780:	657b      	str	r3, [r7, #84]	@ 0x54
 8004782:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800478c:	4b9e      	ldr	r3, [pc, #632]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800479c:	4a9a      	ldr	r2, [pc, #616]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800479e:	430b      	orrs	r3, r1
 80047a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b0:	2300      	movs	r3, #0
 80047b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047b8:	460b      	mov	r3, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047be:	4b92      	ldr	r3, [pc, #584]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80047de:	643b      	str	r3, [r7, #64]	@ 0x40
 80047e0:	2300      	movs	r3, #0
 80047e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80047e8:	460b      	mov	r3, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d00e      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ee:	4b86      	ldr	r3, [pc, #536]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	4a85      	ldr	r2, [pc, #532]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80047f8:	6113      	str	r3, [r2, #16]
 80047fa:	4b83      	ldr	r3, [pc, #524]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047fc:	6919      	ldr	r1, [r3, #16]
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004802:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004806:	4a80      	ldr	r2, [pc, #512]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004808:	430b      	orrs	r3, r1
 800480a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800480c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800481a:	2300      	movs	r3, #0
 800481c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800481e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004822:	460b      	mov	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004828:	4b77      	ldr	r3, [pc, #476]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004836:	4a74      	ldr	r2, [pc, #464]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004838:	430b      	orrs	r3, r1
 800483a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004848:	633b      	str	r3, [r7, #48]	@ 0x30
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	@ 0x34
 800484e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004858:	4b6b      	ldr	r3, [pc, #428]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004868:	4a67      	ldr	r2, [pc, #412]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486a:	430b      	orrs	r3, r1
 800486c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	2100      	movs	r1, #0
 8004878:	62b9      	str	r1, [r7, #40]	@ 0x28
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004880:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d011      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	3308      	adds	r3, #8
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f8ba 	bl	8004a0c <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	2100      	movs	r1, #0
 80048b8:	6239      	str	r1, [r7, #32]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d011      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	3308      	adds	r3, #8
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f89a 	bl	8004a0c <RCCEx_PLL2_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	2100      	movs	r1, #0
 80048f8:	61b9      	str	r1, [r7, #24]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d011      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	3308      	adds	r3, #8
 8004910:	2102      	movs	r1, #2
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f87a 	bl	8004a0c <RCCEx_PLL2_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800491e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800492a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800492e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	2100      	movs	r1, #0
 8004938:	6139      	str	r1, [r7, #16]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004944:	460b      	mov	r3, r1
 8004946:	4313      	orrs	r3, r2
 8004948:	d011      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	3328      	adds	r3, #40	@ 0x28
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f90c 	bl	8004b70 <RCCEx_PLL3_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800495e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	2100      	movs	r1, #0
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004984:	460b      	mov	r3, r1
 8004986:	4313      	orrs	r3, r2
 8004988:	d011      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f8ec 	bl	8004b70 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800499e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	2100      	movs	r1, #0
 80049b8:	6039      	str	r1, [r7, #0]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049c4:	460b      	mov	r3, r1
 80049c6:	4313      	orrs	r3, r2
 80049c8:	d011      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	3328      	adds	r3, #40	@ 0x28
 80049d0:	2102      	movs	r1, #2
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f8cc 	bl	8004b70 <RCCEx_PLL3_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80049ee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a02:	46bd      	mov	sp, r7
 8004a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a08:	58024400 	.word	0x58024400

08004a0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a1a:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d101      	bne.n	8004a2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e099      	b.n	8004b5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004a30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a36:	f7fc fc19 	bl	800126c <HAL_GetTick>
 8004a3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a3c:	e008      	b.n	8004a50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a3e:	f7fc fc15 	bl	800126c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e086      	b.n	8004b5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a50:	4b45      	ldr	r3, [pc, #276]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f0      	bne.n	8004a3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a5c:	4b42      	ldr	r3, [pc, #264]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	031b      	lsls	r3, r3, #12
 8004a6a:	493f      	ldr	r1, [pc, #252]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	025b      	lsls	r3, r3, #9
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	041b      	lsls	r3, r3, #16
 8004a8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004aa0:	4931      	ldr	r1, [pc, #196]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004aa6:	4b30      	ldr	r3, [pc, #192]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	492d      	ldr	r1, [pc, #180]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	f023 0220 	bic.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	4928      	ldr	r1, [pc, #160]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004aca:	4b27      	ldr	r3, [pc, #156]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	4a26      	ldr	r2, [pc, #152]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004ad0:	f023 0310 	bic.w	r3, r3, #16
 8004ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ad6:	4b24      	ldr	r3, [pc, #144]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ada:	4b24      	ldr	r3, [pc, #144]	@ (8004b6c <RCCEx_PLL2_Config+0x160>)
 8004adc:	4013      	ands	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	69d2      	ldr	r2, [r2, #28]
 8004ae2:	00d2      	lsls	r2, r2, #3
 8004ae4:	4920      	ldr	r1, [pc, #128]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aea:	4b1f      	ldr	r3, [pc, #124]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	4a1e      	ldr	r2, [pc, #120]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	f043 0310 	orr.w	r3, r3, #16
 8004af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004afc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	4a19      	ldr	r2, [pc, #100]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b08:	e00f      	b.n	8004b2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d106      	bne.n	8004b1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b10:	4b15      	ldr	r3, [pc, #84]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b14:	4a14      	ldr	r2, [pc, #80]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b1c:	e005      	b.n	8004b2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b1e:	4b12      	ldr	r3, [pc, #72]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	4a11      	ldr	r2, [pc, #68]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b36:	f7fc fb99 	bl	800126c <HAL_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b3c:	e008      	b.n	8004b50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b3e:	f7fc fb95 	bl	800126c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e006      	b.n	8004b5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b50:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <RCCEx_PLL2_Config+0x15c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	ffff0007 	.word	0xffff0007

08004b70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b7e:	4b53      	ldr	r3, [pc, #332]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d101      	bne.n	8004b8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e099      	b.n	8004cc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a4e      	ldr	r2, [pc, #312]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004b94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9a:	f7fc fb67 	bl	800126c <HAL_GetTick>
 8004b9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ba2:	f7fc fb63 	bl	800126c <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e086      	b.n	8004cc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bb4:	4b45      	ldr	r3, [pc, #276]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1f0      	bne.n	8004ba2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bc0:	4b42      	ldr	r3, [pc, #264]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	051b      	lsls	r3, r3, #20
 8004bce:	493f      	ldr	r1, [pc, #252]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	025b      	lsls	r3, r3, #9
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	061b      	lsls	r3, r3, #24
 8004c00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c04:	4931      	ldr	r1, [pc, #196]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c0a:	4b30      	ldr	r3, [pc, #192]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	492d      	ldr	r1, [pc, #180]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	4928      	ldr	r1, [pc, #160]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c2e:	4b27      	ldr	r3, [pc, #156]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	4a26      	ldr	r2, [pc, #152]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c3e:	4b24      	ldr	r3, [pc, #144]	@ (8004cd0 <RCCEx_PLL3_Config+0x160>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	69d2      	ldr	r2, [r2, #28]
 8004c46:	00d2      	lsls	r2, r2, #3
 8004c48:	4920      	ldr	r1, [pc, #128]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	4a1e      	ldr	r2, [pc, #120]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	4a19      	ldr	r2, [pc, #100]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c6c:	e00f      	b.n	8004c8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d106      	bne.n	8004c82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c74:	4b15      	ldr	r3, [pc, #84]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	4a14      	ldr	r2, [pc, #80]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c80:	e005      	b.n	8004c8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	4a11      	ldr	r2, [pc, #68]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a0e      	ldr	r2, [pc, #56]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9a:	f7fc fae7 	bl	800126c <HAL_GetTick>
 8004c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ca0:	e008      	b.n	8004cb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ca2:	f7fc fae3 	bl	800126c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e006      	b.n	8004cc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <RCCEx_PLL3_Config+0x15c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	58024400 	.word	0x58024400
 8004cd0:	ffff0007 	.word	0xffff0007

08004cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e049      	b.n	8004d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f841 	bl	8004d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 f9e8 	bl	80050e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d001      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e054      	b.n	8004e5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a26      	ldr	r2, [pc, #152]	@ (8004e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d022      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x80>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dda:	d01d      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x80>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d018      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x80>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a21      	ldr	r2, [pc, #132]	@ (8004e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x80>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x80>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e78 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d009      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x80>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1c      	ldr	r2, [pc, #112]	@ (8004e7c <HAL_TIM_Base_Start_IT+0xe4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_TIM_Base_Start_IT+0x80>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1b      	ldr	r2, [pc, #108]	@ (8004e80 <HAL_TIM_Base_Start_IT+0xe8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d115      	bne.n	8004e44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	4b19      	ldr	r3, [pc, #100]	@ (8004e84 <HAL_TIM_Base_Start_IT+0xec>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b06      	cmp	r3, #6
 8004e28:	d015      	beq.n	8004e56 <HAL_TIM_Base_Start_IT+0xbe>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e30:	d011      	beq.n	8004e56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0201 	orr.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e42:	e008      	b.n	8004e56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0201 	orr.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e000      	b.n	8004e58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40010400 	.word	0x40010400
 8004e7c:	40001800 	.word	0x40001800
 8004e80:	40014000 	.word	0x40014000
 8004e84:	00010007 	.word	0x00010007

08004e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0202 	mvn.w	r2, #2
 8004ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8e9 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8db 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8ec 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0204 	mvn.w	r2, #4
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8c3 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f8b5 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f8c6 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0208 	mvn.w	r2, #8
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2204      	movs	r2, #4
 8004f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f89d 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f88f 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8a0 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d020      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0210 	mvn.w	r2, #16
 8004fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f877 	bl	80050aa <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f869 	bl	8005096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f87a 	bl	80050be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0201 	mvn.w	r2, #1
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fb fdcc 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00c      	beq.n	8005022 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800501a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f913 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00c      	beq.n	8005046 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f90b 	bl	800525c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00c      	beq.n	800506a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f834 	bl	80050d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0220 	mvn.w	r2, #32
 8005086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f8d3 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800508e:	bf00      	nop
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a46      	ldr	r2, [pc, #280]	@ (8005214 <TIM_Base_SetConfig+0x12c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005106:	d00f      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a43      	ldr	r2, [pc, #268]	@ (8005218 <TIM_Base_SetConfig+0x130>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a42      	ldr	r2, [pc, #264]	@ (800521c <TIM_Base_SetConfig+0x134>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a41      	ldr	r2, [pc, #260]	@ (8005220 <TIM_Base_SetConfig+0x138>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a40      	ldr	r2, [pc, #256]	@ (8005224 <TIM_Base_SetConfig+0x13c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d108      	bne.n	800513a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a35      	ldr	r2, [pc, #212]	@ (8005214 <TIM_Base_SetConfig+0x12c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d01f      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005148:	d01b      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a32      	ldr	r2, [pc, #200]	@ (8005218 <TIM_Base_SetConfig+0x130>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d017      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a31      	ldr	r2, [pc, #196]	@ (800521c <TIM_Base_SetConfig+0x134>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a30      	ldr	r2, [pc, #192]	@ (8005220 <TIM_Base_SetConfig+0x138>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00f      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2f      	ldr	r2, [pc, #188]	@ (8005224 <TIM_Base_SetConfig+0x13c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00b      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2e      	ldr	r2, [pc, #184]	@ (8005228 <TIM_Base_SetConfig+0x140>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d007      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2d      	ldr	r2, [pc, #180]	@ (800522c <TIM_Base_SetConfig+0x144>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d003      	beq.n	8005182 <TIM_Base_SetConfig+0x9a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2c      	ldr	r2, [pc, #176]	@ (8005230 <TIM_Base_SetConfig+0x148>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d108      	bne.n	8005194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <TIM_Base_SetConfig+0x12c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <TIM_Base_SetConfig+0x13c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <TIM_Base_SetConfig+0x140>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a16      	ldr	r2, [pc, #88]	@ (800522c <TIM_Base_SetConfig+0x144>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_Base_SetConfig+0xf8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <TIM_Base_SetConfig+0x148>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d103      	bne.n	80051e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d105      	bne.n	8005206 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f023 0201 	bic.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	611a      	str	r2, [r3, #16]
  }
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40010400 	.word	0x40010400
 8005228:	40014000 	.word	0x40014000
 800522c:	40014400 	.word	0x40014400
 8005230:	40014800 	.word	0x40014800

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005270:	b084      	sub	sp, #16
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	f107 001c 	add.w	r0, r7, #28
 800527e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005282:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005286:	2b01      	cmp	r3, #1
 8005288:	d121      	bne.n	80052ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	4b2c      	ldr	r3, [pc, #176]	@ (800534c <USB_CoreInit+0xdc>)
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d105      	bne.n	80052c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 faaa 	bl	800581c <USB_CoreReset>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
 80052cc:	e01b      	b.n	8005306 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa9e 	bl	800581c <USB_CoreReset>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80052f8:	e005      	b.n	8005306 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005306:	7fbb      	ldrb	r3, [r7, #30]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d116      	bne.n	800533a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005310:	b29a      	uxth	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800531a:	4b0d      	ldr	r3, [pc, #52]	@ (8005350 <USB_CoreInit+0xe0>)
 800531c:	4313      	orrs	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f043 0206 	orr.w	r2, r3, #6
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f043 0220 	orr.w	r2, r3, #32
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800533a:	7bfb      	ldrb	r3, [r7, #15]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005346:	b004      	add	sp, #16
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	ffbdffbf 	.word	0xffbdffbf
 8005350:	03ee0000 	.word	0x03ee0000

08005354 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f023 0201 	bic.w	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d115      	bne.n	80053c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053a4:	200a      	movs	r0, #10
 80053a6:	f7fb ff6d 	bl	8001284 <HAL_Delay>
      ms += 10U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	330a      	adds	r3, #10
 80053ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fa25 	bl	8005800 <USB_GetMode>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d01e      	beq.n	80053fa <USB_SetCurrentMode+0x84>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2bc7      	cmp	r3, #199	@ 0xc7
 80053c0:	d9f0      	bls.n	80053a4 <USB_SetCurrentMode+0x2e>
 80053c2:	e01a      	b.n	80053fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d115      	bne.n	80053f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053d6:	200a      	movs	r0, #10
 80053d8:	f7fb ff54 	bl	8001284 <HAL_Delay>
      ms += 10U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	330a      	adds	r3, #10
 80053e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fa0c 	bl	8005800 <USB_GetMode>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <USB_SetCurrentMode+0x84>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80053f2:	d9f0      	bls.n	80053d6 <USB_SetCurrentMode+0x60>
 80053f4:	e001      	b.n	80053fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e005      	b.n	8005406 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2bc8      	cmp	r3, #200	@ 0xc8
 80053fe:	d101      	bne.n	8005404 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005410:	b084      	sub	sp, #16
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800541e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	e009      	b.n	8005444 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3340      	adds	r3, #64	@ 0x40
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	2200      	movs	r2, #0
 800543c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3301      	adds	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b0e      	cmp	r3, #14
 8005448:	d9f2      	bls.n	8005430 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800544a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800544e:	2b00      	cmp	r3, #0
 8005450:	d11c      	bne.n	800548c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e005      	b.n	8005498 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800549e:	461a      	mov	r2, r3
 80054a0:	2300      	movs	r3, #0
 80054a2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054a4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10d      	bne.n	80054c8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054b4:	2100      	movs	r1, #0
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f968 	bl	800578c <USB_SetDevSpeed>
 80054bc:	e008      	b.n	80054d0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054be:	2101      	movs	r1, #1
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f963 	bl	800578c <USB_SetDevSpeed>
 80054c6:	e003      	b.n	80054d0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054c8:	2103      	movs	r1, #3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f95e 	bl	800578c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054d0:	2110      	movs	r1, #16
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f8fa 	bl	80056cc <USB_FlushTxFifo>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f924 	bl	8005730 <USB_FlushRxFifo>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f8:	461a      	mov	r2, r3
 80054fa:	2300      	movs	r3, #0
 80054fc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005504:	461a      	mov	r2, r3
 8005506:	2300      	movs	r3, #0
 8005508:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	e043      	b.n	80055a4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800552e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005532:	d118      	bne.n	8005566 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005546:	461a      	mov	r2, r3
 8005548:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e013      	b.n	8005578 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555c:	461a      	mov	r2, r3
 800555e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e008      	b.n	8005578 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005572:	461a      	mov	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005584:	461a      	mov	r2, r3
 8005586:	2300      	movs	r3, #0
 8005588:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005596:	461a      	mov	r2, r3
 8005598:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800559c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	3301      	adds	r3, #1
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055a8:	461a      	mov	r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d3b5      	bcc.n	800551c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	e043      	b.n	800563e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055cc:	d118      	bne.n	8005600 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e0:	461a      	mov	r2, r3
 80055e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	e013      	b.n	8005612 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e008      	b.n	8005612 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560c:	461a      	mov	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561e:	461a      	mov	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005630:	461a      	mov	r2, r3
 8005632:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005636:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	3301      	adds	r3, #1
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005642:	461a      	mov	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4293      	cmp	r3, r2
 8005648:	d3b5      	bcc.n	80055b6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800565c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800566a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800566c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f043 0210 	orr.w	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <USB_DevInit+0x2b4>)
 8005686:	4313      	orrs	r3, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800568c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f043 0208 	orr.w	r2, r3, #8
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d105      	bne.n	80056b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <USB_DevInit+0x2b8>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c0:	b004      	add	sp, #16
 80056c2:	4770      	bx	lr
 80056c4:	803c3800 	.word	0x803c3800
 80056c8:	40000004 	.word	0x40000004

080056cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056e6:	d901      	bls.n	80056ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e01b      	b.n	8005724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	daf2      	bge.n	80056da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	019b      	lsls	r3, r3, #6
 80056fc:	f043 0220 	orr.w	r2, r3, #32
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3301      	adds	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005710:	d901      	bls.n	8005716 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e006      	b.n	8005724 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b20      	cmp	r3, #32
 8005720:	d0f0      	beq.n	8005704 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005748:	d901      	bls.n	800574e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e018      	b.n	8005780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	daf2      	bge.n	800573c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2210      	movs	r2, #16
 800575e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	3301      	adds	r3, #1
 8005764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800576c:	d901      	bls.n	8005772 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e006      	b.n	8005780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b10      	cmp	r3, #16
 800577c:	d0f0      	beq.n	8005760 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ac:	4313      	orrs	r3, r2
 80057ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80057d8:	f023 0303 	bic.w	r3, r3, #3
 80057dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057ec:	f043 0302 	orr.w	r3, r3, #2
 80057f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0301 	and.w	r3, r3, #1
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005834:	d901      	bls.n	800583a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e01b      	b.n	8005872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	daf2      	bge.n	8005828 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800585e:	d901      	bls.n	8005864 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e006      	b.n	8005872 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b01      	cmp	r3, #1
 800586e:	d0f0      	beq.n	8005852 <USB_CoreReset+0x36>

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <__NVIC_SetPriority>:
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800588c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db0a      	blt.n	80058aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	490c      	ldr	r1, [pc, #48]	@ (80058cc <__NVIC_SetPriority+0x4c>)
 800589a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058a8:	e00a      	b.n	80058c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4908      	ldr	r1, [pc, #32]	@ (80058d0 <__NVIC_SetPriority+0x50>)
 80058b0:	88fb      	ldrh	r3, [r7, #6]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3b04      	subs	r3, #4
 80058b8:	0112      	lsls	r2, r2, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	440b      	add	r3, r1
 80058be:	761a      	strb	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000e100 	.word	0xe000e100
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80058d8:	4b05      	ldr	r3, [pc, #20]	@ (80058f0 <SysTick_Handler+0x1c>)
 80058da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80058dc:	f002 f95a 	bl	8007b94 <xTaskGetSchedulerState>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d001      	beq.n	80058ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80058e6:	f000 fd9f 	bl	8006428 <xPortSysTickHandler>
  }
}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	e000e010 	.word	0xe000e010

080058f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058f8:	2100      	movs	r1, #0
 80058fa:	f06f 0004 	mvn.w	r0, #4
 80058fe:	f7ff ffbf 	bl	8005880 <__NVIC_SetPriority>
#endif
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590e:	f3ef 8305 	mrs	r3, IPSR
 8005912:	603b      	str	r3, [r7, #0]
  return(result);
 8005914:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800591a:	f06f 0305 	mvn.w	r3, #5
 800591e:	607b      	str	r3, [r7, #4]
 8005920:	e00c      	b.n	800593c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005922:	4b0a      	ldr	r3, [pc, #40]	@ (800594c <osKernelInitialize+0x44>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d105      	bne.n	8005936 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800592a:	4b08      	ldr	r3, [pc, #32]	@ (800594c <osKernelInitialize+0x44>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005930:	2300      	movs	r3, #0
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	e002      	b.n	800593c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800593a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800593c:	687b      	ldr	r3, [r7, #4]
}
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	240008c8 	.word	0x240008c8

08005950 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005956:	f3ef 8305 	mrs	r3, IPSR
 800595a:	603b      	str	r3, [r7, #0]
  return(result);
 800595c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005962:	f06f 0305 	mvn.w	r3, #5
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	e010      	b.n	800598c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800596a:	4b0b      	ldr	r3, [pc, #44]	@ (8005998 <osKernelStart+0x48>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d109      	bne.n	8005986 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005972:	f7ff ffbf 	bl	80058f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005976:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <osKernelStart+0x48>)
 8005978:	2202      	movs	r2, #2
 800597a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800597c:	f001 fcbc 	bl	80072f8 <vTaskStartScheduler>
      stat = osOK;
 8005980:	2300      	movs	r3, #0
 8005982:	607b      	str	r3, [r7, #4]
 8005984:	e002      	b.n	800598c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800598a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800598c:	687b      	ldr	r3, [r7, #4]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	240008c8 	.word	0x240008c8

0800599c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800599c:	b580      	push	{r7, lr}
 800599e:	b08e      	sub	sp, #56	@ 0x38
 80059a0:	af04      	add	r7, sp, #16
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ac:	f3ef 8305 	mrs	r3, IPSR
 80059b0:	617b      	str	r3, [r7, #20]
  return(result);
 80059b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d17e      	bne.n	8005ab6 <osThreadNew+0x11a>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d07b      	beq.n	8005ab6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059be:	2380      	movs	r3, #128	@ 0x80
 80059c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059c2:	2318      	movs	r3, #24
 80059c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80059ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d045      	beq.n	8005a62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <osThreadNew+0x48>
        name = attr->name;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <osThreadNew+0x6e>
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b38      	cmp	r3, #56	@ 0x38
 80059fc:	d805      	bhi.n	8005a0a <osThreadNew+0x6e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <osThreadNew+0x72>
        return (NULL);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e054      	b.n	8005ab8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <osThreadNew+0xa8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	2b5b      	cmp	r3, #91	@ 0x5b
 8005a2c:	d90a      	bls.n	8005a44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d006      	beq.n	8005a44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <osThreadNew+0xa8>
        mem = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	e010      	b.n	8005a66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10c      	bne.n	8005a66 <osThreadNew+0xca>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <osThreadNew+0xca>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <osThreadNew+0xca>
          mem = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e001      	b.n	8005a66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d110      	bne.n	8005a8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a74:	9202      	str	r2, [sp, #8]
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6a3a      	ldr	r2, [r7, #32]
 8005a80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f001 fa5c 	bl	8006f40 <xTaskCreateStatic>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	e013      	b.n	8005ab6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d110      	bne.n	8005ab6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f107 0310 	add.w	r3, r7, #16
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 faaa 	bl	8007000 <xTaskCreate>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d001      	beq.n	8005ab6 <osThreadNew+0x11a>
            hTask = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ab6:	693b      	ldr	r3, [r7, #16]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3728      	adds	r7, #40	@ 0x28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ac8:	f3ef 8305 	mrs	r3, IPSR
 8005acc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ace:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <osDelay+0x1c>
    stat = osErrorISR;
 8005ad4:	f06f 0305 	mvn.w	r3, #5
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e007      	b.n	8005aec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <osDelay+0x2c>
      vTaskDelay(ticks);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fbd0 	bl	800728c <vTaskDelay>
    }
  }

  return (stat);
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a07      	ldr	r2, [pc, #28]	@ (8005b24 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4a06      	ldr	r2, [pc, #24]	@ (8005b28 <vApplicationGetIdleTaskMemory+0x30>)
 8005b0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2280      	movs	r2, #128	@ 0x80
 8005b14:	601a      	str	r2, [r3, #0]
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	240008cc 	.word	0x240008cc
 8005b28:	24000928 	.word	0x24000928

08005b2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4a07      	ldr	r2, [pc, #28]	@ (8005b58 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4a06      	ldr	r2, [pc, #24]	@ (8005b5c <vApplicationGetTimerTaskMemory+0x30>)
 8005b42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b4a:	601a      	str	r2, [r3, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	24000b28 	.word	0x24000b28
 8005b5c:	24000b84 	.word	0x24000b84

08005b60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	@ 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b6c:	f001 fc2c 	bl	80073c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b70:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce4 <pvPortMalloc+0x184>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b78:	f000 f924 	bl	8005dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ce8 <pvPortMalloc+0x188>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8095 	bne.w	8005cb4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01e      	beq.n	8005bce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b90:	2208      	movs	r2, #8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d015      	beq.n	8005bce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f023 0307 	bic.w	r3, r3, #7
 8005ba8:	3308      	adds	r3, #8
 8005baa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	e7fd      	b.n	8005bca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d06f      	beq.n	8005cb4 <pvPortMalloc+0x154>
 8005bd4:	4b45      	ldr	r3, [pc, #276]	@ (8005cec <pvPortMalloc+0x18c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d86a      	bhi.n	8005cb4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bde:	4b44      	ldr	r3, [pc, #272]	@ (8005cf0 <pvPortMalloc+0x190>)
 8005be0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005be2:	4b43      	ldr	r3, [pc, #268]	@ (8005cf0 <pvPortMalloc+0x190>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005be8:	e004      	b.n	8005bf4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d903      	bls.n	8005c06 <pvPortMalloc+0xa6>
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1f1      	bne.n	8005bea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c06:	4b37      	ldr	r3, [pc, #220]	@ (8005ce4 <pvPortMalloc+0x184>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d051      	beq.n	8005cb4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2208      	movs	r2, #8
 8005c16:	4413      	add	r3, r2
 8005c18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	1ad2      	subs	r2, r2, r3
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d920      	bls.n	8005c74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <pvPortMalloc+0xfc>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	613b      	str	r3, [r7, #16]
}
 8005c56:	bf00      	nop
 8005c58:	bf00      	nop
 8005c5a:	e7fd      	b.n	8005c58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	1ad2      	subs	r2, r2, r3
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c6e:	69b8      	ldr	r0, [r7, #24]
 8005c70:	f000 f90a 	bl	8005e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c74:	4b1d      	ldr	r3, [pc, #116]	@ (8005cec <pvPortMalloc+0x18c>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8005cec <pvPortMalloc+0x18c>)
 8005c80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c82:	4b1a      	ldr	r3, [pc, #104]	@ (8005cec <pvPortMalloc+0x18c>)
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf4 <pvPortMalloc+0x194>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d203      	bcs.n	8005c96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c8e:	4b17      	ldr	r3, [pc, #92]	@ (8005cec <pvPortMalloc+0x18c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a18      	ldr	r2, [pc, #96]	@ (8005cf4 <pvPortMalloc+0x194>)
 8005c94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ce8 <pvPortMalloc+0x188>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005caa:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <pvPortMalloc+0x198>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	4a11      	ldr	r2, [pc, #68]	@ (8005cf8 <pvPortMalloc+0x198>)
 8005cb2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cb4:	f001 fb96 	bl	80073e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <pvPortMalloc+0x17a>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <pvPortMalloc+0x176>
	return pvReturn;
 8005cda:	69fb      	ldr	r3, [r7, #28]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3728      	adds	r7, #40	@ 0x28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	24004b8c 	.word	0x24004b8c
 8005ce8:	24004ba0 	.word	0x24004ba0
 8005cec:	24004b90 	.word	0x24004b90
 8005cf0:	24004b84 	.word	0x24004b84
 8005cf4:	24004b94 	.word	0x24004b94
 8005cf8:	24004b98 	.word	0x24004b98

08005cfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d04f      	beq.n	8005dae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d0e:	2308      	movs	r3, #8
 8005d10:	425b      	negs	r3, r3
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	4b25      	ldr	r3, [pc, #148]	@ (8005db8 <vPortFree+0xbc>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <vPortFree+0x46>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	e7fd      	b.n	8005d3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <vPortFree+0x66>
	__asm volatile
 8005d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4e:	f383 8811 	msr	BASEPRI, r3
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	f3bf 8f4f 	dsb	sy
 8005d5a:	60bb      	str	r3, [r7, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	e7fd      	b.n	8005d5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4b14      	ldr	r3, [pc, #80]	@ (8005db8 <vPortFree+0xbc>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01e      	beq.n	8005dae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11a      	bne.n	8005dae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <vPortFree+0xbc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d88:	f001 fb1e 	bl	80073c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4b0a      	ldr	r3, [pc, #40]	@ (8005dbc <vPortFree+0xc0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	4a09      	ldr	r2, [pc, #36]	@ (8005dbc <vPortFree+0xc0>)
 8005d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f000 f874 	bl	8005e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005da0:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <vPortFree+0xc4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a06      	ldr	r2, [pc, #24]	@ (8005dc0 <vPortFree+0xc4>)
 8005da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005daa:	f001 fb1b 	bl	80073e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	24004ba0 	.word	0x24004ba0
 8005dbc:	24004b90 	.word	0x24004b90
 8005dc0:	24004b9c 	.word	0x24004b9c

08005dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dd0:	4b27      	ldr	r3, [pc, #156]	@ (8005e70 <prvHeapInit+0xac>)
 8005dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3307      	adds	r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e70 <prvHeapInit+0xac>)
 8005df4:	4413      	add	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e74 <prvHeapInit+0xb0>)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e02:	4b1c      	ldr	r3, [pc, #112]	@ (8005e74 <prvHeapInit+0xb0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e10:	2208      	movs	r2, #8
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0307 	bic.w	r3, r3, #7
 8005e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a15      	ldr	r2, [pc, #84]	@ (8005e78 <prvHeapInit+0xb4>)
 8005e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e26:	4b14      	ldr	r3, [pc, #80]	@ (8005e78 <prvHeapInit+0xb4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e2e:	4b12      	ldr	r3, [pc, #72]	@ (8005e78 <prvHeapInit+0xb4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e44:	4b0c      	ldr	r3, [pc, #48]	@ (8005e78 <prvHeapInit+0xb4>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	@ (8005e7c <prvHeapInit+0xb8>)
 8005e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a09      	ldr	r2, [pc, #36]	@ (8005e80 <prvHeapInit+0xbc>)
 8005e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e5c:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <prvHeapInit+0xc0>)
 8005e5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e62:	601a      	str	r2, [r3, #0]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	24000f84 	.word	0x24000f84
 8005e74:	24004b84 	.word	0x24004b84
 8005e78:	24004b8c 	.word	0x24004b8c
 8005e7c:	24004b94 	.word	0x24004b94
 8005e80:	24004b90 	.word	0x24004b90
 8005e84:	24004ba0 	.word	0x24004ba0

08005e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e90:	4b28      	ldr	r3, [pc, #160]	@ (8005f34 <prvInsertBlockIntoFreeList+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e002      	b.n	8005e9c <prvInsertBlockIntoFreeList+0x14>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d8f7      	bhi.n	8005e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d108      	bne.n	8005eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d118      	bne.n	8005f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <prvInsertBlockIntoFreeList+0xb0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d00d      	beq.n	8005f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	e008      	b.n	8005f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f06:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <prvInsertBlockIntoFreeList+0xb0>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e003      	b.n	8005f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d002      	beq.n	8005f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f26:	bf00      	nop
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	24004b84 	.word	0x24004b84
 8005f38:	24004b8c 	.word	0x24004b8c

08005f3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f103 0208 	add.w	r2, r3, #8
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f103 0208 	add.w	r2, r3, #8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f103 0208 	add.w	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f96:	b480      	push	{r7}
 8005f98:	b085      	sub	sp, #20
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	601a      	str	r2, [r3, #0]
}
 8005fd2:	bf00      	nop
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ff4:	d103      	bne.n	8005ffe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e00c      	b.n	8006018 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3308      	adds	r3, #8
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e002      	b.n	800600c <vListInsert+0x2e>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	429a      	cmp	r2, r3
 8006016:	d2f6      	bcs.n	8006006 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]
}
 8006044:	bf00      	nop
 8006046:	3714      	adds	r7, #20
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6892      	ldr	r2, [r2, #8]
 8006066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6852      	ldr	r2, [r2, #4]
 8006070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d103      	bne.n	8006084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	1e5a      	subs	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3b04      	subs	r3, #4
 80060b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b04      	subs	r3, #4
 80060c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f023 0201 	bic.w	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	3b04      	subs	r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006108 <pxPortInitialiseStack+0x64>)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b14      	subs	r3, #20
 80060de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3b04      	subs	r3, #4
 80060ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f06f 0202 	mvn.w	r2, #2
 80060f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3b20      	subs	r3, #32
 80060f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	0800610d 	.word	0x0800610d

0800610c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <prvTaskExitError+0x58>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800611e:	d00b      	beq.n	8006138 <prvTaskExitError+0x2c>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	60fb      	str	r3, [r7, #12]
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <prvTaskExitError+0x28>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	60bb      	str	r3, [r7, #8]
}
 800614a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800614c:	bf00      	nop
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d0fc      	beq.n	800614e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006154:	bf00      	nop
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	24000068 	.word	0x24000068
	...

08006170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <pxCurrentTCBConst2>)
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	6808      	ldr	r0, [r1, #0]
 8006176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617a:	f380 8809 	msr	PSP, r0
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8811 	msr	BASEPRI, r0
 800618a:	4770      	bx	lr
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst2>:
 8006190:	24004bec 	.word	0x24004bec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006198:	4808      	ldr	r0, [pc, #32]	@ (80061bc <prvPortStartFirstTask+0x24>)
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	6800      	ldr	r0, [r0, #0]
 800619e:	f380 8808 	msr	MSP, r0
 80061a2:	f04f 0000 	mov.w	r0, #0
 80061a6:	f380 8814 	msr	CONTROL, r0
 80061aa:	b662      	cpsie	i
 80061ac:	b661      	cpsie	f
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	df00      	svc	0
 80061b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ba:	bf00      	nop
 80061bc:	e000ed08 	.word	0xe000ed08

080061c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061c6:	4b47      	ldr	r3, [pc, #284]	@ (80062e4 <xPortStartScheduler+0x124>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a47      	ldr	r2, [pc, #284]	@ (80062e8 <xPortStartScheduler+0x128>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10b      	bne.n	80061e8 <xPortStartScheduler+0x28>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
}
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061e8:	4b3e      	ldr	r3, [pc, #248]	@ (80062e4 <xPortStartScheduler+0x124>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a3f      	ldr	r2, [pc, #252]	@ (80062ec <xPortStartScheduler+0x12c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d10b      	bne.n	800620a <xPortStartScheduler+0x4a>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60fb      	str	r3, [r7, #12]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800620a:	4b39      	ldr	r3, [pc, #228]	@ (80062f0 <xPortStartScheduler+0x130>)
 800620c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	22ff      	movs	r2, #255	@ 0xff
 800621a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4b31      	ldr	r3, [pc, #196]	@ (80062f4 <xPortStartScheduler+0x134>)
 8006230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006232:	4b31      	ldr	r3, [pc, #196]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006234:	2207      	movs	r2, #7
 8006236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006238:	e009      	b.n	800624e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800623a:	4b2f      	ldr	r3, [pc, #188]	@ (80062f8 <xPortStartScheduler+0x138>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3b01      	subs	r3, #1
 8006240:	4a2d      	ldr	r2, [pc, #180]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	b2db      	uxtb	r3, r3
 800624c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006256:	2b80      	cmp	r3, #128	@ 0x80
 8006258:	d0ef      	beq.n	800623a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800625a:	4b27      	ldr	r3, [pc, #156]	@ (80062f8 <xPortStartScheduler+0x138>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1c3 0307 	rsb	r3, r3, #7
 8006262:	2b04      	cmp	r3, #4
 8006264:	d00b      	beq.n	800627e <xPortStartScheduler+0xbe>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60bb      	str	r3, [r7, #8]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800627e:	4b1e      	ldr	r3, [pc, #120]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	4a1c      	ldr	r2, [pc, #112]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006288:	4b1b      	ldr	r3, [pc, #108]	@ (80062f8 <xPortStartScheduler+0x138>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <xPortStartScheduler+0x138>)
 8006292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800629c:	4b17      	ldr	r3, [pc, #92]	@ (80062fc <xPortStartScheduler+0x13c>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <xPortStartScheduler+0x13c>)
 80062ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062b4:	f000 f8da 	bl	800646c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062b8:	4b11      	ldr	r3, [pc, #68]	@ (8006300 <xPortStartScheduler+0x140>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062be:	f000 f8f9 	bl	80064b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062c2:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <xPortStartScheduler+0x144>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006304 <xPortStartScheduler+0x144>)
 80062c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80062cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062ce:	f7ff ff63 	bl	8006198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062d2:	f001 f9ef 	bl	80076b4 <vTaskSwitchContext>
	prvTaskExitError();
 80062d6:	f7ff ff19 	bl	800610c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	e000ed00 	.word	0xe000ed00
 80062e8:	410fc271 	.word	0x410fc271
 80062ec:	410fc270 	.word	0x410fc270
 80062f0:	e000e400 	.word	0xe000e400
 80062f4:	24004ba4 	.word	0x24004ba4
 80062f8:	24004ba8 	.word	0x24004ba8
 80062fc:	e000ed20 	.word	0xe000ed20
 8006300:	24000068 	.word	0x24000068
 8006304:	e000ef34 	.word	0xe000ef34

08006308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <vPortEnterCritical+0x5c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a0e      	ldr	r2, [pc, #56]	@ (8006364 <vPortEnterCritical+0x5c>)
 800632a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800632c:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <vPortEnterCritical+0x5c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d110      	bne.n	8006356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006334:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <vPortEnterCritical+0x60>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00b      	beq.n	8006356 <vPortEnterCritical+0x4e>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	603b      	str	r3, [r7, #0]
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	e7fd      	b.n	8006352 <vPortEnterCritical+0x4a>
	}
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	24000068 	.word	0x24000068
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006372:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <vPortExitCritical+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <vPortExitCritical+0x26>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006392:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <vPortExitCritical+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3b01      	subs	r3, #1
 8006398:	4a08      	ldr	r2, [pc, #32]	@ (80063bc <vPortExitCritical+0x50>)
 800639a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800639c:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <vPortExitCritical+0x50>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <vPortExitCritical+0x44>
 80063a4:	2300      	movs	r3, #0
 80063a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	24000068 	.word	0x24000068

080063c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063c0:	f3ef 8009 	mrs	r0, PSP
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4b15      	ldr	r3, [pc, #84]	@ (8006420 <pxCurrentTCBConst>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	f01e 0f10 	tst.w	lr, #16
 80063d0:	bf08      	it	eq
 80063d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063e4:	f380 8811 	msr	BASEPRI, r0
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f001 f960 	bl	80076b4 <vTaskSwitchContext>
 80063f4:	f04f 0000 	mov.w	r0, #0
 80063f8:	f380 8811 	msr	BASEPRI, r0
 80063fc:	bc09      	pop	{r0, r3}
 80063fe:	6819      	ldr	r1, [r3, #0]
 8006400:	6808      	ldr	r0, [r1, #0]
 8006402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006406:	f01e 0f10 	tst.w	lr, #16
 800640a:	bf08      	it	eq
 800640c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006410:	f380 8809 	msr	PSP, r0
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	f3af 8000 	nop.w

08006420 <pxCurrentTCBConst>:
 8006420:	24004bec 	.word	0x24004bec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop

08006428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	607b      	str	r3, [r7, #4]
}
 8006440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006442:	f001 f87d 	bl	8007540 <xTaskIncrementTick>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800644c:	4b06      	ldr	r3, [pc, #24]	@ (8006468 <xPortSysTickHandler+0x40>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	2300      	movs	r3, #0
 8006456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f383 8811 	msr	BASEPRI, r3
}
 800645e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	e000ed04 	.word	0xe000ed04

0800646c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006472:	2200      	movs	r2, #0
 8006474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006476:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <vPortSetupTimerInterrupt+0x38>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800647c:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <vPortSetupTimerInterrupt+0x3c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <vPortSetupTimerInterrupt+0x40>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	099b      	lsrs	r3, r3, #6
 8006488:	4a09      	ldr	r2, [pc, #36]	@ (80064b0 <vPortSetupTimerInterrupt+0x44>)
 800648a:	3b01      	subs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800648e:	4b04      	ldr	r3, [pc, #16]	@ (80064a0 <vPortSetupTimerInterrupt+0x34>)
 8006490:	2207      	movs	r2, #7
 8006492:	601a      	str	r2, [r3, #0]
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000e010 	.word	0xe000e010
 80064a4:	e000e018 	.word	0xe000e018
 80064a8:	24000000 	.word	0x24000000
 80064ac:	10624dd3 	.word	0x10624dd3
 80064b0:	e000e014 	.word	0xe000e014

080064b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064c4 <vPortEnableVFP+0x10>
 80064b8:	6801      	ldr	r1, [r0, #0]
 80064ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064be:	6001      	str	r1, [r0, #0]
 80064c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064c2:	bf00      	nop
 80064c4:	e000ed88 	.word	0xe000ed88

080064c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064ce:	f3ef 8305 	mrs	r3, IPSR
 80064d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d915      	bls.n	8006506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064da:	4a18      	ldr	r2, [pc, #96]	@ (800653c <vPortValidateInterruptPriority+0x74>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064e4:	4b16      	ldr	r3, [pc, #88]	@ (8006540 <vPortValidateInterruptPriority+0x78>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	7afa      	ldrb	r2, [r7, #11]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d20b      	bcs.n	8006506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	607b      	str	r3, [r7, #4]
}
 8006500:	bf00      	nop
 8006502:	bf00      	nop
 8006504:	e7fd      	b.n	8006502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006506:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <vPortValidateInterruptPriority+0x7c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800650e:	4b0e      	ldr	r3, [pc, #56]	@ (8006548 <vPortValidateInterruptPriority+0x80>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d90b      	bls.n	800652e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	603b      	str	r3, [r7, #0]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <vPortValidateInterruptPriority+0x62>
	}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	e000e3f0 	.word	0xe000e3f0
 8006540:	24004ba4 	.word	0x24004ba4
 8006544:	e000ed0c 	.word	0xe000ed0c
 8006548:	24004ba8 	.word	0x24004ba8

0800654c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <xQueueGenericReset+0x2c>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60bb      	str	r3, [r7, #8]
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	e7fd      	b.n	8006574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006578:	f7ff fec6 	bl	8006308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006584:	68f9      	ldr	r1, [r7, #12]
 8006586:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	441a      	add	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a8:	3b01      	subs	r3, #1
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	441a      	add	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	22ff      	movs	r2, #255	@ 0xff
 80065bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	22ff      	movs	r2, #255	@ 0xff
 80065c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d114      	bne.n	80065f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01a      	beq.n	800660c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3310      	adds	r3, #16
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f91a 	bl	8007814 <xTaskRemoveFromEventList>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d012      	beq.n	800660c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065e6:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <xQueueGenericReset+0xd0>)
 80065e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	e009      	b.n	800660c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3310      	adds	r3, #16
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff fc9d 	bl	8005f3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3324      	adds	r3, #36	@ 0x24
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fc98 	bl	8005f3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800660c:	f7ff feae 	bl	800636c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006610:	2301      	movs	r3, #1
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08e      	sub	sp, #56	@ 0x38
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10b      	bne.n	800666a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop
 8006668:	e7fd      	b.n	8006666 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <xQueueGenericCreateStatic+0x56>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <xQueueGenericCreateStatic+0x5a>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <xQueueGenericCreateStatic+0x5c>
 800667a:	2300      	movs	r3, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	623b      	str	r3, [r7, #32]
}
 8006692:	bf00      	nop
 8006694:	bf00      	nop
 8006696:	e7fd      	b.n	8006694 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <xQueueGenericCreateStatic+0x84>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <xQueueGenericCreateStatic+0x88>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <xQueueGenericCreateStatic+0x8a>
 80066a8:	2300      	movs	r3, #0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	61fb      	str	r3, [r7, #28]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066c6:	2350      	movs	r3, #80	@ 0x50
 80066c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b50      	cmp	r3, #80	@ 0x50
 80066ce:	d00b      	beq.n	80066e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	61bb      	str	r3, [r7, #24]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80066ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00d      	beq.n	8006710 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4613      	mov	r3, r2
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f805 	bl	800671a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006712:	4618      	mov	r0, r3
 8006714:	3730      	adds	r7, #48	@ 0x30
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
 8006726:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e002      	b.n	800673c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006748:	2101      	movs	r1, #1
 800674a:	69b8      	ldr	r0, [r7, #24]
 800674c:	f7ff fefe 	bl	800654c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	78fa      	ldrb	r2, [r7, #3]
 8006754:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08e      	sub	sp, #56	@ 0x38
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10b      	bne.n	8006794 <xQueueGenericSend+0x34>
	__asm volatile
 800677c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800678e:	bf00      	nop
 8006790:	bf00      	nop
 8006792:	e7fd      	b.n	8006790 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d103      	bne.n	80067a2 <xQueueGenericSend+0x42>
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <xQueueGenericSend+0x46>
 80067a2:	2301      	movs	r3, #1
 80067a4:	e000      	b.n	80067a8 <xQueueGenericSend+0x48>
 80067a6:	2300      	movs	r3, #0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <xQueueGenericSend+0x64>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b0:	f383 8811 	msr	BASEPRI, r3
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067be:	bf00      	nop
 80067c0:	bf00      	nop
 80067c2:	e7fd      	b.n	80067c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d103      	bne.n	80067d2 <xQueueGenericSend+0x72>
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <xQueueGenericSend+0x76>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <xQueueGenericSend+0x78>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <xQueueGenericSend+0x94>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	623b      	str	r3, [r7, #32]
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	e7fd      	b.n	80067f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067f4:	f001 f9ce 	bl	8007b94 <xTaskGetSchedulerState>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <xQueueGenericSend+0xa4>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <xQueueGenericSend+0xa8>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <xQueueGenericSend+0xaa>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <xQueueGenericSend+0xc6>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	61fb      	str	r3, [r7, #28]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006826:	f7ff fd6f 	bl	8006308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800682a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006832:	429a      	cmp	r2, r3
 8006834:	d302      	bcc.n	800683c <xQueueGenericSend+0xdc>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b02      	cmp	r3, #2
 800683a:	d129      	bne.n	8006890 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	68b9      	ldr	r1, [r7, #8]
 8006840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006842:	f000 fa0f 	bl	8006c64 <prvCopyDataToQueue>
 8006846:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006852:	3324      	adds	r3, #36	@ 0x24
 8006854:	4618      	mov	r0, r3
 8006856:	f000 ffdd 	bl	8007814 <xTaskRemoveFromEventList>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d013      	beq.n	8006888 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006860:	4b3f      	ldr	r3, [pc, #252]	@ (8006960 <xQueueGenericSend+0x200>)
 8006862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	e00a      	b.n	8006888 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006878:	4b39      	ldr	r3, [pc, #228]	@ (8006960 <xQueueGenericSend+0x200>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006888:	f7ff fd70 	bl	800636c <vPortExitCritical>
				return pdPASS;
 800688c:	2301      	movs	r3, #1
 800688e:	e063      	b.n	8006958 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006896:	f7ff fd69 	bl	800636c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800689a:	2300      	movs	r3, #0
 800689c:	e05c      	b.n	8006958 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800689e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a4:	f107 0314 	add.w	r3, r7, #20
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 f817 	bl	80078dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068b2:	f7ff fd5b 	bl	800636c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068b6:	f000 fd87 	bl	80073c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ba:	f7ff fd25 	bl	8006308 <vPortEnterCritical>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068c4:	b25b      	sxtb	r3, r3
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068ca:	d103      	bne.n	80068d4 <xQueueGenericSend+0x174>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068e0:	d103      	bne.n	80068ea <xQueueGenericSend+0x18a>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ea:	f7ff fd3f 	bl	800636c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ee:	1d3a      	adds	r2, r7, #4
 80068f0:	f107 0314 	add.w	r3, r7, #20
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f806 	bl	8007908 <xTaskCheckForTimeOut>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d124      	bne.n	800694c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006904:	f000 faa6 	bl	8006e54 <prvIsQueueFull>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d018      	beq.n	8006940 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	3310      	adds	r3, #16
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	4611      	mov	r1, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f000 ff2a 	bl	8007770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800691c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800691e:	f000 fa31 	bl	8006d84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006922:	f000 fd5f 	bl	80073e4 <xTaskResumeAll>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	f47f af7c 	bne.w	8006826 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800692e:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <xQueueGenericSend+0x200>)
 8006930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	e772      	b.n	8006826 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006942:	f000 fa1f 	bl	8006d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006946:	f000 fd4d 	bl	80073e4 <xTaskResumeAll>
 800694a:	e76c      	b.n	8006826 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800694c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800694e:	f000 fa19 	bl	8006d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006952:	f000 fd47 	bl	80073e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006956:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006958:	4618      	mov	r0, r3
 800695a:	3738      	adds	r7, #56	@ 0x38
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b090      	sub	sp, #64	@ 0x40
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <xQueueGenericSendFromISR+0x3e>
 800699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <xQueueGenericSendFromISR+0x42>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <xQueueGenericSendFromISR+0x44>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d103      	bne.n	80069d2 <xQueueGenericSendFromISR+0x6e>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <xQueueGenericSendFromISR+0x72>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <xQueueGenericSendFromISR+0x74>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	623b      	str	r3, [r7, #32]
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	e7fd      	b.n	80069f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069f4:	f7ff fd68 	bl	80064c8 <vPortValidateInterruptPriority>
	__asm volatile
 80069f8:	f3ef 8211 	mrs	r2, BASEPRI
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	61fa      	str	r2, [r7, #28]
 8006a0e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006a10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d302      	bcc.n	8006a26 <xQueueGenericSendFromISR+0xc2>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d12f      	bne.n	8006a86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	68b9      	ldr	r1, [r7, #8]
 8006a3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a3c:	f000 f912 	bl	8006c64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a48:	d112      	bne.n	8006a70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d016      	beq.n	8006a80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a54:	3324      	adds	r3, #36	@ 0x24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fedc 	bl	8007814 <xTaskRemoveFromEventList>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	e007      	b.n	8006a80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a74:	3301      	adds	r3, #1
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	b25a      	sxtb	r2, r3
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a80:	2301      	movs	r3, #1
 8006a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006a84:	e001      	b.n	8006a8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8c:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f383 8811 	msr	BASEPRI, r3
}
 8006a94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3740      	adds	r7, #64	@ 0x40
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08c      	sub	sp, #48	@ 0x30
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aac:	2300      	movs	r3, #0
 8006aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10b      	bne.n	8006ad2 <xQueueReceive+0x32>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	623b      	str	r3, [r7, #32]
}
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
 8006ad0:	e7fd      	b.n	8006ace <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <xQueueReceive+0x40>
 8006ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <xQueueReceive+0x44>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <xQueueReceive+0x46>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10b      	bne.n	8006b02 <xQueueReceive+0x62>
	__asm volatile
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	61fb      	str	r3, [r7, #28]
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	e7fd      	b.n	8006afe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b02:	f001 f847 	bl	8007b94 <xTaskGetSchedulerState>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <xQueueReceive+0x72>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <xQueueReceive+0x76>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <xQueueReceive+0x78>
 8006b16:	2300      	movs	r3, #0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xQueueReceive+0x94>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	61bb      	str	r3, [r7, #24]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b34:	f7ff fbe8 	bl	8006308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01f      	beq.n	8006b84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b48:	f000 f8f6 	bl	8006d38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	1e5a      	subs	r2, r3, #1
 8006b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00f      	beq.n	8006b7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	3310      	adds	r3, #16
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fe57 	bl	8007814 <xTaskRemoveFromEventList>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d007      	beq.n	8006b7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8006c60 <xQueueReceive+0x1c0>)
 8006b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b7c:	f7ff fbf6 	bl	800636c <vPortExitCritical>
				return pdPASS;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e069      	b.n	8006c58 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b8a:	f7ff fbef 	bl	800636c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e062      	b.n	8006c58 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d106      	bne.n	8006ba6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b98:	f107 0310 	add.w	r3, r7, #16
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f000 fe9d 	bl	80078dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ba6:	f7ff fbe1 	bl	800636c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006baa:	f000 fc0d 	bl	80073c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bae:	f7ff fbab 	bl	8006308 <vPortEnterCritical>
 8006bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bb8:	b25b      	sxtb	r3, r3
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bbe:	d103      	bne.n	8006bc8 <xQueueReceive+0x128>
 8006bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd4:	d103      	bne.n	8006bde <xQueueReceive+0x13e>
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bde:	f7ff fbc5 	bl	800636c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be2:	1d3a      	adds	r2, r7, #4
 8006be4:	f107 0310 	add.w	r3, r7, #16
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fe8c 	bl	8007908 <xTaskCheckForTimeOut>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d123      	bne.n	8006c3e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bf8:	f000 f916 	bl	8006e28 <prvIsQueueEmpty>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d017      	beq.n	8006c32 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c04:	3324      	adds	r3, #36	@ 0x24
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fdb0 	bl	8007770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c12:	f000 f8b7 	bl	8006d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c16:	f000 fbe5 	bl	80073e4 <xTaskResumeAll>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d189      	bne.n	8006b34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006c20:	4b0f      	ldr	r3, [pc, #60]	@ (8006c60 <xQueueReceive+0x1c0>)
 8006c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	e780      	b.n	8006b34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c34:	f000 f8a6 	bl	8006d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c38:	f000 fbd4 	bl	80073e4 <xTaskResumeAll>
 8006c3c:	e77a      	b.n	8006b34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c40:	f000 f8a0 	bl	8006d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c44:	f000 fbce 	bl	80073e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c4a:	f000 f8ed 	bl	8006e28 <prvIsQueueEmpty>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f43f af6f 	beq.w	8006b34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c56:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3730      	adds	r7, #48	@ 0x30
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10d      	bne.n	8006c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d14d      	bne.n	8006d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 ff9e 	bl	8007bd0 <xTaskPriorityDisinherit>
 8006c94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	609a      	str	r2, [r3, #8]
 8006c9c:	e043      	b.n	8006d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d119      	bne.n	8006cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6858      	ldr	r0, [r3, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cac:	461a      	mov	r2, r3
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	f004 fc9d 	bl	800b5ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cbc:	441a      	add	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d32b      	bcc.n	8006d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	e026      	b.n	8006d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68d8      	ldr	r0, [r3, #12]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	f004 fc83 	bl	800b5ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf0:	425b      	negs	r3, r3
 8006cf2:	441a      	add	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d207      	bcs.n	8006d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0c:	425b      	negs	r3, r3
 8006d0e:	441a      	add	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d105      	bne.n	8006d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006d2e:	697b      	ldr	r3, [r7, #20]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d018      	beq.n	8006d7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68da      	ldr	r2, [r3, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	441a      	add	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d303      	bcc.n	8006d6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68d9      	ldr	r1, [r3, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	461a      	mov	r2, r3
 8006d76:	6838      	ldr	r0, [r7, #0]
 8006d78:	f004 fc39 	bl	800b5ee <memcpy>
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d8c:	f7ff fabc 	bl	8006308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d98:	e011      	b.n	8006dbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d012      	beq.n	8006dc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3324      	adds	r3, #36	@ 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fd34 	bl	8007814 <xTaskRemoveFromEventList>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006db2:	f000 fe0d 	bl	80079d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dce9      	bgt.n	8006d9a <prvUnlockQueue+0x16>
 8006dc6:	e000      	b.n	8006dca <prvUnlockQueue+0x46>
					break;
 8006dc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	22ff      	movs	r2, #255	@ 0xff
 8006dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006dd2:	f7ff facb 	bl	800636c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dd6:	f7ff fa97 	bl	8006308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006de0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006de2:	e011      	b.n	8006e08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d012      	beq.n	8006e12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3310      	adds	r3, #16
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fd0f 	bl	8007814 <xTaskRemoveFromEventList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006dfc:	f000 fde8 	bl	80079d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dce9      	bgt.n	8006de4 <prvUnlockQueue+0x60>
 8006e10:	e000      	b.n	8006e14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	22ff      	movs	r2, #255	@ 0xff
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006e1c:	f7ff faa6 	bl	800636c <vPortExitCritical>
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e30:	f7ff fa6a 	bl	8006308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	e001      	b.n	8006e46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e46:	f7ff fa91 	bl	800636c <vPortExitCritical>

	return xReturn;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e5c:	f7ff fa54 	bl	8006308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d102      	bne.n	8006e72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e001      	b.n	8006e76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e76:	f7ff fa79 	bl	800636c <vPortExitCritical>

	return xReturn;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	e014      	b.n	8006ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e94:	4a0f      	ldr	r2, [pc, #60]	@ (8006ed4 <vQueueAddToRegistry+0x50>)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ea0:	490c      	ldr	r1, [pc, #48]	@ (8006ed4 <vQueueAddToRegistry+0x50>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed4 <vQueueAddToRegistry+0x50>)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006eb6:	e006      	b.n	8006ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b07      	cmp	r3, #7
 8006ec2:	d9e7      	bls.n	8006e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ec4:	bf00      	nop
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	24004bac 	.word	0x24004bac

08006ed8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ee8:	f7ff fa0e 	bl	8006308 <vPortEnterCritical>
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ef2:	b25b      	sxtb	r3, r3
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ef8:	d103      	bne.n	8006f02 <vQueueWaitForMessageRestricted+0x2a>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f08:	b25b      	sxtb	r3, r3
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f0e:	d103      	bne.n	8006f18 <vQueueWaitForMessageRestricted+0x40>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f18:	f7ff fa28 	bl	800636c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	3324      	adds	r3, #36	@ 0x24
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fc45 	bl	80077bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f32:	6978      	ldr	r0, [r7, #20]
 8006f34:	f7ff ff26 	bl	8006d84 <prvUnlockQueue>
	}
 8006f38:	bf00      	nop
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08e      	sub	sp, #56	@ 0x38
 8006f44:	af04      	add	r7, sp, #16
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	623b      	str	r3, [r7, #32]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10b      	bne.n	8006f8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	61fb      	str	r3, [r7, #28]
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
 8006f88:	e7fd      	b.n	8006f86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f8a:	235c      	movs	r3, #92	@ 0x5c
 8006f8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b5c      	cmp	r3, #92	@ 0x5c
 8006f92:	d00b      	beq.n	8006fac <xTaskCreateStatic+0x6c>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	61bb      	str	r3, [r7, #24]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01e      	beq.n	8006ff2 <xTaskCreateStatic+0xb2>
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01b      	beq.n	8006ff2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9303      	str	r3, [sp, #12]
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	9302      	str	r3, [sp, #8]
 8006fd4:	f107 0314 	add.w	r3, r7, #20
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f850 	bl	800708a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006fec:	f000 f8de 	bl	80071ac <prvAddNewTaskToReadyList>
 8006ff0:	e001      	b.n	8006ff6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ff6:	697b      	ldr	r3, [r7, #20]
	}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3728      	adds	r7, #40	@ 0x28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	@ 0x30
 8007004:	af04      	add	r7, sp, #16
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007010:	88fb      	ldrh	r3, [r7, #6]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fda3 	bl	8005b60 <pvPortMalloc>
 800701a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00e      	beq.n	8007040 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007022:	205c      	movs	r0, #92	@ 0x5c
 8007024:	f7fe fd9c 	bl	8005b60 <pvPortMalloc>
 8007028:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	631a      	str	r2, [r3, #48]	@ 0x30
 8007036:	e005      	b.n	8007044 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007038:	6978      	ldr	r0, [r7, #20]
 800703a:	f7fe fe5f 	bl	8005cfc <vPortFree>
 800703e:	e001      	b.n	8007044 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007040:	2300      	movs	r3, #0
 8007042:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d017      	beq.n	800707a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	2300      	movs	r3, #0
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f80e 	bl	800708a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800706e:	69f8      	ldr	r0, [r7, #28]
 8007070:	f000 f89c 	bl	80071ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007074:	2301      	movs	r3, #1
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e002      	b.n	8007080 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800707a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800707e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007080:	69bb      	ldr	r3, [r7, #24]
	}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b088      	sub	sp, #32
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	461a      	mov	r2, r3
 80070a2:	21a5      	movs	r1, #165	@ 0xa5
 80070a4:	f004 fa5d 	bl	800b562 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80070b2:	440b      	add	r3, r1
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f023 0307 	bic.w	r3, r3, #7
 80070c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00b      	beq.n	80070e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	617b      	str	r3, [r7, #20]
}
 80070de:	bf00      	nop
 80070e0:	bf00      	nop
 80070e2:	e7fd      	b.n	80070e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01f      	beq.n	800712a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ea:	2300      	movs	r3, #0
 80070ec:	61fb      	str	r3, [r7, #28]
 80070ee:	e012      	b.n	8007116 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	4413      	add	r3, r2
 80070f6:	7819      	ldrb	r1, [r3, #0]
 80070f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	3334      	adds	r3, #52	@ 0x34
 8007100:	460a      	mov	r2, r1
 8007102:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	4413      	add	r3, r2
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	3301      	adds	r3, #1
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b0f      	cmp	r3, #15
 800711a:	d9e9      	bls.n	80070f0 <prvInitialiseNewTask+0x66>
 800711c:	e000      	b.n	8007120 <prvInitialiseNewTask+0x96>
			{
				break;
 800711e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007128:	e003      	b.n	8007132 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	2b37      	cmp	r3, #55	@ 0x37
 8007136:	d901      	bls.n	800713c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007138:	2337      	movs	r3, #55	@ 0x37
 800713a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007140:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007146:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	2200      	movs	r2, #0
 800714c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	3304      	adds	r3, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe ff12 	bl	8005f7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	3318      	adds	r3, #24
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe ff0d 	bl	8005f7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007166:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007176:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	68f9      	ldr	r1, [r7, #12]
 800718a:	69b8      	ldr	r0, [r7, #24]
 800718c:	f7fe ff8a 	bl	80060a4 <pxPortInitialiseStack>
 8007190:	4602      	mov	r2, r0
 8007192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007194:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071a2:	bf00      	nop
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071b4:	f7ff f8a8 	bl	8006308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007270 <prvAddNewTaskToReadyList+0xc4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	4a2c      	ldr	r2, [pc, #176]	@ (8007270 <prvAddNewTaskToReadyList+0xc4>)
 80071c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007274 <prvAddNewTaskToReadyList+0xc8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007274 <prvAddNewTaskToReadyList+0xc8>)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071d0:	4b27      	ldr	r3, [pc, #156]	@ (8007270 <prvAddNewTaskToReadyList+0xc4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d110      	bne.n	80071fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071d8:	f000 fc1e 	bl	8007a18 <prvInitialiseTaskLists>
 80071dc:	e00d      	b.n	80071fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071de:	4b26      	ldr	r3, [pc, #152]	@ (8007278 <prvAddNewTaskToReadyList+0xcc>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071e6:	4b23      	ldr	r3, [pc, #140]	@ (8007274 <prvAddNewTaskToReadyList+0xc8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d802      	bhi.n	80071fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007274 <prvAddNewTaskToReadyList+0xc8>)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071fa:	4b20      	ldr	r3, [pc, #128]	@ (800727c <prvAddNewTaskToReadyList+0xd0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3301      	adds	r3, #1
 8007200:	4a1e      	ldr	r2, [pc, #120]	@ (800727c <prvAddNewTaskToReadyList+0xd0>)
 8007202:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007204:	4b1d      	ldr	r3, [pc, #116]	@ (800727c <prvAddNewTaskToReadyList+0xd0>)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007210:	4b1b      	ldr	r3, [pc, #108]	@ (8007280 <prvAddNewTaskToReadyList+0xd4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d903      	bls.n	8007220 <prvAddNewTaskToReadyList+0x74>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	4a18      	ldr	r2, [pc, #96]	@ (8007280 <prvAddNewTaskToReadyList+0xd4>)
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4a15      	ldr	r2, [pc, #84]	@ (8007284 <prvAddNewTaskToReadyList+0xd8>)
 800722e:	441a      	add	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3304      	adds	r3, #4
 8007234:	4619      	mov	r1, r3
 8007236:	4610      	mov	r0, r2
 8007238:	f7fe fead 	bl	8005f96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800723c:	f7ff f896 	bl	800636c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007240:	4b0d      	ldr	r3, [pc, #52]	@ (8007278 <prvAddNewTaskToReadyList+0xcc>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00e      	beq.n	8007266 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007248:	4b0a      	ldr	r3, [pc, #40]	@ (8007274 <prvAddNewTaskToReadyList+0xc8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	429a      	cmp	r2, r3
 8007254:	d207      	bcs.n	8007266 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <prvAddNewTaskToReadyList+0xdc>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	240050c0 	.word	0x240050c0
 8007274:	24004bec 	.word	0x24004bec
 8007278:	240050cc 	.word	0x240050cc
 800727c:	240050dc 	.word	0x240050dc
 8007280:	240050c8 	.word	0x240050c8
 8007284:	24004bf0 	.word	0x24004bf0
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d018      	beq.n	80072d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800729e:	4b14      	ldr	r3, [pc, #80]	@ (80072f0 <vTaskDelay+0x64>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <vTaskDelay+0x32>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80072be:	f000 f883 	bl	80073c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072c2:	2100      	movs	r1, #0
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fcf3 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072ca:	f000 f88b 	bl	80073e4 <xTaskResumeAll>
 80072ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d107      	bne.n	80072e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80072d6:	4b07      	ldr	r3, [pc, #28]	@ (80072f4 <vTaskDelay+0x68>)
 80072d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	240050e8 	.word	0x240050e8
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	@ 0x28
 80072fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072fe:	2300      	movs	r3, #0
 8007300:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007306:	463a      	mov	r2, r7
 8007308:	1d39      	adds	r1, r7, #4
 800730a:	f107 0308 	add.w	r3, r7, #8
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fbf2 	bl	8005af8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	9202      	str	r2, [sp, #8]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	2300      	movs	r3, #0
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	2300      	movs	r3, #0
 8007324:	460a      	mov	r2, r1
 8007326:	4922      	ldr	r1, [pc, #136]	@ (80073b0 <vTaskStartScheduler+0xb8>)
 8007328:	4822      	ldr	r0, [pc, #136]	@ (80073b4 <vTaskStartScheduler+0xbc>)
 800732a:	f7ff fe09 	bl	8006f40 <xTaskCreateStatic>
 800732e:	4603      	mov	r3, r0
 8007330:	4a21      	ldr	r2, [pc, #132]	@ (80073b8 <vTaskStartScheduler+0xc0>)
 8007332:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007334:	4b20      	ldr	r3, [pc, #128]	@ (80073b8 <vTaskStartScheduler+0xc0>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800733c:	2301      	movs	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	e001      	b.n	8007346 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d102      	bne.n	8007352 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800734c:	f000 fd04 	bl	8007d58 <xTimerCreateTimerTask>
 8007350:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d116      	bne.n	8007386 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	613b      	str	r3, [r7, #16]
}
 800736a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800736c:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <vTaskStartScheduler+0xc4>)
 800736e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007372:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007374:	4b12      	ldr	r3, [pc, #72]	@ (80073c0 <vTaskStartScheduler+0xc8>)
 8007376:	2201      	movs	r2, #1
 8007378:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800737a:	4b12      	ldr	r3, [pc, #72]	@ (80073c4 <vTaskStartScheduler+0xcc>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007380:	f7fe ff1e 	bl	80061c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007384:	e00f      	b.n	80073a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800738c:	d10b      	bne.n	80073a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	60fb      	str	r3, [r7, #12]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <vTaskStartScheduler+0xaa>
}
 80073a6:	bf00      	nop
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	0800c1a8 	.word	0x0800c1a8
 80073b4:	080079e9 	.word	0x080079e9
 80073b8:	240050e4 	.word	0x240050e4
 80073bc:	240050e0 	.word	0x240050e0
 80073c0:	240050cc 	.word	0x240050cc
 80073c4:	240050c4 	.word	0x240050c4

080073c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073cc:	4b04      	ldr	r3, [pc, #16]	@ (80073e0 <vTaskSuspendAll+0x18>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3301      	adds	r3, #1
 80073d2:	4a03      	ldr	r2, [pc, #12]	@ (80073e0 <vTaskSuspendAll+0x18>)
 80073d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073d6:	bf00      	nop
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr
 80073e0:	240050e8 	.word	0x240050e8

080073e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073f2:	4b42      	ldr	r3, [pc, #264]	@ (80074fc <xTaskResumeAll+0x118>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <xTaskResumeAll+0x2e>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	603b      	str	r3, [r7, #0]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007412:	f7fe ff79 	bl	8006308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007416:	4b39      	ldr	r3, [pc, #228]	@ (80074fc <xTaskResumeAll+0x118>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3b01      	subs	r3, #1
 800741c:	4a37      	ldr	r2, [pc, #220]	@ (80074fc <xTaskResumeAll+0x118>)
 800741e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007420:	4b36      	ldr	r3, [pc, #216]	@ (80074fc <xTaskResumeAll+0x118>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d162      	bne.n	80074ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007428:	4b35      	ldr	r3, [pc, #212]	@ (8007500 <xTaskResumeAll+0x11c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d05e      	beq.n	80074ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007430:	e02f      	b.n	8007492 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007432:	4b34      	ldr	r3, [pc, #208]	@ (8007504 <xTaskResumeAll+0x120>)
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3318      	adds	r3, #24
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fe06 	bl	8006050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3304      	adds	r3, #4
 8007448:	4618      	mov	r0, r3
 800744a:	f7fe fe01 	bl	8006050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007452:	4b2d      	ldr	r3, [pc, #180]	@ (8007508 <xTaskResumeAll+0x124>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d903      	bls.n	8007462 <xTaskResumeAll+0x7e>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	4a2a      	ldr	r2, [pc, #168]	@ (8007508 <xTaskResumeAll+0x124>)
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4a27      	ldr	r2, [pc, #156]	@ (800750c <xTaskResumeAll+0x128>)
 8007470:	441a      	add	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f7fe fd8c 	bl	8005f96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007482:	4b23      	ldr	r3, [pc, #140]	@ (8007510 <xTaskResumeAll+0x12c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	429a      	cmp	r2, r3
 800748a:	d302      	bcc.n	8007492 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800748c:	4b21      	ldr	r3, [pc, #132]	@ (8007514 <xTaskResumeAll+0x130>)
 800748e:	2201      	movs	r2, #1
 8007490:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007492:	4b1c      	ldr	r3, [pc, #112]	@ (8007504 <xTaskResumeAll+0x120>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1cb      	bne.n	8007432 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074a0:	f000 fb58 	bl	8007b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80074a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007518 <xTaskResumeAll+0x134>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d010      	beq.n	80074d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80074b0:	f000 f846 	bl	8007540 <xTaskIncrementTick>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80074ba:	4b16      	ldr	r3, [pc, #88]	@ (8007514 <xTaskResumeAll+0x130>)
 80074bc:	2201      	movs	r2, #1
 80074be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f1      	bne.n	80074b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80074cc:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <xTaskResumeAll+0x134>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074d2:	4b10      	ldr	r3, [pc, #64]	@ (8007514 <xTaskResumeAll+0x130>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d009      	beq.n	80074ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074da:	2301      	movs	r3, #1
 80074dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074de:	4b0f      	ldr	r3, [pc, #60]	@ (800751c <xTaskResumeAll+0x138>)
 80074e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074ee:	f7fe ff3d 	bl	800636c <vPortExitCritical>

	return xAlreadyYielded;
 80074f2:	68bb      	ldr	r3, [r7, #8]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	240050e8 	.word	0x240050e8
 8007500:	240050c0 	.word	0x240050c0
 8007504:	24005080 	.word	0x24005080
 8007508:	240050c8 	.word	0x240050c8
 800750c:	24004bf0 	.word	0x24004bf0
 8007510:	24004bec 	.word	0x24004bec
 8007514:	240050d4 	.word	0x240050d4
 8007518:	240050d0 	.word	0x240050d0
 800751c:	e000ed04 	.word	0xe000ed04

08007520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007526:	4b05      	ldr	r3, [pc, #20]	@ (800753c <xTaskGetTickCount+0x1c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800752c:	687b      	ldr	r3, [r7, #4]
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	240050c4 	.word	0x240050c4

08007540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007546:	2300      	movs	r3, #0
 8007548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800754a:	4b4f      	ldr	r3, [pc, #316]	@ (8007688 <xTaskIncrementTick+0x148>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	f040 8090 	bne.w	8007674 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007554:	4b4d      	ldr	r3, [pc, #308]	@ (800768c <xTaskIncrementTick+0x14c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800755c:	4a4b      	ldr	r2, [pc, #300]	@ (800768c <xTaskIncrementTick+0x14c>)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d121      	bne.n	80075ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007568:	4b49      	ldr	r3, [pc, #292]	@ (8007690 <xTaskIncrementTick+0x150>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	603b      	str	r3, [r7, #0]
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	e7fd      	b.n	8007586 <xTaskIncrementTick+0x46>
 800758a:	4b41      	ldr	r3, [pc, #260]	@ (8007690 <xTaskIncrementTick+0x150>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	4b40      	ldr	r3, [pc, #256]	@ (8007694 <xTaskIncrementTick+0x154>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a3e      	ldr	r2, [pc, #248]	@ (8007690 <xTaskIncrementTick+0x150>)
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	4a3e      	ldr	r2, [pc, #248]	@ (8007694 <xTaskIncrementTick+0x154>)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	4b3e      	ldr	r3, [pc, #248]	@ (8007698 <xTaskIncrementTick+0x158>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007698 <xTaskIncrementTick+0x158>)
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	f000 fad4 	bl	8007b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075ac:	4b3b      	ldr	r3, [pc, #236]	@ (800769c <xTaskIncrementTick+0x15c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d349      	bcc.n	800764a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075b6:	4b36      	ldr	r3, [pc, #216]	@ (8007690 <xTaskIncrementTick+0x150>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c0:	4b36      	ldr	r3, [pc, #216]	@ (800769c <xTaskIncrementTick+0x15c>)
 80075c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075c6:	601a      	str	r2, [r3, #0]
					break;
 80075c8:	e03f      	b.n	800764a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ca:	4b31      	ldr	r3, [pc, #196]	@ (8007690 <xTaskIncrementTick+0x150>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d203      	bcs.n	80075ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075e2:	4a2e      	ldr	r2, [pc, #184]	@ (800769c <xTaskIncrementTick+0x15c>)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075e8:	e02f      	b.n	800764a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fd2e 	bl	8006050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	3318      	adds	r3, #24
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fd25 	bl	8006050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760a:	4b25      	ldr	r3, [pc, #148]	@ (80076a0 <xTaskIncrementTick+0x160>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d903      	bls.n	800761a <xTaskIncrementTick+0xda>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007616:	4a22      	ldr	r2, [pc, #136]	@ (80076a0 <xTaskIncrementTick+0x160>)
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4a1f      	ldr	r2, [pc, #124]	@ (80076a4 <xTaskIncrementTick+0x164>)
 8007628:	441a      	add	r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	3304      	adds	r3, #4
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f7fe fcb0 	bl	8005f96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800763a:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <xTaskIncrementTick+0x168>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007640:	429a      	cmp	r2, r3
 8007642:	d3b8      	bcc.n	80075b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007648:	e7b5      	b.n	80075b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800764a:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <xTaskIncrementTick+0x168>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007650:	4914      	ldr	r1, [pc, #80]	@ (80076a4 <xTaskIncrementTick+0x164>)
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d901      	bls.n	8007666 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007662:	2301      	movs	r3, #1
 8007664:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007666:	4b11      	ldr	r3, [pc, #68]	@ (80076ac <xTaskIncrementTick+0x16c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800766e:	2301      	movs	r3, #1
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	e004      	b.n	800767e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007674:	4b0e      	ldr	r3, [pc, #56]	@ (80076b0 <xTaskIncrementTick+0x170>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a0d      	ldr	r2, [pc, #52]	@ (80076b0 <xTaskIncrementTick+0x170>)
 800767c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800767e:	697b      	ldr	r3, [r7, #20]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	240050e8 	.word	0x240050e8
 800768c:	240050c4 	.word	0x240050c4
 8007690:	24005078 	.word	0x24005078
 8007694:	2400507c 	.word	0x2400507c
 8007698:	240050d8 	.word	0x240050d8
 800769c:	240050e0 	.word	0x240050e0
 80076a0:	240050c8 	.word	0x240050c8
 80076a4:	24004bf0 	.word	0x24004bf0
 80076a8:	24004bec 	.word	0x24004bec
 80076ac:	240050d4 	.word	0x240050d4
 80076b0:	240050d0 	.word	0x240050d0

080076b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076ba:	4b28      	ldr	r3, [pc, #160]	@ (800775c <vTaskSwitchContext+0xa8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076c2:	4b27      	ldr	r3, [pc, #156]	@ (8007760 <vTaskSwitchContext+0xac>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076c8:	e042      	b.n	8007750 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80076ca:	4b25      	ldr	r3, [pc, #148]	@ (8007760 <vTaskSwitchContext+0xac>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076d0:	4b24      	ldr	r3, [pc, #144]	@ (8007764 <vTaskSwitchContext+0xb0>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60fb      	str	r3, [r7, #12]
 80076d6:	e011      	b.n	80076fc <vTaskSwitchContext+0x48>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <vTaskSwitchContext+0x3e>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	491a      	ldr	r1, [pc, #104]	@ (8007768 <vTaskSwitchContext+0xb4>)
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0e3      	beq.n	80076d8 <vTaskSwitchContext+0x24>
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4a13      	ldr	r2, [pc, #76]	@ (8007768 <vTaskSwitchContext+0xb4>)
 800771c:	4413      	add	r3, r2
 800771e:	60bb      	str	r3, [r7, #8]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	605a      	str	r2, [r3, #4]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	3308      	adds	r3, #8
 8007732:	429a      	cmp	r2, r3
 8007734:	d104      	bne.n	8007740 <vTaskSwitchContext+0x8c>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	605a      	str	r2, [r3, #4]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	4a09      	ldr	r2, [pc, #36]	@ (800776c <vTaskSwitchContext+0xb8>)
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	4a06      	ldr	r2, [pc, #24]	@ (8007764 <vTaskSwitchContext+0xb0>)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6013      	str	r3, [r2, #0]
}
 8007750:	bf00      	nop
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	240050e8 	.word	0x240050e8
 8007760:	240050d4 	.word	0x240050d4
 8007764:	240050c8 	.word	0x240050c8
 8007768:	24004bf0 	.word	0x24004bf0
 800776c:	24004bec 	.word	0x24004bec

08007770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10b      	bne.n	8007798 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	bf00      	nop
 8007796:	e7fd      	b.n	8007794 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007798:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <vTaskPlaceOnEventList+0x48>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3318      	adds	r3, #24
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe fc1c 	bl	8005fde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077a6:	2101      	movs	r1, #1
 80077a8:	6838      	ldr	r0, [r7, #0]
 80077aa:	f000 fa81 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
}
 80077ae:	bf00      	nop
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	24004bec 	.word	0x24004bec

080077bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10b      	bne.n	80077e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007810 <vTaskPlaceOnEventListRestricted+0x54>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3318      	adds	r3, #24
 80077ec:	4619      	mov	r1, r3
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7fe fbd1 	bl	8005f96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	68b8      	ldr	r0, [r7, #8]
 8007804:	f000 fa54 	bl	8007cb0 <prvAddCurrentTaskToDelayedList>
	}
 8007808:	bf00      	nop
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	24004bec 	.word	0x24004bec

08007814 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10b      	bne.n	8007842 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	60fb      	str	r3, [r7, #12]
}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	e7fd      	b.n	800783e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	3318      	adds	r3, #24
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fc02 	bl	8006050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800784c:	4b1d      	ldr	r3, [pc, #116]	@ (80078c4 <xTaskRemoveFromEventList+0xb0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11d      	bne.n	8007890 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	3304      	adds	r3, #4
 8007858:	4618      	mov	r0, r3
 800785a:	f7fe fbf9 	bl	8006050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007862:	4b19      	ldr	r3, [pc, #100]	@ (80078c8 <xTaskRemoveFromEventList+0xb4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	429a      	cmp	r2, r3
 8007868:	d903      	bls.n	8007872 <xTaskRemoveFromEventList+0x5e>
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	4a16      	ldr	r2, [pc, #88]	@ (80078c8 <xTaskRemoveFromEventList+0xb4>)
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4a13      	ldr	r2, [pc, #76]	@ (80078cc <xTaskRemoveFromEventList+0xb8>)
 8007880:	441a      	add	r2, r3
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f7fe fb84 	bl	8005f96 <vListInsertEnd>
 800788e:	e005      	b.n	800789c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	3318      	adds	r3, #24
 8007894:	4619      	mov	r1, r3
 8007896:	480e      	ldr	r0, [pc, #56]	@ (80078d0 <xTaskRemoveFromEventList+0xbc>)
 8007898:	f7fe fb7d 	bl	8005f96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a0:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <xTaskRemoveFromEventList+0xc0>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d905      	bls.n	80078b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078ae:	4b0a      	ldr	r3, [pc, #40]	@ (80078d8 <xTaskRemoveFromEventList+0xc4>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e001      	b.n	80078ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80078b6:	2300      	movs	r3, #0
 80078b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078ba:	697b      	ldr	r3, [r7, #20]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	240050e8 	.word	0x240050e8
 80078c8:	240050c8 	.word	0x240050c8
 80078cc:	24004bf0 	.word	0x24004bf0
 80078d0:	24005080 	.word	0x24005080
 80078d4:	24004bec 	.word	0x24004bec
 80078d8:	240050d4 	.word	0x240050d4

080078dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078e4:	4b06      	ldr	r3, [pc, #24]	@ (8007900 <vTaskInternalSetTimeOutState+0x24>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <vTaskInternalSetTimeOutState+0x28>)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	605a      	str	r2, [r3, #4]
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	240050d8 	.word	0x240050d8
 8007904:	240050c4 	.word	0x240050c4

08007908 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10b      	bne.n	8007930 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	613b      	str	r3, [r7, #16]
}
 800792a:	bf00      	nop
 800792c:	bf00      	nop
 800792e:	e7fd      	b.n	800792c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10b      	bne.n	800794e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	e7fd      	b.n	800794a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800794e:	f7fe fcdb 	bl	8006308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007952:	4b1d      	ldr	r3, [pc, #116]	@ (80079c8 <xTaskCheckForTimeOut+0xc0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800796a:	d102      	bne.n	8007972 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800796c:	2300      	movs	r3, #0
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	e023      	b.n	80079ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4b15      	ldr	r3, [pc, #84]	@ (80079cc <xTaskCheckForTimeOut+0xc4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d007      	beq.n	800798e <xTaskCheckForTimeOut+0x86>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	429a      	cmp	r2, r3
 8007986:	d302      	bcc.n	800798e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007988:	2301      	movs	r3, #1
 800798a:	61fb      	str	r3, [r7, #28]
 800798c:	e015      	b.n	80079ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	429a      	cmp	r2, r3
 8007996:	d20b      	bcs.n	80079b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7ff ff99 	bl	80078dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	e004      	b.n	80079ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079b6:	2301      	movs	r3, #1
 80079b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079ba:	f7fe fcd7 	bl	800636c <vPortExitCritical>

	return xReturn;
 80079be:	69fb      	ldr	r3, [r7, #28]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3720      	adds	r7, #32
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	240050c4 	.word	0x240050c4
 80079cc:	240050d8 	.word	0x240050d8

080079d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079d0:	b480      	push	{r7}
 80079d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079d4:	4b03      	ldr	r3, [pc, #12]	@ (80079e4 <vTaskMissedYield+0x14>)
 80079d6:	2201      	movs	r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
}
 80079da:	bf00      	nop
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	240050d4 	.word	0x240050d4

080079e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079f0:	f000 f852 	bl	8007a98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079f4:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <prvIdleTask+0x28>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d9f9      	bls.n	80079f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079fc:	4b05      	ldr	r3, [pc, #20]	@ (8007a14 <prvIdleTask+0x2c>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a0c:	e7f0      	b.n	80079f0 <prvIdleTask+0x8>
 8007a0e:	bf00      	nop
 8007a10:	24004bf0 	.word	0x24004bf0
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a1e:	2300      	movs	r3, #0
 8007a20:	607b      	str	r3, [r7, #4]
 8007a22:	e00c      	b.n	8007a3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4a12      	ldr	r2, [pc, #72]	@ (8007a78 <prvInitialiseTaskLists+0x60>)
 8007a30:	4413      	add	r3, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fa82 	bl	8005f3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	607b      	str	r3, [r7, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b37      	cmp	r3, #55	@ 0x37
 8007a42:	d9ef      	bls.n	8007a24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a44:	480d      	ldr	r0, [pc, #52]	@ (8007a7c <prvInitialiseTaskLists+0x64>)
 8007a46:	f7fe fa79 	bl	8005f3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a4a:	480d      	ldr	r0, [pc, #52]	@ (8007a80 <prvInitialiseTaskLists+0x68>)
 8007a4c:	f7fe fa76 	bl	8005f3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a50:	480c      	ldr	r0, [pc, #48]	@ (8007a84 <prvInitialiseTaskLists+0x6c>)
 8007a52:	f7fe fa73 	bl	8005f3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a56:	480c      	ldr	r0, [pc, #48]	@ (8007a88 <prvInitialiseTaskLists+0x70>)
 8007a58:	f7fe fa70 	bl	8005f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a5c:	480b      	ldr	r0, [pc, #44]	@ (8007a8c <prvInitialiseTaskLists+0x74>)
 8007a5e:	f7fe fa6d 	bl	8005f3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a62:	4b0b      	ldr	r3, [pc, #44]	@ (8007a90 <prvInitialiseTaskLists+0x78>)
 8007a64:	4a05      	ldr	r2, [pc, #20]	@ (8007a7c <prvInitialiseTaskLists+0x64>)
 8007a66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a68:	4b0a      	ldr	r3, [pc, #40]	@ (8007a94 <prvInitialiseTaskLists+0x7c>)
 8007a6a:	4a05      	ldr	r2, [pc, #20]	@ (8007a80 <prvInitialiseTaskLists+0x68>)
 8007a6c:	601a      	str	r2, [r3, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	24004bf0 	.word	0x24004bf0
 8007a7c:	24005050 	.word	0x24005050
 8007a80:	24005064 	.word	0x24005064
 8007a84:	24005080 	.word	0x24005080
 8007a88:	24005094 	.word	0x24005094
 8007a8c:	240050ac 	.word	0x240050ac
 8007a90:	24005078 	.word	0x24005078
 8007a94:	2400507c 	.word	0x2400507c

08007a98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a9e:	e019      	b.n	8007ad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007aa0:	f7fe fc32 	bl	8006308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa4:	4b10      	ldr	r3, [pc, #64]	@ (8007ae8 <prvCheckTasksWaitingTermination+0x50>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe facd 	bl	8006050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <prvCheckTasksWaitingTermination+0x54>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	4a0b      	ldr	r2, [pc, #44]	@ (8007aec <prvCheckTasksWaitingTermination+0x54>)
 8007abe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8007af0 <prvCheckTasksWaitingTermination+0x58>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8007af0 <prvCheckTasksWaitingTermination+0x58>)
 8007ac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aca:	f7fe fc4f 	bl	800636c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f810 	bl	8007af4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ad4:	4b06      	ldr	r3, [pc, #24]	@ (8007af0 <prvCheckTasksWaitingTermination+0x58>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e1      	bne.n	8007aa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	24005094 	.word	0x24005094
 8007aec:	240050c0 	.word	0x240050c0
 8007af0:	240050a8 	.word	0x240050a8

08007af4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d108      	bne.n	8007b18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe f8f6 	bl	8005cfc <vPortFree>
				vPortFree( pxTCB );
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fe f8f3 	bl	8005cfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b16:	e019      	b.n	8007b4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d103      	bne.n	8007b2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fe f8ea 	bl	8005cfc <vPortFree>
	}
 8007b28:	e010      	b.n	8007b4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d00b      	beq.n	8007b4c <prvDeleteTCB+0x58>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	60fb      	str	r3, [r7, #12]
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	e7fd      	b.n	8007b48 <prvDeleteTCB+0x54>
	}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b8c <prvResetNextTaskUnblockTime+0x38>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d104      	bne.n	8007b6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b64:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <prvResetNextTaskUnblockTime+0x3c>)
 8007b66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b6c:	e008      	b.n	8007b80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6e:	4b07      	ldr	r3, [pc, #28]	@ (8007b8c <prvResetNextTaskUnblockTime+0x38>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	4a04      	ldr	r2, [pc, #16]	@ (8007b90 <prvResetNextTaskUnblockTime+0x3c>)
 8007b7e:	6013      	str	r3, [r2, #0]
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	24005078 	.word	0x24005078
 8007b90:	240050e0 	.word	0x240050e0

08007b94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc8 <xTaskGetSchedulerState+0x34>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	607b      	str	r3, [r7, #4]
 8007ba6:	e008      	b.n	8007bba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba8:	4b08      	ldr	r3, [pc, #32]	@ (8007bcc <xTaskGetSchedulerState+0x38>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	e001      	b.n	8007bba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bba:	687b      	ldr	r3, [r7, #4]
	}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	240050cc 	.word	0x240050cc
 8007bcc:	240050e8 	.word	0x240050e8

08007bd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d058      	beq.n	8007c98 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007be6:	4b2f      	ldr	r3, [pc, #188]	@ (8007ca4 <xTaskPriorityDisinherit+0xd4>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d00b      	beq.n	8007c08 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60fb      	str	r3, [r7, #12]
}
 8007c02:	bf00      	nop
 8007c04:	bf00      	nop
 8007c06:	e7fd      	b.n	8007c04 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10b      	bne.n	8007c28 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	60bb      	str	r3, [r7, #8]
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	e7fd      	b.n	8007c24 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c2c:	1e5a      	subs	r2, r3, #1
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d02c      	beq.n	8007c98 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d128      	bne.n	8007c98 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fa00 	bl	8006050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca8 <xTaskPriorityDisinherit+0xd8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d903      	bls.n	8007c78 <xTaskPriorityDisinherit+0xa8>
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca8 <xTaskPriorityDisinherit+0xd8>)
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4a09      	ldr	r2, [pc, #36]	@ (8007cac <xTaskPriorityDisinherit+0xdc>)
 8007c86:	441a      	add	r2, r3
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7fe f981 	bl	8005f96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c98:	697b      	ldr	r3, [r7, #20]
	}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	24004bec 	.word	0x24004bec
 8007ca8:	240050c8 	.word	0x240050c8
 8007cac:	24004bf0 	.word	0x24004bf0

08007cb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cba:	4b21      	ldr	r3, [pc, #132]	@ (8007d40 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc0:	4b20      	ldr	r3, [pc, #128]	@ (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe f9c2 	bl	8006050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cd2:	d10a      	bne.n	8007cea <prvAddCurrentTaskToDelayedList+0x3a>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cda:	4b1a      	ldr	r3, [pc, #104]	@ (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4819      	ldr	r0, [pc, #100]	@ (8007d48 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ce4:	f7fe f957 	bl	8005f96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ce8:	e026      	b.n	8007d38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4413      	add	r3, r2
 8007cf0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cf2:	4b14      	ldr	r3, [pc, #80]	@ (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d209      	bcs.n	8007d16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d02:	4b12      	ldr	r3, [pc, #72]	@ (8007d4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b0f      	ldr	r3, [pc, #60]	@ (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7fe f965 	bl	8005fde <vListInsert>
}
 8007d14:	e010      	b.n	8007d38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d16:	4b0e      	ldr	r3, [pc, #56]	@ (8007d50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fe f95b 	bl	8005fde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d28:	4b0a      	ldr	r3, [pc, #40]	@ (8007d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d202      	bcs.n	8007d38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d32:	4a08      	ldr	r2, [pc, #32]	@ (8007d54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	6013      	str	r3, [r2, #0]
}
 8007d38:	bf00      	nop
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	240050c4 	.word	0x240050c4
 8007d44:	24004bec 	.word	0x24004bec
 8007d48:	240050ac 	.word	0x240050ac
 8007d4c:	2400507c 	.word	0x2400507c
 8007d50:	24005078 	.word	0x24005078
 8007d54:	240050e0 	.word	0x240050e0

08007d58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	@ 0x28
 8007d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d62:	f000 fb13 	bl	800838c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d66:	4b1d      	ldr	r3, [pc, #116]	@ (8007ddc <xTimerCreateTimerTask+0x84>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d021      	beq.n	8007db2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d76:	1d3a      	adds	r2, r7, #4
 8007d78:	f107 0108 	add.w	r1, r7, #8
 8007d7c:	f107 030c 	add.w	r3, r7, #12
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fd fed3 	bl	8005b2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	9202      	str	r2, [sp, #8]
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	2302      	movs	r3, #2
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	460a      	mov	r2, r1
 8007d98:	4911      	ldr	r1, [pc, #68]	@ (8007de0 <xTimerCreateTimerTask+0x88>)
 8007d9a:	4812      	ldr	r0, [pc, #72]	@ (8007de4 <xTimerCreateTimerTask+0x8c>)
 8007d9c:	f7ff f8d0 	bl	8006f40 <xTaskCreateStatic>
 8007da0:	4603      	mov	r3, r0
 8007da2:	4a11      	ldr	r2, [pc, #68]	@ (8007de8 <xTimerCreateTimerTask+0x90>)
 8007da4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007da6:	4b10      	ldr	r3, [pc, #64]	@ (8007de8 <xTimerCreateTimerTask+0x90>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007dae:	2301      	movs	r3, #1
 8007db0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10b      	bne.n	8007dd0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	613b      	str	r3, [r7, #16]
}
 8007dca:	bf00      	nop
 8007dcc:	bf00      	nop
 8007dce:	e7fd      	b.n	8007dcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dd0:	697b      	ldr	r3, [r7, #20]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	2400511c 	.word	0x2400511c
 8007de0:	0800c1b0 	.word	0x0800c1b0
 8007de4:	08007f25 	.word	0x08007f25
 8007de8:	24005120 	.word	0x24005120

08007dec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	@ 0x28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10b      	bne.n	8007e1c <xTimerGenericCommand+0x30>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	623b      	str	r3, [r7, #32]
}
 8007e16:	bf00      	nop
 8007e18:	bf00      	nop
 8007e1a:	e7fd      	b.n	8007e18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e1c:	4b19      	ldr	r3, [pc, #100]	@ (8007e84 <xTimerGenericCommand+0x98>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d02a      	beq.n	8007e7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	dc18      	bgt.n	8007e68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e36:	f7ff fead 	bl	8007b94 <xTaskGetSchedulerState>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d109      	bne.n	8007e54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e40:	4b10      	ldr	r3, [pc, #64]	@ (8007e84 <xTimerGenericCommand+0x98>)
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	f107 0110 	add.w	r1, r7, #16
 8007e48:	2300      	movs	r3, #0
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4c:	f7fe fc88 	bl	8006760 <xQueueGenericSend>
 8007e50:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e52:	e012      	b.n	8007e7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e54:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <xTimerGenericCommand+0x98>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	f107 0110 	add.w	r1, r7, #16
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f7fe fc7e 	bl	8006760 <xQueueGenericSend>
 8007e64:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e66:	e008      	b.n	8007e7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e68:	4b06      	ldr	r3, [pc, #24]	@ (8007e84 <xTimerGenericCommand+0x98>)
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	f107 0110 	add.w	r1, r7, #16
 8007e70:	2300      	movs	r3, #0
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	f7fe fd76 	bl	8006964 <xQueueGenericSendFromISR>
 8007e78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3728      	adds	r7, #40	@ 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	2400511c 	.word	0x2400511c

08007e88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e92:	4b23      	ldr	r3, [pc, #140]	@ (8007f20 <prvProcessExpiredTimer+0x98>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe f8d5 	bl	8006050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d023      	beq.n	8007efc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	699a      	ldr	r2, [r3, #24]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	18d1      	adds	r1, r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	6978      	ldr	r0, [r7, #20]
 8007ec2:	f000 f8d5 	bl	8008070 <prvInsertTimerInActiveList>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d020      	beq.n	8007f0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	6978      	ldr	r0, [r7, #20]
 8007ed8:	f7ff ff88 	bl	8007dec <xTimerGenericCommand>
 8007edc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d114      	bne.n	8007f0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	e7fd      	b.n	8007ef8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	6978      	ldr	r0, [r7, #20]
 8007f14:	4798      	blx	r3
}
 8007f16:	bf00      	nop
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	24005114 	.word	0x24005114

08007f24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f2c:	f107 0308 	add.w	r3, r7, #8
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 f859 	bl	8007fe8 <prvGetNextExpireTime>
 8007f36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f805 	bl	8007f4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f42:	f000 f8d7 	bl	80080f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f46:	bf00      	nop
 8007f48:	e7f0      	b.n	8007f2c <prvTimerTask+0x8>
	...

08007f4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f56:	f7ff fa37 	bl	80073c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f5a:	f107 0308 	add.w	r3, r7, #8
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f866 	bl	8008030 <prvSampleTimeNow>
 8007f64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d130      	bne.n	8007fce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <prvProcessTimerOrBlockTask+0x3c>
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d806      	bhi.n	8007f88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f7a:	f7ff fa33 	bl	80073e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ff81 	bl	8007e88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f86:	e024      	b.n	8007fd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d008      	beq.n	8007fa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f8e:	4b13      	ldr	r3, [pc, #76]	@ (8007fdc <prvProcessTimerOrBlockTask+0x90>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <prvProcessTimerOrBlockTask+0x50>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e000      	b.n	8007f9e <prvProcessTimerOrBlockTask+0x52>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8007fe0 <prvProcessTimerOrBlockTask+0x94>)
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4619      	mov	r1, r3
 8007fae:	f7fe ff93 	bl	8006ed8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fb2:	f7ff fa17 	bl	80073e4 <xTaskResumeAll>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fbc:	4b09      	ldr	r3, [pc, #36]	@ (8007fe4 <prvProcessTimerOrBlockTask+0x98>)
 8007fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	f3bf 8f6f 	isb	sy
}
 8007fcc:	e001      	b.n	8007fd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fce:	f7ff fa09 	bl	80073e4 <xTaskResumeAll>
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	24005118 	.word	0x24005118
 8007fe0:	2400511c 	.word	0x2400511c
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800802c <prvGetNextExpireTime+0x44>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <prvGetNextExpireTime+0x16>
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	e000      	b.n	8008000 <prvGetNextExpireTime+0x18>
 8007ffe:	2200      	movs	r2, #0
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d105      	bne.n	8008018 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800800c:	4b07      	ldr	r3, [pc, #28]	@ (800802c <prvGetNextExpireTime+0x44>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e001      	b.n	800801c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800801c:	68fb      	ldr	r3, [r7, #12]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	24005114 	.word	0x24005114

08008030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008038:	f7ff fa72 	bl	8007520 <xTaskGetTickCount>
 800803c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800803e:	4b0b      	ldr	r3, [pc, #44]	@ (800806c <prvSampleTimeNow+0x3c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	429a      	cmp	r2, r3
 8008046:	d205      	bcs.n	8008054 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008048:	f000 f93a 	bl	80082c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	e002      	b.n	800805a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800805a:	4a04      	ldr	r2, [pc, #16]	@ (800806c <prvSampleTimeNow+0x3c>)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008060:	68fb      	ldr	r3, [r7, #12]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	24005124 	.word	0x24005124

08008070 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d812      	bhi.n	80080bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	1ad2      	subs	r2, r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d302      	bcc.n	80080aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	e01b      	b.n	80080e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80080aa:	4b10      	ldr	r3, [pc, #64]	@ (80080ec <prvInsertTimerInActiveList+0x7c>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f7fd ff92 	bl	8005fde <vListInsert>
 80080ba:	e012      	b.n	80080e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d206      	bcs.n	80080d2 <prvInsertTimerInActiveList+0x62>
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e007      	b.n	80080e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080d2:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <prvInsertTimerInActiveList+0x80>)
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3304      	adds	r3, #4
 80080da:	4619      	mov	r1, r3
 80080dc:	4610      	mov	r0, r2
 80080de:	f7fd ff7e 	bl	8005fde <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080e2:	697b      	ldr	r3, [r7, #20]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	24005118 	.word	0x24005118
 80080f0:	24005114 	.word	0x24005114

080080f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08e      	sub	sp, #56	@ 0x38
 80080f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080fa:	e0ce      	b.n	800829a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da19      	bge.n	8008136 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008102:	1d3b      	adds	r3, r7, #4
 8008104:	3304      	adds	r3, #4
 8008106:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10b      	bne.n	8008126 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	61fb      	str	r3, [r7, #28]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800812c:	6850      	ldr	r0, [r2, #4]
 800812e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008130:	6892      	ldr	r2, [r2, #8]
 8008132:	4611      	mov	r1, r2
 8008134:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	f2c0 80ae 	blt.w	800829a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800814a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814c:	3304      	adds	r3, #4
 800814e:	4618      	mov	r0, r3
 8008150:	f7fd ff7e 	bl	8006050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008154:	463b      	mov	r3, r7
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff ff6a 	bl	8008030 <prvSampleTimeNow>
 800815c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b09      	cmp	r3, #9
 8008162:	f200 8097 	bhi.w	8008294 <prvProcessReceivedCommands+0x1a0>
 8008166:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <prvProcessReceivedCommands+0x78>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	08008195 	.word	0x08008195
 8008170:	08008195 	.word	0x08008195
 8008174:	08008195 	.word	0x08008195
 8008178:	0800820b 	.word	0x0800820b
 800817c:	0800821f 	.word	0x0800821f
 8008180:	0800826b 	.word	0x0800826b
 8008184:	08008195 	.word	0x08008195
 8008188:	08008195 	.word	0x08008195
 800818c:	0800820b 	.word	0x0800820b
 8008190:	0800821f 	.word	0x0800821f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	18d1      	adds	r1, r2, r3
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081b4:	f7ff ff5c 	bl	8008070 <prvInsertTimerInActiveList>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d06c      	beq.n	8008298 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d061      	beq.n	8008298 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	441a      	add	r2, r3
 80081dc:	2300      	movs	r3, #0
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	2300      	movs	r3, #0
 80081e2:	2100      	movs	r1, #0
 80081e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081e6:	f7ff fe01 	bl	8007dec <xTimerGenericCommand>
 80081ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d152      	bne.n	8008298 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	61bb      	str	r3, [r7, #24]
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	e7fd      	b.n	8008206 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800820a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	b2da      	uxtb	r2, r3
 8008216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008218:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800821c:	e03d      	b.n	800829a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800821e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008224:	f043 0301 	orr.w	r3, r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800822c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d10b      	bne.n	8008256 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	617b      	str	r3, [r7, #20]
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	e7fd      	b.n	8008252 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	18d1      	adds	r1, r2, r3
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008264:	f7ff ff04 	bl	8008070 <prvInsertTimerInActiveList>
					break;
 8008268:	e017      	b.n	800829a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800826a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d103      	bne.n	8008280 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800827a:	f7fd fd3f 	bl	8005cfc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800827e:	e00c      	b.n	800829a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008282:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008286:	f023 0301 	bic.w	r3, r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008292:	e002      	b.n	800829a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <prvProcessReceivedCommands+0x1a6>
					break;
 8008298:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800829a:	4b08      	ldr	r3, [pc, #32]	@ (80082bc <prvProcessReceivedCommands+0x1c8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	1d39      	adds	r1, r7, #4
 80082a0:	2200      	movs	r2, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe fbfc 	bl	8006aa0 <xQueueReceive>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f47f af26 	bne.w	80080fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	3730      	adds	r7, #48	@ 0x30
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	2400511c 	.word	0x2400511c

080082c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082c6:	e049      	b.n	800835c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008384 <prvSwitchTimerLists+0xc4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008384 <prvSwitchTimerLists+0xc4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3304      	adds	r3, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd feb5 	bl	8006050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d02f      	beq.n	800835c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	4413      	add	r3, r2
 8008304:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	429a      	cmp	r2, r3
 800830c:	d90e      	bls.n	800832c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800831a:	4b1a      	ldr	r3, [pc, #104]	@ (8008384 <prvSwitchTimerLists+0xc4>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7fd fe5a 	bl	8005fde <vListInsert>
 800832a:	e017      	b.n	800835c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800832c:	2300      	movs	r3, #0
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2300      	movs	r3, #0
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	2100      	movs	r1, #0
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff fd58 	bl	8007dec <xTimerGenericCommand>
 800833c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10b      	bne.n	800835c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	603b      	str	r3, [r7, #0]
}
 8008356:	bf00      	nop
 8008358:	bf00      	nop
 800835a:	e7fd      	b.n	8008358 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800835c:	4b09      	ldr	r3, [pc, #36]	@ (8008384 <prvSwitchTimerLists+0xc4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1b0      	bne.n	80082c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008366:	4b07      	ldr	r3, [pc, #28]	@ (8008384 <prvSwitchTimerLists+0xc4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800836c:	4b06      	ldr	r3, [pc, #24]	@ (8008388 <prvSwitchTimerLists+0xc8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a04      	ldr	r2, [pc, #16]	@ (8008384 <prvSwitchTimerLists+0xc4>)
 8008372:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008374:	4a04      	ldr	r2, [pc, #16]	@ (8008388 <prvSwitchTimerLists+0xc8>)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6013      	str	r3, [r2, #0]
}
 800837a:	bf00      	nop
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	24005114 	.word	0x24005114
 8008388:	24005118 	.word	0x24005118

0800838c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008392:	f7fd ffb9 	bl	8006308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008396:	4b15      	ldr	r3, [pc, #84]	@ (80083ec <prvCheckForValidListAndQueue+0x60>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d120      	bne.n	80083e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800839e:	4814      	ldr	r0, [pc, #80]	@ (80083f0 <prvCheckForValidListAndQueue+0x64>)
 80083a0:	f7fd fdcc 	bl	8005f3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80083a4:	4813      	ldr	r0, [pc, #76]	@ (80083f4 <prvCheckForValidListAndQueue+0x68>)
 80083a6:	f7fd fdc9 	bl	8005f3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80083aa:	4b13      	ldr	r3, [pc, #76]	@ (80083f8 <prvCheckForValidListAndQueue+0x6c>)
 80083ac:	4a10      	ldr	r2, [pc, #64]	@ (80083f0 <prvCheckForValidListAndQueue+0x64>)
 80083ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80083b0:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <prvCheckForValidListAndQueue+0x70>)
 80083b2:	4a10      	ldr	r2, [pc, #64]	@ (80083f4 <prvCheckForValidListAndQueue+0x68>)
 80083b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80083b6:	2300      	movs	r3, #0
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	4b11      	ldr	r3, [pc, #68]	@ (8008400 <prvCheckForValidListAndQueue+0x74>)
 80083bc:	4a11      	ldr	r2, [pc, #68]	@ (8008404 <prvCheckForValidListAndQueue+0x78>)
 80083be:	2110      	movs	r1, #16
 80083c0:	200a      	movs	r0, #10
 80083c2:	f7fe f92d 	bl	8006620 <xQueueGenericCreateStatic>
 80083c6:	4603      	mov	r3, r0
 80083c8:	4a08      	ldr	r2, [pc, #32]	@ (80083ec <prvCheckForValidListAndQueue+0x60>)
 80083ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083cc:	4b07      	ldr	r3, [pc, #28]	@ (80083ec <prvCheckForValidListAndQueue+0x60>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083d4:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <prvCheckForValidListAndQueue+0x60>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	490b      	ldr	r1, [pc, #44]	@ (8008408 <prvCheckForValidListAndQueue+0x7c>)
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fd52 	bl	8006e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083e0:	f7fd ffc4 	bl	800636c <vPortExitCritical>
}
 80083e4:	bf00      	nop
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	2400511c 	.word	0x2400511c
 80083f0:	240050ec 	.word	0x240050ec
 80083f4:	24005100 	.word	0x24005100
 80083f8:	24005114 	.word	0x24005114
 80083fc:	24005118 	.word	0x24005118
 8008400:	240051c8 	.word	0x240051c8
 8008404:	24005128 	.word	0x24005128
 8008408:	0800c1b8 	.word	0x0800c1b8

0800840c <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	601a      	str	r2, [r3, #0]
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	601a      	str	r2, [r3, #0]
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7ff ffdd 	bl	800842e <metal_list_add_before>
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6852      	ldr	r2, [r2, #4]
 800848c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6812      	ldr	r2, [r2, #0]
 8008496:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f002 f848 	bl	800a554 <metal_machine_cache_flush>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f002 f846 	bl	800a56a <metal_machine_cache_invalidate>
}
 80084de:	bf00      	nop
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff ffdd 	bl	80084b2 <__metal_cache_flush>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ffdd 	bl	80084cc <__metal_cache_invalidate>
}
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d008      	beq.n	800853c <metal_bus_register+0x20>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d004      	beq.n	800853c <metal_bus_register+0x20>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <metal_bus_register+0x26>
		return -EINVAL;
 800853c:	f06f 0315 	mvn.w	r3, #21
 8008540:	e026      	b.n	8008590 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f855 	bl	80085f8 <metal_bus_find>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <metal_bus_register+0x3e>
		return -EEXIST;
 8008554:	f06f 0310 	mvn.w	r3, #16
 8008558:	e01a      	b.n	8008590 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	331c      	adds	r3, #28
 800855e:	4618      	mov	r0, r3
 8008560:	f7ff ff54 	bl	800840c <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3324      	adds	r3, #36	@ 0x24
 8008568:	4619      	mov	r1, r3
 800856a:	480b      	ldr	r0, [pc, #44]	@ (8008598 <metal_bus_register+0x7c>)
 800856c:	f7ff ff79 	bl	8008462 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8008570:	4b0a      	ldr	r3, [pc, #40]	@ (800859c <metal_bus_register+0x80>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b06      	cmp	r3, #6
 8008576:	d90a      	bls.n	800858e <metal_bus_register+0x72>
 8008578:	4b08      	ldr	r3, [pc, #32]	@ (800859c <metal_bus_register+0x80>)
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d006      	beq.n	800858e <metal_bus_register+0x72>
 8008580:	4b06      	ldr	r3, [pc, #24]	@ (800859c <metal_bus_register+0x80>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6812      	ldr	r2, [r2, #0]
 8008588:	4905      	ldr	r1, [pc, #20]	@ (80085a0 <metal_bus_register+0x84>)
 800858a:	2007      	movs	r0, #7
 800858c:	4798      	blx	r3
	return 0;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	24005220 	.word	0x24005220
 800859c:	24005218 	.word	0x24005218
 80085a0:	0800c1c0 	.word	0x0800c1c0

080085a4 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3324      	adds	r3, #36	@ 0x24
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff ff63 	bl	800847c <metal_list_del>
	if (bus->ops.bus_close)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 80085c6:	4b0a      	ldr	r3, [pc, #40]	@ (80085f0 <metal_bus_unregister+0x4c>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	2b06      	cmp	r3, #6
 80085cc:	d90a      	bls.n	80085e4 <metal_bus_unregister+0x40>
 80085ce:	4b08      	ldr	r3, [pc, #32]	@ (80085f0 <metal_bus_unregister+0x4c>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d006      	beq.n	80085e4 <metal_bus_unregister+0x40>
 80085d6:	4b06      	ldr	r3, [pc, #24]	@ (80085f0 <metal_bus_unregister+0x4c>)
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6812      	ldr	r2, [r2, #0]
 80085de:	4905      	ldr	r1, [pc, #20]	@ (80085f4 <metal_bus_unregister+0x50>)
 80085e0:	2007      	movs	r0, #7
 80085e2:	4798      	blx	r3
	return 0;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	24005218 	.word	0x24005218
 80085f4:	0800c1d4 	.word	0x0800c1d4

080085f8 <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8008602:	4b13      	ldr	r3, [pc, #76]	@ (8008650 <metal_bus_find+0x58>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e017      	b.n	800863a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3b24      	subs	r3, #36	@ 0x24
 800860e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4618      	mov	r0, r3
 8008618:	f7f7 fe6a 	bl	80002f0 <strcmp>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d107      	bne.n	8008632 <metal_bus_find+0x3a>
			continue;
		if (result)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <metal_bus_find+0x36>
			*result = bus;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	601a      	str	r2, [r3, #0]
		return 0;
 800862e:	2300      	movs	r3, #0
 8008630:	e009      	b.n	8008646 <metal_bus_find+0x4e>
			continue;
 8008632:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a05      	ldr	r2, [pc, #20]	@ (8008654 <metal_bus_find+0x5c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d1e3      	bne.n	800860a <metal_bus_find+0x12>
	}
	return -ENOENT;
 8008642:	f06f 0301 	mvn.w	r3, #1
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	24005218 	.word	0x24005218
 8008654:	24005220 	.word	0x24005220

08008658 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00d      	beq.n	8008686 <metal_device_open+0x2e>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d009      	beq.n	8008686 <metal_device_open+0x2e>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d006      	beq.n	8008686 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <metal_device_open+0x2e>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d102      	bne.n	800868c <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8008686:	f06f 0315 	mvn.w	r3, #21
 800868a:	e01f      	b.n	80086cc <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 800868c:	f107 0310 	add.w	r3, r7, #16
 8008690:	4619      	mov	r1, r3
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff ffb0 	bl	80085f8 <metal_bus_find>
 8008698:	6178      	str	r0, [r7, #20]
	if (error)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <metal_device_open+0x4c>
		return error;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	e013      	b.n	80086cc <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d102      	bne.n	80086b2 <metal_device_open+0x5a>
		return -ENODEV;
 80086ac:	f06f 0312 	mvn.w	r3, #18
 80086b0:	e00c      	b.n	80086cc <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	6938      	ldr	r0, [r7, #16]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	68b9      	ldr	r1, [r7, #8]
 80086bc:	4798      	blx	r3
 80086be:	6178      	str	r0, [r7, #20]
	if (error)
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <metal_device_open+0x72>
		return error;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	e000      	b.n	80086cc <metal_device_open+0x74>

	return 0;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <metal_register_generic_device+0x22>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d902      	bls.n	80086fc <metal_register_generic_device+0x28>
		return -EINVAL;
 80086f6:	f06f 0315 	mvn.w	r3, #21
 80086fa:	e009      	b.n	8008710 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a06      	ldr	r2, [pc, #24]	@ (8008718 <metal_register_generic_device+0x44>)
 8008700:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	336c      	adds	r3, #108	@ 0x6c
 8008706:	4619      	mov	r1, r3
 8008708:	4804      	ldr	r0, [pc, #16]	@ (800871c <metal_register_generic_device+0x48>)
 800870a:	f7ff feaa 	bl	8008462 <metal_list_add_tail>
			    &device->node);
	return 0;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	2400006c 	.word	0x2400006c
 800871c:	24005230 	.word	0x24005230

08008720 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800872c:	4b12      	ldr	r3, [pc, #72]	@ (8008778 <metal_generic_dev_open+0x58>)
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	617b      	str	r3, [r7, #20]
 8008732:	e017      	b.n	8008764 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	3b6c      	subs	r3, #108	@ 0x6c
 8008738:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68b9      	ldr	r1, [r7, #8]
 8008740:	4618      	mov	r0, r3
 8008742:	f7f7 fdd5 	bl	80002f0 <strcmp>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d107      	bne.n	800875c <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8008752:	6938      	ldr	r0, [r7, #16]
 8008754:	f000 f890 	bl	8008878 <metal_generic_dev_sys_open>
 8008758:	4603      	mov	r3, r0
 800875a:	e009      	b.n	8008770 <metal_generic_dev_open+0x50>
			continue;
 800875c:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	617b      	str	r3, [r7, #20]
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	4a05      	ldr	r2, [pc, #20]	@ (800877c <metal_generic_dev_open+0x5c>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d1e3      	bne.n	8008734 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 800876c:	f06f 0312 	mvn.w	r3, #18
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	24005218 	.word	0x24005218
 800877c:	24005230 	.word	0x24005230

08008780 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
 800878c:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 800878e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	429a      	cmp	r2, r3
 8008794:	d009      	beq.n	80087aa <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8008796:	6a3a      	ldr	r2, [r7, #32]
 8008798:	4613      	mov	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	461a      	mov	r2, r3
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087a6:	f002 ff22 	bl	800b5ee <memcpy>
	for (i = 0; i < nents_in; i++) {
 80087aa:	2300      	movs	r3, #0
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	e02f      	b.n	8008810 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d114      	bne.n	80087e0 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	4613      	mov	r3, r2
 80087ba:	005b      	lsls	r3, r3, #1
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	461a      	mov	r2, r3
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	4413      	add	r3, r2
 80087c6:	6818      	ldr	r0, [r3, #0]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4613      	mov	r3, r2
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	461a      	mov	r2, r3
 80087d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d6:	4413      	add	r3, r2
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	4619      	mov	r1, r3
 80087dc:	f7ff fe83 	bl	80084e6 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	4613      	mov	r3, r2
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	461a      	mov	r2, r3
 80087ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ee:	4413      	add	r3, r2
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4613      	mov	r3, r2
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	461a      	mov	r2, r3
 80087fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008800:	4413      	add	r3, r2
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4619      	mov	r1, r3
 8008806:	f7ff fe7b 	bl	8008500 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	3301      	adds	r3, #1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	429a      	cmp	r2, r3
 8008816:	dbcb      	blt.n	80087b0 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8008818:	6a3b      	ldr	r3, [r7, #32]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b086      	sub	sp, #24
 8008826:	af00      	add	r7, sp, #0
 8008828:	60f8      	str	r0, [r7, #12]
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8008830:	2300      	movs	r3, #0
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	e017      	b.n	8008866 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	4613      	mov	r3, r2
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	461a      	mov	r2, r3
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	4413      	add	r3, r2
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	697a      	ldr	r2, [r7, #20]
 800884a:	4613      	mov	r3, r2
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	461a      	mov	r2, r3
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	4413      	add	r3, r2
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	4619      	mov	r1, r3
 800885c:	f7ff fe50 	bl	8008500 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	3301      	adds	r3, #1
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	429a      	cmp	r2, r3
 800886c:	dbe3      	blt.n	8008836 <metal_generic_dev_dma_unmap+0x14>
	}
}
 800886e:	bf00      	nop
 8008870:	bf00      	nop
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e013      	b.n	80088ae <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	4613      	mov	r3, r2
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	4413      	add	r3, r2
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	3308      	adds	r3, #8
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	3304      	adds	r3, #4
 8008898:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00b      	beq.n	80088ba <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 80088a2:	68b8      	ldr	r0, [r7, #8]
 80088a4:	f000 f828 	bl	80088f8 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3301      	adds	r3, #1
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d3e6      	bcc.n	8008886 <metal_generic_dev_sys_open+0xe>
 80088b8:	e000      	b.n	80088bc <metal_generic_dev_sys_open+0x44>
			break;
 80088ba:	bf00      	nop
	}

	return 0;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 80088d0:	4803      	ldr	r0, [pc, #12]	@ (80088e0 <metal_sys_init+0x18>)
 80088d2:	f7ff fe23 	bl	800851c <metal_bus_register>
	return 0;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	2400006c 	.word	0x2400006c

080088e4 <metal_sys_finish>:

void metal_sys_finish(void)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 80088e8:	4802      	ldr	r0, [pc, #8]	@ (80088f4 <metal_sys_finish+0x10>)
 80088ea:	f7ff fe5b 	bl	80085a4 <metal_bus_unregister>
}
 80088ee:	bf00      	nop
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	2400006c 	.word	0x2400006c

080088f8 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	613b      	str	r3, [r7, #16]
	if (psize) {
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d02c      	beq.n	800896c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800892c:	2300      	movs	r3, #0
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e013      	b.n	800895a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	6819      	ldr	r1, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f001 fe1b 	bl	800a580 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	3301      	adds	r3, #1
 8008958:	617b      	str	r3, [r7, #20]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	fa22 f303 	lsr.w	r3, r2, r3
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	429a      	cmp	r2, r3
 800896a:	d9e2      	bls.n	8008932 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 800896c:	bf00      	nop
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <metal_list_init>:
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	605a      	str	r2, [r3, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
	int error = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 80089a4:	2220      	movs	r2, #32
 80089a6:	2100      	movs	r1, #0
 80089a8:	4810      	ldr	r0, [pc, #64]	@ (80089ec <metal_init+0x54>)
 80089aa:	f002 fdda 	bl	800b562 <memset>

	_metal.common.log_handler   = params->log_handler;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a0e      	ldr	r2, [pc, #56]	@ (80089ec <metal_init+0x54>)
 80089b4:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	791a      	ldrb	r2, [r3, #4]
 80089ba:	4b0c      	ldr	r3, [pc, #48]	@ (80089ec <metal_init+0x54>)
 80089bc:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 80089be:	480c      	ldr	r0, [pc, #48]	@ (80089f0 <metal_init+0x58>)
 80089c0:	f7ff ffd8 	bl	8008974 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 80089c4:	480b      	ldr	r0, [pc, #44]	@ (80089f4 <metal_init+0x5c>)
 80089c6:	f7ff ffd5 	bl	8008974 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 80089ca:	480b      	ldr	r0, [pc, #44]	@ (80089f8 <metal_init+0x60>)
 80089cc:	f7ff ffd2 	bl	8008974 <metal_list_init>

	error = metal_sys_init(params);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff ff79 	bl	80088c8 <metal_sys_init>
 80089d6:	60f8      	str	r0, [r7, #12]
	if (error)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <metal_init+0x4a>
		return error;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	e000      	b.n	80089e4 <metal_init+0x4c>

	return error;
 80089e2:	68fb      	ldr	r3, [r7, #12]
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	24005218 	.word	0x24005218
 80089f0:	24005220 	.word	0x24005220
 80089f4:	24005228 	.word	0x24005228
 80089f8:	24005230 	.word	0x24005230

080089fc <metal_finish>:

void metal_finish(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
	metal_sys_finish();
 8008a00:	f7ff ff70 	bl	80088e4 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 8008a04:	2220      	movs	r2, #32
 8008a06:	2100      	movs	r1, #0
 8008a08:	4802      	ldr	r0, [pc, #8]	@ (8008a14 <metal_finish+0x18>)
 8008a0a:	f002 fdaa 	bl	800b562 <memset>
}
 8008a0e:	bf00      	nop
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	24005218 	.word	0x24005218

08008a18 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8008a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a2a:	d009      	beq.n	8008a40 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d804      	bhi.n	8008a40 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	e000      	b.n	8008a42 <metal_io_virt+0x2a>
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8008a4e:	b5b0      	push	{r4, r5, r7, lr}
 8008a50:	b08a      	sub	sp, #40	@ 0x28
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	60b9      	str	r1, [r7, #8]
 8008a58:	607a      	str	r2, [r7, #4]
 8008a5a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8008a5c:	f107 0310 	add.w	r3, r7, #16
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	609a      	str	r2, [r3, #8]
 8008a68:	60da      	str	r2, [r3, #12]
 8008a6a:	611a      	str	r2, [r3, #16]
 8008a6c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	605a      	str	r2, [r3, #4]
	io->size = size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a84:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	2b1f      	cmp	r3, #31
 8008a8a:	d904      	bls.n	8008a96 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a92:	611a      	str	r2, [r3, #16]
 8008a94:	e006      	b.n	8008aa4 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8008a96:	2201      	movs	r2, #1
 8008a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	1e5a      	subs	r2, r3, #1
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008aa8:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8008aaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <metal_io_init+0x7a>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ab4:	f103 0418 	add.w	r4, r3, #24
 8008ab8:	4615      	mov	r5, r2
 8008aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008abe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ac2:	e884 0003 	stmia.w	r4, {r0, r1}
 8008ac6:	e00a      	b.n	8008ade <metal_io_init+0x90>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f103 0418 	add.w	r4, r3, #24
 8008ace:	f107 0510 	add.w	r5, r7, #16
 8008ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ad6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ada:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f7ff ff0a 	bl	80088f8 <metal_sys_io_mem_map>
}
 8008ae4:	bf00      	nop
 8008ae6:	3728      	adds	r7, #40	@ 0x28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bdb0      	pop	{r4, r5, r7, pc}

08008aec <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b08b      	sub	sp, #44	@ 0x2c
 8008af0:	af02      	add	r7, sp, #8
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008afa:	68b9      	ldr	r1, [r7, #8]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff ff8b 	bl	8008a18 <metal_io_virt>
 8008b02:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	68ba      	ldr	r2, [r7, #8]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d902      	bls.n	8008b18 <metal_io_block_read+0x2c>
		return -ERANGE;
 8008b12:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008b16:	e05c      	b.n	8008bd2 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	441a      	add	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d904      	bls.n	8008b30 <metal_io_block_read+0x44>
		len = io->size - offset;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6a1b      	ldr	r3, [r3, #32]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1c      	ldr	r4, [r3, #32]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2305      	movs	r3, #5
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	47a0      	blx	r4
 8008b4e:	6178      	str	r0, [r7, #20]
 8008b50:	e03e      	b.n	8008bd0 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8008b52:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8008b56:	e00c      	b.n	8008b72 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008b5c:	69bb      	ldr	r3, [r7, #24]
 8008b5e:	701a      	strb	r2, [r3, #0]
			dest++;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	3301      	adds	r3, #1
 8008b64:	61bb      	str	r3, [r7, #24]
			ptr++;
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	61fb      	str	r3, [r7, #28]
			len--;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d017      	beq.n	8008ba8 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1ea      	bne.n	8008b58 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e5      	bne.n	8008b58 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008b8c:	e00c      	b.n	8008ba8 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	3b04      	subs	r3, #4
 8008ba6:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	dcef      	bgt.n	8008b8e <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8008bae:	e00c      	b.n	8008bca <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	61fb      	str	r3, [r7, #28]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	603b      	str	r3, [r7, #0]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1ef      	bne.n	8008bb0 <metal_io_block_read+0xc4>
	}
	return retlen;
 8008bd0:	697b      	ldr	r3, [r7, #20]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3724      	adds	r7, #36	@ 0x24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd90      	pop	{r4, r7, pc}

08008bda <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8008bda:	b590      	push	{r4, r7, lr}
 8008bdc:	b08b      	sub	sp, #44	@ 0x2c
 8008bde:	af02      	add	r7, sp, #8
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7ff ff14 	bl	8008a18 <metal_io_virt>
 8008bf0:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d902      	bls.n	8008c06 <metal_io_block_write+0x2c>
		return -ERANGE;
 8008c00:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008c04:	e05b      	b.n	8008cbe <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	441a      	add	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d904      	bls.n	8008c1e <metal_io_block_write+0x44>
		len = io->size - offset;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	689a      	ldr	r2, [r3, #8]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d017      	beq.n	8008c5a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	2305      	movs	r3, #5
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	47a0      	blx	r4
 8008c3c:	6178      	str	r0, [r7, #20]
 8008c3e:	e03d      	b.n	8008cbc <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	701a      	strb	r2, [r3, #0]
			ptr++;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
			source++;
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	3301      	adds	r3, #1
 8008c52:	61bb      	str	r3, [r7, #24]
			len--;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	603b      	str	r3, [r7, #0]
		while ( len && (
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d017      	beq.n	8008c90 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1ea      	bne.n	8008c40 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e5      	bne.n	8008c40 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008c74:	e00c      	b.n	8008c90 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	3304      	adds	r3, #4
 8008c82:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	3304      	adds	r3, #4
 8008c88:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	3b04      	subs	r3, #4
 8008c8e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	dcef      	bgt.n	8008c76 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8008c96:	e00c      	b.n	8008cb2 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	61fb      	str	r3, [r7, #28]
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	603b      	str	r3, [r7, #0]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1ef      	bne.n	8008c98 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8008cb8:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008cbc:	697b      	ldr	r3, [r7, #20]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3724      	adds	r7, #36	@ 0x24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd90      	pop	{r4, r7, pc}

08008cc6 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8008cc6:	b590      	push	{r4, r7, lr}
 8008cc8:	b08b      	sub	sp, #44	@ 0x2c
 8008cca:	af02      	add	r7, sp, #8
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	603b      	str	r3, [r7, #0]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7ff fe9d 	bl	8008a18 <metal_io_virt>
 8008cde:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d902      	bls.n	8008cf4 <metal_io_block_set+0x2e>
		return -ERANGE;
 8008cee:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008cf2:	e05d      	b.n	8008db0 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	441a      	add	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d904      	bls.n	8008d0c <metal_io_block_set+0x46>
		len = io->size - offset;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689a      	ldr	r2, [r3, #8]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	603b      	str	r3, [r7, #0]
	retlen = len;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d009      	beq.n	8008d2c <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008d1c:	79fa      	ldrb	r2, [r7, #7]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	2305      	movs	r3, #5
 8008d24:	68b9      	ldr	r1, [r7, #8]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	47a0      	blx	r4
 8008d2a:	e040      	b.n	8008dae <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	e00a      	b.n	8008d4c <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8008d36:	79fa      	ldrb	r2, [r7, #7]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d9f1      	bls.n	8008d36 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8008d52:	e008      	b.n	8008d66 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	79fa      	ldrb	r2, [r7, #7]
 8008d58:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	61fb      	str	r3, [r7, #28]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	603b      	str	r3, [r7, #0]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00e      	beq.n	8008d8a <metal_io_block_set+0xc4>
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1ee      	bne.n	8008d54 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008d76:	e008      	b.n	8008d8a <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	3304      	adds	r3, #4
 8008d82:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	3b04      	subs	r3, #4
 8008d88:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	dcf3      	bgt.n	8008d78 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8008d90:	e008      	b.n	8008da4 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	79fa      	ldrb	r2, [r7, #7]
 8008d96:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	61fb      	str	r3, [r7, #28]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	3b01      	subs	r3, #1
 8008da2:	603b      	str	r3, [r7, #0]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1f3      	bne.n	8008d92 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8008daa:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8008dae:	693b      	ldr	r3, [r7, #16]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3724      	adds	r7, #36	@ 0x24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd90      	pop	{r4, r7, pc}

08008db8 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8008db8:	b40e      	push	{r1, r2, r3}
 8008dba:	b480      	push	{r7}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	b003      	add	sp, #12
 8008dd0:	4770      	bx	lr

08008dd2 <metal_io_virt>:
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008de4:	d009      	beq.n	8008dfa <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d804      	bhi.n	8008dfa <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	4413      	add	r3, r2
 8008df8:	e000      	b.n	8008dfc <metal_io_virt+0x2a>
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d201      	bcs.n	8008e2a <metal_io_virt_to_offset+0x22>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	e001      	b.n	8008e2e <metal_io_virt_to_offset+0x26>
 8008e2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
	...

08008e3c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8008e3c:	b5b0      	push	{r4, r5, r7, lr}
 8008e3e:	b08c      	sub	sp, #48	@ 0x30
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7ff ffbf 	bl	8008dd2 <metal_io_virt>
 8008e54:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	699c      	ldr	r4, [r3, #24]
 8008e62:	79fa      	ldrb	r2, [r7, #7]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	47a0      	blx	r4
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	e059      	b.n	8008f26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8008e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d012      	beq.n	8008e9e <metal_io_read+0x62>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d10f      	bne.n	8008e9e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8008e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	f3bf 8f5b 	dmb	ish
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f3bf 8f5b 	dmb	ish
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	76fb      	strb	r3, [r7, #27]
 8008e92:	7efb      	ldrb	r3, [r7, #27]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2200      	movs	r2, #0
 8008e98:	461c      	mov	r4, r3
 8008e9a:	4615      	mov	r5, r2
 8008e9c:	e043      	b.n	8008f26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8008e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d012      	beq.n	8008eca <metal_io_read+0x8e>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d10f      	bne.n	8008eca <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8008eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	f3bf 8f5b 	dmb	ish
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	f3bf 8f5b 	dmb	ish
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	833b      	strh	r3, [r7, #24]
 8008ebe:	8b3b      	ldrh	r3, [r7, #24]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	461c      	mov	r4, r3
 8008ec6:	4615      	mov	r5, r2
 8008ec8:	e02d      	b.n	8008f26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8008eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d010      	beq.n	8008ef2 <metal_io_read+0xb6>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d10d      	bne.n	8008ef2 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8008ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed8:	623b      	str	r3, [r7, #32]
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	f3bf 8f5b 	dmb	ish
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f3bf 8f5b 	dmb	ish
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2200      	movs	r2, #0
 8008eec:	461c      	mov	r4, r3
 8008eee:	4615      	mov	r5, r2
 8008ef0:	e019      	b.n	8008f26 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8008ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d010      	beq.n	8008f1a <metal_io_read+0xde>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d10d      	bne.n	8008f1a <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8008efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f00:	61fb      	str	r3, [r7, #28]
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f3bf 8f5b 	dmb	ish
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f3bf 8f5b 	dmb	ish
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2200      	movs	r2, #0
 8008f14:	461c      	mov	r4, r3
 8008f16:	4615      	mov	r5, r2
 8008f18:	e005      	b.n	8008f26 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8008f1a:	4b06      	ldr	r3, [pc, #24]	@ (8008f34 <metal_io_read+0xf8>)
 8008f1c:	4a06      	ldr	r2, [pc, #24]	@ (8008f38 <metal_io_read+0xfc>)
 8008f1e:	21f0      	movs	r1, #240	@ 0xf0
 8008f20:	4806      	ldr	r0, [pc, #24]	@ (8008f3c <metal_io_read+0x100>)
 8008f22:	f002 f949 	bl	800b1b8 <__assert_func>
	return 0; /* quiet compiler */
}
 8008f26:	4622      	mov	r2, r4
 8008f28:	462b      	mov	r3, r5
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	3730      	adds	r7, #48	@ 0x30
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bdb0      	pop	{r4, r5, r7, pc}
 8008f34:	0800c280 	.word	0x0800c280
 8008f38:	0800c440 	.word	0x0800c440
 8008f3c:	0800c284 	.word	0x0800c284

08008f40 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8008f40:	b590      	push	{r4, r7, lr}
 8008f42:	b08f      	sub	sp, #60	@ 0x3c
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f7ff ff3e 	bl	8008dd2 <metal_io_virt>
 8008f56:	62f8      	str	r0, [r7, #44]	@ 0x2c
	if (io->ops.write)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00c      	beq.n	8008f7a <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	69dc      	ldr	r4, [r3, #28]
 8008f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8008f78:	e04e      	b.n	8009018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8008f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00e      	beq.n	8008f9e <metal_io_write+0x5e>
 8008f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d10b      	bne.n	8008f9e <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8008f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f8a:	783b      	ldrb	r3, [r7, #0]
 8008f8c:	76fb      	strb	r3, [r7, #27]
 8008f8e:	7efa      	ldrb	r2, [r7, #27]
 8008f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f92:	f3bf 8f5b 	dmb	ish
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	f3bf 8f5b 	dmb	ish
 8008f9c:	e03c      	b.n	8009018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8008f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <metal_io_write+0x82>
 8008fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d10b      	bne.n	8008fc2 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8008faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fae:	883b      	ldrh	r3, [r7, #0]
 8008fb0:	833b      	strh	r3, [r7, #24]
 8008fb2:	8b3a      	ldrh	r2, [r7, #24]
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb6:	f3bf 8f5b 	dmb	ish
 8008fba:	801a      	strh	r2, [r3, #0]
 8008fbc:	f3bf 8f5b 	dmb	ish
 8008fc0:	e02a      	b.n	8009018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8008fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <metal_io_write+0xa6>
 8008fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d10b      	bne.n	8008fe6 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8008fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd0:	623b      	str	r3, [r7, #32]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	f3bf 8f5b 	dmb	ish
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f3bf 8f5b 	dmb	ish
 8008fe4:	e018      	b.n	8009018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8008fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00e      	beq.n	800900a <metal_io_write+0xca>
 8008fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d10b      	bne.n	800900a <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8008ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff4:	61fb      	str	r3, [r7, #28]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f3bf 8f5b 	dmb	ish
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	f3bf 8f5b 	dmb	ish
 8009008:	e006      	b.n	8009018 <metal_io_write+0xd8>
		metal_assert (0);
 800900a:	4b05      	ldr	r3, [pc, #20]	@ (8009020 <metal_io_write+0xe0>)
 800900c:	4a05      	ldr	r2, [pc, #20]	@ (8009024 <metal_io_write+0xe4>)
 800900e:	f44f 7189 	mov.w	r1, #274	@ 0x112
 8009012:	4805      	ldr	r0, [pc, #20]	@ (8009028 <metal_io_write+0xe8>)
 8009014:	f002 f8d0 	bl	800b1b8 <__assert_func>
}
 8009018:	bf00      	nop
 800901a:	3734      	adds	r7, #52	@ 0x34
 800901c:	46bd      	mov	sp, r7
 800901e:	bd90      	pop	{r4, r7, pc}
 8009020:	0800c280 	.word	0x0800c280
 8009024:	0800c450 	.word	0x0800c450
 8009028:	0800c284 	.word	0x0800c284

0800902c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f002 f8dd 	bl	800b1f4 <malloc>
 800903a:	4603      	mov	r3, r0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	free(ptr);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f002 f8d9 	bl	800b204 <free>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3307      	adds	r3, #7
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff ffde 	bl	800902c <metal_allocate_memory>
 8009070:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d004      	beq.n	8009082 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	2100      	movs	r1, #0
 800907c:	68b8      	ldr	r0, [r7, #8]
 800907e:	f002 fa70 	bl	800b562 <memset>
	}

	return vqs;
 8009082:	68bb      	ldr	r3, [r7, #8]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b086      	sub	sp, #24
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	891b      	ldrh	r3, [r3, #8]
 8009098:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	3b18      	subs	r3, #24
 80090a4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d905      	bls.n	80090bc <rproc_virtio_virtqueue_notify+0x30>
 80090b0:	4b0d      	ldr	r3, [pc, #52]	@ (80090e8 <rproc_virtio_virtqueue_notify+0x5c>)
 80090b2:	4a0e      	ldr	r2, [pc, #56]	@ (80090ec <rproc_virtio_virtqueue_notify+0x60>)
 80090b4:	2133      	movs	r1, #51	@ 0x33
 80090b6:	480e      	ldr	r0, [pc, #56]	@ (80090f0 <rproc_virtio_virtqueue_notify+0x64>)
 80090b8:	f002 f87e 	bl	800b1b8 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4613      	mov	r3, r2
 80090c4:	005b      	lsls	r3, r3, #1
 80090c6:	4413      	add	r3, r2
 80090c8:	00db      	lsls	r3, r3, #3
 80090ca:	440b      	add	r3, r1
 80090cc:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	6810      	ldr	r0, [r2, #0]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	6912      	ldr	r2, [r2, #16]
 80090da:	4611      	mov	r1, r2
 80090dc:	4798      	blx	r3
}
 80090de:	bf00      	nop
 80090e0:	3718      	adds	r7, #24
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	0800c2cc 	.word	0x0800c2cc
 80090ec:	0800c420 	.word	0x0800c420
 80090f0:	0800c2e8 	.word	0x0800c2e8

080090f4 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	3b18      	subs	r3, #24
 8009100:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3318      	adds	r3, #24
 8009112:	4619      	mov	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff fe77 	bl	8008e08 <metal_io_virt_to_offset>
 800911a:	4601      	mov	r1, r0
 800911c:	2301      	movs	r3, #1
 800911e:	2205      	movs	r2, #5
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7ff fe8b 	bl	8008e3c <metal_io_read>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4613      	mov	r3, r2
 800912c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800912e:	7afb      	ldrb	r3, [r7, #11]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8009138:	b5b0      	push	{r4, r5, r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af02      	add	r7, sp, #8
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3b18      	subs	r3, #24
 8009148:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	3318      	adds	r3, #24
 800915a:	4619      	mov	r1, r3
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff fe53 	bl	8008e08 <metal_io_virt_to_offset>
 8009162:	4601      	mov	r1, r0
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	2200      	movs	r2, #0
 8009168:	461c      	mov	r4, r3
 800916a:	4615      	mov	r5, r2
 800916c:	2301      	movs	r3, #1
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	2305      	movs	r3, #5
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	4622      	mov	r2, r4
 8009176:	462b      	mov	r3, r5
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff fee1 	bl	8008f40 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	6810      	ldr	r0, [r2, #0]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6812      	ldr	r2, [r2, #0]
 800918a:	4611      	mov	r1, r2
 800918c:	4798      	blx	r3
}
 800918e:	bf00      	nop
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bdb0      	pop	{r4, r5, r7, pc}

08009196 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b086      	sub	sp, #24
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	3b18      	subs	r3, #24
 80091a2:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	330c      	adds	r3, #12
 80091b4:	4619      	mov	r1, r3
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff fe26 	bl	8008e08 <metal_io_virt_to_offset>
 80091bc:	4601      	mov	r1, r0
 80091be:	2304      	movs	r3, #4
 80091c0:	2205      	movs	r2, #5
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff fe3a 	bl	8008e3c <metal_io_read>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4613      	mov	r3, r2
 80091ce:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 80091d0:	68bb      	ldr	r3, [r7, #8]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 80091da:	b5b0      	push	{r4, r5, r7, lr}
 80091dc:	b088      	sub	sp, #32
 80091de:	af02      	add	r7, sp, #8
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3b18      	subs	r3, #24
 80091e8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	330c      	adds	r3, #12
 80091fa:	4619      	mov	r1, r3
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff fe03 	bl	8008e08 <metal_io_virt_to_offset>
 8009202:	4601      	mov	r1, r0
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	461c      	mov	r4, r3
 800920a:	4615      	mov	r5, r2
 800920c:	2304      	movs	r3, #4
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	2305      	movs	r3, #5
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	4622      	mov	r2, r4
 8009216:	462b      	mov	r3, r5
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f7ff fe91 	bl	8008f40 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	6810      	ldr	r0, [r2, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	4611      	mov	r1, r2
 800922c:	4798      	blx	r3
}
 800922e:	bf00      	nop
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bdb0      	pop	{r4, r5, r7, pc}

08009236 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800924e:	b480      	push	{r7}
 8009250:	b085      	sub	sp, #20
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	607a      	str	r2, [r7, #4]
 800925a:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800925c:	bf00      	nop
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d103      	bne.n	800929a <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8009292:	2140      	movs	r1, #64	@ 0x40
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff ff4f 	bl	8009138 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08e      	sub	sp, #56	@ 0x38
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 80092b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b8:	7e5b      	ldrb	r3, [r3, #25]
 80092ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 80092bc:	2050      	movs	r0, #80	@ 0x50
 80092be:	f7ff feb5 	bl	800902c <metal_allocate_memory>
 80092c2:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <rproc_virtio_create_vdev+0x2a>
		return NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e092      	b.n	80093f4 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 80092ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092d0:	4613      	mov	r3, r2
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4413      	add	r3, r2
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	4618      	mov	r0, r3
 80092da:	f7ff fea7 	bl	800902c <metal_allocate_memory>
 80092de:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 80092e0:	6a3b      	ldr	r3, [r7, #32]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 8081 	beq.w	80093ea <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 80092e8:	2250      	movs	r2, #80	@ 0x50
 80092ea:	2100      	movs	r1, #0
 80092ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80092ee:	f002 f938 	bl	800b562 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 80092f2:	2218      	movs	r2, #24
 80092f4:	2100      	movs	r1, #0
 80092f6:	6a38      	ldr	r0, [r7, #32]
 80092f8:	f002 f933 	bl	800b562 <memset>
	vdev = &rpvdev->vdev;
 80092fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fe:	3318      	adds	r3, #24
 8009300:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8009302:	2300      	movs	r3, #0
 8009304:	637b      	str	r3, [r7, #52]	@ 0x34
 8009306:	e025      	b.n	8009354 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8009308:	2300      	movs	r3, #0
 800930a:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 800930c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	3318      	adds	r3, #24
 8009318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800931a:	4413      	add	r3, r2
 800931c:	3304      	adds	r3, #4
 800931e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 800932c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800932e:	f7ff fe94 	bl	800905a <virtqueue_allocate>
 8009332:	6178      	str	r0, [r7, #20]
		if (!vq)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d031      	beq.n	800939e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800933a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800933c:	4613      	mov	r3, r2
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	4413      	add	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	461a      	mov	r2, r3
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	4413      	add	r3, r2
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800934e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009350:	3301      	adds	r3, #1
 8009352:	637b      	str	r3, [r7, #52]	@ 0x34
 8009354:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009358:	429a      	cmp	r2, r3
 800935a:	d3d5      	bcc.n	8009308 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009360:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009366:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	6a3a      	ldr	r2, [r7, #32]
 800936c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800936e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009372:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800938a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009390:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	4a19      	ldr	r2, [pc, #100]	@ (80093fc <rproc_virtio_create_vdev+0x158>)
 8009396:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	3318      	adds	r3, #24
 800939c:	e02a      	b.n	80093f4 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800939e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 80093a0:	2300      	movs	r3, #0
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a4:	e019      	b.n	80093da <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 80093a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093a8:	4613      	mov	r3, r2
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	4413      	add	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	461a      	mov	r2, r3
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	4413      	add	r3, r2
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 80093bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093be:	4613      	mov	r3, r2
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	4413      	add	r3, r2
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	461a      	mov	r2, r3
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	4413      	add	r3, r2
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7ff fe38 	bl	8009044 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 80093d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d6:	3301      	adds	r3, #1
 80093d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093de:	429a      	cmp	r2, r3
 80093e0:	d3e1      	bcc.n	80093a6 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 80093e2:	6a38      	ldr	r0, [r7, #32]
 80093e4:	f7ff fe2e 	bl	8009044 <metal_free_memory>
 80093e8:	e000      	b.n	80093ec <rproc_virtio_create_vdev+0x148>
		goto err0;
 80093ea:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 80093ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093ee:	f7ff fe29 	bl	8009044 <metal_free_memory>
	return NULL;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3738      	adds	r7, #56	@ 0x38
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	0800c3fc 	.word	0x0800c3fc

08009400 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009412:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	429a      	cmp	r2, r3
 800941a:	d302      	bcc.n	8009422 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800941c:	f06f 0301 	mvn.w	r3, #1
 8009420:	e019      	b.n	8009456 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4613      	mov	r3, r2
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	4413      	add	r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	440b      	add	r3, r1
 8009432:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6a3a      	ldr	r2, [r7, #32]
 8009438:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	b29a      	uxth	r2, r3
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009452:	609a      	str	r2, [r3, #8]

	return 0;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	371c      	adds	r7, #28
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b086      	sub	sp, #24
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d102      	bne.n	8009478 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8009472:	f06f 0315 	mvn.w	r3, #21
 8009476:	e02c      	b.n	80094d2 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d101      	bne.n	8009486 <rproc_virtio_notified+0x24>
		return 0;
 8009482:	2300      	movs	r3, #0
 8009484:	e025      	b.n	80094d2 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e01a      	b.n	80094c8 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	4613      	mov	r3, r2
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	4413      	add	r3, r2
 800949e:	00db      	lsls	r3, r3, #3
 80094a0:	440b      	add	r3, r1
 80094a2:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d003      	beq.n	80094b6 <rproc_virtio_notified+0x54>
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094b4:	d105      	bne.n	80094c2 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 80094bc:	68b8      	ldr	r0, [r7, #8]
 80094be:	f001 fbca 	bl	800ac56 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	3301      	adds	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d3e0      	bcc.n	8009492 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff fe02 	bl	80090f4 <rproc_virtio_get_status>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 80094fe:	e7f4      	b.n	80094ea <rproc_virtio_wait_remote_ready+0x10>
		return;
 8009500:	bf00      	nop
 8009502:	e000      	b.n	8009506 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8009504:	bf00      	nop
	}
}
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8009514:	bf00      	nop
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	4611      	mov	r1, r2
 800951c:	f3bf 8f5b 	dmb	ish
 8009520:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009524:	e8c3 1f40 	strexb	r0, r1, [r3]
 8009528:	2800      	cmp	r0, #0
 800952a:	d1f9      	bne.n	8009520 <__metal_mutex_acquire+0x14>
 800952c:	f3bf 8f5b 	dmb	ish
 8009530:	b2d3      	uxtb	r3, r2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1ef      	bne.n	8009516 <__metal_mutex_acquire+0xa>
		;
	}
}
 8009536:	bf00      	nop
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f3bf 8f5b 	dmb	ish
 8009552:	2200      	movs	r2, #0
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	f3bf 8f5b 	dmb	ish
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7ff ffcc 	bl	800950c <__metal_mutex_acquire>
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ffdd 	bl	8009544 <__metal_mutex_release>
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <metal_list_add_before>:
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	601a      	str	r2, [r3, #0]
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <metal_list_add_tail>:
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff ffdd 	bl	8009592 <metal_list_add_before>
}
 80095d8:	bf00      	nop
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <metal_list_del>:
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6852      	ldr	r2, [r2, #4]
 80095f0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	601a      	str	r2, [r3, #0]
}
 800960a:	bf00      	nop
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	095b      	lsrs	r3, r3, #5
 8009624:	009a      	lsls	r2, r3, #2
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	440a      	add	r2, r1
 800962a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	f002 021f 	and.w	r2, r2, #31
 8009632:	2001      	movs	r0, #1
 8009634:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	4403      	add	r3, r0
 800963e:	430a      	orrs	r2, r1
 8009640:	601a      	str	r2, [r3, #0]
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4413      	add	r3, r2
 8009662:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	f003 031f 	and.w	r3, r3, #31
 800966a:	2101      	movs	r1, #1
 800966c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8009670:	4013      	ands	r3, r2
}
 8009672:	4618      	mov	r0, r3
 8009674:	370c      	adds	r7, #12
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	009a      	lsls	r2, r3, #2
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	440a      	add	r2, r1
 8009692:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	f002 021f 	and.w	r2, r2, #31
 800969a:	2001      	movs	r0, #1
 800969c:	fa00 f202 	lsl.w	r2, r0, r2
 80096a0:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4403      	add	r3, r0
 80096a8:	400a      	ands	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7ff ffc2 	bl	800964e <metal_bitmap_is_bit_set>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bf0c      	ite	eq
 80096d0:	2301      	moveq	r3, #1
 80096d2:	2300      	movne	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b086      	sub	sp, #24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	e002      	b.n	80096f6 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	3301      	adds	r3, #1
 80096f4:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d207      	bcs.n	800970e <metal_bitmap_next_clear_bit+0x30>
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	4619      	mov	r1, r3
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff ffd8 	bl	80096b8 <metal_bitmap_is_bit_clear>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0f0      	beq.n	80096f0 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800970e:	697b      	ldr	r3, [r7, #20]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3718      	adds	r7, #24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <rpmsg_init_ept>:
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2220      	movs	r2, #32
 800972a:	68b9      	ldr	r1, [r7, #8]
 800972c:	4618      	mov	r0, r3
 800972e:	f001 ff05 	bl	800b53c <strncpy>
	ept->addr = src;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	69ba      	ldr	r2, [r7, #24]
 8009742:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800975c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009760:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	461a      	mov	r2, r3
 8009766:	2100      	movs	r1, #0
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ffb8 	bl	80096de <metal_bitmap_next_clear_bit>
 800976e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	429a      	cmp	r2, r3
 8009776:	d206      	bcs.n	8009786 <rpmsg_get_address+0x34>
		addr = nextbit;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff ff48 	bl	8009616 <metal_bitmap_set_bit>
	}

	return addr;
 8009786:	68fb      	ldr	r3, [r7, #12]
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	da03      	bge.n	80097ac <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7ff ff69 	bl	800967e <metal_bitmap_clear_bit>
}
 80097ac:	bf00      	nop
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	da05      	bge.n	80097d4 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 80097c8:	6879      	ldr	r1, [r7, #4]
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f7ff ff3f 	bl	800964e <metal_bitmap_is_bit_set>
 80097d0:	4603      	mov	r3, r0
 80097d2:	e000      	b.n	80097d6 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 80097d4:	4b02      	ldr	r3, [pc, #8]	@ (80097e0 <rpmsg_is_address_set+0x2c>)
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	fffff82d 	.word	0xfffff82d

080097e4 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	da05      	bge.n	8009804 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 80097f8:	6879      	ldr	r1, [r7, #4]
 80097fa:	68f8      	ldr	r0, [r7, #12]
 80097fc:	f7ff ff0b 	bl	8009616 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8009800:	2300      	movs	r3, #0
 8009802:	e000      	b.n	8009806 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8009804:	4b02      	ldr	r3, [pc, #8]	@ (8009810 <rpmsg_set_address+0x2c>)
	}
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	fffff82d 	.word	0xfffff82d

08009814 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8009814:	b590      	push	{r4, r7, lr}
 8009816:	b089      	sub	sp, #36	@ 0x24
 8009818:	af02      	add	r7, sp, #8
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00a      	beq.n	800983e <rpmsg_send_offchannel_raw+0x2a>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d006      	beq.n	800983e <rpmsg_send_offchannel_raw+0x2a>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d003      	beq.n	800983e <rpmsg_send_offchannel_raw+0x2a>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800983c:	d101      	bne.n	8009842 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800983e:	4b0d      	ldr	r3, [pc, #52]	@ (8009874 <rpmsg_send_offchannel_raw+0x60>)
 8009840:	e014      	b.n	800986c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00c      	beq.n	800986a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8009854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985a:	9300      	str	r3, [sp, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	68b9      	ldr	r1, [r7, #8]
 8009862:	6978      	ldr	r0, [r7, #20]
 8009864:	47a0      	blx	r4
 8009866:	4603      	mov	r3, r0
 8009868:	e000      	b.n	800986c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800986a:	4b02      	ldr	r3, [pc, #8]	@ (8009874 <rpmsg_send_offchannel_raw+0x60>)
}
 800986c:	4618      	mov	r0, r3
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd90      	pop	{r4, r7, pc}
 8009874:	fffff82d 	.word	0xfffff82d

08009878 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b090      	sub	sp, #64	@ 0x40
 800987c:	af02      	add	r7, sp, #8
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 800988c:	6879      	ldr	r1, [r7, #4]
 800988e:	f107 030c 	add.w	r3, r7, #12
 8009892:	2220      	movs	r2, #32
 8009894:	4618      	mov	r0, r3
 8009896:	f001 fe51 	bl	800b53c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800989e:	f107 030c 	add.w	r3, r7, #12
 80098a2:	2201      	movs	r2, #1
 80098a4:	9201      	str	r2, [sp, #4]
 80098a6:	2228      	movs	r2, #40	@ 0x28
 80098a8:	9200      	str	r2, [sp, #0]
 80098aa:	2235      	movs	r2, #53	@ 0x35
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff ffb1 	bl	8009814 <rpmsg_send_offchannel_raw>
 80098b2:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 80098b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da01      	bge.n	80098be <rpmsg_send_ns_message+0x46>
		return ret;
 80098ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098bc:	e000      	b.n	80098c0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3738      	adds	r7, #56	@ 0x38
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b088      	sub	sp, #32
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	e04b      	b.n	8009976 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	3b34      	subs	r3, #52	@ 0x34
 80098e6:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098ee:	d006      	beq.n	80098fe <rpmsg_get_endpoint+0x36>
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d101      	bne.n	80098fe <rpmsg_get_endpoint+0x36>
			return ept;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	e040      	b.n	8009980 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	d106      	bne.n	8009916 <rpmsg_get_endpoint+0x4e>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d101      	bne.n	8009916 <rpmsg_get_endpoint+0x4e>
			return ept;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	e034      	b.n	8009980 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00c      	beq.n	8009936 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2220      	movs	r2, #32
 8009920:	68b9      	ldr	r1, [r7, #8]
 8009922:	4618      	mov	r0, r3
 8009924:	f001 fdf8 	bl	800b518 <strncmp>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	bf0c      	ite	eq
 800992e:	2301      	moveq	r3, #1
 8009930:	2300      	movne	r3, #0
 8009932:	b2db      	uxtb	r3, r3
 8009934:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d018      	beq.n	800996e <rpmsg_get_endpoint+0xa6>
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d015      	beq.n	800996e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009948:	d006      	beq.n	8009958 <rpmsg_get_endpoint+0x90>
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d101      	bne.n	8009958 <rpmsg_get_endpoint+0x90>
			return ept;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	e013      	b.n	8009980 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800995e:	d107      	bne.n	8009970 <rpmsg_get_endpoint+0xa8>
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009968:	d102      	bne.n	8009970 <rpmsg_get_endpoint+0xa8>
			return ept;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	e008      	b.n	8009980 <rpmsg_get_endpoint+0xb8>
			continue;
 800996e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	69fa      	ldr	r2, [r7, #28]
 800997a:	429a      	cmp	r2, r3
 800997c:	d1af      	bne.n	80098de <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3720      	adds	r7, #32
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d016      	beq.n	80099c4 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099a4:	d008      	beq.n	80099b8 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80099b0:	461a      	mov	r2, r3
 80099b2:	2180      	movs	r1, #128	@ 0x80
 80099b4:	f7ff feec 	bl	8009790 <rpmsg_release_address>
	metal_list_del(&ept->node);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3334      	adds	r3, #52	@ 0x34
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fe0f 	bl	80095e0 <metal_list_del>
 80099c2:	e000      	b.n	80099c6 <rpmsg_unregister_endpoint+0x3e>
		return;
 80099c4:	bf00      	nop
}
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	3334      	adds	r3, #52	@ 0x34
 80099e2:	4619      	mov	r1, r3
 80099e4:	4610      	mov	r0, r2
 80099e6:	f7ff fdee 	bl	80095c6 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af02      	add	r7, sp, #8
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	613b      	str	r3, [r7, #16]

	if (!ept)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8009a0c:	4b37      	ldr	r3, [pc, #220]	@ (8009aec <rpmsg_create_ept+0xf8>)
 8009a0e:	e068      	b.n	8009ae2 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	3358      	adds	r3, #88	@ 0x58
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff fda6 	bl	8009566 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a20:	d018      	beq.n	8009a54 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	3348      	adds	r3, #72	@ 0x48
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	2180      	movs	r1, #128	@ 0x80
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fec2 	bl	80097b4 <rpmsg_is_address_set>
 8009a30:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d107      	bne.n	8009a48 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	3348      	adds	r3, #72	@ 0x48
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	2180      	movs	r1, #128	@ 0x80
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fecf 	bl	80097e4 <rpmsg_set_address>
 8009a46:	e00c      	b.n	8009a62 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dd40      	ble.n	8009ad0 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8009a52:	e040      	b.n	8009ad6 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	3348      	adds	r3, #72	@ 0x48
 8009a58:	2180      	movs	r1, #128	@ 0x80
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7ff fe79 	bl	8009752 <rpmsg_get_address>
 8009a60:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8009a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f7ff fe51 	bl	8009718 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	68b8      	ldr	r0, [r7, #8]
 8009a7a:	f7ff ffa7 	bl	80099cc <rpmsg_register_endpoint>
 8009a7e:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	da06      	bge.n	8009a94 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	3348      	adds	r3, #72	@ 0x48
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	2180      	movs	r1, #128	@ 0x80
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7ff fe7e 	bl	8009790 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d11c      	bne.n	8009ad4 <rpmsg_create_ept+0xe0>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009aa2:	d117      	bne.n	8009ad4 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	3358      	adds	r3, #88	@ 0x58
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff fd67 	bl	800957c <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8009aae:	2100      	movs	r1, #0
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7ff fee1 	bl	8009878 <rpmsg_send_ns_message>
 8009ab6:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	3358      	adds	r3, #88	@ 0x58
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff fd52 	bl	8009566 <metal_mutex_acquire>
		if (status)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8009ac8:	68f8      	ldr	r0, [r7, #12]
 8009aca:	f7ff ff5d 	bl	8009988 <rpmsg_unregister_endpoint>
 8009ace:	e002      	b.n	8009ad6 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8009ad0:	bf00      	nop
 8009ad2:	e000      	b.n	8009ad6 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8009ad4:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	3358      	adds	r3, #88	@ 0x58
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7ff fd4e 	bl	800957c <metal_mutex_release>
	return status;
 8009ae0:	697b      	ldr	r3, [r7, #20]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	fffff82d 	.word	0xfffff82d

08009af0 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d018      	beq.n	8009b30 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b08:	2b35      	cmp	r3, #53	@ 0x35
 8009b0a:	d003      	beq.n	8009b14 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff feb2 	bl	8009878 <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	3358      	adds	r3, #88	@ 0x58
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff fd24 	bl	8009566 <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff ff32 	bl	8009988 <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3358      	adds	r3, #88	@ 0x58
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7ff fd27 	bl	800957c <metal_mutex_release>
 8009b2e:	e000      	b.n	8009b32 <rpmsg_destroy_ept+0x42>
		return;
 8009b30:	bf00      	nop
}
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <__metal_cache_invalidate>:
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fd10 	bl	800a56a <metal_machine_cache_invalidate>
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <metal_cache_invalidate>:
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff ffea 	bl	8009b38 <__metal_cache_invalidate>
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff ffee 	bl	8009b6c <__metal_sleep_usec>
 8009b90:	4603      	mov	r3, r0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <metal_list_init>:
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	605a      	str	r2, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	601a      	str	r2, [r3, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <metal_list_is_empty>:
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	bf0c      	ite	eq
 8009bce:	2301      	moveq	r3, #1
 8009bd0:	2300      	movne	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <metal_io_virt_to_offset>:
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d201      	bcs.n	8009c02 <metal_io_virt_to_offset+0x22>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	e001      	b.n	8009c06 <metal_io_virt_to_offset+0x26>
 8009c02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <__metal_mutex_init>:
{
 8009c12:	b480      	push	{r7}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	461a      	mov	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f3bf 8f5b 	dmb	ish
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	f3bf 8f5b 	dmb	ish
}
 8009c32:	bf00      	nop
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <__metal_mutex_deinit>:
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
}
 8009c46:	bf00      	nop
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <__metal_mutex_acquire>:
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8009c5a:	bf00      	nop
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4611      	mov	r1, r2
 8009c62:	f3bf 8f5b 	dmb	ish
 8009c66:	e8d3 2f4f 	ldrexb	r2, [r3]
 8009c6a:	e8c3 1f40 	strexb	r0, r1, [r3]
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d1f9      	bne.n	8009c66 <__metal_mutex_acquire+0x14>
 8009c72:	f3bf 8f5b 	dmb	ish
 8009c76:	b2d3      	uxtb	r3, r2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1ef      	bne.n	8009c5c <__metal_mutex_acquire+0xa>
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <__metal_mutex_release>:
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f3bf 8f5b 	dmb	ish
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	f3bf 8f5b 	dmb	ish
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <metal_mutex_init>:
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7ff ffac 	bl	8009c12 <__metal_mutex_init>
}
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <metal_mutex_deinit>:
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff ffb7 	bl	8009c3e <__metal_mutex_deinit>
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <metal_mutex_acquire>:
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff ffb6 	bl	8009c52 <__metal_mutex_acquire>
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <metal_mutex_release>:
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff ffc7 	bl	8009c8a <__metal_mutex_release>
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <rpmsg_init_ept>:
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
 8009d10:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2220      	movs	r2, #32
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 fc0f 	bl	800b53c <strncpy>
	ept->addr = src;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	69fa      	ldr	r2, [r7, #28]
 8009d34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d4a:	699b      	ldr	r3, [r3, #24]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009d70:	78f9      	ldrb	r1, [r7, #3]
 8009d72:	4610      	mov	r0, r2
 8009d74:	4798      	blx	r3
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
 8009d96:	4603      	mov	r3, r0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009db4:	4610      	mov	r0, r2
 8009db6:	4798      	blx	r3
 8009db8:	4603      	mov	r3, r0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b086      	sub	sp, #24
 8009dc6:	af02      	add	r7, sp, #8
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	607a      	str	r2, [r7, #4]
 8009dce:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8009dd4:	68b9      	ldr	r1, [r7, #8]
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	f000 fc19 	bl	800a614 <virtio_create_virtqueues>
 8009de2:	4603      	mov	r3, r0
					callbacks);
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8009df6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff fd62 	bl	80098c8 <rpmsg_get_endpoint>
 8009e04:	4603      	mov	r3, r0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d901      	bls.n	8009e26 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e00f      	b.n	8009e46 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6899      	ldr	r1, [r3, #8]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	1acb      	subs	r3, r1, r3
 8009e34:	4413      	add	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	605a      	str	r2, [r3, #4]

	return buffer;
 8009e44:	68fb      	ldr	r3, [r7, #12]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	60b9      	str	r1, [r7, #8]
 8009e5c:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01d      	beq.n	8009ea0 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f003 0303 	and.w	r3, r3, #3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <rpmsg_virtio_init_shm_pool+0x2c>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f023 0303 	bic.w	r3, r3, #3
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	e000      	b.n	8009e80 <rpmsg_virtio_init_shm_pool+0x2e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d004      	beq.n	8009e98 <rpmsg_virtio_init_shm_pool+0x46>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f023 0303 	bic.w	r3, r3, #3
 8009e94:	3304      	adds	r3, #4
 8009e96:	e000      	b.n	8009e9a <rpmsg_virtio_init_shm_pool+0x48>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	6053      	str	r3, [r2, #4]
 8009e9e:	e000      	b.n	8009ea2 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8009ea0:	bf00      	nop
}
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	@ 0x28
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff ff3f 	bl	8009d3e <rpmsg_virtio_get_role>
 8009ec0:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10d      	bne.n	8009ee4 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8009ed4:	f107 0114 	add.w	r1, r7, #20
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	2301      	movs	r3, #1
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f000 fce7 	bl	800a8b2 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8009ee4:	bf00      	nop
 8009ee6:	3720      	adds	r7, #32
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	@ 0x28
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	607a      	str	r2, [r7, #4]
 8009ef8:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff ff1f 	bl	8009d3e <rpmsg_virtio_get_role>
 8009f00:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10f      	bne.n	8009f28 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009f14:	f107 0114 	add.w	r1, r7, #20
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f000 fcc7 	bl	800a8b2 <virtqueue_add_buffer>
 8009f24:	4603      	mov	r3, r0
 8009f26:	e000      	b.n	8009f2a <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3720      	adds	r7, #32
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b086      	sub	sp, #24
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	60f8      	str	r0, [r7, #12]
 8009f3a:	60b9      	str	r1, [r7, #8]
 8009f3c:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7ff fefd 	bl	8009d3e <rpmsg_virtio_get_role>
 8009f44:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d116      	bne.n	8009f7e <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fcee 	bl	800a93a <virtqueue_get_buffer>
 8009f5e:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10b      	bne.n	8009f7e <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff ff4d 	bl	8009e0e <rpmsg_virtio_shm_pool_get_buffer>
 8009f74:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f7c:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8009f7e:	697b      	ldr	r3, [r7, #20]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff fed2 	bl	8009d3e <rpmsg_virtio_get_role>
 8009f9a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d107      	bne.n	8009fb6 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fcc3 	bl	800a93a <virtqueue_get_buffer>
 8009fb4:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d005      	beq.n	8009fc8 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	6978      	ldr	r0, [r7, #20]
 8009fc4:	f7ff fdc5 	bl	8009b52 <metal_cache_invalidate>
	}

	return data;
 8009fc8:	697b      	ldr	r3, [r7, #20]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3718      	adds	r7, #24
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff feaf 	bl	8009d3e <rpmsg_virtio_get_role>
 8009fe0:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d102      	bne.n	8009ff2 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8009fec:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8009ff0:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b090      	sub	sp, #64	@ 0x40
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 800a00e:	2300      	movs	r3, #0
 800a010:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 800a016:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a018:	f7ff feb1 	bl	8009d7e <rpmsg_virtio_get_status>
 800a01c:	4603      	mov	r3, r0
 800a01e:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 800a020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 800a02a:	4b46      	ldr	r3, [pc, #280]	@ (800a144 <rpmsg_virtio_send_offchannel_raw+0x148>)
 800a02c:	e086      	b.n	800a13c <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 800a02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 800a034:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a03a:	e001      	b.n	800a040 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	3358      	adds	r3, #88	@ 0x58
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff fe47 	bl	8009cd8 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 800a04a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a04c:	f7ff ffc1 	bl	8009fd2 <_rpmsg_virtio_get_buffer_size>
 800a050:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 800a052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a056:	429a      	cmp	r2, r3
 800a058:	dc08      	bgt.n	800a06c <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 800a05a:	f107 0216 	add.w	r2, r7, #22
 800a05e:	f107 0310 	add.w	r3, r7, #16
 800a062:	4619      	mov	r1, r3
 800a064:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a066:	f7ff ff64 	bl	8009f32 <rpmsg_virtio_get_tx_buffer>
 800a06a:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	3358      	adds	r3, #88	@ 0x58
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff fe3c 	bl	8009cee <metal_mutex_release>
		if (buffer || !tick_count)
 800a076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10e      	bne.n	800a09a <rpmsg_virtio_send_offchannel_raw+0x9e>
 800a07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 800a082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 800a088:	4b2f      	ldr	r3, [pc, #188]	@ (800a148 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 800a08a:	e057      	b.n	800a13c <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 800a08c:	200a      	movs	r0, #10
 800a08e:	f7ff fd78 	bl	8009b82 <metal_sleep_usec>
		tick_count--;
 800a092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a094:	3b01      	subs	r3, #1
 800a096:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 800a098:	e7d2      	b.n	800a040 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 800a09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 800a0a0:	4b2a      	ldr	r3, [pc, #168]	@ (800a14c <rpmsg_virtio_send_offchannel_raw+0x150>)
 800a0a2:	e04b      	b.n	800a13c <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 800a0ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 800a0bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0c0:	f7ff fd8e 	bl	8009be0 <metal_io_virt_to_offset>
 800a0c4:	4601      	mov	r1, r0
 800a0c6:	f107 0218 	add.w	r2, r7, #24
 800a0ca:	2310      	movs	r3, #16
 800a0cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ce:	f7fe fd84 	bl	8008bda <metal_io_block_write>
 800a0d2:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d6:	2b10      	cmp	r3, #16
 800a0d8:	d001      	beq.n	800a0de <rpmsg_virtio_send_offchannel_raw+0xe2>
 800a0da:	bf00      	nop
 800a0dc:	e7fd      	b.n	800a0da <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 800a0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e0:	3310      	adds	r3, #16
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0e6:	f7ff fd7b 	bl	8009be0 <metal_io_virt_to_offset>
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0f2:	f7fe fd72 	bl	8008bda <metal_io_block_write>
 800a0f6:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d001      	beq.n	800a104 <rpmsg_virtio_send_offchannel_raw+0x108>
 800a100:	bf00      	nop
 800a102:	e7fd      	b.n	800a100 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	3358      	adds	r3, #88	@ 0x58
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff fde5 	bl	8009cd8 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	8afb      	ldrh	r3, [r7, #22]
 800a112:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a114:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a116:	f7ff fee9 	bl	8009eec <rpmsg_virtio_enqueue_buffer>
 800a11a:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d001      	beq.n	800a126 <rpmsg_virtio_send_offchannel_raw+0x12a>
 800a122:	bf00      	nop
 800a124:	e7fd      	b.n	800a122 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 800a126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 fc7f 	bl	800aa2e <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	3358      	adds	r3, #88	@ 0x58
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff fdda 	bl	8009cee <metal_mutex_release>

	return size;
 800a13a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3740      	adds	r7, #64	@ 0x40
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	fffff82c 	.word	0xfffff82c
 800a148:	fffff82b 	.word	0xfffff82b
 800a14c:	fffff82e 	.word	0xfffff82e

0800a150 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 800a164:	b590      	push	{r4, r7, lr}
 800a166:	b08d      	sub	sp, #52	@ 0x34
 800a168:	af02      	add	r7, sp, #8
 800a16a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a176:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	3358      	adds	r3, #88	@ 0x58
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff fda9 	bl	8009cd8 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 800a186:	f107 020a 	add.w	r2, r7, #10
 800a18a:	f107 030c 	add.w	r3, r7, #12
 800a18e:	4619      	mov	r1, r3
 800a190:	69f8      	ldr	r0, [r7, #28]
 800a192:	f7ff fef9 	bl	8009f88 <rpmsg_virtio_get_rx_buffer>
 800a196:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	3358      	adds	r3, #88	@ 0x58
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7ff fda6 	bl	8009cee <metal_mutex_release>

	while (rp_hdr) {
 800a1a2:	e04d      	b.n	800a240 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	3358      	adds	r3, #88	@ 0x58
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7ff fd95 	bl	8009cd8 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	69b8      	ldr	r0, [r7, #24]
 800a1b6:	f7ff fe19 	bl	8009dec <rpmsg_get_ept_from_addr>
 800a1ba:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	3358      	adds	r3, #88	@ 0x58
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff fd94 	bl	8009cee <metal_mutex_release>

		if (!ept)
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d03d      	beq.n	800a248 <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1d4:	d103      	bne.n	800a1de <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e4:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ea:	899b      	ldrh	r3, [r3, #12]
 800a1ec:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6978      	ldr	r0, [r7, #20]
 800a200:	47a0      	blx	r4
 800a202:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <rpmsg_virtio_rx_callback+0xaa>
 800a20a:	bf00      	nop
 800a20c:	e7fd      	b.n	800a20a <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	3358      	adds	r3, #88	@ 0x58
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff fd60 	bl	8009cd8 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	897b      	ldrh	r3, [r7, #10]
 800a21c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a21e:	69f8      	ldr	r0, [r7, #28]
 800a220:	f7ff fe44 	bl	8009eac <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 800a224:	f107 020a 	add.w	r2, r7, #10
 800a228:	f107 030c 	add.w	r3, r7, #12
 800a22c:	4619      	mov	r1, r3
 800a22e:	69f8      	ldr	r0, [r7, #28]
 800a230:	f7ff feaa 	bl	8009f88 <rpmsg_virtio_get_rx_buffer>
 800a234:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	3358      	adds	r3, #88	@ 0x58
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff fd57 	bl	8009cee <metal_mutex_release>
	while (rp_hdr) {
 800a240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1ae      	bne.n	800a1a4 <rpmsg_virtio_rx_callback+0x40>
 800a246:	e000      	b.n	800a24a <rpmsg_virtio_rx_callback+0xe6>
			return;
 800a248:	bf00      	nop
	}
}
 800a24a:	372c      	adds	r7, #44	@ 0x2c
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd90      	pop	{r4, r7, pc}

0800a250 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b092      	sub	sp, #72	@ 0x48
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 800a264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a266:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 800a268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a26a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a26c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b28      	cmp	r3, #40	@ 0x28
 800a276:	d001      	beq.n	800a27c <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 800a278:	2300      	movs	r3, #0
 800a27a:	e057      	b.n	800a32c <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 800a27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 800a27e:	4619      	mov	r1, r3
 800a280:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a282:	f7ff fcad 	bl	8009be0 <metal_io_virt_to_offset>
 800a286:	4601      	mov	r1, r0
 800a288:	f107 0210 	add.w	r2, r7, #16
 800a28c:	2320      	movs	r3, #32
 800a28e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a290:	f7fe fc2c 	bl	8008aec <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 800a294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 800a29a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a29c:	3358      	adds	r3, #88	@ 0x58
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff fd1a 	bl	8009cd8 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 800a2a4:	f107 0110 	add.w	r1, r7, #16
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a2b0:	f7ff fb0a 	bl	80098c8 <rpmsg_get_endpoint>
 800a2b4:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 800a2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d017      	beq.n	800a2f2 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2ce:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 800a2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d2:	3358      	adds	r3, #88	@ 0x58
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff fd0a 	bl	8009cee <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d024      	beq.n	800a32a <rpmsg_virtio_ns_callback+0xda>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d020      	beq.n	800a32a <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	4798      	blx	r3
 800a2f0:	e01b      	b.n	800a32a <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d110      	bne.n	800a31a <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 800a2f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2fa:	3358      	adds	r3, #88	@ 0x58
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fcf6 	bl	8009cee <metal_mutex_release>
			if (rdev->ns_bind_cb)
 800a302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00f      	beq.n	800a32a <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 800a30a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a30c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a30e:	f107 0110 	add.w	r1, r7, #16
 800a312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a314:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a316:	4798      	blx	r3
 800a318:	e007      	b.n	800a32a <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a31e:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 800a320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a322:	3358      	adds	r3, #88	@ 0x58
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fce2 	bl	8009cee <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3748      	adds	r7, #72	@ 0x48
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b094      	sub	sp, #80	@ 0x50
 800a338:	af02      	add	r7, sp, #8
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	63bb      	str	r3, [r7, #56]	@ 0x38
	memset(rdev, 0, sizeof(*rdev));
 800a346:	2264      	movs	r2, #100	@ 0x64
 800a348:	2100      	movs	r1, #0
 800a34a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a34c:	f001 f909 	bl	800b562 <memset>
	metal_mutex_init(&rdev->lock);
 800a350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a352:	3358      	adds	r3, #88	@ 0x58
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff fca9 	bl	8009cac <metal_mutex_init>
	rvdev->vdev = vdev;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	4a5d      	ldr	r2, [pc, #372]	@ (800a4e4 <rpmsg_init_vdev+0x1b0>)
 800a370:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f7ff fce3 	bl	8009d3e <rpmsg_virtio_get_role>
 800a378:	6378      	str	r0, [r7, #52]	@ 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d120      	bne.n	800a3c2 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 800a380:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 800a386:	4b58      	ldr	r3, [pc, #352]	@ (800a4e8 <rpmsg_init_vdev+0x1b4>)
 800a388:	e0a7      	b.n	800a4da <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800a38a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 800a392:	4b56      	ldr	r3, [pc, #344]	@ (800a4ec <rpmsg_init_vdev+0x1b8>)
 800a394:	e0a1      	b.n	800a4da <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a39a:	675a      	str	r2, [r3, #116]	@ 0x74

		vq_names[0] = "rx_vq";
 800a39c:	4b54      	ldr	r3, [pc, #336]	@ (800a4f0 <rpmsg_init_vdev+0x1bc>)
 800a39e:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 800a3a0:	4b54      	ldr	r3, [pc, #336]	@ (800a4f4 <rpmsg_init_vdev+0x1c0>)
 800a3a2:	627b      	str	r3, [r7, #36]	@ 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 800a3a4:	4b54      	ldr	r3, [pc, #336]	@ (800a4f8 <rpmsg_init_vdev+0x1c4>)
 800a3a6:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 800a3a8:	4b54      	ldr	r3, [pc, #336]	@ (800a4fc <rpmsg_init_vdev+0x1c8>)
 800a3aa:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ba:	3318      	adds	r3, #24
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	66da      	str	r2, [r3, #108]	@ 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	671a      	str	r2, [r3, #112]	@ 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 800a3c8:	f107 0220 	add.w	r2, r7, #32
 800a3cc:	f107 0318 	add.w	r3, r7, #24
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f7ff fcf2 	bl	8009dc2 <rpmsg_virtio_create_virtqueues>
 800a3de:	6478      	str	r0, [r7, #68]	@ 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 800a3e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <rpmsg_init_vdev+0xb6>
		return status;
 800a3e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3e8:	e077      	b.n	800a4da <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3ee:	e00f      	b.n	800a410 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a3f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	4413      	add	r3, r2
 800a3fc:	00db      	lsls	r3, r3, #3
 800a3fe:	440b      	add	r3, r1
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	62bb      	str	r3, [r7, #40]	@ 0x28
		vq->shm_io = shm_io;
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800a40a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a40c:	3301      	adds	r3, #1
 800a40e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a410:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a412:	2b01      	cmp	r3, #1
 800a414:	d9ec      	bls.n	800a3f0 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800a416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d137      	bne.n	800a48c <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 800a41c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a420:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a422:	2300      	movs	r3, #0
 800a424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a426:	e02a      	b.n	800a47e <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 800a428:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a42c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a42e:	f7ff fcee 	bl	8009e0e <rpmsg_virtio_shm_pool_get_buffer>
 800a432:	6338      	str	r0, [r7, #48]	@ 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 800a43a:	4b2c      	ldr	r3, [pc, #176]	@ (800a4ec <rpmsg_init_vdev+0x1b8>)
 800a43c:	e04d      	b.n	800a4da <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 800a442:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a444:	6838      	ldr	r0, [r7, #0]
 800a446:	f7ff fbcb 	bl	8009be0 <metal_io_virt_to_offset>
 800a44a:	4601      	mov	r1, r0
 800a44c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a450:	2200      	movs	r2, #0
 800a452:	6838      	ldr	r0, [r7, #0]
 800a454:	f7fe fc37 	bl	8008cc6 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800a45c:	f107 0110 	add.w	r1, r7, #16
 800a460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	2301      	movs	r3, #1
 800a466:	2200      	movs	r2, #0
 800a468:	f000 fa23 	bl	800a8b2 <virtqueue_add_buffer>
 800a46c:	6478      	str	r0, [r7, #68]	@ 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800a46e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a470:	2b00      	cmp	r3, #0
 800a472:	d001      	beq.n	800a478 <rpmsg_init_vdev+0x144>
				return status;
 800a474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a476:	e030      	b.n	800a4da <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 800a478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a47a:	3301      	adds	r3, #1
 800a47c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a482:	895b      	ldrh	r3, [r3, #10]
 800a484:	461a      	mov	r2, r3
 800a486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a488:	4293      	cmp	r3, r2
 800a48a:	d3cd      	bcc.n	800a428 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	4618      	mov	r0, r3
 800a490:	f7ff fb83 	bl	8009b9a <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff fc83 	bl	8009da0 <rpmsg_virtio_get_features>
 800a49a:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800a49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d011      	beq.n	800a4ca <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a8:	f103 0008 	add.w	r0, r3, #8
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	4b13      	ldr	r3, [pc, #76]	@ (800a500 <rpmsg_init_vdev+0x1cc>)
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2335      	movs	r3, #53	@ 0x35
 800a4b6:	2235      	movs	r2, #53	@ 0x35
 800a4b8:	4912      	ldr	r1, [pc, #72]	@ (800a504 <rpmsg_init_vdev+0x1d0>)
 800a4ba:	f7ff fc23 	bl	8009d04 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800a4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4c6:	f7ff fa81 	bl	80099cc <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 800a4d0:	2104      	movs	r1, #4
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f7ff fc40 	bl	8009d58 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 800a4d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3748      	adds	r7, #72	@ 0x48
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	08009ffd 	.word	0x08009ffd
 800a4e8:	fffff82d 	.word	0xfffff82d
 800a4ec:	fffff82e 	.word	0xfffff82e
 800a4f0:	0800c370 	.word	0x0800c370
 800a4f4:	0800c378 	.word	0x0800c378
 800a4f8:	0800a165 	.word	0x0800a165
 800a4fc:	0800a151 	.word	0x0800a151
 800a500:	0800a251 	.word	0x0800a251
 800a504:	0800c380 	.word	0x0800c380

0800a508 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 800a514:	e008      	b.n	800a528 <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	3b34      	subs	r3, #52	@ 0x34
 800a520:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7ff fae4 	bl	8009af0 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fb46 	bl	8009bbc <metal_list_is_empty>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0ef      	beq.n	800a516 <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	669a      	str	r2, [r3, #104]	@ 0x68
	rvdev->svq = 0;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	66da      	str	r2, [r3, #108]	@ 0x6c

	metal_mutex_deinit(&rdev->lock);
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	3358      	adds	r3, #88	@ 0x58
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff fbbb 	bl	8009cc2 <metal_mutex_deinit>
}
 800a54c:	bf00      	nop
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a55e:	bf00      	nop
 800a560:	370c      	adds	r7, #12
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800a58e:	68fb      	ldr	r3, [r7, #12]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	011b      	lsls	r3, r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	3303      	adds	r3, #3
 800a5b0:	005a      	lsls	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	4413      	add	r3, r2
 800a5be:	1e5a      	subs	r2, r3, #1
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	425b      	negs	r3, r3
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3306      	adds	r3, #6
 800a5d2:	60fb      	str	r3, [r7, #12]

	return size;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <metal_io_virt_to_offset>:
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b085      	sub	sp, #20
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d201      	bcs.n	800a604 <metal_io_virt_to_offset+0x22>
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	e001      	b.n	800a608 <metal_io_virt_to_offset+0x26>
 800a604:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3714      	adds	r7, #20
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 800a614:	b590      	push	{r4, r7, lr}
 800a616:	b091      	sub	sp, #68	@ 0x44
 800a618:	af04      	add	r7, sp, #16
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a626:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (nvqs > num_vrings)
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d902      	bls.n	800a636 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 800a630:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 800a634:	e053      	b.n	800a6de <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 800a636:	2300      	movs	r3, #0
 800a638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a63a:	e04b      	b.n	800a6d4 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a640:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a642:	4613      	mov	r3, r2
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	4413      	add	r3, r2
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	440b      	add	r3, r1
 800a64c:	627b      	str	r3, [r7, #36]	@ 0x24

		vring_alloc = &vring_info->info;
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	3304      	adds	r3, #4
 800a652:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d118      	bne.n	800a68e <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 800a662:	6a3b      	ldr	r3, [r7, #32]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4619      	mov	r1, r3
 800a668:	69f8      	ldr	r0, [r7, #28]
 800a66a:	f7ff ffba 	bl	800a5e2 <metal_io_virt_to_offset>
 800a66e:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 800a674:	461a      	mov	r2, r3
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	4619      	mov	r1, r3
 800a67c:	4610      	mov	r0, r2
 800a67e:	f7ff ff8d 	bl	800a59c <vring_size>
 800a682:	4603      	mov	r3, r0
 800a684:	2200      	movs	r2, #0
 800a686:	69b9      	ldr	r1, [r7, #24]
 800a688:	69f8      	ldr	r0, [r7, #28]
 800a68a:	f7fe fb1c 	bl	8008cc6 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a690:	b298      	uxth	r0, r3
 800a692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	4413      	add	r3, r2
 800a69a:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6a2:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a6a4:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	6a12      	ldr	r2, [r2, #32]
 800a6aa:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800a6ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6ae:	6809      	ldr	r1, [r1, #0]
 800a6b0:	9102      	str	r1, [sp, #8]
 800a6b2:	9201      	str	r2, [sp, #4]
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f8c4 	bl	800a84a <virtqueue_create>
 800a6c2:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <virtio_create_virtqueues+0xba>
			return ret;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	e007      	b.n	800a6de <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d3af      	bcc.n	800a63c <virtio_create_virtqueues+0x28>
	}
	return 0;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3734      	adds	r7, #52	@ 0x34
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd90      	pop	{r4, r7, pc}

0800a6e6 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b085      	sub	sp, #20
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	607a      	str	r2, [r7, #4]
 800a6f2:	603b      	str	r3, [r7, #0]
	vr->num = num;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	011b      	lsls	r3, r3, #4
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	441a      	add	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	4413      	add	r3, r2
 800a716:	3304      	adds	r3, #4
 800a718:	461a      	mov	r2, r3
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 800a71e:	1c5a      	adds	r2, r3, #1
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	425b      	negs	r3, r3
 800a724:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 800a726:	461a      	mov	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	60da      	str	r2, [r3, #12]
}
 800a72c:	bf00      	nop
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	80fb      	strh	r3, [r7, #6]
 800a742:	460b      	mov	r3, r1
 800a744:	80bb      	strh	r3, [r7, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 800a74a:	88ba      	ldrh	r2, [r7, #4]
 800a74c:	88fb      	ldrh	r3, [r7, #6]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	b29b      	uxth	r3, r3
 800a752:	3b01      	subs	r3, #1
 800a754:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 800a756:	88b9      	ldrh	r1, [r7, #4]
 800a758:	887b      	ldrh	r3, [r7, #2]
 800a75a:	1acb      	subs	r3, r1, r3
 800a75c:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800a75e:	429a      	cmp	r2, r3
 800a760:	bf34      	ite	cc
 800a762:	2301      	movcc	r3, #1
 800a764:	2300      	movcs	r3, #0
 800a766:	b2db      	uxtb	r3, r3
}
 800a768:	4618      	mov	r0, r3
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <metal_io_virt_to_offset>:
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d201      	bcs.n	800a796 <metal_io_virt_to_offset+0x22>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	e001      	b.n	800a79a <metal_io_virt_to_offset+0x26>
 800a796:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <metal_io_phys>:
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b085      	sub	sp, #20
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 800a7b4:	2b1f      	cmp	r3, #31
 800a7b6:	d805      	bhi.n	800a7c4 <metal_io_phys+0x1e>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c2:	e000      	b.n	800a7c6 <metal_io_phys+0x20>
 800a7c4:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 800a7c6:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d010      	beq.n	800a7f2 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d80b      	bhi.n	800a7f2 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6919      	ldr	r1, [r3, #16]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800a7ee:	4413      	add	r3, r2
 800a7f0:	e001      	b.n	800a7f6 <metal_io_phys+0x50>
 800a7f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <metal_io_virt_to_phys>:
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 800a80c:	6839      	ldr	r1, [r7, #0]
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7ff ffb0 	bl	800a774 <metal_io_virt_to_offset>
 800a814:	4603      	mov	r3, r0
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff ffc4 	bl	800a7a6 <metal_io_phys>
 800a81e:	4603      	mov	r3, r0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a836:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f7ff ffe1 	bl	800a802 <metal_io_virt_to_phys>
 800a840:	4603      	mov	r3, r0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b086      	sub	sp, #24
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
 800a856:	460b      	mov	r3, r1
 800a858:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d121      	bne.n	800a8a8 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 800a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a872:	897a      	ldrh	r2, [r7, #10]
 800a874:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	891a      	ldrh	r2, [r3, #8]
 800a87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87c:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800a87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a880:	895a      	ldrh	r2, [r3, #10]
 800a882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a884:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 800a886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a888:	6a3a      	ldr	r2, [r7, #32]
 800a88a:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800a88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a890:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	6819      	ldr	r1, [r3, #0]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	461a      	mov	r2, r3
 800a89c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a89e:	f000 f97a 	bl	800ab96 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 800a8a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8a4:	f000 f899 	bl	800a9da <virtqueue_disable_cb>
	}

	return (status);
 800a8a8:	697b      	ldr	r3, [r7, #20]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b08a      	sub	sp, #40	@ 0x28
 800a8b6:	af02      	add	r7, sp, #8
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d12c      	bne.n	800a930 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800a8da:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800a8dc:	8a7b      	ldrh	r3, [r7, #18]
 800a8de:	3307      	adds	r3, #7
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8ec:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	69d9      	ldr	r1, [r3, #28]
 800a8fa:	8a7a      	ldrh	r2, [r7, #18]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	9301      	str	r3, [sp, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 f8a7 	bl	800aa5a <vq_ring_add_buffer>
 800a90c:	4603      	mov	r3, r0
 800a90e:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	8a3a      	ldrh	r2, [r7, #16]
 800a914:	861a      	strh	r2, [r3, #48]	@ 0x30
		vq->vq_free_cnt -= needed;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	b29a      	uxth	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	851a      	strh	r2, [r3, #40]	@ 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 800a926:	8a7b      	ldrh	r3, [r7, #18]
 800a928:	4619      	mov	r1, r3
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 f966 	bl	800abfc <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 800a930:	69bb      	ldr	r3, [r7, #24]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b088      	sub	sp, #32
 800a93e:	af00      	add	r7, sp, #0
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	60b9      	str	r1, [r7, #8]
 800a944:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d006      	beq.n	800a95a <virtqueue_get_buffer+0x20>
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a954:	885b      	ldrh	r3, [r3, #2]
 800a956:	429a      	cmp	r2, r3
 800a958:	d101      	bne.n	800a95e <virtqueue_get_buffer+0x24>
		return (NULL);
 800a95a:	2300      	movs	r3, #0
 800a95c:	e039      	b.n	800a9d2 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	b291      	uxth	r1, r2
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	8651      	strh	r1, [r2, #50]	@ 0x32
 800a96a:	b21a      	sxth	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	895b      	ldrh	r3, [r3, #10]
 800a970:	3b01      	subs	r3, #1
 800a972:	b29b      	uxth	r3, r3
 800a974:	b21b      	sxth	r3, r3
 800a976:	4013      	ands	r3, r2
 800a978:	b21b      	sxth	r3, r3
 800a97a:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a980:	8bfb      	ldrh	r3, [r7, #30]
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	4413      	add	r3, r2
 800a986:	3304      	adds	r3, #4
 800a988:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800a98a:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	82fb      	strh	r3, [r7, #22]
	if (len)
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 800a9a2:	8afb      	ldrh	r3, [r7, #22]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f8ae 	bl	800ab08 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800a9ac:	8afa      	ldrh	r2, [r7, #22]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3207      	adds	r2, #7
 800a9b2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a9b6:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 800a9b8:	8afa      	ldrh	r2, [r7, #22]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3207      	adds	r2, #7
 800a9be:	2100      	movs	r1, #0
 800a9c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	8bfa      	ldrh	r2, [r7, #30]
 800a9ce:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 800a9d0:	693b      	ldr	r3, [r7, #16]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3720      	adds	r7, #32
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d010      	beq.n	800aa10 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	895b      	ldrh	r3, [r3, #10]
 800a9f6:	1ad3      	subs	r3, r2, r3
 800a9f8:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1a      	ldr	r2, [r3, #32]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800aa02:	3901      	subs	r1, #1
 800aa04:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	4413      	add	r3, r2
 800aa0a:	460a      	mov	r2, r1
 800aa0c:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 800aa0e:	e008      	b.n	800aa22 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	881a      	ldrh	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	f042 0201 	orr.w	r2, r2, #1
 800aa1e:	b292      	uxth	r2, r2
 800aa20:	801a      	strh	r2, [r3, #0]
}
 800aa22:	bf00      	nop
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b082      	sub	sp, #8
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 800aa36:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f91d 	bl	800ac7a <vq_ring_must_notify_host>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f94d 	bl	800ace6 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800aa5a:	b5b0      	push	{r4, r5, r7, lr}
 800aa5c:	b088      	sub	sp, #32
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4613      	mov	r3, r2
 800aa68:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800aa6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa6e:	4413      	add	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800aa72:	2300      	movs	r3, #0
 800aa74:	61fb      	str	r3, [r7, #28]
 800aa76:	88fb      	ldrh	r3, [r7, #6]
 800aa78:	837b      	strh	r3, [r7, #26]
 800aa7a:	e03c      	b.n	800aaf6 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800aa7c:	8b7b      	ldrh	r3, [r7, #26]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	4413      	add	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	00db      	lsls	r3, r3, #3
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4619      	mov	r1, r3
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fec8 	bl	800a828 <virtqueue_virt_to_phys>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	461c      	mov	r4, r3
 800aa9e:	4615      	mov	r5, r2
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4413      	add	r3, r2
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	461a      	mov	r2, r3
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2200      	movs	r2, #0
 800aaba:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	3b01      	subs	r3, #1
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	da06      	bge.n	800aad4 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	899b      	ldrh	r3, [r3, #12]
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	b29a      	uxth	r2, r3
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 800aad4:	69fa      	ldr	r2, [r7, #28]
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	429a      	cmp	r2, r3
 800aada:	db06      	blt.n	800aaea <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	899b      	ldrh	r3, [r3, #12]
 800aae0:	f043 0302 	orr.w	r3, r3, #2
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	3301      	adds	r3, #1
 800aaee:	61fb      	str	r3, [r7, #28]
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	89db      	ldrh	r3, [r3, #14]
 800aaf4:	837b      	strh	r3, [r7, #26]
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	dbbe      	blt.n	800aa7c <vq_ring_add_buffer+0x22>
	}

	return (idx);
 800aafe:	8b7b      	ldrh	r3, [r7, #26]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bdb0      	pop	{r4, r5, r7, pc}

0800ab08 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	69da      	ldr	r2, [r3, #28]
 800ab18:	887b      	ldrh	r3, [r7, #2]
 800ab1a:	011b      	lsls	r3, r3, #4
 800ab1c:	4413      	add	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 800ab20:	887b      	ldrh	r3, [r7, #2]
 800ab22:	3307      	adds	r3, #7
 800ab24:	00db      	lsls	r3, r3, #3
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	4413      	add	r3, r2
 800ab2a:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	889b      	ldrh	r3, [r3, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	851a      	strh	r2, [r3, #40]	@ 0x28
	dxp->ndescs--;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	889b      	ldrh	r3, [r3, #4]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	899b      	ldrh	r3, [r3, #12]
 800ab4c:	f003 0304 	and.w	r3, r3, #4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d113      	bne.n	800ab7c <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 800ab54:	e00c      	b.n	800ab70 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	69da      	ldr	r2, [r3, #28]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	89db      	ldrh	r3, [r3, #14]
 800ab5e:	011b      	lsls	r3, r3, #4
 800ab60:	4413      	add	r3, r2
 800ab62:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	889b      	ldrh	r3, [r3, #4]
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	899b      	ldrh	r3, [r3, #12]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1ec      	bne.n	800ab56 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	887a      	ldrh	r2, [r7, #2]
 800ab88:	861a      	strh	r2, [r3, #48]	@ 0x30
}
 800ab8a:	bf00      	nop
 800ab8c:	3714      	adds	r7, #20
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b088      	sub	sp, #32
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	895b      	ldrh	r3, [r3, #10]
 800aba6:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3318      	adds	r3, #24
 800abac:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800abae:	69b9      	ldr	r1, [r7, #24]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	6978      	ldr	r0, [r7, #20]
 800abb6:	f7ff fd96 	bl	800a6e6 <vring_init>

	for (i = 0; i < size - 1; i++)
 800abba:	2300      	movs	r3, #0
 800abbc:	61fb      	str	r3, [r7, #28]
 800abbe:	e00c      	b.n	800abda <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	6859      	ldr	r1, [r3, #4]
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	011b      	lsls	r3, r3, #4
 800abcc:	440b      	add	r3, r1
 800abce:	3201      	adds	r2, #1
 800abd0:	b292      	uxth	r2, r2
 800abd2:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	3301      	adds	r3, #1
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	3b01      	subs	r3, #1
 800abde:	69fa      	ldr	r2, [r7, #28]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	dbed      	blt.n	800abc0 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	685a      	ldr	r2, [r3, #4]
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	011b      	lsls	r3, r3, #4
 800abec:	4413      	add	r3, r2
 800abee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800abf2:	81da      	strh	r2, [r3, #14]
}
 800abf4:	bf00      	nop
 800abf6:	3720      	adds	r7, #32
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	460b      	mov	r3, r1
 800ac06:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	885b      	ldrh	r3, [r3, #2]
 800ac0e:	b21a      	sxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	895b      	ldrh	r3, [r3, #10]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	b21b      	sxth	r3, r3
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	b21b      	sxth	r3, r3
 800ac1e:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1a      	ldr	r2, [r3, #32]
 800ac24:	89fb      	ldrh	r3, [r7, #14]
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	4413      	add	r3, r2
 800ac2a:	887a      	ldrh	r2, [r7, #2]
 800ac2c:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 800ac2e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	885a      	ldrh	r2, [r3, #2]
 800ac38:	3201      	adds	r2, #1
 800ac3a:	b292      	uxth	r2, r2
 800ac3c:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac42:	3301      	adds	r3, #1
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ac4a:	bf00      	nop
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800ac5e:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <virtqueue_notification+0x1c>
		vq->callback(vq);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f003 0302 	and.w	r3, r3, #2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01d      	beq.n	800acca <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	885b      	ldrh	r3, [r3, #2]
 800ac94:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac9a:	89fa      	ldrh	r2, [r7, #14]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	699b      	ldr	r3, [r3, #24]
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	4413      	add	r3, r2
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 800acb0:	89ba      	ldrh	r2, [r7, #12]
 800acb2:	89f9      	ldrh	r1, [r7, #14]
 800acb4:	897b      	ldrh	r3, [r7, #10]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff fd3e 	bl	800a738 <vring_need_event>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf14      	ite	ne
 800acc2:	2301      	movne	r3, #1
 800acc4:	2300      	moveq	r3, #0
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	e009      	b.n	800acde <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bf0c      	ite	eq
 800acd8:	2301      	moveq	r3, #1
 800acda:	2300      	movne	r3, #0
 800acdc:	b2db      	uxtb	r3, r3
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3710      	adds	r7, #16
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <vq_ring_notify_host+0x18>
		vq->notify(vq);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	4798      	blx	r3
}
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 800ad10:	4b04      	ldr	r3, [pc, #16]	@ (800ad24 <HAL_HSEM_FreeCallback+0x1c>)
 800ad12:	2201      	movs	r2, #1
 800ad14:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800ad16:	2002      	movs	r0, #2
 800ad18:	f7f7 fa96 	bl	8002248 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 800ad1c:	bf00      	nop
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	24005238 	.word	0x24005238

0800ad28 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800ad2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad5c <MAILBOX_Init+0x34>)
 800ad30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad34:	4a09      	ldr	r2, [pc, #36]	@ (800ad5c <MAILBOX_Init+0x34>)
 800ad36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ad3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ad3e:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <MAILBOX_Init+0x34>)
 800ad40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 800ad4c:	2002      	movs	r0, #2
 800ad4e:	f7f7 fa7b 	bl	8002248 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	58024400 	.word	0x58024400

0800ad60 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 800ad68:	4b09      	ldr	r3, [pc, #36]	@ (800ad90 <MAILBOX_Poll+0x30>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d108      	bne.n	800ad82 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 800ad70:	2100      	movs	r1, #0
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f7fe fb75 	bl	8009462 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 800ad78:	4b05      	ldr	r3, [pc, #20]	@ (800ad90 <MAILBOX_Poll+0x30>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]
    return 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e001      	b.n	800ad86 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 800ad82:	f06f 030a 	mvn.w	r3, #10
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	24005238 	.word	0x24005238

0800ad94 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800ad9e:	2000      	movs	r0, #0
 800ada0:	f7f7 fa24 	bl	80021ec <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 800ada4:	2100      	movs	r1, #0
 800ada6:	2000      	movs	r0, #0
 800ada8:	f7f7 fa3a 	bl	8002220 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b083      	sub	sp, #12
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adc6:	d006      	beq.n	800add6 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 800adcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800add0:	d001      	beq.n	800add6 <is_rpmsg_ept_ready+0x20>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <is_rpmsg_ept_ready+0x22>
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 800adf2:	683a      	ldr	r2, [r7, #0]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d209      	bcs.n	800ae0c <metal_device_io_region+0x28>
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	4613      	mov	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4413      	add	r3, r2
 800ae00:	011b      	lsls	r3, r3, #4
 800ae02:	3308      	adds	r3, #8
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	4413      	add	r3, r2
 800ae08:	3304      	adds	r3, #4
 800ae0a:	e000      	b.n	800ae0e <metal_device_io_region+0x2a>
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
	...

0800ae1c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 800ae1c:	b590      	push	{r4, r7, lr}
 800ae1e:	b08d      	sub	sp, #52	@ 0x34
 800ae20:	af04      	add	r7, sp, #16
 800ae22:	6078      	str	r0, [r7, #4]
  int status = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 800ae2c:	4a41      	ldr	r2, [pc, #260]	@ (800af34 <OPENAMP_shmem_init+0x118>)
 800ae2e:	f107 0310 	add.w	r3, r7, #16
 800ae32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae36:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 800ae42:	f107 0310 	add.w	r3, r7, #16
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fd fda6 	bl	8008998 <metal_init>

  status = metal_register_generic_device(&shm_device);
 800ae4c:	483a      	ldr	r0, [pc, #232]	@ (800af38 <OPENAMP_shmem_init+0x11c>)
 800ae4e:	f7fd fc41 	bl	80086d4 <metal_register_generic_device>
 800ae52:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <OPENAMP_shmem_init+0x42>
    return status;
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	e066      	b.n	800af2c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 800ae5e:	f107 0318 	add.w	r3, r7, #24
 800ae62:	461a      	mov	r2, r3
 800ae64:	4935      	ldr	r1, [pc, #212]	@ (800af3c <OPENAMP_shmem_init+0x120>)
 800ae66:	4836      	ldr	r0, [pc, #216]	@ (800af40 <OPENAMP_shmem_init+0x124>)
 800ae68:	f7fd fbf6 	bl	8008658 <metal_device_open>
 800ae6c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <OPENAMP_shmem_init+0x5c>
    return status;
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	e059      	b.n	800af2c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 800ae78:	4a32      	ldr	r2, [pc, #200]	@ (800af44 <OPENAMP_shmem_init+0x128>)
 800ae7a:	4b33      	ldr	r3, [pc, #204]	@ (800af48 <OPENAMP_shmem_init+0x12c>)
 800ae7c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 800ae84:	4a31      	ldr	r2, [pc, #196]	@ (800af4c <OPENAMP_shmem_init+0x130>)
 800ae86:	4b2f      	ldr	r3, [pc, #188]	@ (800af44 <OPENAMP_shmem_init+0x128>)
 800ae88:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	9302      	str	r3, [sp, #8]
 800ae90:	2300      	movs	r3, #0
 800ae92:	9301      	str	r3, [sp, #4]
 800ae94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	4a2a      	ldr	r2, [pc, #168]	@ (800af48 <OPENAMP_shmem_init+0x12c>)
 800ae9e:	4929      	ldr	r1, [pc, #164]	@ (800af44 <OPENAMP_shmem_init+0x128>)
 800aea0:	f7fd fdd5 	bl	8008a4e <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	2100      	movs	r1, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff ff9b 	bl	800ade4 <metal_device_io_region>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4a27      	ldr	r2, [pc, #156]	@ (800af50 <OPENAMP_shmem_init+0x134>)
 800aeb2:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 800aeb4:	4b26      	ldr	r3, [pc, #152]	@ (800af50 <OPENAMP_shmem_init+0x134>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <OPENAMP_shmem_init+0xa6>
    return -1;
 800aebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aec0:	e034      	b.n	800af2c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 800aec2:	f107 0208 	add.w	r2, r7, #8
 800aec6:	f107 030c 	add.w	r3, r7, #12
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f929 	bl	800b124 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4a1f      	ldr	r2, [pc, #124]	@ (800af54 <OPENAMP_shmem_init+0x138>)
 800aed6:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 800aed8:	4b1e      	ldr	r3, [pc, #120]	@ (800af54 <OPENAMP_shmem_init+0x138>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d102      	bne.n	800aee6 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 800aee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aee4:	e022      	b.n	800af2c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800aeec:	4b19      	ldr	r3, [pc, #100]	@ (800af54 <OPENAMP_shmem_init+0x138>)
 800aeee:	6819      	ldr	r1, [r3, #0]
 800aef0:	4b18      	ldr	r3, [pc, #96]	@ (800af54 <OPENAMP_shmem_init+0x138>)
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	461c      	mov	r4, r3
 800aef8:	2300      	movs	r3, #0
 800aefa:	9302      	str	r3, [sp, #8]
 800aefc:	2300      	movs	r3, #0
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	4623      	mov	r3, r4
 800af08:	f7fd fda1 	bl	8008a4e <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2101      	movs	r1, #1
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff ff67 	bl	800ade4 <metal_device_io_region>
 800af16:	4603      	mov	r3, r0
 800af18:	4a0f      	ldr	r2, [pc, #60]	@ (800af58 <OPENAMP_shmem_init+0x13c>)
 800af1a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 800af1c:	4b0e      	ldr	r3, [pc, #56]	@ (800af58 <OPENAMP_shmem_init+0x13c>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <OPENAMP_shmem_init+0x10e>
    return -1;
 800af24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af28:	e000      	b.n	800af2c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3724      	adds	r7, #36	@ 0x24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd90      	pop	{r4, r7, pc}
 800af34:	0800c398 	.word	0x0800c398
 800af38:	24000098 	.word	0x24000098
 800af3c:	0800c384 	.word	0x0800c384
 800af40:	0800c390 	.word	0x0800c390
 800af44:	38000400 	.word	0x38000400
 800af48:	240052cc 	.word	0x240052cc
 800af4c:	38010000 	.word	0x38010000
 800af50:	2400523c 	.word	0x2400523c
 800af54:	24005244 	.word	0x24005244
 800af58:	24005240 	.word	0x24005240

0800af5c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 800af5c:	b590      	push	{r4, r7, lr}
 800af5e:	b08b      	sub	sp, #44	@ 0x2c
 800af60:	af04      	add	r7, sp, #16
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 800af6a:	2300      	movs	r3, #0
 800af6c:	613b      	str	r3, [r7, #16]
  int status = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 800af72:	f7ff fed9 	bl	800ad28 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff ff50 	bl	800ae1c <OPENAMP_shmem_init>
 800af7c:	60f8      	str	r0, [r7, #12]
  if(status)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	e06a      	b.n	800b05e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	4b37      	ldr	r3, [pc, #220]	@ (800b068 <MX_OPENAMP_Init+0x10c>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f103 0218 	add.w	r2, r3, #24
 800af92:	4b36      	ldr	r3, [pc, #216]	@ (800b06c <MX_OPENAMP_Init+0x110>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2100      	movs	r1, #0
 800af98:	9102      	str	r1, [sp, #8]
 800af9a:	4935      	ldr	r1, [pc, #212]	@ (800b070 <MX_OPENAMP_Init+0x114>)
 800af9c:	9101      	str	r1, [sp, #4]
 800af9e:	2100      	movs	r1, #0
 800afa0:	9100      	str	r1, [sp, #0]
 800afa2:	21ff      	movs	r1, #255	@ 0xff
 800afa4:	f7fe f97e 	bl	80092a4 <rproc_virtio_create_vdev>
 800afa8:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d102      	bne.n	800afb6 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 800afb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afb4:	e053      	b.n	800b05e <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 800afb6:	6938      	ldr	r0, [r7, #16]
 800afb8:	f7fe fa8f 	bl	80094da <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 800afbc:	4b2a      	ldr	r3, [pc, #168]	@ (800b068 <MX_OPENAMP_Init+0x10c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3334      	adds	r3, #52	@ 0x34
 800afc2:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800afcc:	461c      	mov	r4, r3
 800afce:	4b29      	ldr	r3, [pc, #164]	@ (800b074 <MX_OPENAMP_Init+0x118>)
 800afd0:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	6892      	ldr	r2, [r2, #8]
 800afd6:	6979      	ldr	r1, [r7, #20]
 800afd8:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 800afda:	9102      	str	r1, [sp, #8]
 800afdc:	9201      	str	r2, [sp, #4]
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	4623      	mov	r3, r4
 800afe2:	4602      	mov	r2, r0
 800afe4:	2100      	movs	r1, #0
 800afe6:	6938      	ldr	r0, [r7, #16]
 800afe8:	f7fe fa0a 	bl	8009400 <rproc_virtio_init_vring>
 800afec:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	e032      	b.n	800b05e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 800aff8:	4b1b      	ldr	r3, [pc, #108]	@ (800b068 <MX_OPENAMP_Init+0x10c>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3348      	adds	r3, #72	@ 0x48
 800affe:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b008:	461c      	mov	r4, r3
 800b00a:	4b1a      	ldr	r3, [pc, #104]	@ (800b074 <MX_OPENAMP_Init+0x118>)
 800b00c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	6892      	ldr	r2, [r2, #8]
 800b012:	6979      	ldr	r1, [r7, #20]
 800b014:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 800b016:	9102      	str	r1, [sp, #8]
 800b018:	9201      	str	r2, [sp, #4]
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	4623      	mov	r3, r4
 800b01e:	4602      	mov	r2, r0
 800b020:	2101      	movs	r1, #1
 800b022:	6938      	ldr	r0, [r7, #16]
 800b024:	f7fe f9ec 	bl	8009400 <rproc_virtio_init_vring>
 800b028:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	e014      	b.n	800b05e <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800b034:	4b10      	ldr	r3, [pc, #64]	@ (800b078 <MX_OPENAMP_Init+0x11c>)
 800b036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b03a:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 800b03c:	4a0f      	ldr	r2, [pc, #60]	@ (800b07c <MX_OPENAMP_Init+0x120>)
 800b03e:	4b0e      	ldr	r3, [pc, #56]	@ (800b078 <MX_OPENAMP_Init+0x11c>)
 800b040:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 800b042:	461a      	mov	r2, r3
 800b044:	480e      	ldr	r0, [pc, #56]	@ (800b080 <MX_OPENAMP_Init+0x124>)
 800b046:	f7fe ff04 	bl	8009e52 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 800b04a:	4b0a      	ldr	r3, [pc, #40]	@ (800b074 <MX_OPENAMP_Init+0x118>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a0c      	ldr	r2, [pc, #48]	@ (800b080 <MX_OPENAMP_Init+0x124>)
 800b050:	9200      	str	r2, [sp, #0]
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	6939      	ldr	r1, [r7, #16]
 800b056:	480b      	ldr	r0, [pc, #44]	@ (800b084 <MX_OPENAMP_Init+0x128>)
 800b058:	f7ff f96c 	bl	800a334 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	371c      	adds	r7, #28
 800b062:	46bd      	mov	sp, r7
 800b064:	bd90      	pop	{r4, r7, pc}
 800b066:	bf00      	nop
 800b068:	24005244 	.word	0x24005244
 800b06c:	24005240 	.word	0x24005240
 800b070:	0800ad95 	.word	0x0800ad95
 800b074:	2400523c 	.word	0x2400523c
 800b078:	38000400 	.word	0x38000400
 800b07c:	38010000 	.word	0x38010000
 800b080:	24005248 	.word	0x24005248
 800b084:	24005254 	.word	0x24005254

0800b088 <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 800b08c:	4803      	ldr	r0, [pc, #12]	@ (800b09c <OPENAMP_DeInit+0x14>)
 800b08e:	f7ff fa3b 	bl	800a508 <rpmsg_deinit_vdev>

  metal_finish();
 800b092:	f7fd fcb3 	bl	80089fc <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 800b096:	bf00      	nop
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	24005254 	.word	0x24005254

0800b0a0 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08a      	sub	sp, #40	@ 0x28
 800b0a4:	af04      	add	r7, sp, #16
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	603b      	str	r3, [r7, #0]
  int ret = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 800b0b2:	6a3b      	ldr	r3, [r7, #32]
 800b0b4:	9302      	str	r3, [sp, #8]
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	4904      	ldr	r1, [pc, #16]	@ (800b0d8 <OPENAMP_create_endpoint+0x38>)
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7fe fc94 	bl	80099f4 <rpmsg_create_ept>
 800b0cc:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 800b0ce:	697b      	ldr	r3, [r7, #20]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3718      	adds	r7, #24
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	24005254 	.word	0x24005254

0800b0dc <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 800b0e0:	4b03      	ldr	r3, [pc, #12]	@ (800b0f0 <OPENAMP_check_for_message+0x14>)
 800b0e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7ff fe3b 	bl	800ad60 <MAILBOX_Poll>
}
 800b0ea:	bf00      	nop
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	24005254 	.word	0x24005254

0800b0f4 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 800b0fc:	e004      	b.n	800b108 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 800b0fe:	4b08      	ldr	r3, [pc, #32]	@ (800b120 <OPENAMP_Wait_EndPointready+0x2c>)
 800b100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff fe2c 	bl	800ad60 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff fe54 	bl	800adb6 <is_rpmsg_ept_ready>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d0f4      	beq.n	800b0fe <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	24005254 	.word	0x24005254

0800b124 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 800b130:	228c      	movs	r2, #140	@ 0x8c
 800b132:	2100      	movs	r1, #0
 800b134:	481e      	ldr	r0, [pc, #120]	@ (800b1b0 <resource_table_init+0x8c>)
 800b136:	f000 fa14 	bl	800b562 <memset>
	resource_table.num = 1;
 800b13a:	4b1d      	ldr	r3, [pc, #116]	@ (800b1b0 <resource_table_init+0x8c>)
 800b13c:	2201      	movs	r2, #1
 800b13e:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 800b140:	4b1b      	ldr	r3, [pc, #108]	@ (800b1b0 <resource_table_init+0x8c>)
 800b142:	2201      	movs	r2, #1
 800b144:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 800b146:	4b1a      	ldr	r3, [pc, #104]	@ (800b1b0 <resource_table_init+0x8c>)
 800b148:	2218      	movs	r2, #24
 800b14a:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 800b14c:	4b19      	ldr	r3, [pc, #100]	@ (800b1b4 <resource_table_init+0x90>)
 800b14e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b152:	4a17      	ldr	r2, [pc, #92]	@ (800b1b0 <resource_table_init+0x8c>)
 800b154:	6353      	str	r3, [r2, #52]	@ 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 800b156:	4b16      	ldr	r3, [pc, #88]	@ (800b1b0 <resource_table_init+0x8c>)
 800b158:	2204      	movs	r2, #4
 800b15a:	639a      	str	r2, [r3, #56]	@ 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 800b15c:	4b14      	ldr	r3, [pc, #80]	@ (800b1b0 <resource_table_init+0x8c>)
 800b15e:	2204      	movs	r2, #4
 800b160:	63da      	str	r2, [r3, #60]	@ 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 800b162:	4b13      	ldr	r3, [pc, #76]	@ (800b1b0 <resource_table_init+0x8c>)
 800b164:	2200      	movs	r2, #0
 800b166:	641a      	str	r2, [r3, #64]	@ 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 800b168:	4a12      	ldr	r2, [pc, #72]	@ (800b1b4 <resource_table_init+0x90>)
 800b16a:	4b11      	ldr	r3, [pc, #68]	@ (800b1b0 <resource_table_init+0x8c>)
 800b16c:	649a      	str	r2, [r3, #72]	@ 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 800b16e:	4b10      	ldr	r3, [pc, #64]	@ (800b1b0 <resource_table_init+0x8c>)
 800b170:	2204      	movs	r2, #4
 800b172:	64da      	str	r2, [r3, #76]	@ 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 800b174:	4b0e      	ldr	r3, [pc, #56]	@ (800b1b0 <resource_table_init+0x8c>)
 800b176:	2204      	movs	r2, #4
 800b178:	651a      	str	r2, [r3, #80]	@ 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 800b17a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1b0 <resource_table_init+0x8c>)
 800b17c:	2201      	movs	r2, #1
 800b17e:	655a      	str	r2, [r3, #84]	@ 0x54

	resource_table.vdev.type = RSC_VDEV;
 800b180:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b0 <resource_table_init+0x8c>)
 800b182:	2203      	movs	r2, #3
 800b184:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 800b186:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b0 <resource_table_init+0x8c>)
 800b188:	2207      	movs	r2, #7
 800b18a:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 800b18c:	4b08      	ldr	r3, [pc, #32]	@ (800b1b0 <resource_table_init+0x8c>)
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 800b194:	4b06      	ldr	r3, [pc, #24]	@ (800b1b0 <resource_table_init+0x8c>)
 800b196:	2201      	movs	r2, #1
 800b198:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	228c      	movs	r2, #140	@ 0x8c
 800b19e:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	4a03      	ldr	r2, [pc, #12]	@ (800b1b0 <resource_table_init+0x8c>)
 800b1a4:	601a      	str	r2, [r3, #0]
}
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	38000000 	.word	0x38000000
 800b1b4:	38000400 	.word	0x38000400

0800b1b8 <__assert_func>:
 800b1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ba:	4614      	mov	r4, r2
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4b09      	ldr	r3, [pc, #36]	@ (800b1e4 <__assert_func+0x2c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	68d8      	ldr	r0, [r3, #12]
 800b1c6:	b954      	cbnz	r4, 800b1de <__assert_func+0x26>
 800b1c8:	4b07      	ldr	r3, [pc, #28]	@ (800b1e8 <__assert_func+0x30>)
 800b1ca:	461c      	mov	r4, r3
 800b1cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1d0:	9100      	str	r1, [sp, #0]
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	4905      	ldr	r1, [pc, #20]	@ (800b1ec <__assert_func+0x34>)
 800b1d6:	f000 f96f 	bl	800b4b8 <fiprintf>
 800b1da:	f000 fa16 	bl	800b60a <abort>
 800b1de:	4b04      	ldr	r3, [pc, #16]	@ (800b1f0 <__assert_func+0x38>)
 800b1e0:	e7f4      	b.n	800b1cc <__assert_func+0x14>
 800b1e2:	bf00      	nop
 800b1e4:	24000120 	.word	0x24000120
 800b1e8:	0800c49a 	.word	0x0800c49a
 800b1ec:	0800c46c 	.word	0x0800c46c
 800b1f0:	0800c45f 	.word	0x0800c45f

0800b1f4 <malloc>:
 800b1f4:	4b02      	ldr	r3, [pc, #8]	@ (800b200 <malloc+0xc>)
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	6818      	ldr	r0, [r3, #0]
 800b1fa:	f000 b82d 	b.w	800b258 <_malloc_r>
 800b1fe:	bf00      	nop
 800b200:	24000120 	.word	0x24000120

0800b204 <free>:
 800b204:	4b02      	ldr	r3, [pc, #8]	@ (800b210 <free+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f000 ba05 	b.w	800b618 <_free_r>
 800b20e:	bf00      	nop
 800b210:	24000120 	.word	0x24000120

0800b214 <sbrk_aligned>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4e0f      	ldr	r6, [pc, #60]	@ (800b254 <sbrk_aligned+0x40>)
 800b218:	460c      	mov	r4, r1
 800b21a:	6831      	ldr	r1, [r6, #0]
 800b21c:	4605      	mov	r5, r0
 800b21e:	b911      	cbnz	r1, 800b226 <sbrk_aligned+0x12>
 800b220:	f000 f9a8 	bl	800b574 <_sbrk_r>
 800b224:	6030      	str	r0, [r6, #0]
 800b226:	4621      	mov	r1, r4
 800b228:	4628      	mov	r0, r5
 800b22a:	f000 f9a3 	bl	800b574 <_sbrk_r>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d103      	bne.n	800b23a <sbrk_aligned+0x26>
 800b232:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b236:	4620      	mov	r0, r4
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	1cc4      	adds	r4, r0, #3
 800b23c:	f024 0403 	bic.w	r4, r4, #3
 800b240:	42a0      	cmp	r0, r4
 800b242:	d0f8      	beq.n	800b236 <sbrk_aligned+0x22>
 800b244:	1a21      	subs	r1, r4, r0
 800b246:	4628      	mov	r0, r5
 800b248:	f000 f994 	bl	800b574 <_sbrk_r>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d1f2      	bne.n	800b236 <sbrk_aligned+0x22>
 800b250:	e7ef      	b.n	800b232 <sbrk_aligned+0x1e>
 800b252:	bf00      	nop
 800b254:	240052d0 	.word	0x240052d0

0800b258 <_malloc_r>:
 800b258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	1ccd      	adds	r5, r1, #3
 800b25e:	f025 0503 	bic.w	r5, r5, #3
 800b262:	3508      	adds	r5, #8
 800b264:	2d0c      	cmp	r5, #12
 800b266:	bf38      	it	cc
 800b268:	250c      	movcc	r5, #12
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	4606      	mov	r6, r0
 800b26e:	db01      	blt.n	800b274 <_malloc_r+0x1c>
 800b270:	42a9      	cmp	r1, r5
 800b272:	d904      	bls.n	800b27e <_malloc_r+0x26>
 800b274:	230c      	movs	r3, #12
 800b276:	6033      	str	r3, [r6, #0]
 800b278:	2000      	movs	r0, #0
 800b27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b354 <_malloc_r+0xfc>
 800b282:	f000 f869 	bl	800b358 <__malloc_lock>
 800b286:	f8d8 3000 	ldr.w	r3, [r8]
 800b28a:	461c      	mov	r4, r3
 800b28c:	bb44      	cbnz	r4, 800b2e0 <_malloc_r+0x88>
 800b28e:	4629      	mov	r1, r5
 800b290:	4630      	mov	r0, r6
 800b292:	f7ff ffbf 	bl	800b214 <sbrk_aligned>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	4604      	mov	r4, r0
 800b29a:	d158      	bne.n	800b34e <_malloc_r+0xf6>
 800b29c:	f8d8 4000 	ldr.w	r4, [r8]
 800b2a0:	4627      	mov	r7, r4
 800b2a2:	2f00      	cmp	r7, #0
 800b2a4:	d143      	bne.n	800b32e <_malloc_r+0xd6>
 800b2a6:	2c00      	cmp	r4, #0
 800b2a8:	d04b      	beq.n	800b342 <_malloc_r+0xea>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	4639      	mov	r1, r7
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	eb04 0903 	add.w	r9, r4, r3
 800b2b4:	f000 f95e 	bl	800b574 <_sbrk_r>
 800b2b8:	4581      	cmp	r9, r0
 800b2ba:	d142      	bne.n	800b342 <_malloc_r+0xea>
 800b2bc:	6821      	ldr	r1, [r4, #0]
 800b2be:	1a6d      	subs	r5, r5, r1
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f7ff ffa6 	bl	800b214 <sbrk_aligned>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d03a      	beq.n	800b342 <_malloc_r+0xea>
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	442b      	add	r3, r5
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	bb62      	cbnz	r2, 800b334 <_malloc_r+0xdc>
 800b2da:	f8c8 7000 	str.w	r7, [r8]
 800b2de:	e00f      	b.n	800b300 <_malloc_r+0xa8>
 800b2e0:	6822      	ldr	r2, [r4, #0]
 800b2e2:	1b52      	subs	r2, r2, r5
 800b2e4:	d420      	bmi.n	800b328 <_malloc_r+0xd0>
 800b2e6:	2a0b      	cmp	r2, #11
 800b2e8:	d917      	bls.n	800b31a <_malloc_r+0xc2>
 800b2ea:	1961      	adds	r1, r4, r5
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	6025      	str	r5, [r4, #0]
 800b2f0:	bf18      	it	ne
 800b2f2:	6059      	strne	r1, [r3, #4]
 800b2f4:	6863      	ldr	r3, [r4, #4]
 800b2f6:	bf08      	it	eq
 800b2f8:	f8c8 1000 	streq.w	r1, [r8]
 800b2fc:	5162      	str	r2, [r4, r5]
 800b2fe:	604b      	str	r3, [r1, #4]
 800b300:	4630      	mov	r0, r6
 800b302:	f000 f82f 	bl	800b364 <__malloc_unlock>
 800b306:	f104 000b 	add.w	r0, r4, #11
 800b30a:	1d23      	adds	r3, r4, #4
 800b30c:	f020 0007 	bic.w	r0, r0, #7
 800b310:	1ac2      	subs	r2, r0, r3
 800b312:	bf1c      	itt	ne
 800b314:	1a1b      	subne	r3, r3, r0
 800b316:	50a3      	strne	r3, [r4, r2]
 800b318:	e7af      	b.n	800b27a <_malloc_r+0x22>
 800b31a:	6862      	ldr	r2, [r4, #4]
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	bf0c      	ite	eq
 800b320:	f8c8 2000 	streq.w	r2, [r8]
 800b324:	605a      	strne	r2, [r3, #4]
 800b326:	e7eb      	b.n	800b300 <_malloc_r+0xa8>
 800b328:	4623      	mov	r3, r4
 800b32a:	6864      	ldr	r4, [r4, #4]
 800b32c:	e7ae      	b.n	800b28c <_malloc_r+0x34>
 800b32e:	463c      	mov	r4, r7
 800b330:	687f      	ldr	r7, [r7, #4]
 800b332:	e7b6      	b.n	800b2a2 <_malloc_r+0x4a>
 800b334:	461a      	mov	r2, r3
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	42a3      	cmp	r3, r4
 800b33a:	d1fb      	bne.n	800b334 <_malloc_r+0xdc>
 800b33c:	2300      	movs	r3, #0
 800b33e:	6053      	str	r3, [r2, #4]
 800b340:	e7de      	b.n	800b300 <_malloc_r+0xa8>
 800b342:	230c      	movs	r3, #12
 800b344:	6033      	str	r3, [r6, #0]
 800b346:	4630      	mov	r0, r6
 800b348:	f000 f80c 	bl	800b364 <__malloc_unlock>
 800b34c:	e794      	b.n	800b278 <_malloc_r+0x20>
 800b34e:	6005      	str	r5, [r0, #0]
 800b350:	e7d6      	b.n	800b300 <_malloc_r+0xa8>
 800b352:	bf00      	nop
 800b354:	240052d4 	.word	0x240052d4

0800b358 <__malloc_lock>:
 800b358:	4801      	ldr	r0, [pc, #4]	@ (800b360 <__malloc_lock+0x8>)
 800b35a:	f000 b946 	b.w	800b5ea <__retarget_lock_acquire_recursive>
 800b35e:	bf00      	nop
 800b360:	24005414 	.word	0x24005414

0800b364 <__malloc_unlock>:
 800b364:	4801      	ldr	r0, [pc, #4]	@ (800b36c <__malloc_unlock+0x8>)
 800b366:	f000 b941 	b.w	800b5ec <__retarget_lock_release_recursive>
 800b36a:	bf00      	nop
 800b36c:	24005414 	.word	0x24005414

0800b370 <std>:
 800b370:	2300      	movs	r3, #0
 800b372:	b510      	push	{r4, lr}
 800b374:	4604      	mov	r4, r0
 800b376:	e9c0 3300 	strd	r3, r3, [r0]
 800b37a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b37e:	6083      	str	r3, [r0, #8]
 800b380:	8181      	strh	r1, [r0, #12]
 800b382:	6643      	str	r3, [r0, #100]	@ 0x64
 800b384:	81c2      	strh	r2, [r0, #14]
 800b386:	6183      	str	r3, [r0, #24]
 800b388:	4619      	mov	r1, r3
 800b38a:	2208      	movs	r2, #8
 800b38c:	305c      	adds	r0, #92	@ 0x5c
 800b38e:	f000 f8e8 	bl	800b562 <memset>
 800b392:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <std+0x58>)
 800b394:	6263      	str	r3, [r4, #36]	@ 0x24
 800b396:	4b0d      	ldr	r3, [pc, #52]	@ (800b3cc <std+0x5c>)
 800b398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b39a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d0 <std+0x60>)
 800b39c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b39e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <std+0x64>)
 800b3a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d8 <std+0x68>)
 800b3a4:	6224      	str	r4, [r4, #32]
 800b3a6:	429c      	cmp	r4, r3
 800b3a8:	d006      	beq.n	800b3b8 <std+0x48>
 800b3aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3ae:	4294      	cmp	r4, r2
 800b3b0:	d002      	beq.n	800b3b8 <std+0x48>
 800b3b2:	33d0      	adds	r3, #208	@ 0xd0
 800b3b4:	429c      	cmp	r4, r3
 800b3b6:	d105      	bne.n	800b3c4 <std+0x54>
 800b3b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3c0:	f000 b912 	b.w	800b5e8 <__retarget_lock_init_recursive>
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0800bda5 	.word	0x0800bda5
 800b3cc:	0800bdc7 	.word	0x0800bdc7
 800b3d0:	0800bdff 	.word	0x0800bdff
 800b3d4:	0800be23 	.word	0x0800be23
 800b3d8:	240052d8 	.word	0x240052d8

0800b3dc <stdio_exit_handler>:
 800b3dc:	4a02      	ldr	r2, [pc, #8]	@ (800b3e8 <stdio_exit_handler+0xc>)
 800b3de:	4903      	ldr	r1, [pc, #12]	@ (800b3ec <stdio_exit_handler+0x10>)
 800b3e0:	4803      	ldr	r0, [pc, #12]	@ (800b3f0 <stdio_exit_handler+0x14>)
 800b3e2:	f000 b87b 	b.w	800b4dc <_fwalk_sglue>
 800b3e6:	bf00      	nop
 800b3e8:	24000114 	.word	0x24000114
 800b3ec:	0800bd55 	.word	0x0800bd55
 800b3f0:	24000124 	.word	0x24000124

0800b3f4 <cleanup_stdio>:
 800b3f4:	6841      	ldr	r1, [r0, #4]
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	@ (800b428 <cleanup_stdio+0x34>)
 800b3f8:	4299      	cmp	r1, r3
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	d001      	beq.n	800b404 <cleanup_stdio+0x10>
 800b400:	f000 fca8 	bl	800bd54 <_fflush_r>
 800b404:	68a1      	ldr	r1, [r4, #8]
 800b406:	4b09      	ldr	r3, [pc, #36]	@ (800b42c <cleanup_stdio+0x38>)
 800b408:	4299      	cmp	r1, r3
 800b40a:	d002      	beq.n	800b412 <cleanup_stdio+0x1e>
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 fca1 	bl	800bd54 <_fflush_r>
 800b412:	68e1      	ldr	r1, [r4, #12]
 800b414:	4b06      	ldr	r3, [pc, #24]	@ (800b430 <cleanup_stdio+0x3c>)
 800b416:	4299      	cmp	r1, r3
 800b418:	d004      	beq.n	800b424 <cleanup_stdio+0x30>
 800b41a:	4620      	mov	r0, r4
 800b41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b420:	f000 bc98 	b.w	800bd54 <_fflush_r>
 800b424:	bd10      	pop	{r4, pc}
 800b426:	bf00      	nop
 800b428:	240052d8 	.word	0x240052d8
 800b42c:	24005340 	.word	0x24005340
 800b430:	240053a8 	.word	0x240053a8

0800b434 <global_stdio_init.part.0>:
 800b434:	b510      	push	{r4, lr}
 800b436:	4b0b      	ldr	r3, [pc, #44]	@ (800b464 <global_stdio_init.part.0+0x30>)
 800b438:	4c0b      	ldr	r4, [pc, #44]	@ (800b468 <global_stdio_init.part.0+0x34>)
 800b43a:	4a0c      	ldr	r2, [pc, #48]	@ (800b46c <global_stdio_init.part.0+0x38>)
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	4620      	mov	r0, r4
 800b440:	2200      	movs	r2, #0
 800b442:	2104      	movs	r1, #4
 800b444:	f7ff ff94 	bl	800b370 <std>
 800b448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b44c:	2201      	movs	r2, #1
 800b44e:	2109      	movs	r1, #9
 800b450:	f7ff ff8e 	bl	800b370 <std>
 800b454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b458:	2202      	movs	r2, #2
 800b45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b45e:	2112      	movs	r1, #18
 800b460:	f7ff bf86 	b.w	800b370 <std>
 800b464:	24005410 	.word	0x24005410
 800b468:	240052d8 	.word	0x240052d8
 800b46c:	0800b3dd 	.word	0x0800b3dd

0800b470 <__sfp_lock_acquire>:
 800b470:	4801      	ldr	r0, [pc, #4]	@ (800b478 <__sfp_lock_acquire+0x8>)
 800b472:	f000 b8ba 	b.w	800b5ea <__retarget_lock_acquire_recursive>
 800b476:	bf00      	nop
 800b478:	24005415 	.word	0x24005415

0800b47c <__sfp_lock_release>:
 800b47c:	4801      	ldr	r0, [pc, #4]	@ (800b484 <__sfp_lock_release+0x8>)
 800b47e:	f000 b8b5 	b.w	800b5ec <__retarget_lock_release_recursive>
 800b482:	bf00      	nop
 800b484:	24005415 	.word	0x24005415

0800b488 <__sinit>:
 800b488:	b510      	push	{r4, lr}
 800b48a:	4604      	mov	r4, r0
 800b48c:	f7ff fff0 	bl	800b470 <__sfp_lock_acquire>
 800b490:	6a23      	ldr	r3, [r4, #32]
 800b492:	b11b      	cbz	r3, 800b49c <__sinit+0x14>
 800b494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b498:	f7ff bff0 	b.w	800b47c <__sfp_lock_release>
 800b49c:	4b04      	ldr	r3, [pc, #16]	@ (800b4b0 <__sinit+0x28>)
 800b49e:	6223      	str	r3, [r4, #32]
 800b4a0:	4b04      	ldr	r3, [pc, #16]	@ (800b4b4 <__sinit+0x2c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f5      	bne.n	800b494 <__sinit+0xc>
 800b4a8:	f7ff ffc4 	bl	800b434 <global_stdio_init.part.0>
 800b4ac:	e7f2      	b.n	800b494 <__sinit+0xc>
 800b4ae:	bf00      	nop
 800b4b0:	0800b3f5 	.word	0x0800b3f5
 800b4b4:	24005410 	.word	0x24005410

0800b4b8 <fiprintf>:
 800b4b8:	b40e      	push	{r1, r2, r3}
 800b4ba:	b503      	push	{r0, r1, lr}
 800b4bc:	4601      	mov	r1, r0
 800b4be:	ab03      	add	r3, sp, #12
 800b4c0:	4805      	ldr	r0, [pc, #20]	@ (800b4d8 <fiprintf+0x20>)
 800b4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c6:	6800      	ldr	r0, [r0, #0]
 800b4c8:	9301      	str	r3, [sp, #4]
 800b4ca:	f000 f919 	bl	800b700 <_vfiprintf_r>
 800b4ce:	b002      	add	sp, #8
 800b4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4d4:	b003      	add	sp, #12
 800b4d6:	4770      	bx	lr
 800b4d8:	24000120 	.word	0x24000120

0800b4dc <_fwalk_sglue>:
 800b4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e0:	4607      	mov	r7, r0
 800b4e2:	4688      	mov	r8, r1
 800b4e4:	4614      	mov	r4, r2
 800b4e6:	2600      	movs	r6, #0
 800b4e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4ec:	f1b9 0901 	subs.w	r9, r9, #1
 800b4f0:	d505      	bpl.n	800b4fe <_fwalk_sglue+0x22>
 800b4f2:	6824      	ldr	r4, [r4, #0]
 800b4f4:	2c00      	cmp	r4, #0
 800b4f6:	d1f7      	bne.n	800b4e8 <_fwalk_sglue+0xc>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d907      	bls.n	800b514 <_fwalk_sglue+0x38>
 800b504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b508:	3301      	adds	r3, #1
 800b50a:	d003      	beq.n	800b514 <_fwalk_sglue+0x38>
 800b50c:	4629      	mov	r1, r5
 800b50e:	4638      	mov	r0, r7
 800b510:	47c0      	blx	r8
 800b512:	4306      	orrs	r6, r0
 800b514:	3568      	adds	r5, #104	@ 0x68
 800b516:	e7e9      	b.n	800b4ec <_fwalk_sglue+0x10>

0800b518 <strncmp>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	b16a      	cbz	r2, 800b538 <strncmp+0x20>
 800b51c:	3901      	subs	r1, #1
 800b51e:	1884      	adds	r4, r0, r2
 800b520:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b524:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b528:	429a      	cmp	r2, r3
 800b52a:	d103      	bne.n	800b534 <strncmp+0x1c>
 800b52c:	42a0      	cmp	r0, r4
 800b52e:	d001      	beq.n	800b534 <strncmp+0x1c>
 800b530:	2a00      	cmp	r2, #0
 800b532:	d1f5      	bne.n	800b520 <strncmp+0x8>
 800b534:	1ad0      	subs	r0, r2, r3
 800b536:	bd10      	pop	{r4, pc}
 800b538:	4610      	mov	r0, r2
 800b53a:	e7fc      	b.n	800b536 <strncmp+0x1e>

0800b53c <strncpy>:
 800b53c:	b510      	push	{r4, lr}
 800b53e:	3901      	subs	r1, #1
 800b540:	4603      	mov	r3, r0
 800b542:	b132      	cbz	r2, 800b552 <strncpy+0x16>
 800b544:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b548:	f803 4b01 	strb.w	r4, [r3], #1
 800b54c:	3a01      	subs	r2, #1
 800b54e:	2c00      	cmp	r4, #0
 800b550:	d1f7      	bne.n	800b542 <strncpy+0x6>
 800b552:	441a      	add	r2, r3
 800b554:	2100      	movs	r1, #0
 800b556:	4293      	cmp	r3, r2
 800b558:	d100      	bne.n	800b55c <strncpy+0x20>
 800b55a:	bd10      	pop	{r4, pc}
 800b55c:	f803 1b01 	strb.w	r1, [r3], #1
 800b560:	e7f9      	b.n	800b556 <strncpy+0x1a>

0800b562 <memset>:
 800b562:	4402      	add	r2, r0
 800b564:	4603      	mov	r3, r0
 800b566:	4293      	cmp	r3, r2
 800b568:	d100      	bne.n	800b56c <memset+0xa>
 800b56a:	4770      	bx	lr
 800b56c:	f803 1b01 	strb.w	r1, [r3], #1
 800b570:	e7f9      	b.n	800b566 <memset+0x4>
	...

0800b574 <_sbrk_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d06      	ldr	r5, [pc, #24]	@ (800b590 <_sbrk_r+0x1c>)
 800b578:	2300      	movs	r3, #0
 800b57a:	4604      	mov	r4, r0
 800b57c:	4608      	mov	r0, r1
 800b57e:	602b      	str	r3, [r5, #0]
 800b580:	f7f5 fdc4 	bl	800110c <_sbrk>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_sbrk_r+0x1a>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_sbrk_r+0x1a>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	24005418 	.word	0x24005418

0800b594 <__errno>:
 800b594:	4b01      	ldr	r3, [pc, #4]	@ (800b59c <__errno+0x8>)
 800b596:	6818      	ldr	r0, [r3, #0]
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	24000120 	.word	0x24000120

0800b5a0 <__libc_init_array>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4d0d      	ldr	r5, [pc, #52]	@ (800b5d8 <__libc_init_array+0x38>)
 800b5a4:	4c0d      	ldr	r4, [pc, #52]	@ (800b5dc <__libc_init_array+0x3c>)
 800b5a6:	1b64      	subs	r4, r4, r5
 800b5a8:	10a4      	asrs	r4, r4, #2
 800b5aa:	2600      	movs	r6, #0
 800b5ac:	42a6      	cmp	r6, r4
 800b5ae:	d109      	bne.n	800b5c4 <__libc_init_array+0x24>
 800b5b0:	4d0b      	ldr	r5, [pc, #44]	@ (800b5e0 <__libc_init_array+0x40>)
 800b5b2:	4c0c      	ldr	r4, [pc, #48]	@ (800b5e4 <__libc_init_array+0x44>)
 800b5b4:	f000 fddc 	bl	800c170 <_init>
 800b5b8:	1b64      	subs	r4, r4, r5
 800b5ba:	10a4      	asrs	r4, r4, #2
 800b5bc:	2600      	movs	r6, #0
 800b5be:	42a6      	cmp	r6, r4
 800b5c0:	d105      	bne.n	800b5ce <__libc_init_array+0x2e>
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5c8:	4798      	blx	r3
 800b5ca:	3601      	adds	r6, #1
 800b5cc:	e7ee      	b.n	800b5ac <__libc_init_array+0xc>
 800b5ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d2:	4798      	blx	r3
 800b5d4:	3601      	adds	r6, #1
 800b5d6:	e7f2      	b.n	800b5be <__libc_init_array+0x1e>
 800b5d8:	0800c4d8 	.word	0x0800c4d8
 800b5dc:	0800c4d8 	.word	0x0800c4d8
 800b5e0:	0800c4d8 	.word	0x0800c4d8
 800b5e4:	0800c4dc 	.word	0x0800c4dc

0800b5e8 <__retarget_lock_init_recursive>:
 800b5e8:	4770      	bx	lr

0800b5ea <__retarget_lock_acquire_recursive>:
 800b5ea:	4770      	bx	lr

0800b5ec <__retarget_lock_release_recursive>:
 800b5ec:	4770      	bx	lr

0800b5ee <memcpy>:
 800b5ee:	440a      	add	r2, r1
 800b5f0:	4291      	cmp	r1, r2
 800b5f2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b5f6:	d100      	bne.n	800b5fa <memcpy+0xc>
 800b5f8:	4770      	bx	lr
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b600:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b604:	4291      	cmp	r1, r2
 800b606:	d1f9      	bne.n	800b5fc <memcpy+0xe>
 800b608:	bd10      	pop	{r4, pc}

0800b60a <abort>:
 800b60a:	b508      	push	{r3, lr}
 800b60c:	2006      	movs	r0, #6
 800b60e:	f000 fd6f 	bl	800c0f0 <raise>
 800b612:	2001      	movs	r0, #1
 800b614:	f7f5 fd02 	bl	800101c <_exit>

0800b618 <_free_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4605      	mov	r5, r0
 800b61c:	2900      	cmp	r1, #0
 800b61e:	d041      	beq.n	800b6a4 <_free_r+0x8c>
 800b620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b624:	1f0c      	subs	r4, r1, #4
 800b626:	2b00      	cmp	r3, #0
 800b628:	bfb8      	it	lt
 800b62a:	18e4      	addlt	r4, r4, r3
 800b62c:	f7ff fe94 	bl	800b358 <__malloc_lock>
 800b630:	4a1d      	ldr	r2, [pc, #116]	@ (800b6a8 <_free_r+0x90>)
 800b632:	6813      	ldr	r3, [r2, #0]
 800b634:	b933      	cbnz	r3, 800b644 <_free_r+0x2c>
 800b636:	6063      	str	r3, [r4, #4]
 800b638:	6014      	str	r4, [r2, #0]
 800b63a:	4628      	mov	r0, r5
 800b63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b640:	f7ff be90 	b.w	800b364 <__malloc_unlock>
 800b644:	42a3      	cmp	r3, r4
 800b646:	d908      	bls.n	800b65a <_free_r+0x42>
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	1821      	adds	r1, r4, r0
 800b64c:	428b      	cmp	r3, r1
 800b64e:	bf01      	itttt	eq
 800b650:	6819      	ldreq	r1, [r3, #0]
 800b652:	685b      	ldreq	r3, [r3, #4]
 800b654:	1809      	addeq	r1, r1, r0
 800b656:	6021      	streq	r1, [r4, #0]
 800b658:	e7ed      	b.n	800b636 <_free_r+0x1e>
 800b65a:	461a      	mov	r2, r3
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	b10b      	cbz	r3, 800b664 <_free_r+0x4c>
 800b660:	42a3      	cmp	r3, r4
 800b662:	d9fa      	bls.n	800b65a <_free_r+0x42>
 800b664:	6811      	ldr	r1, [r2, #0]
 800b666:	1850      	adds	r0, r2, r1
 800b668:	42a0      	cmp	r0, r4
 800b66a:	d10b      	bne.n	800b684 <_free_r+0x6c>
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	4401      	add	r1, r0
 800b670:	1850      	adds	r0, r2, r1
 800b672:	4283      	cmp	r3, r0
 800b674:	6011      	str	r1, [r2, #0]
 800b676:	d1e0      	bne.n	800b63a <_free_r+0x22>
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	6053      	str	r3, [r2, #4]
 800b67e:	4408      	add	r0, r1
 800b680:	6010      	str	r0, [r2, #0]
 800b682:	e7da      	b.n	800b63a <_free_r+0x22>
 800b684:	d902      	bls.n	800b68c <_free_r+0x74>
 800b686:	230c      	movs	r3, #12
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	e7d6      	b.n	800b63a <_free_r+0x22>
 800b68c:	6820      	ldr	r0, [r4, #0]
 800b68e:	1821      	adds	r1, r4, r0
 800b690:	428b      	cmp	r3, r1
 800b692:	bf04      	itt	eq
 800b694:	6819      	ldreq	r1, [r3, #0]
 800b696:	685b      	ldreq	r3, [r3, #4]
 800b698:	6063      	str	r3, [r4, #4]
 800b69a:	bf04      	itt	eq
 800b69c:	1809      	addeq	r1, r1, r0
 800b69e:	6021      	streq	r1, [r4, #0]
 800b6a0:	6054      	str	r4, [r2, #4]
 800b6a2:	e7ca      	b.n	800b63a <_free_r+0x22>
 800b6a4:	bd38      	pop	{r3, r4, r5, pc}
 800b6a6:	bf00      	nop
 800b6a8:	240052d4 	.word	0x240052d4

0800b6ac <__sfputc_r>:
 800b6ac:	6893      	ldr	r3, [r2, #8]
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	b410      	push	{r4}
 800b6b4:	6093      	str	r3, [r2, #8]
 800b6b6:	da08      	bge.n	800b6ca <__sfputc_r+0x1e>
 800b6b8:	6994      	ldr	r4, [r2, #24]
 800b6ba:	42a3      	cmp	r3, r4
 800b6bc:	db01      	blt.n	800b6c2 <__sfputc_r+0x16>
 800b6be:	290a      	cmp	r1, #10
 800b6c0:	d103      	bne.n	800b6ca <__sfputc_r+0x1e>
 800b6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6c6:	f000 bbb0 	b.w	800be2a <__swbuf_r>
 800b6ca:	6813      	ldr	r3, [r2, #0]
 800b6cc:	1c58      	adds	r0, r3, #1
 800b6ce:	6010      	str	r0, [r2, #0]
 800b6d0:	7019      	strb	r1, [r3, #0]
 800b6d2:	4608      	mov	r0, r1
 800b6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <__sfputs_r>:
 800b6da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6dc:	4606      	mov	r6, r0
 800b6de:	460f      	mov	r7, r1
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	18d5      	adds	r5, r2, r3
 800b6e4:	42ac      	cmp	r4, r5
 800b6e6:	d101      	bne.n	800b6ec <__sfputs_r+0x12>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e007      	b.n	800b6fc <__sfputs_r+0x22>
 800b6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f0:	463a      	mov	r2, r7
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f7ff ffda 	bl	800b6ac <__sfputc_r>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d1f3      	bne.n	800b6e4 <__sfputs_r+0xa>
 800b6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b700 <_vfiprintf_r>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	460d      	mov	r5, r1
 800b706:	b09d      	sub	sp, #116	@ 0x74
 800b708:	4614      	mov	r4, r2
 800b70a:	4698      	mov	r8, r3
 800b70c:	4606      	mov	r6, r0
 800b70e:	b118      	cbz	r0, 800b718 <_vfiprintf_r+0x18>
 800b710:	6a03      	ldr	r3, [r0, #32]
 800b712:	b90b      	cbnz	r3, 800b718 <_vfiprintf_r+0x18>
 800b714:	f7ff feb8 	bl	800b488 <__sinit>
 800b718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b71a:	07d9      	lsls	r1, r3, #31
 800b71c:	d405      	bmi.n	800b72a <_vfiprintf_r+0x2a>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	059a      	lsls	r2, r3, #22
 800b722:	d402      	bmi.n	800b72a <_vfiprintf_r+0x2a>
 800b724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b726:	f7ff ff60 	bl	800b5ea <__retarget_lock_acquire_recursive>
 800b72a:	89ab      	ldrh	r3, [r5, #12]
 800b72c:	071b      	lsls	r3, r3, #28
 800b72e:	d501      	bpl.n	800b734 <_vfiprintf_r+0x34>
 800b730:	692b      	ldr	r3, [r5, #16]
 800b732:	b99b      	cbnz	r3, 800b75c <_vfiprintf_r+0x5c>
 800b734:	4629      	mov	r1, r5
 800b736:	4630      	mov	r0, r6
 800b738:	f000 fbb6 	bl	800bea8 <__swsetup_r>
 800b73c:	b170      	cbz	r0, 800b75c <_vfiprintf_r+0x5c>
 800b73e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b740:	07dc      	lsls	r4, r3, #31
 800b742:	d504      	bpl.n	800b74e <_vfiprintf_r+0x4e>
 800b744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b748:	b01d      	add	sp, #116	@ 0x74
 800b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	0598      	lsls	r0, r3, #22
 800b752:	d4f7      	bmi.n	800b744 <_vfiprintf_r+0x44>
 800b754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b756:	f7ff ff49 	bl	800b5ec <__retarget_lock_release_recursive>
 800b75a:	e7f3      	b.n	800b744 <_vfiprintf_r+0x44>
 800b75c:	2300      	movs	r3, #0
 800b75e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b760:	2320      	movs	r3, #32
 800b762:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b766:	f8cd 800c 	str.w	r8, [sp, #12]
 800b76a:	2330      	movs	r3, #48	@ 0x30
 800b76c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b91c <_vfiprintf_r+0x21c>
 800b770:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b774:	f04f 0901 	mov.w	r9, #1
 800b778:	4623      	mov	r3, r4
 800b77a:	469a      	mov	sl, r3
 800b77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b780:	b10a      	cbz	r2, 800b786 <_vfiprintf_r+0x86>
 800b782:	2a25      	cmp	r2, #37	@ 0x25
 800b784:	d1f9      	bne.n	800b77a <_vfiprintf_r+0x7a>
 800b786:	ebba 0b04 	subs.w	fp, sl, r4
 800b78a:	d00b      	beq.n	800b7a4 <_vfiprintf_r+0xa4>
 800b78c:	465b      	mov	r3, fp
 800b78e:	4622      	mov	r2, r4
 800b790:	4629      	mov	r1, r5
 800b792:	4630      	mov	r0, r6
 800b794:	f7ff ffa1 	bl	800b6da <__sfputs_r>
 800b798:	3001      	adds	r0, #1
 800b79a:	f000 80a7 	beq.w	800b8ec <_vfiprintf_r+0x1ec>
 800b79e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7a0:	445a      	add	r2, fp
 800b7a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 809f 	beq.w	800b8ec <_vfiprintf_r+0x1ec>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b8:	f10a 0a01 	add.w	sl, sl, #1
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	9307      	str	r3, [sp, #28]
 800b7c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7c6:	4654      	mov	r4, sl
 800b7c8:	2205      	movs	r2, #5
 800b7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ce:	4853      	ldr	r0, [pc, #332]	@ (800b91c <_vfiprintf_r+0x21c>)
 800b7d0:	f7f4 fd9e 	bl	8000310 <memchr>
 800b7d4:	9a04      	ldr	r2, [sp, #16]
 800b7d6:	b9d8      	cbnz	r0, 800b810 <_vfiprintf_r+0x110>
 800b7d8:	06d1      	lsls	r1, r2, #27
 800b7da:	bf44      	itt	mi
 800b7dc:	2320      	movmi	r3, #32
 800b7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7e2:	0713      	lsls	r3, r2, #28
 800b7e4:	bf44      	itt	mi
 800b7e6:	232b      	movmi	r3, #43	@ 0x2b
 800b7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7f2:	d015      	beq.n	800b820 <_vfiprintf_r+0x120>
 800b7f4:	9a07      	ldr	r2, [sp, #28]
 800b7f6:	4654      	mov	r4, sl
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	f04f 0c0a 	mov.w	ip, #10
 800b7fe:	4621      	mov	r1, r4
 800b800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b804:	3b30      	subs	r3, #48	@ 0x30
 800b806:	2b09      	cmp	r3, #9
 800b808:	d94b      	bls.n	800b8a2 <_vfiprintf_r+0x1a2>
 800b80a:	b1b0      	cbz	r0, 800b83a <_vfiprintf_r+0x13a>
 800b80c:	9207      	str	r2, [sp, #28]
 800b80e:	e014      	b.n	800b83a <_vfiprintf_r+0x13a>
 800b810:	eba0 0308 	sub.w	r3, r0, r8
 800b814:	fa09 f303 	lsl.w	r3, r9, r3
 800b818:	4313      	orrs	r3, r2
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	46a2      	mov	sl, r4
 800b81e:	e7d2      	b.n	800b7c6 <_vfiprintf_r+0xc6>
 800b820:	9b03      	ldr	r3, [sp, #12]
 800b822:	1d19      	adds	r1, r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	9103      	str	r1, [sp, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	bfbb      	ittet	lt
 800b82c:	425b      	neglt	r3, r3
 800b82e:	f042 0202 	orrlt.w	r2, r2, #2
 800b832:	9307      	strge	r3, [sp, #28]
 800b834:	9307      	strlt	r3, [sp, #28]
 800b836:	bfb8      	it	lt
 800b838:	9204      	strlt	r2, [sp, #16]
 800b83a:	7823      	ldrb	r3, [r4, #0]
 800b83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b83e:	d10a      	bne.n	800b856 <_vfiprintf_r+0x156>
 800b840:	7863      	ldrb	r3, [r4, #1]
 800b842:	2b2a      	cmp	r3, #42	@ 0x2a
 800b844:	d132      	bne.n	800b8ac <_vfiprintf_r+0x1ac>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	1d1a      	adds	r2, r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	9203      	str	r2, [sp, #12]
 800b84e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b852:	3402      	adds	r4, #2
 800b854:	9305      	str	r3, [sp, #20]
 800b856:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b92c <_vfiprintf_r+0x22c>
 800b85a:	7821      	ldrb	r1, [r4, #0]
 800b85c:	2203      	movs	r2, #3
 800b85e:	4650      	mov	r0, sl
 800b860:	f7f4 fd56 	bl	8000310 <memchr>
 800b864:	b138      	cbz	r0, 800b876 <_vfiprintf_r+0x176>
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	eba0 000a 	sub.w	r0, r0, sl
 800b86c:	2240      	movs	r2, #64	@ 0x40
 800b86e:	4082      	lsls	r2, r0
 800b870:	4313      	orrs	r3, r2
 800b872:	3401      	adds	r4, #1
 800b874:	9304      	str	r3, [sp, #16]
 800b876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87a:	4829      	ldr	r0, [pc, #164]	@ (800b920 <_vfiprintf_r+0x220>)
 800b87c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b880:	2206      	movs	r2, #6
 800b882:	f7f4 fd45 	bl	8000310 <memchr>
 800b886:	2800      	cmp	r0, #0
 800b888:	d03f      	beq.n	800b90a <_vfiprintf_r+0x20a>
 800b88a:	4b26      	ldr	r3, [pc, #152]	@ (800b924 <_vfiprintf_r+0x224>)
 800b88c:	bb1b      	cbnz	r3, 800b8d6 <_vfiprintf_r+0x1d6>
 800b88e:	9b03      	ldr	r3, [sp, #12]
 800b890:	3307      	adds	r3, #7
 800b892:	f023 0307 	bic.w	r3, r3, #7
 800b896:	3308      	adds	r3, #8
 800b898:	9303      	str	r3, [sp, #12]
 800b89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b89c:	443b      	add	r3, r7
 800b89e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8a0:	e76a      	b.n	800b778 <_vfiprintf_r+0x78>
 800b8a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	2001      	movs	r0, #1
 800b8aa:	e7a8      	b.n	800b7fe <_vfiprintf_r+0xfe>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	3401      	adds	r4, #1
 800b8b0:	9305      	str	r3, [sp, #20]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	f04f 0c0a 	mov.w	ip, #10
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8be:	3a30      	subs	r2, #48	@ 0x30
 800b8c0:	2a09      	cmp	r2, #9
 800b8c2:	d903      	bls.n	800b8cc <_vfiprintf_r+0x1cc>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d0c6      	beq.n	800b856 <_vfiprintf_r+0x156>
 800b8c8:	9105      	str	r1, [sp, #20]
 800b8ca:	e7c4      	b.n	800b856 <_vfiprintf_r+0x156>
 800b8cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e7f0      	b.n	800b8b8 <_vfiprintf_r+0x1b8>
 800b8d6:	ab03      	add	r3, sp, #12
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	462a      	mov	r2, r5
 800b8dc:	4b12      	ldr	r3, [pc, #72]	@ (800b928 <_vfiprintf_r+0x228>)
 800b8de:	a904      	add	r1, sp, #16
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f3af 8000 	nop.w
 800b8e6:	4607      	mov	r7, r0
 800b8e8:	1c78      	adds	r0, r7, #1
 800b8ea:	d1d6      	bne.n	800b89a <_vfiprintf_r+0x19a>
 800b8ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b8ee:	07d9      	lsls	r1, r3, #31
 800b8f0:	d405      	bmi.n	800b8fe <_vfiprintf_r+0x1fe>
 800b8f2:	89ab      	ldrh	r3, [r5, #12]
 800b8f4:	059a      	lsls	r2, r3, #22
 800b8f6:	d402      	bmi.n	800b8fe <_vfiprintf_r+0x1fe>
 800b8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b8fa:	f7ff fe77 	bl	800b5ec <__retarget_lock_release_recursive>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	065b      	lsls	r3, r3, #25
 800b902:	f53f af1f 	bmi.w	800b744 <_vfiprintf_r+0x44>
 800b906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b908:	e71e      	b.n	800b748 <_vfiprintf_r+0x48>
 800b90a:	ab03      	add	r3, sp, #12
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	462a      	mov	r2, r5
 800b910:	4b05      	ldr	r3, [pc, #20]	@ (800b928 <_vfiprintf_r+0x228>)
 800b912:	a904      	add	r1, sp, #16
 800b914:	4630      	mov	r0, r6
 800b916:	f000 f879 	bl	800ba0c <_printf_i>
 800b91a:	e7e4      	b.n	800b8e6 <_vfiprintf_r+0x1e6>
 800b91c:	0800c49b 	.word	0x0800c49b
 800b920:	0800c4a5 	.word	0x0800c4a5
 800b924:	00000000 	.word	0x00000000
 800b928:	0800b6db 	.word	0x0800b6db
 800b92c:	0800c4a1 	.word	0x0800c4a1

0800b930 <_printf_common>:
 800b930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b934:	4616      	mov	r6, r2
 800b936:	4698      	mov	r8, r3
 800b938:	688a      	ldr	r2, [r1, #8]
 800b93a:	690b      	ldr	r3, [r1, #16]
 800b93c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b940:	4293      	cmp	r3, r2
 800b942:	bfb8      	it	lt
 800b944:	4613      	movlt	r3, r2
 800b946:	6033      	str	r3, [r6, #0]
 800b948:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b94c:	4607      	mov	r7, r0
 800b94e:	460c      	mov	r4, r1
 800b950:	b10a      	cbz	r2, 800b956 <_printf_common+0x26>
 800b952:	3301      	adds	r3, #1
 800b954:	6033      	str	r3, [r6, #0]
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	0699      	lsls	r1, r3, #26
 800b95a:	bf42      	ittt	mi
 800b95c:	6833      	ldrmi	r3, [r6, #0]
 800b95e:	3302      	addmi	r3, #2
 800b960:	6033      	strmi	r3, [r6, #0]
 800b962:	6825      	ldr	r5, [r4, #0]
 800b964:	f015 0506 	ands.w	r5, r5, #6
 800b968:	d106      	bne.n	800b978 <_printf_common+0x48>
 800b96a:	f104 0a19 	add.w	sl, r4, #25
 800b96e:	68e3      	ldr	r3, [r4, #12]
 800b970:	6832      	ldr	r2, [r6, #0]
 800b972:	1a9b      	subs	r3, r3, r2
 800b974:	42ab      	cmp	r3, r5
 800b976:	dc26      	bgt.n	800b9c6 <_printf_common+0x96>
 800b978:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b97c:	6822      	ldr	r2, [r4, #0]
 800b97e:	3b00      	subs	r3, #0
 800b980:	bf18      	it	ne
 800b982:	2301      	movne	r3, #1
 800b984:	0692      	lsls	r2, r2, #26
 800b986:	d42b      	bmi.n	800b9e0 <_printf_common+0xb0>
 800b988:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b98c:	4641      	mov	r1, r8
 800b98e:	4638      	mov	r0, r7
 800b990:	47c8      	blx	r9
 800b992:	3001      	adds	r0, #1
 800b994:	d01e      	beq.n	800b9d4 <_printf_common+0xa4>
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	6922      	ldr	r2, [r4, #16]
 800b99a:	f003 0306 	and.w	r3, r3, #6
 800b99e:	2b04      	cmp	r3, #4
 800b9a0:	bf02      	ittt	eq
 800b9a2:	68e5      	ldreq	r5, [r4, #12]
 800b9a4:	6833      	ldreq	r3, [r6, #0]
 800b9a6:	1aed      	subeq	r5, r5, r3
 800b9a8:	68a3      	ldr	r3, [r4, #8]
 800b9aa:	bf0c      	ite	eq
 800b9ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9b0:	2500      	movne	r5, #0
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	bfc4      	itt	gt
 800b9b6:	1a9b      	subgt	r3, r3, r2
 800b9b8:	18ed      	addgt	r5, r5, r3
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	341a      	adds	r4, #26
 800b9be:	42b5      	cmp	r5, r6
 800b9c0:	d11a      	bne.n	800b9f8 <_printf_common+0xc8>
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	e008      	b.n	800b9d8 <_printf_common+0xa8>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	4652      	mov	r2, sl
 800b9ca:	4641      	mov	r1, r8
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	47c8      	blx	r9
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	d103      	bne.n	800b9dc <_printf_common+0xac>
 800b9d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9dc:	3501      	adds	r5, #1
 800b9de:	e7c6      	b.n	800b96e <_printf_common+0x3e>
 800b9e0:	18e1      	adds	r1, r4, r3
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	2030      	movs	r0, #48	@ 0x30
 800b9e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9ea:	4422      	add	r2, r4
 800b9ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9f4:	3302      	adds	r3, #2
 800b9f6:	e7c7      	b.n	800b988 <_printf_common+0x58>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	4641      	mov	r1, r8
 800b9fe:	4638      	mov	r0, r7
 800ba00:	47c8      	blx	r9
 800ba02:	3001      	adds	r0, #1
 800ba04:	d0e6      	beq.n	800b9d4 <_printf_common+0xa4>
 800ba06:	3601      	adds	r6, #1
 800ba08:	e7d9      	b.n	800b9be <_printf_common+0x8e>
	...

0800ba0c <_printf_i>:
 800ba0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba10:	7e0f      	ldrb	r7, [r1, #24]
 800ba12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba14:	2f78      	cmp	r7, #120	@ 0x78
 800ba16:	4691      	mov	r9, r2
 800ba18:	4680      	mov	r8, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	469a      	mov	sl, r3
 800ba1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba22:	d807      	bhi.n	800ba34 <_printf_i+0x28>
 800ba24:	2f62      	cmp	r7, #98	@ 0x62
 800ba26:	d80a      	bhi.n	800ba3e <_printf_i+0x32>
 800ba28:	2f00      	cmp	r7, #0
 800ba2a:	f000 80d2 	beq.w	800bbd2 <_printf_i+0x1c6>
 800ba2e:	2f58      	cmp	r7, #88	@ 0x58
 800ba30:	f000 80b9 	beq.w	800bba6 <_printf_i+0x19a>
 800ba34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba3c:	e03a      	b.n	800bab4 <_printf_i+0xa8>
 800ba3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba42:	2b15      	cmp	r3, #21
 800ba44:	d8f6      	bhi.n	800ba34 <_printf_i+0x28>
 800ba46:	a101      	add	r1, pc, #4	@ (adr r1, 800ba4c <_printf_i+0x40>)
 800ba48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba4c:	0800baa5 	.word	0x0800baa5
 800ba50:	0800bab9 	.word	0x0800bab9
 800ba54:	0800ba35 	.word	0x0800ba35
 800ba58:	0800ba35 	.word	0x0800ba35
 800ba5c:	0800ba35 	.word	0x0800ba35
 800ba60:	0800ba35 	.word	0x0800ba35
 800ba64:	0800bab9 	.word	0x0800bab9
 800ba68:	0800ba35 	.word	0x0800ba35
 800ba6c:	0800ba35 	.word	0x0800ba35
 800ba70:	0800ba35 	.word	0x0800ba35
 800ba74:	0800ba35 	.word	0x0800ba35
 800ba78:	0800bbb9 	.word	0x0800bbb9
 800ba7c:	0800bae3 	.word	0x0800bae3
 800ba80:	0800bb73 	.word	0x0800bb73
 800ba84:	0800ba35 	.word	0x0800ba35
 800ba88:	0800ba35 	.word	0x0800ba35
 800ba8c:	0800bbdb 	.word	0x0800bbdb
 800ba90:	0800ba35 	.word	0x0800ba35
 800ba94:	0800bae3 	.word	0x0800bae3
 800ba98:	0800ba35 	.word	0x0800ba35
 800ba9c:	0800ba35 	.word	0x0800ba35
 800baa0:	0800bb7b 	.word	0x0800bb7b
 800baa4:	6833      	ldr	r3, [r6, #0]
 800baa6:	1d1a      	adds	r2, r3, #4
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	6032      	str	r2, [r6, #0]
 800baac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bab0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bab4:	2301      	movs	r3, #1
 800bab6:	e09d      	b.n	800bbf4 <_printf_i+0x1e8>
 800bab8:	6833      	ldr	r3, [r6, #0]
 800baba:	6820      	ldr	r0, [r4, #0]
 800babc:	1d19      	adds	r1, r3, #4
 800babe:	6031      	str	r1, [r6, #0]
 800bac0:	0606      	lsls	r6, r0, #24
 800bac2:	d501      	bpl.n	800bac8 <_printf_i+0xbc>
 800bac4:	681d      	ldr	r5, [r3, #0]
 800bac6:	e003      	b.n	800bad0 <_printf_i+0xc4>
 800bac8:	0645      	lsls	r5, r0, #25
 800baca:	d5fb      	bpl.n	800bac4 <_printf_i+0xb8>
 800bacc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	da03      	bge.n	800badc <_printf_i+0xd0>
 800bad4:	232d      	movs	r3, #45	@ 0x2d
 800bad6:	426d      	negs	r5, r5
 800bad8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800badc:	4859      	ldr	r0, [pc, #356]	@ (800bc44 <_printf_i+0x238>)
 800bade:	230a      	movs	r3, #10
 800bae0:	e011      	b.n	800bb06 <_printf_i+0xfa>
 800bae2:	6821      	ldr	r1, [r4, #0]
 800bae4:	6833      	ldr	r3, [r6, #0]
 800bae6:	0608      	lsls	r0, r1, #24
 800bae8:	f853 5b04 	ldr.w	r5, [r3], #4
 800baec:	d402      	bmi.n	800baf4 <_printf_i+0xe8>
 800baee:	0649      	lsls	r1, r1, #25
 800baf0:	bf48      	it	mi
 800baf2:	b2ad      	uxthmi	r5, r5
 800baf4:	2f6f      	cmp	r7, #111	@ 0x6f
 800baf6:	4853      	ldr	r0, [pc, #332]	@ (800bc44 <_printf_i+0x238>)
 800baf8:	6033      	str	r3, [r6, #0]
 800bafa:	bf14      	ite	ne
 800bafc:	230a      	movne	r3, #10
 800bafe:	2308      	moveq	r3, #8
 800bb00:	2100      	movs	r1, #0
 800bb02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb06:	6866      	ldr	r6, [r4, #4]
 800bb08:	60a6      	str	r6, [r4, #8]
 800bb0a:	2e00      	cmp	r6, #0
 800bb0c:	bfa2      	ittt	ge
 800bb0e:	6821      	ldrge	r1, [r4, #0]
 800bb10:	f021 0104 	bicge.w	r1, r1, #4
 800bb14:	6021      	strge	r1, [r4, #0]
 800bb16:	b90d      	cbnz	r5, 800bb1c <_printf_i+0x110>
 800bb18:	2e00      	cmp	r6, #0
 800bb1a:	d04b      	beq.n	800bbb4 <_printf_i+0x1a8>
 800bb1c:	4616      	mov	r6, r2
 800bb1e:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb22:	fb03 5711 	mls	r7, r3, r1, r5
 800bb26:	5dc7      	ldrb	r7, [r0, r7]
 800bb28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb2c:	462f      	mov	r7, r5
 800bb2e:	42bb      	cmp	r3, r7
 800bb30:	460d      	mov	r5, r1
 800bb32:	d9f4      	bls.n	800bb1e <_printf_i+0x112>
 800bb34:	2b08      	cmp	r3, #8
 800bb36:	d10b      	bne.n	800bb50 <_printf_i+0x144>
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	07df      	lsls	r7, r3, #31
 800bb3c:	d508      	bpl.n	800bb50 <_printf_i+0x144>
 800bb3e:	6923      	ldr	r3, [r4, #16]
 800bb40:	6861      	ldr	r1, [r4, #4]
 800bb42:	4299      	cmp	r1, r3
 800bb44:	bfde      	ittt	le
 800bb46:	2330      	movle	r3, #48	@ 0x30
 800bb48:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb4c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bb50:	1b92      	subs	r2, r2, r6
 800bb52:	6122      	str	r2, [r4, #16]
 800bb54:	f8cd a000 	str.w	sl, [sp]
 800bb58:	464b      	mov	r3, r9
 800bb5a:	aa03      	add	r2, sp, #12
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4640      	mov	r0, r8
 800bb60:	f7ff fee6 	bl	800b930 <_printf_common>
 800bb64:	3001      	adds	r0, #1
 800bb66:	d14a      	bne.n	800bbfe <_printf_i+0x1f2>
 800bb68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb6c:	b004      	add	sp, #16
 800bb6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb72:	6823      	ldr	r3, [r4, #0]
 800bb74:	f043 0320 	orr.w	r3, r3, #32
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	4833      	ldr	r0, [pc, #204]	@ (800bc48 <_printf_i+0x23c>)
 800bb7c:	2778      	movs	r7, #120	@ 0x78
 800bb7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb82:	6823      	ldr	r3, [r4, #0]
 800bb84:	6831      	ldr	r1, [r6, #0]
 800bb86:	061f      	lsls	r7, r3, #24
 800bb88:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb8c:	d402      	bmi.n	800bb94 <_printf_i+0x188>
 800bb8e:	065f      	lsls	r7, r3, #25
 800bb90:	bf48      	it	mi
 800bb92:	b2ad      	uxthmi	r5, r5
 800bb94:	6031      	str	r1, [r6, #0]
 800bb96:	07d9      	lsls	r1, r3, #31
 800bb98:	bf44      	itt	mi
 800bb9a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb9e:	6023      	strmi	r3, [r4, #0]
 800bba0:	b11d      	cbz	r5, 800bbaa <_printf_i+0x19e>
 800bba2:	2310      	movs	r3, #16
 800bba4:	e7ac      	b.n	800bb00 <_printf_i+0xf4>
 800bba6:	4827      	ldr	r0, [pc, #156]	@ (800bc44 <_printf_i+0x238>)
 800bba8:	e7e9      	b.n	800bb7e <_printf_i+0x172>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	f023 0320 	bic.w	r3, r3, #32
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	e7f6      	b.n	800bba2 <_printf_i+0x196>
 800bbb4:	4616      	mov	r6, r2
 800bbb6:	e7bd      	b.n	800bb34 <_printf_i+0x128>
 800bbb8:	6833      	ldr	r3, [r6, #0]
 800bbba:	6825      	ldr	r5, [r4, #0]
 800bbbc:	6961      	ldr	r1, [r4, #20]
 800bbbe:	1d18      	adds	r0, r3, #4
 800bbc0:	6030      	str	r0, [r6, #0]
 800bbc2:	062e      	lsls	r6, r5, #24
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	d501      	bpl.n	800bbcc <_printf_i+0x1c0>
 800bbc8:	6019      	str	r1, [r3, #0]
 800bbca:	e002      	b.n	800bbd2 <_printf_i+0x1c6>
 800bbcc:	0668      	lsls	r0, r5, #25
 800bbce:	d5fb      	bpl.n	800bbc8 <_printf_i+0x1bc>
 800bbd0:	8019      	strh	r1, [r3, #0]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	6123      	str	r3, [r4, #16]
 800bbd6:	4616      	mov	r6, r2
 800bbd8:	e7bc      	b.n	800bb54 <_printf_i+0x148>
 800bbda:	6833      	ldr	r3, [r6, #0]
 800bbdc:	1d1a      	adds	r2, r3, #4
 800bbde:	6032      	str	r2, [r6, #0]
 800bbe0:	681e      	ldr	r6, [r3, #0]
 800bbe2:	6862      	ldr	r2, [r4, #4]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7f4 fb92 	bl	8000310 <memchr>
 800bbec:	b108      	cbz	r0, 800bbf2 <_printf_i+0x1e6>
 800bbee:	1b80      	subs	r0, r0, r6
 800bbf0:	6060      	str	r0, [r4, #4]
 800bbf2:	6863      	ldr	r3, [r4, #4]
 800bbf4:	6123      	str	r3, [r4, #16]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbfc:	e7aa      	b.n	800bb54 <_printf_i+0x148>
 800bbfe:	6923      	ldr	r3, [r4, #16]
 800bc00:	4632      	mov	r2, r6
 800bc02:	4649      	mov	r1, r9
 800bc04:	4640      	mov	r0, r8
 800bc06:	47d0      	blx	sl
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d0ad      	beq.n	800bb68 <_printf_i+0x15c>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	079b      	lsls	r3, r3, #30
 800bc10:	d413      	bmi.n	800bc3a <_printf_i+0x22e>
 800bc12:	68e0      	ldr	r0, [r4, #12]
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	4298      	cmp	r0, r3
 800bc18:	bfb8      	it	lt
 800bc1a:	4618      	movlt	r0, r3
 800bc1c:	e7a6      	b.n	800bb6c <_printf_i+0x160>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	4632      	mov	r2, r6
 800bc22:	4649      	mov	r1, r9
 800bc24:	4640      	mov	r0, r8
 800bc26:	47d0      	blx	sl
 800bc28:	3001      	adds	r0, #1
 800bc2a:	d09d      	beq.n	800bb68 <_printf_i+0x15c>
 800bc2c:	3501      	adds	r5, #1
 800bc2e:	68e3      	ldr	r3, [r4, #12]
 800bc30:	9903      	ldr	r1, [sp, #12]
 800bc32:	1a5b      	subs	r3, r3, r1
 800bc34:	42ab      	cmp	r3, r5
 800bc36:	dcf2      	bgt.n	800bc1e <_printf_i+0x212>
 800bc38:	e7eb      	b.n	800bc12 <_printf_i+0x206>
 800bc3a:	2500      	movs	r5, #0
 800bc3c:	f104 0619 	add.w	r6, r4, #25
 800bc40:	e7f5      	b.n	800bc2e <_printf_i+0x222>
 800bc42:	bf00      	nop
 800bc44:	0800c4ac 	.word	0x0800c4ac
 800bc48:	0800c4bd 	.word	0x0800c4bd

0800bc4c <__sflush_r>:
 800bc4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc54:	0716      	lsls	r6, r2, #28
 800bc56:	4605      	mov	r5, r0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	d454      	bmi.n	800bd06 <__sflush_r+0xba>
 800bc5c:	684b      	ldr	r3, [r1, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dc02      	bgt.n	800bc68 <__sflush_r+0x1c>
 800bc62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	dd48      	ble.n	800bcfa <__sflush_r+0xae>
 800bc68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc6a:	2e00      	cmp	r6, #0
 800bc6c:	d045      	beq.n	800bcfa <__sflush_r+0xae>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc74:	682f      	ldr	r7, [r5, #0]
 800bc76:	6a21      	ldr	r1, [r4, #32]
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	d030      	beq.n	800bcde <__sflush_r+0x92>
 800bc7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	0759      	lsls	r1, r3, #29
 800bc82:	d505      	bpl.n	800bc90 <__sflush_r+0x44>
 800bc84:	6863      	ldr	r3, [r4, #4]
 800bc86:	1ad2      	subs	r2, r2, r3
 800bc88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc8a:	b10b      	cbz	r3, 800bc90 <__sflush_r+0x44>
 800bc8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc8e:	1ad2      	subs	r2, r2, r3
 800bc90:	2300      	movs	r3, #0
 800bc92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc94:	6a21      	ldr	r1, [r4, #32]
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b0      	blx	r6
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	d106      	bne.n	800bcae <__sflush_r+0x62>
 800bca0:	6829      	ldr	r1, [r5, #0]
 800bca2:	291d      	cmp	r1, #29
 800bca4:	d82b      	bhi.n	800bcfe <__sflush_r+0xb2>
 800bca6:	4a2a      	ldr	r2, [pc, #168]	@ (800bd50 <__sflush_r+0x104>)
 800bca8:	410a      	asrs	r2, r1
 800bcaa:	07d6      	lsls	r6, r2, #31
 800bcac:	d427      	bmi.n	800bcfe <__sflush_r+0xb2>
 800bcae:	2200      	movs	r2, #0
 800bcb0:	6062      	str	r2, [r4, #4]
 800bcb2:	04d9      	lsls	r1, r3, #19
 800bcb4:	6922      	ldr	r2, [r4, #16]
 800bcb6:	6022      	str	r2, [r4, #0]
 800bcb8:	d504      	bpl.n	800bcc4 <__sflush_r+0x78>
 800bcba:	1c42      	adds	r2, r0, #1
 800bcbc:	d101      	bne.n	800bcc2 <__sflush_r+0x76>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	b903      	cbnz	r3, 800bcc4 <__sflush_r+0x78>
 800bcc2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcc6:	602f      	str	r7, [r5, #0]
 800bcc8:	b1b9      	cbz	r1, 800bcfa <__sflush_r+0xae>
 800bcca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcce:	4299      	cmp	r1, r3
 800bcd0:	d002      	beq.n	800bcd8 <__sflush_r+0x8c>
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f7ff fca0 	bl	800b618 <_free_r>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcdc:	e00d      	b.n	800bcfa <__sflush_r+0xae>
 800bcde:	2301      	movs	r3, #1
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b0      	blx	r6
 800bce4:	4602      	mov	r2, r0
 800bce6:	1c50      	adds	r0, r2, #1
 800bce8:	d1c9      	bne.n	800bc7e <__sflush_r+0x32>
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0c6      	beq.n	800bc7e <__sflush_r+0x32>
 800bcf0:	2b1d      	cmp	r3, #29
 800bcf2:	d001      	beq.n	800bcf8 <__sflush_r+0xac>
 800bcf4:	2b16      	cmp	r3, #22
 800bcf6:	d11e      	bne.n	800bd36 <__sflush_r+0xea>
 800bcf8:	602f      	str	r7, [r5, #0]
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	e022      	b.n	800bd44 <__sflush_r+0xf8>
 800bcfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd02:	b21b      	sxth	r3, r3
 800bd04:	e01b      	b.n	800bd3e <__sflush_r+0xf2>
 800bd06:	690f      	ldr	r7, [r1, #16]
 800bd08:	2f00      	cmp	r7, #0
 800bd0a:	d0f6      	beq.n	800bcfa <__sflush_r+0xae>
 800bd0c:	0793      	lsls	r3, r2, #30
 800bd0e:	680e      	ldr	r6, [r1, #0]
 800bd10:	bf08      	it	eq
 800bd12:	694b      	ldreq	r3, [r1, #20]
 800bd14:	600f      	str	r7, [r1, #0]
 800bd16:	bf18      	it	ne
 800bd18:	2300      	movne	r3, #0
 800bd1a:	eba6 0807 	sub.w	r8, r6, r7
 800bd1e:	608b      	str	r3, [r1, #8]
 800bd20:	f1b8 0f00 	cmp.w	r8, #0
 800bd24:	dde9      	ble.n	800bcfa <__sflush_r+0xae>
 800bd26:	6a21      	ldr	r1, [r4, #32]
 800bd28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd2a:	4643      	mov	r3, r8
 800bd2c:	463a      	mov	r2, r7
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b0      	blx	r6
 800bd32:	2800      	cmp	r0, #0
 800bd34:	dc08      	bgt.n	800bd48 <__sflush_r+0xfc>
 800bd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd3e:	81a3      	strh	r3, [r4, #12]
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd48:	4407      	add	r7, r0
 800bd4a:	eba8 0800 	sub.w	r8, r8, r0
 800bd4e:	e7e7      	b.n	800bd20 <__sflush_r+0xd4>
 800bd50:	dfbffffe 	.word	0xdfbffffe

0800bd54 <_fflush_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	690b      	ldr	r3, [r1, #16]
 800bd58:	4605      	mov	r5, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	b913      	cbnz	r3, 800bd64 <_fflush_r+0x10>
 800bd5e:	2500      	movs	r5, #0
 800bd60:	4628      	mov	r0, r5
 800bd62:	bd38      	pop	{r3, r4, r5, pc}
 800bd64:	b118      	cbz	r0, 800bd6e <_fflush_r+0x1a>
 800bd66:	6a03      	ldr	r3, [r0, #32]
 800bd68:	b90b      	cbnz	r3, 800bd6e <_fflush_r+0x1a>
 800bd6a:	f7ff fb8d 	bl	800b488 <__sinit>
 800bd6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0f3      	beq.n	800bd5e <_fflush_r+0xa>
 800bd76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd78:	07d0      	lsls	r0, r2, #31
 800bd7a:	d404      	bmi.n	800bd86 <_fflush_r+0x32>
 800bd7c:	0599      	lsls	r1, r3, #22
 800bd7e:	d402      	bmi.n	800bd86 <_fflush_r+0x32>
 800bd80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd82:	f7ff fc32 	bl	800b5ea <__retarget_lock_acquire_recursive>
 800bd86:	4628      	mov	r0, r5
 800bd88:	4621      	mov	r1, r4
 800bd8a:	f7ff ff5f 	bl	800bc4c <__sflush_r>
 800bd8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd90:	07da      	lsls	r2, r3, #31
 800bd92:	4605      	mov	r5, r0
 800bd94:	d4e4      	bmi.n	800bd60 <_fflush_r+0xc>
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	059b      	lsls	r3, r3, #22
 800bd9a:	d4e1      	bmi.n	800bd60 <_fflush_r+0xc>
 800bd9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd9e:	f7ff fc25 	bl	800b5ec <__retarget_lock_release_recursive>
 800bda2:	e7dd      	b.n	800bd60 <_fflush_r+0xc>

0800bda4 <__sread>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	460c      	mov	r4, r1
 800bda8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdac:	f000 f9a8 	bl	800c100 <_read_r>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	bfab      	itete	ge
 800bdb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bdb6:	89a3      	ldrhlt	r3, [r4, #12]
 800bdb8:	181b      	addge	r3, r3, r0
 800bdba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bdbe:	bfac      	ite	ge
 800bdc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bdc2:	81a3      	strhlt	r3, [r4, #12]
 800bdc4:	bd10      	pop	{r4, pc}

0800bdc6 <__swrite>:
 800bdc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdca:	461f      	mov	r7, r3
 800bdcc:	898b      	ldrh	r3, [r1, #12]
 800bdce:	05db      	lsls	r3, r3, #23
 800bdd0:	4605      	mov	r5, r0
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	4616      	mov	r6, r2
 800bdd6:	d505      	bpl.n	800bde4 <__swrite+0x1e>
 800bdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bddc:	2302      	movs	r3, #2
 800bdde:	2200      	movs	r2, #0
 800bde0:	f000 f94c 	bl	800c07c <_lseek_r>
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	4632      	mov	r2, r6
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfa:	f000 b9a7 	b.w	800c14c <_write_r>

0800bdfe <__sseek>:
 800bdfe:	b510      	push	{r4, lr}
 800be00:	460c      	mov	r4, r1
 800be02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be06:	f000 f939 	bl	800c07c <_lseek_r>
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	bf15      	itete	ne
 800be10:	6560      	strne	r0, [r4, #84]	@ 0x54
 800be12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800be16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800be1a:	81a3      	strheq	r3, [r4, #12]
 800be1c:	bf18      	it	ne
 800be1e:	81a3      	strhne	r3, [r4, #12]
 800be20:	bd10      	pop	{r4, pc}

0800be22 <__sclose>:
 800be22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be26:	f000 b8f7 	b.w	800c018 <_close_r>

0800be2a <__swbuf_r>:
 800be2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2c:	460e      	mov	r6, r1
 800be2e:	4614      	mov	r4, r2
 800be30:	4605      	mov	r5, r0
 800be32:	b118      	cbz	r0, 800be3c <__swbuf_r+0x12>
 800be34:	6a03      	ldr	r3, [r0, #32]
 800be36:	b90b      	cbnz	r3, 800be3c <__swbuf_r+0x12>
 800be38:	f7ff fb26 	bl	800b488 <__sinit>
 800be3c:	69a3      	ldr	r3, [r4, #24]
 800be3e:	60a3      	str	r3, [r4, #8]
 800be40:	89a3      	ldrh	r3, [r4, #12]
 800be42:	071a      	lsls	r2, r3, #28
 800be44:	d501      	bpl.n	800be4a <__swbuf_r+0x20>
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	b943      	cbnz	r3, 800be5c <__swbuf_r+0x32>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 f82b 	bl	800bea8 <__swsetup_r>
 800be52:	b118      	cbz	r0, 800be5c <__swbuf_r+0x32>
 800be54:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800be58:	4638      	mov	r0, r7
 800be5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	6922      	ldr	r2, [r4, #16]
 800be60:	1a98      	subs	r0, r3, r2
 800be62:	6963      	ldr	r3, [r4, #20]
 800be64:	b2f6      	uxtb	r6, r6
 800be66:	4283      	cmp	r3, r0
 800be68:	4637      	mov	r7, r6
 800be6a:	dc05      	bgt.n	800be78 <__swbuf_r+0x4e>
 800be6c:	4621      	mov	r1, r4
 800be6e:	4628      	mov	r0, r5
 800be70:	f7ff ff70 	bl	800bd54 <_fflush_r>
 800be74:	2800      	cmp	r0, #0
 800be76:	d1ed      	bne.n	800be54 <__swbuf_r+0x2a>
 800be78:	68a3      	ldr	r3, [r4, #8]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	60a3      	str	r3, [r4, #8]
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	6022      	str	r2, [r4, #0]
 800be84:	701e      	strb	r6, [r3, #0]
 800be86:	6962      	ldr	r2, [r4, #20]
 800be88:	1c43      	adds	r3, r0, #1
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d004      	beq.n	800be98 <__swbuf_r+0x6e>
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	07db      	lsls	r3, r3, #31
 800be92:	d5e1      	bpl.n	800be58 <__swbuf_r+0x2e>
 800be94:	2e0a      	cmp	r6, #10
 800be96:	d1df      	bne.n	800be58 <__swbuf_r+0x2e>
 800be98:	4621      	mov	r1, r4
 800be9a:	4628      	mov	r0, r5
 800be9c:	f7ff ff5a 	bl	800bd54 <_fflush_r>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	d0d9      	beq.n	800be58 <__swbuf_r+0x2e>
 800bea4:	e7d6      	b.n	800be54 <__swbuf_r+0x2a>
	...

0800bea8 <__swsetup_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4b29      	ldr	r3, [pc, #164]	@ (800bf50 <__swsetup_r+0xa8>)
 800beac:	4605      	mov	r5, r0
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	460c      	mov	r4, r1
 800beb2:	b118      	cbz	r0, 800bebc <__swsetup_r+0x14>
 800beb4:	6a03      	ldr	r3, [r0, #32]
 800beb6:	b90b      	cbnz	r3, 800bebc <__swsetup_r+0x14>
 800beb8:	f7ff fae6 	bl	800b488 <__sinit>
 800bebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec0:	0719      	lsls	r1, r3, #28
 800bec2:	d422      	bmi.n	800bf0a <__swsetup_r+0x62>
 800bec4:	06da      	lsls	r2, r3, #27
 800bec6:	d407      	bmi.n	800bed8 <__swsetup_r+0x30>
 800bec8:	2209      	movs	r2, #9
 800beca:	602a      	str	r2, [r5, #0]
 800becc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bed6:	e033      	b.n	800bf40 <__swsetup_r+0x98>
 800bed8:	0758      	lsls	r0, r3, #29
 800beda:	d512      	bpl.n	800bf02 <__swsetup_r+0x5a>
 800bedc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bede:	b141      	cbz	r1, 800bef2 <__swsetup_r+0x4a>
 800bee0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bee4:	4299      	cmp	r1, r3
 800bee6:	d002      	beq.n	800beee <__swsetup_r+0x46>
 800bee8:	4628      	mov	r0, r5
 800beea:	f7ff fb95 	bl	800b618 <_free_r>
 800beee:	2300      	movs	r3, #0
 800bef0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bef2:	89a3      	ldrh	r3, [r4, #12]
 800bef4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bef8:	81a3      	strh	r3, [r4, #12]
 800befa:	2300      	movs	r3, #0
 800befc:	6063      	str	r3, [r4, #4]
 800befe:	6923      	ldr	r3, [r4, #16]
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	f043 0308 	orr.w	r3, r3, #8
 800bf08:	81a3      	strh	r3, [r4, #12]
 800bf0a:	6923      	ldr	r3, [r4, #16]
 800bf0c:	b94b      	cbnz	r3, 800bf22 <__swsetup_r+0x7a>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf18:	d003      	beq.n	800bf22 <__swsetup_r+0x7a>
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f000 f83f 	bl	800bfa0 <__smakebuf_r>
 800bf22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf26:	f013 0201 	ands.w	r2, r3, #1
 800bf2a:	d00a      	beq.n	800bf42 <__swsetup_r+0x9a>
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	60a2      	str	r2, [r4, #8]
 800bf30:	6962      	ldr	r2, [r4, #20]
 800bf32:	4252      	negs	r2, r2
 800bf34:	61a2      	str	r2, [r4, #24]
 800bf36:	6922      	ldr	r2, [r4, #16]
 800bf38:	b942      	cbnz	r2, 800bf4c <__swsetup_r+0xa4>
 800bf3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf3e:	d1c5      	bne.n	800becc <__swsetup_r+0x24>
 800bf40:	bd38      	pop	{r3, r4, r5, pc}
 800bf42:	0799      	lsls	r1, r3, #30
 800bf44:	bf58      	it	pl
 800bf46:	6962      	ldrpl	r2, [r4, #20]
 800bf48:	60a2      	str	r2, [r4, #8]
 800bf4a:	e7f4      	b.n	800bf36 <__swsetup_r+0x8e>
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	e7f7      	b.n	800bf40 <__swsetup_r+0x98>
 800bf50:	24000120 	.word	0x24000120

0800bf54 <__swhatbuf_r>:
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	460c      	mov	r4, r1
 800bf58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf5c:	2900      	cmp	r1, #0
 800bf5e:	b096      	sub	sp, #88	@ 0x58
 800bf60:	4615      	mov	r5, r2
 800bf62:	461e      	mov	r6, r3
 800bf64:	da0d      	bge.n	800bf82 <__swhatbuf_r+0x2e>
 800bf66:	89a3      	ldrh	r3, [r4, #12]
 800bf68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf6c:	f04f 0100 	mov.w	r1, #0
 800bf70:	bf14      	ite	ne
 800bf72:	2340      	movne	r3, #64	@ 0x40
 800bf74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf78:	2000      	movs	r0, #0
 800bf7a:	6031      	str	r1, [r6, #0]
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	b016      	add	sp, #88	@ 0x58
 800bf80:	bd70      	pop	{r4, r5, r6, pc}
 800bf82:	466a      	mov	r2, sp
 800bf84:	f000 f858 	bl	800c038 <_fstat_r>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	dbec      	blt.n	800bf66 <__swhatbuf_r+0x12>
 800bf8c:	9901      	ldr	r1, [sp, #4]
 800bf8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf96:	4259      	negs	r1, r3
 800bf98:	4159      	adcs	r1, r3
 800bf9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf9e:	e7eb      	b.n	800bf78 <__swhatbuf_r+0x24>

0800bfa0 <__smakebuf_r>:
 800bfa0:	898b      	ldrh	r3, [r1, #12]
 800bfa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfa4:	079d      	lsls	r5, r3, #30
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	d507      	bpl.n	800bfbc <__smakebuf_r+0x1c>
 800bfac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	6123      	str	r3, [r4, #16]
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	6163      	str	r3, [r4, #20]
 800bfb8:	b003      	add	sp, #12
 800bfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfbc:	ab01      	add	r3, sp, #4
 800bfbe:	466a      	mov	r2, sp
 800bfc0:	f7ff ffc8 	bl	800bf54 <__swhatbuf_r>
 800bfc4:	9f00      	ldr	r7, [sp, #0]
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	4639      	mov	r1, r7
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7ff f944 	bl	800b258 <_malloc_r>
 800bfd0:	b948      	cbnz	r0, 800bfe6 <__smakebuf_r+0x46>
 800bfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfd6:	059a      	lsls	r2, r3, #22
 800bfd8:	d4ee      	bmi.n	800bfb8 <__smakebuf_r+0x18>
 800bfda:	f023 0303 	bic.w	r3, r3, #3
 800bfde:	f043 0302 	orr.w	r3, r3, #2
 800bfe2:	81a3      	strh	r3, [r4, #12]
 800bfe4:	e7e2      	b.n	800bfac <__smakebuf_r+0xc>
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	6020      	str	r0, [r4, #0]
 800bfea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	9b01      	ldr	r3, [sp, #4]
 800bff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bff6:	b15b      	cbz	r3, 800c010 <__smakebuf_r+0x70>
 800bff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bffc:	4630      	mov	r0, r6
 800bffe:	f000 f82d 	bl	800c05c <_isatty_r>
 800c002:	b128      	cbz	r0, 800c010 <__smakebuf_r+0x70>
 800c004:	89a3      	ldrh	r3, [r4, #12]
 800c006:	f023 0303 	bic.w	r3, r3, #3
 800c00a:	f043 0301 	orr.w	r3, r3, #1
 800c00e:	81a3      	strh	r3, [r4, #12]
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	431d      	orrs	r5, r3
 800c014:	81a5      	strh	r5, [r4, #12]
 800c016:	e7cf      	b.n	800bfb8 <__smakebuf_r+0x18>

0800c018 <_close_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4d06      	ldr	r5, [pc, #24]	@ (800c034 <_close_r+0x1c>)
 800c01c:	2300      	movs	r3, #0
 800c01e:	4604      	mov	r4, r0
 800c020:	4608      	mov	r0, r1
 800c022:	602b      	str	r3, [r5, #0]
 800c024:	f7f5 f83e 	bl	80010a4 <_close>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d102      	bne.n	800c032 <_close_r+0x1a>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	b103      	cbz	r3, 800c032 <_close_r+0x1a>
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	24005418 	.word	0x24005418

0800c038 <_fstat_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d07      	ldr	r5, [pc, #28]	@ (800c058 <_fstat_r+0x20>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	4611      	mov	r1, r2
 800c044:	602b      	str	r3, [r5, #0]
 800c046:	f7f5 f839 	bl	80010bc <_fstat>
 800c04a:	1c43      	adds	r3, r0, #1
 800c04c:	d102      	bne.n	800c054 <_fstat_r+0x1c>
 800c04e:	682b      	ldr	r3, [r5, #0]
 800c050:	b103      	cbz	r3, 800c054 <_fstat_r+0x1c>
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	bd38      	pop	{r3, r4, r5, pc}
 800c056:	bf00      	nop
 800c058:	24005418 	.word	0x24005418

0800c05c <_isatty_r>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	4d06      	ldr	r5, [pc, #24]	@ (800c078 <_isatty_r+0x1c>)
 800c060:	2300      	movs	r3, #0
 800c062:	4604      	mov	r4, r0
 800c064:	4608      	mov	r0, r1
 800c066:	602b      	str	r3, [r5, #0]
 800c068:	f7f5 f838 	bl	80010dc <_isatty>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	d102      	bne.n	800c076 <_isatty_r+0x1a>
 800c070:	682b      	ldr	r3, [r5, #0]
 800c072:	b103      	cbz	r3, 800c076 <_isatty_r+0x1a>
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	24005418 	.word	0x24005418

0800c07c <_lseek_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4d07      	ldr	r5, [pc, #28]	@ (800c09c <_lseek_r+0x20>)
 800c080:	4604      	mov	r4, r0
 800c082:	4608      	mov	r0, r1
 800c084:	4611      	mov	r1, r2
 800c086:	2200      	movs	r2, #0
 800c088:	602a      	str	r2, [r5, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	f7f5 f831 	bl	80010f2 <_lseek>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	d102      	bne.n	800c09a <_lseek_r+0x1e>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	b103      	cbz	r3, 800c09a <_lseek_r+0x1e>
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	24005418 	.word	0x24005418

0800c0a0 <_raise_r>:
 800c0a0:	291f      	cmp	r1, #31
 800c0a2:	b538      	push	{r3, r4, r5, lr}
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	d904      	bls.n	800c0b4 <_raise_r+0x14>
 800c0aa:	2316      	movs	r3, #22
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0b2:	bd38      	pop	{r3, r4, r5, pc}
 800c0b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0b6:	b112      	cbz	r2, 800c0be <_raise_r+0x1e>
 800c0b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0bc:	b94b      	cbnz	r3, 800c0d2 <_raise_r+0x32>
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f000 f842 	bl	800c148 <_getpid_r>
 800c0c4:	4622      	mov	r2, r4
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ce:	f000 b829 	b.w	800c124 <_kill_r>
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d00a      	beq.n	800c0ec <_raise_r+0x4c>
 800c0d6:	1c59      	adds	r1, r3, #1
 800c0d8:	d103      	bne.n	800c0e2 <_raise_r+0x42>
 800c0da:	2316      	movs	r3, #22
 800c0dc:	6003      	str	r3, [r0, #0]
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e7e7      	b.n	800c0b2 <_raise_r+0x12>
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	4798      	blx	r3
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e7e0      	b.n	800c0b2 <_raise_r+0x12>

0800c0f0 <raise>:
 800c0f0:	4b02      	ldr	r3, [pc, #8]	@ (800c0fc <raise+0xc>)
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	f7ff bfd3 	b.w	800c0a0 <_raise_r>
 800c0fa:	bf00      	nop
 800c0fc:	24000120 	.word	0x24000120

0800c100 <_read_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d07      	ldr	r5, [pc, #28]	@ (800c120 <_read_r+0x20>)
 800c104:	4604      	mov	r4, r0
 800c106:	4608      	mov	r0, r1
 800c108:	4611      	mov	r1, r2
 800c10a:	2200      	movs	r2, #0
 800c10c:	602a      	str	r2, [r5, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	f7f4 ff8f 	bl	8001032 <_read>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d102      	bne.n	800c11e <_read_r+0x1e>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	b103      	cbz	r3, 800c11e <_read_r+0x1e>
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	bd38      	pop	{r3, r4, r5, pc}
 800c120:	24005418 	.word	0x24005418

0800c124 <_kill_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d07      	ldr	r5, [pc, #28]	@ (800c144 <_kill_r+0x20>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	4611      	mov	r1, r2
 800c130:	602b      	str	r3, [r5, #0]
 800c132:	f7f4 ff63 	bl	8000ffc <_kill>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	d102      	bne.n	800c140 <_kill_r+0x1c>
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	b103      	cbz	r3, 800c140 <_kill_r+0x1c>
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	bd38      	pop	{r3, r4, r5, pc}
 800c142:	bf00      	nop
 800c144:	24005418 	.word	0x24005418

0800c148 <_getpid_r>:
 800c148:	f7f4 bf50 	b.w	8000fec <_getpid>

0800c14c <_write_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d07      	ldr	r5, [pc, #28]	@ (800c16c <_write_r+0x20>)
 800c150:	4604      	mov	r4, r0
 800c152:	4608      	mov	r0, r1
 800c154:	4611      	mov	r1, r2
 800c156:	2200      	movs	r2, #0
 800c158:	602a      	str	r2, [r5, #0]
 800c15a:	461a      	mov	r2, r3
 800c15c:	f7f4 ff86 	bl	800106c <_write>
 800c160:	1c43      	adds	r3, r0, #1
 800c162:	d102      	bne.n	800c16a <_write_r+0x1e>
 800c164:	682b      	ldr	r3, [r5, #0]
 800c166:	b103      	cbz	r3, 800c16a <_write_r+0x1e>
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	bd38      	pop	{r3, r4, r5, pc}
 800c16c:	24005418 	.word	0x24005418

0800c170 <_init>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	bf00      	nop
 800c174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c176:	bc08      	pop	{r3}
 800c178:	469e      	mov	lr, r3
 800c17a:	4770      	bx	lr

0800c17c <_fini>:
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	bf00      	nop
 800c180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c182:	bc08      	pop	{r3}
 800c184:	469e      	mov	lr, r3
 800c186:	4770      	bx	lr
