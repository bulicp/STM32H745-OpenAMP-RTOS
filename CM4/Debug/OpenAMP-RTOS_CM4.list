
OpenAMP-RTOS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bce8  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0810bf88  0810bf88  0000cf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c318  0810c318  0000d318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c320  0810c320  0000d320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c324  0810c324  0000d324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000118  10000000  0810c328  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004ca8  10000118  0810c440  0000e118  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10004dc0  0810c440  0000edc0  2**0
                  ALLOC
  9 .openamp_section 0000008c  38000000  0810c440  0000f000  2**2
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0000e118  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002b814  00000000  00000000  0000e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005fe9  00000000  00000000  0003995c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002058  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000018c1  00000000  00000000  000419a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040ff8  00000000  00000000  00043261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002a5ec  00000000  00000000  00084259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00199b0e  00000000  00000000  000ae845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00248353  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009100  00000000  00000000  00248398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006d  00000000  00000000  00251498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000118 	.word	0x10000118
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810bf70 	.word	0x0810bf70

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000011c 	.word	0x1000011c
 81002dc:	0810bf70 	.word	0x0810bf70

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <strcmp>:
 81002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002f8:	2a01      	cmp	r2, #1
 81002fa:	bf28      	it	cs
 81002fc:	429a      	cmpcs	r2, r3
 81002fe:	d0f7      	beq.n	81002f0 <strcmp>
 8100300:	1ad0      	subs	r0, r2, r3
 8100302:	4770      	bx	lr
	...

08100310 <memchr>:
 8100310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8100314:	2a10      	cmp	r2, #16
 8100316:	db2b      	blt.n	8100370 <memchr+0x60>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	d008      	beq.n	8100330 <memchr+0x20>
 810031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100322:	3a01      	subs	r2, #1
 8100324:	428b      	cmp	r3, r1
 8100326:	d02d      	beq.n	8100384 <memchr+0x74>
 8100328:	f010 0f07 	tst.w	r0, #7
 810032c:	b342      	cbz	r2, 8100380 <memchr+0x70>
 810032e:	d1f6      	bne.n	810031e <memchr+0xe>
 8100330:	b4f0      	push	{r4, r5, r6, r7}
 8100332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810033a:	f022 0407 	bic.w	r4, r2, #7
 810033e:	f07f 0700 	mvns.w	r7, #0
 8100342:	2300      	movs	r3, #0
 8100344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100348:	3c08      	subs	r4, #8
 810034a:	ea85 0501 	eor.w	r5, r5, r1
 810034e:	ea86 0601 	eor.w	r6, r6, r1
 8100352:	fa85 f547 	uadd8	r5, r5, r7
 8100356:	faa3 f587 	sel	r5, r3, r7
 810035a:	fa86 f647 	uadd8	r6, r6, r7
 810035e:	faa5 f687 	sel	r6, r5, r7
 8100362:	b98e      	cbnz	r6, 8100388 <memchr+0x78>
 8100364:	d1ee      	bne.n	8100344 <memchr+0x34>
 8100366:	bcf0      	pop	{r4, r5, r6, r7}
 8100368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810036c:	f002 0207 	and.w	r2, r2, #7
 8100370:	b132      	cbz	r2, 8100380 <memchr+0x70>
 8100372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100376:	3a01      	subs	r2, #1
 8100378:	ea83 0301 	eor.w	r3, r3, r1
 810037c:	b113      	cbz	r3, 8100384 <memchr+0x74>
 810037e:	d1f8      	bne.n	8100372 <memchr+0x62>
 8100380:	2000      	movs	r0, #0
 8100382:	4770      	bx	lr
 8100384:	3801      	subs	r0, #1
 8100386:	4770      	bx	lr
 8100388:	2d00      	cmp	r5, #0
 810038a:	bf06      	itte	eq
 810038c:	4635      	moveq	r5, r6
 810038e:	3803      	subeq	r0, #3
 8100390:	3807      	subne	r0, #7
 8100392:	f015 0f01 	tst.w	r5, #1
 8100396:	d107      	bne.n	81003a8 <memchr+0x98>
 8100398:	3001      	adds	r0, #1
 810039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810039e:	bf02      	ittt	eq
 81003a0:	3001      	addeq	r0, #1
 81003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 81003a6:	3001      	addeq	r0, #1
 81003a8:	bcf0      	pop	{r4, r5, r6, r7}
 81003aa:	3801      	subs	r0, #1
 81003ac:	4770      	bx	lr
 81003ae:	bf00      	nop

081003b0 <__aeabi_uldivmod>:
 81003b0:	b953      	cbnz	r3, 81003c8 <__aeabi_uldivmod+0x18>
 81003b2:	b94a      	cbnz	r2, 81003c8 <__aeabi_uldivmod+0x18>
 81003b4:	2900      	cmp	r1, #0
 81003b6:	bf08      	it	eq
 81003b8:	2800      	cmpeq	r0, #0
 81003ba:	bf1c      	itt	ne
 81003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 81003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 81003c4:	f000 b96a 	b.w	810069c <__aeabi_idiv0>
 81003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003d0:	f000 f806 	bl	81003e0 <__udivmoddi4>
 81003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003dc:	b004      	add	sp, #16
 81003de:	4770      	bx	lr

081003e0 <__udivmoddi4>:
 81003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003e4:	9d08      	ldr	r5, [sp, #32]
 81003e6:	460c      	mov	r4, r1
 81003e8:	2b00      	cmp	r3, #0
 81003ea:	d14e      	bne.n	810048a <__udivmoddi4+0xaa>
 81003ec:	4694      	mov	ip, r2
 81003ee:	458c      	cmp	ip, r1
 81003f0:	4686      	mov	lr, r0
 81003f2:	fab2 f282 	clz	r2, r2
 81003f6:	d962      	bls.n	81004be <__udivmoddi4+0xde>
 81003f8:	b14a      	cbz	r2, 810040e <__udivmoddi4+0x2e>
 81003fa:	f1c2 0320 	rsb	r3, r2, #32
 81003fe:	4091      	lsls	r1, r2
 8100400:	fa20 f303 	lsr.w	r3, r0, r3
 8100404:	fa0c fc02 	lsl.w	ip, ip, r2
 8100408:	4319      	orrs	r1, r3
 810040a:	fa00 fe02 	lsl.w	lr, r0, r2
 810040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100412:	fa1f f68c 	uxth.w	r6, ip
 8100416:	fbb1 f4f7 	udiv	r4, r1, r7
 810041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 810041e:	fb07 1114 	mls	r1, r7, r4, r1
 8100422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100426:	fb04 f106 	mul.w	r1, r4, r6
 810042a:	4299      	cmp	r1, r3
 810042c:	d90a      	bls.n	8100444 <__udivmoddi4+0x64>
 810042e:	eb1c 0303 	adds.w	r3, ip, r3
 8100432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8100436:	f080 8112 	bcs.w	810065e <__udivmoddi4+0x27e>
 810043a:	4299      	cmp	r1, r3
 810043c:	f240 810f 	bls.w	810065e <__udivmoddi4+0x27e>
 8100440:	3c02      	subs	r4, #2
 8100442:	4463      	add	r3, ip
 8100444:	1a59      	subs	r1, r3, r1
 8100446:	fa1f f38e 	uxth.w	r3, lr
 810044a:	fbb1 f0f7 	udiv	r0, r1, r7
 810044e:	fb07 1110 	mls	r1, r7, r0, r1
 8100452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100456:	fb00 f606 	mul.w	r6, r0, r6
 810045a:	429e      	cmp	r6, r3
 810045c:	d90a      	bls.n	8100474 <__udivmoddi4+0x94>
 810045e:	eb1c 0303 	adds.w	r3, ip, r3
 8100462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8100466:	f080 80fc 	bcs.w	8100662 <__udivmoddi4+0x282>
 810046a:	429e      	cmp	r6, r3
 810046c:	f240 80f9 	bls.w	8100662 <__udivmoddi4+0x282>
 8100470:	4463      	add	r3, ip
 8100472:	3802      	subs	r0, #2
 8100474:	1b9b      	subs	r3, r3, r6
 8100476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 810047a:	2100      	movs	r1, #0
 810047c:	b11d      	cbz	r5, 8100486 <__udivmoddi4+0xa6>
 810047e:	40d3      	lsrs	r3, r2
 8100480:	2200      	movs	r2, #0
 8100482:	e9c5 3200 	strd	r3, r2, [r5]
 8100486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810048a:	428b      	cmp	r3, r1
 810048c:	d905      	bls.n	810049a <__udivmoddi4+0xba>
 810048e:	b10d      	cbz	r5, 8100494 <__udivmoddi4+0xb4>
 8100490:	e9c5 0100 	strd	r0, r1, [r5]
 8100494:	2100      	movs	r1, #0
 8100496:	4608      	mov	r0, r1
 8100498:	e7f5      	b.n	8100486 <__udivmoddi4+0xa6>
 810049a:	fab3 f183 	clz	r1, r3
 810049e:	2900      	cmp	r1, #0
 81004a0:	d146      	bne.n	8100530 <__udivmoddi4+0x150>
 81004a2:	42a3      	cmp	r3, r4
 81004a4:	d302      	bcc.n	81004ac <__udivmoddi4+0xcc>
 81004a6:	4290      	cmp	r0, r2
 81004a8:	f0c0 80f0 	bcc.w	810068c <__udivmoddi4+0x2ac>
 81004ac:	1a86      	subs	r6, r0, r2
 81004ae:	eb64 0303 	sbc.w	r3, r4, r3
 81004b2:	2001      	movs	r0, #1
 81004b4:	2d00      	cmp	r5, #0
 81004b6:	d0e6      	beq.n	8100486 <__udivmoddi4+0xa6>
 81004b8:	e9c5 6300 	strd	r6, r3, [r5]
 81004bc:	e7e3      	b.n	8100486 <__udivmoddi4+0xa6>
 81004be:	2a00      	cmp	r2, #0
 81004c0:	f040 8090 	bne.w	81005e4 <__udivmoddi4+0x204>
 81004c4:	eba1 040c 	sub.w	r4, r1, ip
 81004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81004cc:	fa1f f78c 	uxth.w	r7, ip
 81004d0:	2101      	movs	r1, #1
 81004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 81004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81004da:	fb08 4416 	mls	r4, r8, r6, r4
 81004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004e2:	fb07 f006 	mul.w	r0, r7, r6
 81004e6:	4298      	cmp	r0, r3
 81004e8:	d908      	bls.n	81004fc <__udivmoddi4+0x11c>
 81004ea:	eb1c 0303 	adds.w	r3, ip, r3
 81004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 81004f2:	d202      	bcs.n	81004fa <__udivmoddi4+0x11a>
 81004f4:	4298      	cmp	r0, r3
 81004f6:	f200 80cd 	bhi.w	8100694 <__udivmoddi4+0x2b4>
 81004fa:	4626      	mov	r6, r4
 81004fc:	1a1c      	subs	r4, r3, r0
 81004fe:	fa1f f38e 	uxth.w	r3, lr
 8100502:	fbb4 f0f8 	udiv	r0, r4, r8
 8100506:	fb08 4410 	mls	r4, r8, r0, r4
 810050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810050e:	fb00 f707 	mul.w	r7, r0, r7
 8100512:	429f      	cmp	r7, r3
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x148>
 8100516:	eb1c 0303 	adds.w	r3, ip, r3
 810051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 810051e:	d202      	bcs.n	8100526 <__udivmoddi4+0x146>
 8100520:	429f      	cmp	r7, r3
 8100522:	f200 80b0 	bhi.w	8100686 <__udivmoddi4+0x2a6>
 8100526:	4620      	mov	r0, r4
 8100528:	1bdb      	subs	r3, r3, r7
 810052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810052e:	e7a5      	b.n	810047c <__udivmoddi4+0x9c>
 8100530:	f1c1 0620 	rsb	r6, r1, #32
 8100534:	408b      	lsls	r3, r1
 8100536:	fa22 f706 	lsr.w	r7, r2, r6
 810053a:	431f      	orrs	r7, r3
 810053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8100540:	fa04 f301 	lsl.w	r3, r4, r1
 8100544:	ea43 030c 	orr.w	r3, r3, ip
 8100548:	40f4      	lsrs	r4, r6
 810054a:	fa00 f801 	lsl.w	r8, r0, r1
 810054e:	0c38      	lsrs	r0, r7, #16
 8100550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100554:	fbb4 fef0 	udiv	lr, r4, r0
 8100558:	fa1f fc87 	uxth.w	ip, r7
 810055c:	fb00 441e 	mls	r4, r0, lr, r4
 8100560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100564:	fb0e f90c 	mul.w	r9, lr, ip
 8100568:	45a1      	cmp	r9, r4
 810056a:	fa02 f201 	lsl.w	r2, r2, r1
 810056e:	d90a      	bls.n	8100586 <__udivmoddi4+0x1a6>
 8100570:	193c      	adds	r4, r7, r4
 8100572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8100576:	f080 8084 	bcs.w	8100682 <__udivmoddi4+0x2a2>
 810057a:	45a1      	cmp	r9, r4
 810057c:	f240 8081 	bls.w	8100682 <__udivmoddi4+0x2a2>
 8100580:	f1ae 0e02 	sub.w	lr, lr, #2
 8100584:	443c      	add	r4, r7
 8100586:	eba4 0409 	sub.w	r4, r4, r9
 810058a:	fa1f f983 	uxth.w	r9, r3
 810058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8100592:	fb00 4413 	mls	r4, r0, r3, r4
 8100596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810059a:	fb03 fc0c 	mul.w	ip, r3, ip
 810059e:	45a4      	cmp	ip, r4
 81005a0:	d907      	bls.n	81005b2 <__udivmoddi4+0x1d2>
 81005a2:	193c      	adds	r4, r7, r4
 81005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 81005a8:	d267      	bcs.n	810067a <__udivmoddi4+0x29a>
 81005aa:	45a4      	cmp	ip, r4
 81005ac:	d965      	bls.n	810067a <__udivmoddi4+0x29a>
 81005ae:	3b02      	subs	r3, #2
 81005b0:	443c      	add	r4, r7
 81005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81005b6:	fba0 9302 	umull	r9, r3, r0, r2
 81005ba:	eba4 040c 	sub.w	r4, r4, ip
 81005be:	429c      	cmp	r4, r3
 81005c0:	46ce      	mov	lr, r9
 81005c2:	469c      	mov	ip, r3
 81005c4:	d351      	bcc.n	810066a <__udivmoddi4+0x28a>
 81005c6:	d04e      	beq.n	8100666 <__udivmoddi4+0x286>
 81005c8:	b155      	cbz	r5, 81005e0 <__udivmoddi4+0x200>
 81005ca:	ebb8 030e 	subs.w	r3, r8, lr
 81005ce:	eb64 040c 	sbc.w	r4, r4, ip
 81005d2:	fa04 f606 	lsl.w	r6, r4, r6
 81005d6:	40cb      	lsrs	r3, r1
 81005d8:	431e      	orrs	r6, r3
 81005da:	40cc      	lsrs	r4, r1
 81005dc:	e9c5 6400 	strd	r6, r4, [r5]
 81005e0:	2100      	movs	r1, #0
 81005e2:	e750      	b.n	8100486 <__udivmoddi4+0xa6>
 81005e4:	f1c2 0320 	rsb	r3, r2, #32
 81005e8:	fa20 f103 	lsr.w	r1, r0, r3
 81005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 81005f0:	fa24 f303 	lsr.w	r3, r4, r3
 81005f4:	4094      	lsls	r4, r2
 81005f6:	430c      	orrs	r4, r1
 81005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8100600:	fa1f f78c 	uxth.w	r7, ip
 8100604:	fbb3 f0f8 	udiv	r0, r3, r8
 8100608:	fb08 3110 	mls	r1, r8, r0, r3
 810060c:	0c23      	lsrs	r3, r4, #16
 810060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100612:	fb00 f107 	mul.w	r1, r0, r7
 8100616:	4299      	cmp	r1, r3
 8100618:	d908      	bls.n	810062c <__udivmoddi4+0x24c>
 810061a:	eb1c 0303 	adds.w	r3, ip, r3
 810061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8100622:	d22c      	bcs.n	810067e <__udivmoddi4+0x29e>
 8100624:	4299      	cmp	r1, r3
 8100626:	d92a      	bls.n	810067e <__udivmoddi4+0x29e>
 8100628:	3802      	subs	r0, #2
 810062a:	4463      	add	r3, ip
 810062c:	1a5b      	subs	r3, r3, r1
 810062e:	b2a4      	uxth	r4, r4
 8100630:	fbb3 f1f8 	udiv	r1, r3, r8
 8100634:	fb08 3311 	mls	r3, r8, r1, r3
 8100638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810063c:	fb01 f307 	mul.w	r3, r1, r7
 8100640:	42a3      	cmp	r3, r4
 8100642:	d908      	bls.n	8100656 <__udivmoddi4+0x276>
 8100644:	eb1c 0404 	adds.w	r4, ip, r4
 8100648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 810064c:	d213      	bcs.n	8100676 <__udivmoddi4+0x296>
 810064e:	42a3      	cmp	r3, r4
 8100650:	d911      	bls.n	8100676 <__udivmoddi4+0x296>
 8100652:	3902      	subs	r1, #2
 8100654:	4464      	add	r4, ip
 8100656:	1ae4      	subs	r4, r4, r3
 8100658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810065c:	e739      	b.n	81004d2 <__udivmoddi4+0xf2>
 810065e:	4604      	mov	r4, r0
 8100660:	e6f0      	b.n	8100444 <__udivmoddi4+0x64>
 8100662:	4608      	mov	r0, r1
 8100664:	e706      	b.n	8100474 <__udivmoddi4+0x94>
 8100666:	45c8      	cmp	r8, r9
 8100668:	d2ae      	bcs.n	81005c8 <__udivmoddi4+0x1e8>
 810066a:	ebb9 0e02 	subs.w	lr, r9, r2
 810066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8100672:	3801      	subs	r0, #1
 8100674:	e7a8      	b.n	81005c8 <__udivmoddi4+0x1e8>
 8100676:	4631      	mov	r1, r6
 8100678:	e7ed      	b.n	8100656 <__udivmoddi4+0x276>
 810067a:	4603      	mov	r3, r0
 810067c:	e799      	b.n	81005b2 <__udivmoddi4+0x1d2>
 810067e:	4630      	mov	r0, r6
 8100680:	e7d4      	b.n	810062c <__udivmoddi4+0x24c>
 8100682:	46d6      	mov	lr, sl
 8100684:	e77f      	b.n	8100586 <__udivmoddi4+0x1a6>
 8100686:	4463      	add	r3, ip
 8100688:	3802      	subs	r0, #2
 810068a:	e74d      	b.n	8100528 <__udivmoddi4+0x148>
 810068c:	4606      	mov	r6, r0
 810068e:	4623      	mov	r3, r4
 8100690:	4608      	mov	r0, r1
 8100692:	e70f      	b.n	81004b4 <__udivmoddi4+0xd4>
 8100694:	3e02      	subs	r6, #2
 8100696:	4463      	add	r3, ip
 8100698:	e730      	b.n	81004fc <__udivmoddi4+0x11c>
 810069a:	bf00      	nop

0810069c <__aeabi_idiv0>:
 810069c:	4770      	bx	lr
 810069e:	bf00      	nop

081006a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006a0:	b480      	push	{r7}
 81006a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006a4:	4b09      	ldr	r3, [pc, #36]	@ (81006cc <SystemInit+0x2c>)
 81006a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81006aa:	4a08      	ldr	r2, [pc, #32]	@ (81006cc <SystemInit+0x2c>)
 81006ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81006b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81006b4:	4b05      	ldr	r3, [pc, #20]	@ (81006cc <SystemInit+0x2c>)
 81006b6:	691b      	ldr	r3, [r3, #16]
 81006b8:	4a04      	ldr	r2, [pc, #16]	@ (81006cc <SystemInit+0x2c>)
 81006ba:	f043 0310 	orr.w	r3, r3, #16
 81006be:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006c0:	bf00      	nop
 81006c2:	46bd      	mov	sp, r7
 81006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c8:	4770      	bx	lr
 81006ca:	bf00      	nop
 81006cc:	e000ed00 	.word	0xe000ed00

081006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b082      	sub	sp, #8
 81006d4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81006d6:	4b2a      	ldr	r3, [pc, #168]	@ (8100780 <main+0xb0>)
 81006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006dc:	4a28      	ldr	r2, [pc, #160]	@ (8100780 <main+0xb0>)
 81006de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81006e6:	4b26      	ldr	r3, [pc, #152]	@ (8100780 <main+0xb0>)
 81006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81006ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81006f0:	607b      	str	r3, [r7, #4]
 81006f2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006f4:	2001      	movs	r0, #1
 81006f6:	f000 ff5b 	bl	81015b0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006fa:	f000 ffff 	bl	81016fc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006fe:	2201      	movs	r2, #1
 8100700:	2102      	movs	r1, #2
 8100702:	2000      	movs	r0, #0
 8100704:	f000 ff80 	bl	8101608 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100708:	4b1e      	ldr	r3, [pc, #120]	@ (8100784 <main+0xb4>)
 810070a:	681b      	ldr	r3, [r3, #0]
 810070c:	091b      	lsrs	r3, r3, #4
 810070e:	f003 030f 	and.w	r3, r3, #15
 8100712:	2b07      	cmp	r3, #7
 8100714:	d108      	bne.n	8100728 <main+0x58>
 8100716:	4b1c      	ldr	r3, [pc, #112]	@ (8100788 <main+0xb8>)
 8100718:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 810071c:	4a1a      	ldr	r2, [pc, #104]	@ (8100788 <main+0xb8>)
 810071e:	f043 0301 	orr.w	r3, r3, #1
 8100722:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100726:	e007      	b.n	8100738 <main+0x68>
 8100728:	4b17      	ldr	r3, [pc, #92]	@ (8100788 <main+0xb8>)
 810072a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 810072e:	4a16      	ldr	r2, [pc, #88]	@ (8100788 <main+0xb8>)
 8100730:	f043 0301 	orr.w	r3, r3, #1
 8100734:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100738:	f000 fbb6 	bl	8100ea8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810073c:	f000 f882 	bl	8100844 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  MX_USART3_UART_Init();
 8100740:	f000 f834 	bl	81007ac <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100744:	f004 fca8 	bl	8105098 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of txSem */
  txSemHandle = osSemaphoreNew(1, 0, &txSem_attributes);
 8100748:	4a10      	ldr	r2, [pc, #64]	@ (810078c <main+0xbc>)
 810074a:	2100      	movs	r1, #0
 810074c:	2001      	movs	r0, #1
 810074e:	f004 fd9a 	bl	8105286 <osSemaphoreNew>
 8100752:	4603      	mov	r3, r0
 8100754:	4a0e      	ldr	r2, [pc, #56]	@ (8100790 <main+0xc0>)
 8100756:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RxTask */
  RxTaskHandle = osThreadNew(StartRxTask, NULL, &RxTask_attributes);
 8100758:	4a0e      	ldr	r2, [pc, #56]	@ (8100794 <main+0xc4>)
 810075a:	2100      	movs	r1, #0
 810075c:	480e      	ldr	r0, [pc, #56]	@ (8100798 <main+0xc8>)
 810075e:	f004 fce5 	bl	810512c <osThreadNew>
 8100762:	4603      	mov	r3, r0
 8100764:	4a0d      	ldr	r2, [pc, #52]	@ (810079c <main+0xcc>)
 8100766:	6013      	str	r3, [r2, #0]

  /* creation of TxTask */
  TxTaskHandle = osThreadNew(StartTxTask, NULL, &TxTask_attributes);
 8100768:	4a0d      	ldr	r2, [pc, #52]	@ (81007a0 <main+0xd0>)
 810076a:	2100      	movs	r1, #0
 810076c:	480d      	ldr	r0, [pc, #52]	@ (81007a4 <main+0xd4>)
 810076e:	f004 fcdd 	bl	810512c <osThreadNew>
 8100772:	4603      	mov	r3, r0
 8100774:	4a0c      	ldr	r2, [pc, #48]	@ (81007a8 <main+0xd8>)
 8100776:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8100778:	f004 fcb2 	bl	81050e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810077c:	bf00      	nop
 810077e:	e7fd      	b.n	810077c <main+0xac>
 8100780:	58024400 	.word	0x58024400
 8100784:	e000ed00 	.word	0xe000ed00
 8100788:	58026400 	.word	0x58026400
 810078c:	0810c21c 	.word	0x0810c21c
 8100790:	100001d0 	.word	0x100001d0
 8100794:	0810c1d4 	.word	0x0810c1d4
 8100798:	08100955 	.word	0x08100955
 810079c:	100001c8 	.word	0x100001c8
 81007a0:	0810c1f8 	.word	0x0810c1f8
 81007a4:	081009cd 	.word	0x081009cd
 81007a8:	100001cc 	.word	0x100001cc

081007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 81007ac:	b580      	push	{r7, lr}
 81007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81007b0:	4b22      	ldr	r3, [pc, #136]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007b2:	4a23      	ldr	r2, [pc, #140]	@ (8100840 <MX_USART3_UART_Init+0x94>)
 81007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81007b6:	4b21      	ldr	r3, [pc, #132]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81007be:	4b1f      	ldr	r3, [pc, #124]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007c0:	2200      	movs	r2, #0
 81007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81007c4:	4b1d      	ldr	r3, [pc, #116]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007c6:	2200      	movs	r2, #0
 81007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81007ca:	4b1c      	ldr	r3, [pc, #112]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007cc:	2200      	movs	r2, #0
 81007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81007d0:	4b1a      	ldr	r3, [pc, #104]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007d2:	220c      	movs	r2, #12
 81007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81007d6:	4b19      	ldr	r3, [pc, #100]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007d8:	2200      	movs	r2, #0
 81007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81007dc:	4b17      	ldr	r3, [pc, #92]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007de:	2200      	movs	r2, #0
 81007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81007e2:	4b16      	ldr	r3, [pc, #88]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007e4:	2200      	movs	r2, #0
 81007e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81007e8:	4b14      	ldr	r3, [pc, #80]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007ea:	2200      	movs	r2, #0
 81007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81007ee:	4b13      	ldr	r3, [pc, #76]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007f0:	2200      	movs	r2, #0
 81007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81007f4:	4811      	ldr	r0, [pc, #68]	@ (810083c <MX_USART3_UART_Init+0x90>)
 81007f6:	f003 faa3 	bl	8103d40 <HAL_UART_Init>
 81007fa:	4603      	mov	r3, r0
 81007fc:	2b00      	cmp	r3, #0
 81007fe:	d001      	beq.n	8100804 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100800:	f000 f934 	bl	8100a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100804:	2100      	movs	r1, #0
 8100806:	480d      	ldr	r0, [pc, #52]	@ (810083c <MX_USART3_UART_Init+0x90>)
 8100808:	f004 fb38 	bl	8104e7c <HAL_UARTEx_SetTxFifoThreshold>
 810080c:	4603      	mov	r3, r0
 810080e:	2b00      	cmp	r3, #0
 8100810:	d001      	beq.n	8100816 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100812:	f000 f92b 	bl	8100a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100816:	2100      	movs	r1, #0
 8100818:	4808      	ldr	r0, [pc, #32]	@ (810083c <MX_USART3_UART_Init+0x90>)
 810081a:	f004 fb6d 	bl	8104ef8 <HAL_UARTEx_SetRxFifoThreshold>
 810081e:	4603      	mov	r3, r0
 8100820:	2b00      	cmp	r3, #0
 8100822:	d001      	beq.n	8100828 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100824:	f000 f922 	bl	8100a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100828:	4804      	ldr	r0, [pc, #16]	@ (810083c <MX_USART3_UART_Init+0x90>)
 810082a:	f004 faee 	bl	8104e0a <HAL_UARTEx_DisableFifoMode>
 810082e:	4603      	mov	r3, r0
 8100830:	2b00      	cmp	r3, #0
 8100832:	d001      	beq.n	8100838 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100834:	f000 f91a 	bl	8100a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100838:	bf00      	nop
 810083a:	bd80      	pop	{r7, pc}
 810083c:	10000134 	.word	0x10000134
 8100840:	40004800 	.word	0x40004800

08100844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100844:	b580      	push	{r7, lr}
 8100846:	b088      	sub	sp, #32
 8100848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810084a:	f107 030c 	add.w	r3, r7, #12
 810084e:	2200      	movs	r2, #0
 8100850:	601a      	str	r2, [r3, #0]
 8100852:	605a      	str	r2, [r3, #4]
 8100854:	609a      	str	r2, [r3, #8]
 8100856:	60da      	str	r2, [r3, #12]
 8100858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810085a:	4b2c      	ldr	r3, [pc, #176]	@ (810090c <MX_GPIO_Init+0xc8>)
 810085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100860:	4a2a      	ldr	r2, [pc, #168]	@ (810090c <MX_GPIO_Init+0xc8>)
 8100862:	f043 0302 	orr.w	r3, r3, #2
 8100866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810086a:	4b28      	ldr	r3, [pc, #160]	@ (810090c <MX_GPIO_Init+0xc8>)
 810086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100870:	f003 0302 	and.w	r3, r3, #2
 8100874:	60bb      	str	r3, [r7, #8]
 8100876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100878:	4b24      	ldr	r3, [pc, #144]	@ (810090c <MX_GPIO_Init+0xc8>)
 810087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810087e:	4a23      	ldr	r2, [pc, #140]	@ (810090c <MX_GPIO_Init+0xc8>)
 8100880:	f043 0308 	orr.w	r3, r3, #8
 8100884:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100888:	4b20      	ldr	r3, [pc, #128]	@ (810090c <MX_GPIO_Init+0xc8>)
 810088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810088e:	f003 0308 	and.w	r3, r3, #8
 8100892:	607b      	str	r3, [r7, #4]
 8100894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100896:	4b1d      	ldr	r3, [pc, #116]	@ (810090c <MX_GPIO_Init+0xc8>)
 8100898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810089c:	4a1b      	ldr	r2, [pc, #108]	@ (810090c <MX_GPIO_Init+0xc8>)
 810089e:	f043 0310 	orr.w	r3, r3, #16
 81008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81008a6:	4b19      	ldr	r3, [pc, #100]	@ (810090c <MX_GPIO_Init+0xc8>)
 81008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81008ac:	f003 0310 	and.w	r3, r3, #16
 81008b0:	603b      	str	r3, [r7, #0]
 81008b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 81008b4:	2200      	movs	r2, #0
 81008b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81008ba:	4815      	ldr	r0, [pc, #84]	@ (8100910 <MX_GPIO_Init+0xcc>)
 81008bc:	f000 fe16 	bl	81014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81008c0:	2200      	movs	r2, #0
 81008c2:	2102      	movs	r1, #2
 81008c4:	4813      	ldr	r0, [pc, #76]	@ (8100914 <MX_GPIO_Init+0xd0>)
 81008c6:	f000 fe11 	bl	81014ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 81008ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 81008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81008d0:	2301      	movs	r3, #1
 81008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008d4:	2300      	movs	r3, #0
 81008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008d8:	2300      	movs	r3, #0
 81008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 81008dc:	f107 030c 	add.w	r3, r7, #12
 81008e0:	4619      	mov	r1, r3
 81008e2:	480b      	ldr	r0, [pc, #44]	@ (8100910 <MX_GPIO_Init+0xcc>)
 81008e4:	f000 fc52 	bl	810118c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81008e8:	2302      	movs	r3, #2
 81008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81008ec:	2301      	movs	r3, #1
 81008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008f0:	2300      	movs	r3, #0
 81008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008f4:	2300      	movs	r3, #0
 81008f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81008f8:	f107 030c 	add.w	r3, r7, #12
 81008fc:	4619      	mov	r1, r3
 81008fe:	4805      	ldr	r0, [pc, #20]	@ (8100914 <MX_GPIO_Init+0xd0>)
 8100900:	f000 fc44 	bl	810118c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100904:	bf00      	nop
 8100906:	3720      	adds	r7, #32
 8100908:	46bd      	mov	sp, r7
 810090a:	bd80      	pop	{r7, pc}
 810090c:	58024400 	.word	0x58024400
 8100910:	58020400 	.word	0x58020400
 8100914:	58021000 	.word	0x58021000

08100918 <rpmsg_recv_callback>:

/* USER CODE BEGIN 4 */

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
               size_t len, uint32_t src, void *priv)
{
 8100918:	b580      	push	{r7, lr}
 810091a:	b084      	sub	sp, #16
 810091c:	af00      	add	r7, sp, #0
 810091e:	60f8      	str	r0, [r7, #12]
 8100920:	60b9      	str	r1, [r7, #8]
 8100922:	607a      	str	r2, [r7, #4]
 8100924:	603b      	str	r3, [r7, #0]
  received_data_str = (char *) data;
 8100926:	4a09      	ldr	r2, [pc, #36]	@ (810094c <rpmsg_recv_callback+0x34>)
 8100928:	68bb      	ldr	r3, [r7, #8]
 810092a:	6013      	str	r3, [r2, #0]
  //message_received=1;
  if(osSemaphoreRelease(txSemHandle) != osOK) Error_Handler();
 810092c:	4b08      	ldr	r3, [pc, #32]	@ (8100950 <rpmsg_recv_callback+0x38>)
 810092e:	681b      	ldr	r3, [r3, #0]
 8100930:	4618      	mov	r0, r3
 8100932:	f004 fd83 	bl	810543c <osSemaphoreRelease>
 8100936:	4603      	mov	r3, r0
 8100938:	2b00      	cmp	r3, #0
 810093a:	d001      	beq.n	8100940 <rpmsg_recv_callback+0x28>
 810093c:	f000 f896 	bl	8100a6c <Error_Handler>

  return 0;
 8100940:	2300      	movs	r3, #0
}
 8100942:	4618      	mov	r0, r3
 8100944:	3710      	adds	r7, #16
 8100946:	46bd      	mov	sp, r7
 8100948:	bd80      	pop	{r7, pc}
 810094a:	bf00      	nop
 810094c:	100001d4 	.word	0x100001d4
 8100950:	100001d0 	.word	0x100001d0

08100954 <StartRxTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRxTask */
void StartRxTask(void *argument)
{
 8100954:	b580      	push	{r7, lr}
 8100956:	b086      	sub	sp, #24
 8100958:	af02      	add	r7, sp, #8
 810095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  int32_t status = 0;
 810095c:	2300      	movs	r3, #0
 810095e:	60fb      	str	r3, [r7, #12]

  /* Initialize the mailbox use notify the other core on new message */
  MAILBOX_Init();
 8100960:	f009 ff84 	bl	810a86c <MAILBOX_Init>

  /* Initialize OpenAmp and libmetal libraries */
  if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 8100964:	2100      	movs	r1, #0
 8100966:	2001      	movs	r0, #1
 8100968:	f00a f882 	bl	810aa70 <MX_OPENAMP_Init>
 810096c:	4603      	mov	r3, r0
 810096e:	2b00      	cmp	r3, #0
 8100970:	d001      	beq.n	8100976 <StartRxTask+0x22>
	Error_Handler();
 8100972:	f000 f87b 	bl	8100a6c <Error_Handler>

  /* Create an endpoint for rmpsg communication and register the callback
   * Once the endpoint has been created, the OpenAMP framework will notify other cores (e.g. M7)
   * that are waiting for the service
  */
  status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY, rpmsg_recv_callback, NULL);
 8100976:	2300      	movs	r3, #0
 8100978:	9300      	str	r3, [sp, #0]
 810097a:	4b10      	ldr	r3, [pc, #64]	@ (81009bc <StartRxTask+0x68>)
 810097c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8100980:	490f      	ldr	r1, [pc, #60]	@ (81009c0 <StartRxTask+0x6c>)
 8100982:	4810      	ldr	r0, [pc, #64]	@ (81009c4 <StartRxTask+0x70>)
 8100984:	f00a f90a 	bl	810ab9c <OPENAMP_create_endpoint>
 8100988:	60f8      	str	r0, [r7, #12]
  if (status < 0)
 810098a:	68fb      	ldr	r3, [r7, #12]
 810098c:	2b00      	cmp	r3, #0
 810098e:	da01      	bge.n	8100994 <StartRxTask+0x40>
  {
    Error_Handler();
 8100990:	f000 f86c 	bl	8100a6c <Error_Handler>
  }
  /* Infinite loop */
  for(;;)
  {
	// Continiously check for new message from the master:
	OPENAMP_check_for_message(); // Once a message is detected, the function triggers rpmsg_recv_callback() callback
 8100994:	f00a f920 	bl	810abd8 <OPENAMP_check_for_message>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8100998:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 810099c:	480a      	ldr	r0, [pc, #40]	@ (81009c8 <StartRxTask+0x74>)
 810099e:	f000 fdbe 	bl	810151e <HAL_GPIO_TogglePin>
	osDelay(5);
 81009a2:	2005      	movs	r0, #5
 81009a4:	f004 fc54 	bl	8105250 <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 81009a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81009ac:	4806      	ldr	r0, [pc, #24]	@ (81009c8 <StartRxTask+0x74>)
 81009ae:	f000 fdb6 	bl	810151e <HAL_GPIO_TogglePin>
    osDelay(25);
 81009b2:	2019      	movs	r0, #25
 81009b4:	f004 fc4c 	bl	8105250 <osDelay>
	OPENAMP_check_for_message(); // Once a message is detected, the function triggers rpmsg_recv_callback() callback
 81009b8:	bf00      	nop
 81009ba:	e7eb      	b.n	8100994 <StartRxTask+0x40>
 81009bc:	08100919 	.word	0x08100919
 81009c0:	0810bfa0 	.word	0x0810bfa0
 81009c4:	100001d8 	.word	0x100001d8
 81009c8:	58020400 	.word	0x58020400

081009cc <StartTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTxTask */
void StartTxTask(void *argument)
{
 81009cc:	b580      	push	{r7, lr}
 81009ce:	b084      	sub	sp, #16
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTxTask */
  /* Infinite loop */
  for(;;)
  {
	if (osSemaphoreAcquire(txSemHandle, osWaitForever) == osOK) {
 81009d4:	4b17      	ldr	r3, [pc, #92]	@ (8100a34 <StartTxTask+0x68>)
 81009d6:	681b      	ldr	r3, [r3, #0]
 81009d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 81009dc:	4618      	mov	r0, r3
 81009de:	f004 fcdb 	bl	8105398 <osSemaphoreAcquire>
 81009e2:	4603      	mov	r3, r0
 81009e4:	2b00      	cmp	r3, #0
 81009e6:	d1f5      	bne.n	81009d4 <StartTxTask+0x8>
	  char *txdata = pvPortMalloc(100);
 81009e8:	2064      	movs	r0, #100	@ 0x64
 81009ea:	f004 fd9f 	bl	810552c <pvPortMalloc>
 81009ee:	60f8      	str	r0, [r7, #12]
	  sprintf(txdata, "Received string: %s\n\r", received_data_str);
 81009f0:	4b11      	ldr	r3, [pc, #68]	@ (8100a38 <StartTxTask+0x6c>)
 81009f2:	681b      	ldr	r3, [r3, #0]
 81009f4:	461a      	mov	r2, r3
 81009f6:	4911      	ldr	r1, [pc, #68]	@ (8100a3c <StartTxTask+0x70>)
 81009f8:	68f8      	ldr	r0, [r7, #12]
 81009fa:	f00a f9f1 	bl	810ade0 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)txdata, strlen(txdata), HAL_MAX_DELAY);
 81009fe:	68f8      	ldr	r0, [r7, #12]
 8100a00:	f7ff fc6e 	bl	81002e0 <strlen>
 8100a04:	4603      	mov	r3, r0
 8100a06:	b29a      	uxth	r2, r3
 8100a08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8100a0c:	68f9      	ldr	r1, [r7, #12]
 8100a0e:	480c      	ldr	r0, [pc, #48]	@ (8100a40 <StartTxTask+0x74>)
 8100a10:	f003 f9e6 	bl	8103de0 <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100a14:	2102      	movs	r1, #2
 8100a16:	480b      	ldr	r0, [pc, #44]	@ (8100a44 <StartTxTask+0x78>)
 8100a18:	f000 fd81 	bl	810151e <HAL_GPIO_TogglePin>
	  osDelay(15);
 8100a1c:	200f      	movs	r0, #15
 8100a1e:	f004 fc17 	bl	8105250 <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8100a22:	2102      	movs	r1, #2
 8100a24:	4807      	ldr	r0, [pc, #28]	@ (8100a44 <StartTxTask+0x78>)
 8100a26:	f000 fd7a 	bl	810151e <HAL_GPIO_TogglePin>
	  vPortFree(txdata);
 8100a2a:	68f8      	ldr	r0, [r7, #12]
 8100a2c:	f004 fe4c 	bl	81056c8 <vPortFree>
	if (osSemaphoreAcquire(txSemHandle, osWaitForever) == osOK) {
 8100a30:	e7d0      	b.n	81009d4 <StartTxTask+0x8>
 8100a32:	bf00      	nop
 8100a34:	100001d0 	.word	0x100001d0
 8100a38:	100001d4 	.word	0x100001d4
 8100a3c:	0810bfb0 	.word	0x0810bfb0
 8100a40:	10000134 	.word	0x10000134
 8100a44:	58021000 	.word	0x58021000

08100a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100a48:	b580      	push	{r7, lr}
 8100a4a:	b082      	sub	sp, #8
 8100a4c:	af00      	add	r7, sp, #0
 8100a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8100a50:	687b      	ldr	r3, [r7, #4]
 8100a52:	681b      	ldr	r3, [r3, #0]
 8100a54:	4a04      	ldr	r2, [pc, #16]	@ (8100a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100a56:	4293      	cmp	r3, r2
 8100a58:	d101      	bne.n	8100a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100a5a:	f000 fa83 	bl	8100f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100a5e:	bf00      	nop
 8100a60:	3708      	adds	r7, #8
 8100a62:	46bd      	mov	sp, r7
 8100a64:	bd80      	pop	{r7, pc}
 8100a66:	bf00      	nop
 8100a68:	40001400 	.word	0x40001400

08100a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100a6c:	b480      	push	{r7}
 8100a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100a70:	b672      	cpsid	i
}
 8100a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100a74:	bf00      	nop
 8100a76:	e7fd      	b.n	8100a74 <Error_Handler+0x8>

08100a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100a78:	b580      	push	{r7, lr}
 8100a7a:	b082      	sub	sp, #8
 8100a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a7e:	4b10      	ldr	r3, [pc, #64]	@ (8100ac0 <HAL_MspInit+0x48>)
 8100a80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a84:	4a0e      	ldr	r2, [pc, #56]	@ (8100ac0 <HAL_MspInit+0x48>)
 8100a86:	f043 0302 	orr.w	r3, r3, #2
 8100a8a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8100ac0 <HAL_MspInit+0x48>)
 8100a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100a94:	f003 0302 	and.w	r3, r3, #2
 8100a98:	607b      	str	r3, [r7, #4]
 8100a9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100a9c:	2200      	movs	r2, #0
 8100a9e:	210f      	movs	r1, #15
 8100aa0:	f06f 0001 	mvn.w	r0, #1
 8100aa4:	f000 fb36 	bl	8101114 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8100aa8:	2200      	movs	r2, #0
 8100aaa:	2105      	movs	r1, #5
 8100aac:	207e      	movs	r0, #126	@ 0x7e
 8100aae:	f000 fb31 	bl	8101114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100ab2:	207e      	movs	r0, #126	@ 0x7e
 8100ab4:	f000 fb48 	bl	8101148 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100ab8:	bf00      	nop
 8100aba:	3708      	adds	r7, #8
 8100abc:	46bd      	mov	sp, r7
 8100abe:	bd80      	pop	{r7, pc}
 8100ac0:	58024400 	.word	0x58024400

08100ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100ac4:	b580      	push	{r7, lr}
 8100ac6:	b0ba      	sub	sp, #232	@ 0xe8
 8100ac8:	af00      	add	r7, sp, #0
 8100aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100acc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100ad0:	2200      	movs	r2, #0
 8100ad2:	601a      	str	r2, [r3, #0]
 8100ad4:	605a      	str	r2, [r3, #4]
 8100ad6:	609a      	str	r2, [r3, #8]
 8100ad8:	60da      	str	r2, [r3, #12]
 8100ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100adc:	f107 0310 	add.w	r3, r7, #16
 8100ae0:	22c0      	movs	r2, #192	@ 0xc0
 8100ae2:	2100      	movs	r1, #0
 8100ae4:	4618      	mov	r0, r3
 8100ae6:	f00a fa94 	bl	810b012 <memset>
  if(huart->Instance==USART3)
 8100aea:	687b      	ldr	r3, [r7, #4]
 8100aec:	681b      	ldr	r3, [r3, #0]
 8100aee:	4a27      	ldr	r2, [pc, #156]	@ (8100b8c <HAL_UART_MspInit+0xc8>)
 8100af0:	4293      	cmp	r3, r2
 8100af2:	d146      	bne.n	8100b82 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100af4:	f04f 0202 	mov.w	r2, #2
 8100af8:	f04f 0300 	mov.w	r3, #0
 8100afc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100b00:	2300      	movs	r3, #0
 8100b02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100b06:	f107 0310 	add.w	r3, r7, #16
 8100b0a:	4618      	mov	r0, r3
 8100b0c:	f001 f81e 	bl	8101b4c <HAL_RCCEx_PeriphCLKConfig>
 8100b10:	4603      	mov	r3, r0
 8100b12:	2b00      	cmp	r3, #0
 8100b14:	d001      	beq.n	8100b1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8100b16:	f7ff ffa9 	bl	8100a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8100b90 <HAL_UART_MspInit+0xcc>)
 8100b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100b20:	4a1b      	ldr	r2, [pc, #108]	@ (8100b90 <HAL_UART_MspInit+0xcc>)
 8100b22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8100b26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100b2a:	4b19      	ldr	r3, [pc, #100]	@ (8100b90 <HAL_UART_MspInit+0xcc>)
 8100b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8100b34:	60fb      	str	r3, [r7, #12]
 8100b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b38:	4b15      	ldr	r3, [pc, #84]	@ (8100b90 <HAL_UART_MspInit+0xcc>)
 8100b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b3e:	4a14      	ldr	r2, [pc, #80]	@ (8100b90 <HAL_UART_MspInit+0xcc>)
 8100b40:	f043 0308 	orr.w	r3, r3, #8
 8100b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100b48:	4b11      	ldr	r3, [pc, #68]	@ (8100b90 <HAL_UART_MspInit+0xcc>)
 8100b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100b4e:	f003 0308 	and.w	r3, r3, #8
 8100b52:	60bb      	str	r3, [r7, #8]
 8100b54:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8100b56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8100b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b5e:	2302      	movs	r3, #2
 8100b60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b64:	2300      	movs	r3, #0
 8100b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b6a:	2300      	movs	r3, #0
 8100b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100b70:	2307      	movs	r3, #7
 8100b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100b76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100b7a:	4619      	mov	r1, r3
 8100b7c:	4805      	ldr	r0, [pc, #20]	@ (8100b94 <HAL_UART_MspInit+0xd0>)
 8100b7e:	f000 fb05 	bl	810118c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100b82:	bf00      	nop
 8100b84:	37e8      	adds	r7, #232	@ 0xe8
 8100b86:	46bd      	mov	sp, r7
 8100b88:	bd80      	pop	{r7, pc}
 8100b8a:	bf00      	nop
 8100b8c:	40004800 	.word	0x40004800
 8100b90:	58024400 	.word	0x58024400
 8100b94:	58020c00 	.word	0x58020c00

08100b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100b98:	b580      	push	{r7, lr}
 8100b9a:	b090      	sub	sp, #64	@ 0x40
 8100b9c:	af00      	add	r7, sp, #0
 8100b9e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100ba0:	687b      	ldr	r3, [r7, #4]
 8100ba2:	2b0f      	cmp	r3, #15
 8100ba4:	d827      	bhi.n	8100bf6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8100ba6:	2200      	movs	r2, #0
 8100ba8:	6879      	ldr	r1, [r7, #4]
 8100baa:	2037      	movs	r0, #55	@ 0x37
 8100bac:	f000 fab2 	bl	8101114 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8100bb0:	2037      	movs	r0, #55	@ 0x37
 8100bb2:	f000 fac9 	bl	8101148 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8100bb6:	4a29      	ldr	r2, [pc, #164]	@ (8100c5c <HAL_InitTick+0xc4>)
 8100bb8:	687b      	ldr	r3, [r7, #4]
 8100bba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8100bbc:	4b28      	ldr	r3, [pc, #160]	@ (8100c60 <HAL_InitTick+0xc8>)
 8100bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100bc2:	4a27      	ldr	r2, [pc, #156]	@ (8100c60 <HAL_InitTick+0xc8>)
 8100bc4:	f043 0320 	orr.w	r3, r3, #32
 8100bc8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8100bcc:	4b24      	ldr	r3, [pc, #144]	@ (8100c60 <HAL_InitTick+0xc8>)
 8100bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100bd2:	f003 0320 	and.w	r3, r3, #32
 8100bd6:	60fb      	str	r3, [r7, #12]
 8100bd8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100bda:	f107 0210 	add.w	r2, r7, #16
 8100bde:	f107 0314 	add.w	r3, r7, #20
 8100be2:	4611      	mov	r1, r2
 8100be4:	4618      	mov	r0, r3
 8100be6:	f000 ff6f 	bl	8101ac8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8100bf0:	2b00      	cmp	r3, #0
 8100bf2:	d106      	bne.n	8100c02 <HAL_InitTick+0x6a>
 8100bf4:	e001      	b.n	8100bfa <HAL_InitTick+0x62>
    return HAL_ERROR;
 8100bf6:	2301      	movs	r3, #1
 8100bf8:	e02b      	b.n	8100c52 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100bfa:	f000 ff39 	bl	8101a70 <HAL_RCC_GetPCLK1Freq>
 8100bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8100c00:	e004      	b.n	8100c0c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8100c02:	f000 ff35 	bl	8101a70 <HAL_RCC_GetPCLK1Freq>
 8100c06:	4603      	mov	r3, r0
 8100c08:	005b      	lsls	r3, r3, #1
 8100c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8100c0e:	4a15      	ldr	r2, [pc, #84]	@ (8100c64 <HAL_InitTick+0xcc>)
 8100c10:	fba2 2303 	umull	r2, r3, r2, r3
 8100c14:	0c9b      	lsrs	r3, r3, #18
 8100c16:	3b01      	subs	r3, #1
 8100c18:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8100c1a:	4b13      	ldr	r3, [pc, #76]	@ (8100c68 <HAL_InitTick+0xd0>)
 8100c1c:	4a13      	ldr	r2, [pc, #76]	@ (8100c6c <HAL_InitTick+0xd4>)
 8100c1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8100c20:	4b11      	ldr	r3, [pc, #68]	@ (8100c68 <HAL_InitTick+0xd0>)
 8100c22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8100c26:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8100c28:	4a0f      	ldr	r2, [pc, #60]	@ (8100c68 <HAL_InitTick+0xd0>)
 8100c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8100c2c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8100c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8100c68 <HAL_InitTick+0xd0>)
 8100c30:	2200      	movs	r2, #0
 8100c32:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100c34:	4b0c      	ldr	r3, [pc, #48]	@ (8100c68 <HAL_InitTick+0xd0>)
 8100c36:	2200      	movs	r2, #0
 8100c38:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8100c3a:	480b      	ldr	r0, [pc, #44]	@ (8100c68 <HAL_InitTick+0xd0>)
 8100c3c:	f002 fdb2 	bl	81037a4 <HAL_TIM_Base_Init>
 8100c40:	4603      	mov	r3, r0
 8100c42:	2b00      	cmp	r3, #0
 8100c44:	d104      	bne.n	8100c50 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8100c46:	4808      	ldr	r0, [pc, #32]	@ (8100c68 <HAL_InitTick+0xd0>)
 8100c48:	f002 fe0e 	bl	8103868 <HAL_TIM_Base_Start_IT>
 8100c4c:	4603      	mov	r3, r0
 8100c4e:	e000      	b.n	8100c52 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8100c50:	2301      	movs	r3, #1
}
 8100c52:	4618      	mov	r0, r3
 8100c54:	3740      	adds	r7, #64	@ 0x40
 8100c56:	46bd      	mov	sp, r7
 8100c58:	bd80      	pop	{r7, pc}
 8100c5a:	bf00      	nop
 8100c5c:	10000008 	.word	0x10000008
 8100c60:	58024400 	.word	0x58024400
 8100c64:	431bde83 	.word	0x431bde83
 8100c68:	10000218 	.word	0x10000218
 8100c6c:	40001400 	.word	0x40001400

08100c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100c70:	b480      	push	{r7}
 8100c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100c74:	bf00      	nop
 8100c76:	e7fd      	b.n	8100c74 <NMI_Handler+0x4>

08100c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100c78:	b480      	push	{r7}
 8100c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100c7c:	bf00      	nop
 8100c7e:	e7fd      	b.n	8100c7c <HardFault_Handler+0x4>

08100c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100c80:	b480      	push	{r7}
 8100c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100c84:	bf00      	nop
 8100c86:	e7fd      	b.n	8100c84 <MemManage_Handler+0x4>

08100c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100c88:	b480      	push	{r7}
 8100c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100c8c:	bf00      	nop
 8100c8e:	e7fd      	b.n	8100c8c <BusFault_Handler+0x4>

08100c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100c90:	b480      	push	{r7}
 8100c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100c94:	bf00      	nop
 8100c96:	e7fd      	b.n	8100c94 <UsageFault_Handler+0x4>

08100c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100c98:	b480      	push	{r7}
 8100c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100c9c:	bf00      	nop
 8100c9e:	46bd      	mov	sp, r7
 8100ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ca4:	4770      	bx	lr
	...

08100ca8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8100ca8:	b580      	push	{r7, lr}
 8100caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8100cac:	4802      	ldr	r0, [pc, #8]	@ (8100cb8 <TIM7_IRQHandler+0x10>)
 8100cae:	f002 fe53 	bl	8103958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8100cb2:	bf00      	nop
 8100cb4:	bd80      	pop	{r7, pc}
 8100cb6:	bf00      	nop
 8100cb8:	10000218 	.word	0x10000218

08100cbc <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100cbc:	b580      	push	{r7, lr}
 8100cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100cc0:	f000 fc88 	bl	81015d4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100cc4:	bf00      	nop
 8100cc6:	bd80      	pop	{r7, pc}

08100cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100cc8:	b480      	push	{r7}
 8100cca:	af00      	add	r7, sp, #0
  return 1;
 8100ccc:	2301      	movs	r3, #1
}
 8100cce:	4618      	mov	r0, r3
 8100cd0:	46bd      	mov	sp, r7
 8100cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cd6:	4770      	bx	lr

08100cd8 <_kill>:

int _kill(int pid, int sig)
{
 8100cd8:	b580      	push	{r7, lr}
 8100cda:	b082      	sub	sp, #8
 8100cdc:	af00      	add	r7, sp, #0
 8100cde:	6078      	str	r0, [r7, #4]
 8100ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8100ce2:	f00a f9af 	bl	810b044 <__errno>
 8100ce6:	4603      	mov	r3, r0
 8100ce8:	2216      	movs	r2, #22
 8100cea:	601a      	str	r2, [r3, #0]
  return -1;
 8100cec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8100cf0:	4618      	mov	r0, r3
 8100cf2:	3708      	adds	r7, #8
 8100cf4:	46bd      	mov	sp, r7
 8100cf6:	bd80      	pop	{r7, pc}

08100cf8 <_exit>:

void _exit (int status)
{
 8100cf8:	b580      	push	{r7, lr}
 8100cfa:	b082      	sub	sp, #8
 8100cfc:	af00      	add	r7, sp, #0
 8100cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8100d00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8100d04:	6878      	ldr	r0, [r7, #4]
 8100d06:	f7ff ffe7 	bl	8100cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8100d0a:	bf00      	nop
 8100d0c:	e7fd      	b.n	8100d0a <_exit+0x12>

08100d0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100d0e:	b580      	push	{r7, lr}
 8100d10:	b086      	sub	sp, #24
 8100d12:	af00      	add	r7, sp, #0
 8100d14:	60f8      	str	r0, [r7, #12]
 8100d16:	60b9      	str	r1, [r7, #8]
 8100d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100d1a:	2300      	movs	r3, #0
 8100d1c:	617b      	str	r3, [r7, #20]
 8100d1e:	e00a      	b.n	8100d36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8100d20:	f3af 8000 	nop.w
 8100d24:	4601      	mov	r1, r0
 8100d26:	68bb      	ldr	r3, [r7, #8]
 8100d28:	1c5a      	adds	r2, r3, #1
 8100d2a:	60ba      	str	r2, [r7, #8]
 8100d2c:	b2ca      	uxtb	r2, r1
 8100d2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100d30:	697b      	ldr	r3, [r7, #20]
 8100d32:	3301      	adds	r3, #1
 8100d34:	617b      	str	r3, [r7, #20]
 8100d36:	697a      	ldr	r2, [r7, #20]
 8100d38:	687b      	ldr	r3, [r7, #4]
 8100d3a:	429a      	cmp	r2, r3
 8100d3c:	dbf0      	blt.n	8100d20 <_read+0x12>
  }

  return len;
 8100d3e:	687b      	ldr	r3, [r7, #4]
}
 8100d40:	4618      	mov	r0, r3
 8100d42:	3718      	adds	r7, #24
 8100d44:	46bd      	mov	sp, r7
 8100d46:	bd80      	pop	{r7, pc}

08100d48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100d48:	b580      	push	{r7, lr}
 8100d4a:	b086      	sub	sp, #24
 8100d4c:	af00      	add	r7, sp, #0
 8100d4e:	60f8      	str	r0, [r7, #12]
 8100d50:	60b9      	str	r1, [r7, #8]
 8100d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100d54:	2300      	movs	r3, #0
 8100d56:	617b      	str	r3, [r7, #20]
 8100d58:	e009      	b.n	8100d6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8100d5a:	68bb      	ldr	r3, [r7, #8]
 8100d5c:	1c5a      	adds	r2, r3, #1
 8100d5e:	60ba      	str	r2, [r7, #8]
 8100d60:	781b      	ldrb	r3, [r3, #0]
 8100d62:	4618      	mov	r0, r3
 8100d64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100d68:	697b      	ldr	r3, [r7, #20]
 8100d6a:	3301      	adds	r3, #1
 8100d6c:	617b      	str	r3, [r7, #20]
 8100d6e:	697a      	ldr	r2, [r7, #20]
 8100d70:	687b      	ldr	r3, [r7, #4]
 8100d72:	429a      	cmp	r2, r3
 8100d74:	dbf1      	blt.n	8100d5a <_write+0x12>
  }
  return len;
 8100d76:	687b      	ldr	r3, [r7, #4]
}
 8100d78:	4618      	mov	r0, r3
 8100d7a:	3718      	adds	r7, #24
 8100d7c:	46bd      	mov	sp, r7
 8100d7e:	bd80      	pop	{r7, pc}

08100d80 <_close>:

int _close(int file)
{
 8100d80:	b480      	push	{r7}
 8100d82:	b083      	sub	sp, #12
 8100d84:	af00      	add	r7, sp, #0
 8100d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8100d88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8100d8c:	4618      	mov	r0, r3
 8100d8e:	370c      	adds	r7, #12
 8100d90:	46bd      	mov	sp, r7
 8100d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d96:	4770      	bx	lr

08100d98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100d98:	b480      	push	{r7}
 8100d9a:	b083      	sub	sp, #12
 8100d9c:	af00      	add	r7, sp, #0
 8100d9e:	6078      	str	r0, [r7, #4]
 8100da0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8100da2:	683b      	ldr	r3, [r7, #0]
 8100da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100da8:	605a      	str	r2, [r3, #4]
  return 0;
 8100daa:	2300      	movs	r3, #0
}
 8100dac:	4618      	mov	r0, r3
 8100dae:	370c      	adds	r7, #12
 8100db0:	46bd      	mov	sp, r7
 8100db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db6:	4770      	bx	lr

08100db8 <_isatty>:

int _isatty(int file)
{
 8100db8:	b480      	push	{r7}
 8100dba:	b083      	sub	sp, #12
 8100dbc:	af00      	add	r7, sp, #0
 8100dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8100dc0:	2301      	movs	r3, #1
}
 8100dc2:	4618      	mov	r0, r3
 8100dc4:	370c      	adds	r7, #12
 8100dc6:	46bd      	mov	sp, r7
 8100dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dcc:	4770      	bx	lr

08100dce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100dce:	b480      	push	{r7}
 8100dd0:	b085      	sub	sp, #20
 8100dd2:	af00      	add	r7, sp, #0
 8100dd4:	60f8      	str	r0, [r7, #12]
 8100dd6:	60b9      	str	r1, [r7, #8]
 8100dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8100dda:	2300      	movs	r3, #0
}
 8100ddc:	4618      	mov	r0, r3
 8100dde:	3714      	adds	r7, #20
 8100de0:	46bd      	mov	sp, r7
 8100de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de6:	4770      	bx	lr

08100de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100de8:	b580      	push	{r7, lr}
 8100dea:	b086      	sub	sp, #24
 8100dec:	af00      	add	r7, sp, #0
 8100dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100df0:	4a14      	ldr	r2, [pc, #80]	@ (8100e44 <_sbrk+0x5c>)
 8100df2:	4b15      	ldr	r3, [pc, #84]	@ (8100e48 <_sbrk+0x60>)
 8100df4:	1ad3      	subs	r3, r2, r3
 8100df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100df8:	697b      	ldr	r3, [r7, #20]
 8100dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100dfc:	4b13      	ldr	r3, [pc, #76]	@ (8100e4c <_sbrk+0x64>)
 8100dfe:	681b      	ldr	r3, [r3, #0]
 8100e00:	2b00      	cmp	r3, #0
 8100e02:	d102      	bne.n	8100e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100e04:	4b11      	ldr	r3, [pc, #68]	@ (8100e4c <_sbrk+0x64>)
 8100e06:	4a12      	ldr	r2, [pc, #72]	@ (8100e50 <_sbrk+0x68>)
 8100e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100e0a:	4b10      	ldr	r3, [pc, #64]	@ (8100e4c <_sbrk+0x64>)
 8100e0c:	681a      	ldr	r2, [r3, #0]
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	4413      	add	r3, r2
 8100e12:	693a      	ldr	r2, [r7, #16]
 8100e14:	429a      	cmp	r2, r3
 8100e16:	d207      	bcs.n	8100e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100e18:	f00a f914 	bl	810b044 <__errno>
 8100e1c:	4603      	mov	r3, r0
 8100e1e:	220c      	movs	r2, #12
 8100e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100e22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8100e26:	e009      	b.n	8100e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100e28:	4b08      	ldr	r3, [pc, #32]	@ (8100e4c <_sbrk+0x64>)
 8100e2a:	681b      	ldr	r3, [r3, #0]
 8100e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100e2e:	4b07      	ldr	r3, [pc, #28]	@ (8100e4c <_sbrk+0x64>)
 8100e30:	681a      	ldr	r2, [r3, #0]
 8100e32:	687b      	ldr	r3, [r7, #4]
 8100e34:	4413      	add	r3, r2
 8100e36:	4a05      	ldr	r2, [pc, #20]	@ (8100e4c <_sbrk+0x64>)
 8100e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100e3a:	68fb      	ldr	r3, [r7, #12]
}
 8100e3c:	4618      	mov	r0, r3
 8100e3e:	3718      	adds	r7, #24
 8100e40:	46bd      	mov	sp, r7
 8100e42:	bd80      	pop	{r7, pc}
 8100e44:	10048000 	.word	0x10048000
 8100e48:	00000400 	.word	0x00000400
 8100e4c:	10000264 	.word	0x10000264
 8100e50:	10004dc0 	.word	0x10004dc0

08100e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8100e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100e58:	f7ff fc22 	bl	81006a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100e5c:	480c      	ldr	r0, [pc, #48]	@ (8100e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100e5e:	490d      	ldr	r1, [pc, #52]	@ (8100e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100e60:	4a0d      	ldr	r2, [pc, #52]	@ (8100e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100e64:	e002      	b.n	8100e6c <LoopCopyDataInit>

08100e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100e6a:	3304      	adds	r3, #4

08100e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100e70:	d3f9      	bcc.n	8100e66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100e72:	4a0a      	ldr	r2, [pc, #40]	@ (8100e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100e74:	4c0a      	ldr	r4, [pc, #40]	@ (8100ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100e78:	e001      	b.n	8100e7e <LoopFillZerobss>

08100e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100e7c:	3204      	adds	r2, #4

08100e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100e80:	d3fb      	bcc.n	8100e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100e82:	f00a f8e5 	bl	810b050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100e86:	f7ff fc23 	bl	81006d0 <main>
  bx  lr
 8100e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100e8c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100e90:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100e94:	10000118 	.word	0x10000118
  ldr r2, =_sidata
 8100e98:	0810c328 	.word	0x0810c328
  ldr r2, =_sbss
 8100e9c:	10000118 	.word	0x10000118
  ldr r4, =_ebss
 8100ea0:	10004dc0 	.word	0x10004dc0

08100ea4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100ea4:	e7fe      	b.n	8100ea4 <ADC3_IRQHandler>
	...

08100ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100ea8:	b580      	push	{r7, lr}
 8100eaa:	b082      	sub	sp, #8
 8100eac:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100eae:	4b28      	ldr	r3, [pc, #160]	@ (8100f50 <HAL_Init+0xa8>)
 8100eb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100eb4:	4a26      	ldr	r2, [pc, #152]	@ (8100f50 <HAL_Init+0xa8>)
 8100eb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8100eba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8100ebe:	4b24      	ldr	r3, [pc, #144]	@ (8100f50 <HAL_Init+0xa8>)
 8100ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8100ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8100ec8:	603b      	str	r3, [r7, #0]
 8100eca:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100ecc:	4b21      	ldr	r3, [pc, #132]	@ (8100f54 <HAL_Init+0xac>)
 8100ece:	681b      	ldr	r3, [r3, #0]
 8100ed0:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8100ed4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8100ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8100f54 <HAL_Init+0xac>)
 8100eda:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8100ede:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8100f54 <HAL_Init+0xac>)
 8100ee2:	681b      	ldr	r3, [r3, #0]
 8100ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8100f54 <HAL_Init+0xac>)
 8100ee6:	f043 0301 	orr.w	r3, r3, #1
 8100eea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100eec:	2003      	movs	r0, #3
 8100eee:	f000 f906 	bl	81010fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100ef2:	f000 fc11 	bl	8101718 <HAL_RCC_GetSysClockFreq>
 8100ef6:	4602      	mov	r2, r0
 8100ef8:	4b15      	ldr	r3, [pc, #84]	@ (8100f50 <HAL_Init+0xa8>)
 8100efa:	699b      	ldr	r3, [r3, #24]
 8100efc:	0a1b      	lsrs	r3, r3, #8
 8100efe:	f003 030f 	and.w	r3, r3, #15
 8100f02:	4915      	ldr	r1, [pc, #84]	@ (8100f58 <HAL_Init+0xb0>)
 8100f04:	5ccb      	ldrb	r3, [r1, r3]
 8100f06:	f003 031f 	and.w	r3, r3, #31
 8100f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8100f0e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100f10:	4b0f      	ldr	r3, [pc, #60]	@ (8100f50 <HAL_Init+0xa8>)
 8100f12:	699b      	ldr	r3, [r3, #24]
 8100f14:	f003 030f 	and.w	r3, r3, #15
 8100f18:	4a0f      	ldr	r2, [pc, #60]	@ (8100f58 <HAL_Init+0xb0>)
 8100f1a:	5cd3      	ldrb	r3, [r2, r3]
 8100f1c:	f003 031f 	and.w	r3, r3, #31
 8100f20:	687a      	ldr	r2, [r7, #4]
 8100f22:	fa22 f303 	lsr.w	r3, r2, r3
 8100f26:	4a0d      	ldr	r2, [pc, #52]	@ (8100f5c <HAL_Init+0xb4>)
 8100f28:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8100f5c <HAL_Init+0xb4>)
 8100f2c:	681b      	ldr	r3, [r3, #0]
 8100f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8100f60 <HAL_Init+0xb8>)
 8100f30:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100f32:	200f      	movs	r0, #15
 8100f34:	f7ff fe30 	bl	8100b98 <HAL_InitTick>
 8100f38:	4603      	mov	r3, r0
 8100f3a:	2b00      	cmp	r3, #0
 8100f3c:	d001      	beq.n	8100f42 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100f3e:	2301      	movs	r3, #1
 8100f40:	e002      	b.n	8100f48 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100f42:	f7ff fd99 	bl	8100a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100f46:	2300      	movs	r3, #0
}
 8100f48:	4618      	mov	r0, r3
 8100f4a:	3708      	adds	r7, #8
 8100f4c:	46bd      	mov	sp, r7
 8100f4e:	bd80      	pop	{r7, pc}
 8100f50:	58024400 	.word	0x58024400
 8100f54:	40024400 	.word	0x40024400
 8100f58:	0810c1c4 	.word	0x0810c1c4
 8100f5c:	10000004 	.word	0x10000004
 8100f60:	10000000 	.word	0x10000000

08100f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100f64:	b480      	push	{r7}
 8100f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100f68:	4b06      	ldr	r3, [pc, #24]	@ (8100f84 <HAL_IncTick+0x20>)
 8100f6a:	781b      	ldrb	r3, [r3, #0]
 8100f6c:	461a      	mov	r2, r3
 8100f6e:	4b06      	ldr	r3, [pc, #24]	@ (8100f88 <HAL_IncTick+0x24>)
 8100f70:	681b      	ldr	r3, [r3, #0]
 8100f72:	4413      	add	r3, r2
 8100f74:	4a04      	ldr	r2, [pc, #16]	@ (8100f88 <HAL_IncTick+0x24>)
 8100f76:	6013      	str	r3, [r2, #0]
}
 8100f78:	bf00      	nop
 8100f7a:	46bd      	mov	sp, r7
 8100f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f80:	4770      	bx	lr
 8100f82:	bf00      	nop
 8100f84:	1000000c 	.word	0x1000000c
 8100f88:	10000268 	.word	0x10000268

08100f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100f8c:	b480      	push	{r7}
 8100f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8100f90:	4b03      	ldr	r3, [pc, #12]	@ (8100fa0 <HAL_GetTick+0x14>)
 8100f92:	681b      	ldr	r3, [r3, #0]
}
 8100f94:	4618      	mov	r0, r3
 8100f96:	46bd      	mov	sp, r7
 8100f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f9c:	4770      	bx	lr
 8100f9e:	bf00      	nop
 8100fa0:	10000268 	.word	0x10000268

08100fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100fa4:	b480      	push	{r7}
 8100fa6:	b085      	sub	sp, #20
 8100fa8:	af00      	add	r7, sp, #0
 8100faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	f003 0307 	and.w	r3, r3, #7
 8100fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8100fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8100fb6:	68db      	ldr	r3, [r3, #12]
 8100fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100fba:	68ba      	ldr	r2, [r7, #8]
 8100fbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100fc0:	4013      	ands	r3, r2
 8100fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100fc4:	68fb      	ldr	r3, [r7, #12]
 8100fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100fc8:	68bb      	ldr	r3, [r7, #8]
 8100fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100fcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100fd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100fd6:	4a04      	ldr	r2, [pc, #16]	@ (8100fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8100fd8:	68bb      	ldr	r3, [r7, #8]
 8100fda:	60d3      	str	r3, [r2, #12]
}
 8100fdc:	bf00      	nop
 8100fde:	3714      	adds	r7, #20
 8100fe0:	46bd      	mov	sp, r7
 8100fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe6:	4770      	bx	lr
 8100fe8:	e000ed00 	.word	0xe000ed00

08100fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100fec:	b480      	push	{r7}
 8100fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100ff0:	4b04      	ldr	r3, [pc, #16]	@ (8101004 <__NVIC_GetPriorityGrouping+0x18>)
 8100ff2:	68db      	ldr	r3, [r3, #12]
 8100ff4:	0a1b      	lsrs	r3, r3, #8
 8100ff6:	f003 0307 	and.w	r3, r3, #7
}
 8100ffa:	4618      	mov	r0, r3
 8100ffc:	46bd      	mov	sp, r7
 8100ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101002:	4770      	bx	lr
 8101004:	e000ed00 	.word	0xe000ed00

08101008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101008:	b480      	push	{r7}
 810100a:	b083      	sub	sp, #12
 810100c:	af00      	add	r7, sp, #0
 810100e:	4603      	mov	r3, r0
 8101010:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101016:	2b00      	cmp	r3, #0
 8101018:	db0b      	blt.n	8101032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810101a:	88fb      	ldrh	r3, [r7, #6]
 810101c:	f003 021f 	and.w	r2, r3, #31
 8101020:	4907      	ldr	r1, [pc, #28]	@ (8101040 <__NVIC_EnableIRQ+0x38>)
 8101022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101026:	095b      	lsrs	r3, r3, #5
 8101028:	2001      	movs	r0, #1
 810102a:	fa00 f202 	lsl.w	r2, r0, r2
 810102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101032:	bf00      	nop
 8101034:	370c      	adds	r7, #12
 8101036:	46bd      	mov	sp, r7
 8101038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810103c:	4770      	bx	lr
 810103e:	bf00      	nop
 8101040:	e000e100 	.word	0xe000e100

08101044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101044:	b480      	push	{r7}
 8101046:	b083      	sub	sp, #12
 8101048:	af00      	add	r7, sp, #0
 810104a:	4603      	mov	r3, r0
 810104c:	6039      	str	r1, [r7, #0]
 810104e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101054:	2b00      	cmp	r3, #0
 8101056:	db0a      	blt.n	810106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101058:	683b      	ldr	r3, [r7, #0]
 810105a:	b2da      	uxtb	r2, r3
 810105c:	490c      	ldr	r1, [pc, #48]	@ (8101090 <__NVIC_SetPriority+0x4c>)
 810105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101062:	0112      	lsls	r2, r2, #4
 8101064:	b2d2      	uxtb	r2, r2
 8101066:	440b      	add	r3, r1
 8101068:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810106c:	e00a      	b.n	8101084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810106e:	683b      	ldr	r3, [r7, #0]
 8101070:	b2da      	uxtb	r2, r3
 8101072:	4908      	ldr	r1, [pc, #32]	@ (8101094 <__NVIC_SetPriority+0x50>)
 8101074:	88fb      	ldrh	r3, [r7, #6]
 8101076:	f003 030f 	and.w	r3, r3, #15
 810107a:	3b04      	subs	r3, #4
 810107c:	0112      	lsls	r2, r2, #4
 810107e:	b2d2      	uxtb	r2, r2
 8101080:	440b      	add	r3, r1
 8101082:	761a      	strb	r2, [r3, #24]
}
 8101084:	bf00      	nop
 8101086:	370c      	adds	r7, #12
 8101088:	46bd      	mov	sp, r7
 810108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810108e:	4770      	bx	lr
 8101090:	e000e100 	.word	0xe000e100
 8101094:	e000ed00 	.word	0xe000ed00

08101098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101098:	b480      	push	{r7}
 810109a:	b089      	sub	sp, #36	@ 0x24
 810109c:	af00      	add	r7, sp, #0
 810109e:	60f8      	str	r0, [r7, #12]
 81010a0:	60b9      	str	r1, [r7, #8]
 81010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81010a4:	68fb      	ldr	r3, [r7, #12]
 81010a6:	f003 0307 	and.w	r3, r3, #7
 81010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81010ac:	69fb      	ldr	r3, [r7, #28]
 81010ae:	f1c3 0307 	rsb	r3, r3, #7
 81010b2:	2b04      	cmp	r3, #4
 81010b4:	bf28      	it	cs
 81010b6:	2304      	movcs	r3, #4
 81010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81010ba:	69fb      	ldr	r3, [r7, #28]
 81010bc:	3304      	adds	r3, #4
 81010be:	2b06      	cmp	r3, #6
 81010c0:	d902      	bls.n	81010c8 <NVIC_EncodePriority+0x30>
 81010c2:	69fb      	ldr	r3, [r7, #28]
 81010c4:	3b03      	subs	r3, #3
 81010c6:	e000      	b.n	81010ca <NVIC_EncodePriority+0x32>
 81010c8:	2300      	movs	r3, #0
 81010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81010d0:	69bb      	ldr	r3, [r7, #24]
 81010d2:	fa02 f303 	lsl.w	r3, r2, r3
 81010d6:	43da      	mvns	r2, r3
 81010d8:	68bb      	ldr	r3, [r7, #8]
 81010da:	401a      	ands	r2, r3
 81010dc:	697b      	ldr	r3, [r7, #20]
 81010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81010e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 81010e4:	697b      	ldr	r3, [r7, #20]
 81010e6:	fa01 f303 	lsl.w	r3, r1, r3
 81010ea:	43d9      	mvns	r1, r3
 81010ec:	687b      	ldr	r3, [r7, #4]
 81010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81010f0:	4313      	orrs	r3, r2
         );
}
 81010f2:	4618      	mov	r0, r3
 81010f4:	3724      	adds	r7, #36	@ 0x24
 81010f6:	46bd      	mov	sp, r7
 81010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010fc:	4770      	bx	lr

081010fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81010fe:	b580      	push	{r7, lr}
 8101100:	b082      	sub	sp, #8
 8101102:	af00      	add	r7, sp, #0
 8101104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101106:	6878      	ldr	r0, [r7, #4]
 8101108:	f7ff ff4c 	bl	8100fa4 <__NVIC_SetPriorityGrouping>
}
 810110c:	bf00      	nop
 810110e:	3708      	adds	r7, #8
 8101110:	46bd      	mov	sp, r7
 8101112:	bd80      	pop	{r7, pc}

08101114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101114:	b580      	push	{r7, lr}
 8101116:	b086      	sub	sp, #24
 8101118:	af00      	add	r7, sp, #0
 810111a:	4603      	mov	r3, r0
 810111c:	60b9      	str	r1, [r7, #8]
 810111e:	607a      	str	r2, [r7, #4]
 8101120:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101122:	f7ff ff63 	bl	8100fec <__NVIC_GetPriorityGrouping>
 8101126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101128:	687a      	ldr	r2, [r7, #4]
 810112a:	68b9      	ldr	r1, [r7, #8]
 810112c:	6978      	ldr	r0, [r7, #20]
 810112e:	f7ff ffb3 	bl	8101098 <NVIC_EncodePriority>
 8101132:	4602      	mov	r2, r0
 8101134:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101138:	4611      	mov	r1, r2
 810113a:	4618      	mov	r0, r3
 810113c:	f7ff ff82 	bl	8101044 <__NVIC_SetPriority>
}
 8101140:	bf00      	nop
 8101142:	3718      	adds	r7, #24
 8101144:	46bd      	mov	sp, r7
 8101146:	bd80      	pop	{r7, pc}

08101148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	b082      	sub	sp, #8
 810114c:	af00      	add	r7, sp, #0
 810114e:	4603      	mov	r3, r0
 8101150:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101156:	4618      	mov	r0, r3
 8101158:	f7ff ff56 	bl	8101008 <__NVIC_EnableIRQ>
}
 810115c:	bf00      	nop
 810115e:	3708      	adds	r7, #8
 8101160:	46bd      	mov	sp, r7
 8101162:	bd80      	pop	{r7, pc}

08101164 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101164:	b480      	push	{r7}
 8101166:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101168:	4b07      	ldr	r3, [pc, #28]	@ (8101188 <HAL_GetCurrentCPUID+0x24>)
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	091b      	lsrs	r3, r3, #4
 810116e:	f003 030f 	and.w	r3, r3, #15
 8101172:	2b07      	cmp	r3, #7
 8101174:	d101      	bne.n	810117a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101176:	2303      	movs	r3, #3
 8101178:	e000      	b.n	810117c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810117a:	2301      	movs	r3, #1
  }
}
 810117c:	4618      	mov	r0, r3
 810117e:	46bd      	mov	sp, r7
 8101180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101184:	4770      	bx	lr
 8101186:	bf00      	nop
 8101188:	e000ed00 	.word	0xe000ed00

0810118c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810118c:	b480      	push	{r7}
 810118e:	b089      	sub	sp, #36	@ 0x24
 8101190:	af00      	add	r7, sp, #0
 8101192:	6078      	str	r0, [r7, #4]
 8101194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101196:	2300      	movs	r3, #0
 8101198:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810119a:	4b89      	ldr	r3, [pc, #548]	@ (81013c0 <HAL_GPIO_Init+0x234>)
 810119c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810119e:	e194      	b.n	81014ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81011a0:	683b      	ldr	r3, [r7, #0]
 81011a2:	681a      	ldr	r2, [r3, #0]
 81011a4:	2101      	movs	r1, #1
 81011a6:	69fb      	ldr	r3, [r7, #28]
 81011a8:	fa01 f303 	lsl.w	r3, r1, r3
 81011ac:	4013      	ands	r3, r2
 81011ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81011b0:	693b      	ldr	r3, [r7, #16]
 81011b2:	2b00      	cmp	r3, #0
 81011b4:	f000 8186 	beq.w	81014c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81011b8:	683b      	ldr	r3, [r7, #0]
 81011ba:	685b      	ldr	r3, [r3, #4]
 81011bc:	f003 0303 	and.w	r3, r3, #3
 81011c0:	2b01      	cmp	r3, #1
 81011c2:	d005      	beq.n	81011d0 <HAL_GPIO_Init+0x44>
 81011c4:	683b      	ldr	r3, [r7, #0]
 81011c6:	685b      	ldr	r3, [r3, #4]
 81011c8:	f003 0303 	and.w	r3, r3, #3
 81011cc:	2b02      	cmp	r3, #2
 81011ce:	d130      	bne.n	8101232 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81011d0:	687b      	ldr	r3, [r7, #4]
 81011d2:	689b      	ldr	r3, [r3, #8]
 81011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81011d6:	69fb      	ldr	r3, [r7, #28]
 81011d8:	005b      	lsls	r3, r3, #1
 81011da:	2203      	movs	r2, #3
 81011dc:	fa02 f303 	lsl.w	r3, r2, r3
 81011e0:	43db      	mvns	r3, r3
 81011e2:	69ba      	ldr	r2, [r7, #24]
 81011e4:	4013      	ands	r3, r2
 81011e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81011e8:	683b      	ldr	r3, [r7, #0]
 81011ea:	68da      	ldr	r2, [r3, #12]
 81011ec:	69fb      	ldr	r3, [r7, #28]
 81011ee:	005b      	lsls	r3, r3, #1
 81011f0:	fa02 f303 	lsl.w	r3, r2, r3
 81011f4:	69ba      	ldr	r2, [r7, #24]
 81011f6:	4313      	orrs	r3, r2
 81011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81011fa:	687b      	ldr	r3, [r7, #4]
 81011fc:	69ba      	ldr	r2, [r7, #24]
 81011fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101200:	687b      	ldr	r3, [r7, #4]
 8101202:	685b      	ldr	r3, [r3, #4]
 8101204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101206:	2201      	movs	r2, #1
 8101208:	69fb      	ldr	r3, [r7, #28]
 810120a:	fa02 f303 	lsl.w	r3, r2, r3
 810120e:	43db      	mvns	r3, r3
 8101210:	69ba      	ldr	r2, [r7, #24]
 8101212:	4013      	ands	r3, r2
 8101214:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101216:	683b      	ldr	r3, [r7, #0]
 8101218:	685b      	ldr	r3, [r3, #4]
 810121a:	091b      	lsrs	r3, r3, #4
 810121c:	f003 0201 	and.w	r2, r3, #1
 8101220:	69fb      	ldr	r3, [r7, #28]
 8101222:	fa02 f303 	lsl.w	r3, r2, r3
 8101226:	69ba      	ldr	r2, [r7, #24]
 8101228:	4313      	orrs	r3, r2
 810122a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	69ba      	ldr	r2, [r7, #24]
 8101230:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101232:	683b      	ldr	r3, [r7, #0]
 8101234:	685b      	ldr	r3, [r3, #4]
 8101236:	f003 0303 	and.w	r3, r3, #3
 810123a:	2b03      	cmp	r3, #3
 810123c:	d017      	beq.n	810126e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	68db      	ldr	r3, [r3, #12]
 8101242:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101244:	69fb      	ldr	r3, [r7, #28]
 8101246:	005b      	lsls	r3, r3, #1
 8101248:	2203      	movs	r2, #3
 810124a:	fa02 f303 	lsl.w	r3, r2, r3
 810124e:	43db      	mvns	r3, r3
 8101250:	69ba      	ldr	r2, [r7, #24]
 8101252:	4013      	ands	r3, r2
 8101254:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101256:	683b      	ldr	r3, [r7, #0]
 8101258:	689a      	ldr	r2, [r3, #8]
 810125a:	69fb      	ldr	r3, [r7, #28]
 810125c:	005b      	lsls	r3, r3, #1
 810125e:	fa02 f303 	lsl.w	r3, r2, r3
 8101262:	69ba      	ldr	r2, [r7, #24]
 8101264:	4313      	orrs	r3, r2
 8101266:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101268:	687b      	ldr	r3, [r7, #4]
 810126a:	69ba      	ldr	r2, [r7, #24]
 810126c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810126e:	683b      	ldr	r3, [r7, #0]
 8101270:	685b      	ldr	r3, [r3, #4]
 8101272:	f003 0303 	and.w	r3, r3, #3
 8101276:	2b02      	cmp	r3, #2
 8101278:	d123      	bne.n	81012c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810127a:	69fb      	ldr	r3, [r7, #28]
 810127c:	08da      	lsrs	r2, r3, #3
 810127e:	687b      	ldr	r3, [r7, #4]
 8101280:	3208      	adds	r2, #8
 8101282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101288:	69fb      	ldr	r3, [r7, #28]
 810128a:	f003 0307 	and.w	r3, r3, #7
 810128e:	009b      	lsls	r3, r3, #2
 8101290:	220f      	movs	r2, #15
 8101292:	fa02 f303 	lsl.w	r3, r2, r3
 8101296:	43db      	mvns	r3, r3
 8101298:	69ba      	ldr	r2, [r7, #24]
 810129a:	4013      	ands	r3, r2
 810129c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810129e:	683b      	ldr	r3, [r7, #0]
 81012a0:	691a      	ldr	r2, [r3, #16]
 81012a2:	69fb      	ldr	r3, [r7, #28]
 81012a4:	f003 0307 	and.w	r3, r3, #7
 81012a8:	009b      	lsls	r3, r3, #2
 81012aa:	fa02 f303 	lsl.w	r3, r2, r3
 81012ae:	69ba      	ldr	r2, [r7, #24]
 81012b0:	4313      	orrs	r3, r2
 81012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81012b4:	69fb      	ldr	r3, [r7, #28]
 81012b6:	08da      	lsrs	r2, r3, #3
 81012b8:	687b      	ldr	r3, [r7, #4]
 81012ba:	3208      	adds	r2, #8
 81012bc:	69b9      	ldr	r1, [r7, #24]
 81012be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81012c2:	687b      	ldr	r3, [r7, #4]
 81012c4:	681b      	ldr	r3, [r3, #0]
 81012c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81012c8:	69fb      	ldr	r3, [r7, #28]
 81012ca:	005b      	lsls	r3, r3, #1
 81012cc:	2203      	movs	r2, #3
 81012ce:	fa02 f303 	lsl.w	r3, r2, r3
 81012d2:	43db      	mvns	r3, r3
 81012d4:	69ba      	ldr	r2, [r7, #24]
 81012d6:	4013      	ands	r3, r2
 81012d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81012da:	683b      	ldr	r3, [r7, #0]
 81012dc:	685b      	ldr	r3, [r3, #4]
 81012de:	f003 0203 	and.w	r2, r3, #3
 81012e2:	69fb      	ldr	r3, [r7, #28]
 81012e4:	005b      	lsls	r3, r3, #1
 81012e6:	fa02 f303 	lsl.w	r3, r2, r3
 81012ea:	69ba      	ldr	r2, [r7, #24]
 81012ec:	4313      	orrs	r3, r2
 81012ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81012f0:	687b      	ldr	r3, [r7, #4]
 81012f2:	69ba      	ldr	r2, [r7, #24]
 81012f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81012f6:	683b      	ldr	r3, [r7, #0]
 81012f8:	685b      	ldr	r3, [r3, #4]
 81012fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81012fe:	2b00      	cmp	r3, #0
 8101300:	f000 80e0 	beq.w	81014c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101304:	4b2f      	ldr	r3, [pc, #188]	@ (81013c4 <HAL_GPIO_Init+0x238>)
 8101306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810130a:	4a2e      	ldr	r2, [pc, #184]	@ (81013c4 <HAL_GPIO_Init+0x238>)
 810130c:	f043 0302 	orr.w	r3, r3, #2
 8101310:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101314:	4b2b      	ldr	r3, [pc, #172]	@ (81013c4 <HAL_GPIO_Init+0x238>)
 8101316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810131a:	f003 0302 	and.w	r3, r3, #2
 810131e:	60fb      	str	r3, [r7, #12]
 8101320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101322:	4a29      	ldr	r2, [pc, #164]	@ (81013c8 <HAL_GPIO_Init+0x23c>)
 8101324:	69fb      	ldr	r3, [r7, #28]
 8101326:	089b      	lsrs	r3, r3, #2
 8101328:	3302      	adds	r3, #2
 810132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101330:	69fb      	ldr	r3, [r7, #28]
 8101332:	f003 0303 	and.w	r3, r3, #3
 8101336:	009b      	lsls	r3, r3, #2
 8101338:	220f      	movs	r2, #15
 810133a:	fa02 f303 	lsl.w	r3, r2, r3
 810133e:	43db      	mvns	r3, r3
 8101340:	69ba      	ldr	r2, [r7, #24]
 8101342:	4013      	ands	r3, r2
 8101344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	4a20      	ldr	r2, [pc, #128]	@ (81013cc <HAL_GPIO_Init+0x240>)
 810134a:	4293      	cmp	r3, r2
 810134c:	d052      	beq.n	81013f4 <HAL_GPIO_Init+0x268>
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	4a1f      	ldr	r2, [pc, #124]	@ (81013d0 <HAL_GPIO_Init+0x244>)
 8101352:	4293      	cmp	r3, r2
 8101354:	d031      	beq.n	81013ba <HAL_GPIO_Init+0x22e>
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	4a1e      	ldr	r2, [pc, #120]	@ (81013d4 <HAL_GPIO_Init+0x248>)
 810135a:	4293      	cmp	r3, r2
 810135c:	d02b      	beq.n	81013b6 <HAL_GPIO_Init+0x22a>
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	4a1d      	ldr	r2, [pc, #116]	@ (81013d8 <HAL_GPIO_Init+0x24c>)
 8101362:	4293      	cmp	r3, r2
 8101364:	d025      	beq.n	81013b2 <HAL_GPIO_Init+0x226>
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	4a1c      	ldr	r2, [pc, #112]	@ (81013dc <HAL_GPIO_Init+0x250>)
 810136a:	4293      	cmp	r3, r2
 810136c:	d01f      	beq.n	81013ae <HAL_GPIO_Init+0x222>
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	4a1b      	ldr	r2, [pc, #108]	@ (81013e0 <HAL_GPIO_Init+0x254>)
 8101372:	4293      	cmp	r3, r2
 8101374:	d019      	beq.n	81013aa <HAL_GPIO_Init+0x21e>
 8101376:	687b      	ldr	r3, [r7, #4]
 8101378:	4a1a      	ldr	r2, [pc, #104]	@ (81013e4 <HAL_GPIO_Init+0x258>)
 810137a:	4293      	cmp	r3, r2
 810137c:	d013      	beq.n	81013a6 <HAL_GPIO_Init+0x21a>
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	4a19      	ldr	r2, [pc, #100]	@ (81013e8 <HAL_GPIO_Init+0x25c>)
 8101382:	4293      	cmp	r3, r2
 8101384:	d00d      	beq.n	81013a2 <HAL_GPIO_Init+0x216>
 8101386:	687b      	ldr	r3, [r7, #4]
 8101388:	4a18      	ldr	r2, [pc, #96]	@ (81013ec <HAL_GPIO_Init+0x260>)
 810138a:	4293      	cmp	r3, r2
 810138c:	d007      	beq.n	810139e <HAL_GPIO_Init+0x212>
 810138e:	687b      	ldr	r3, [r7, #4]
 8101390:	4a17      	ldr	r2, [pc, #92]	@ (81013f0 <HAL_GPIO_Init+0x264>)
 8101392:	4293      	cmp	r3, r2
 8101394:	d101      	bne.n	810139a <HAL_GPIO_Init+0x20e>
 8101396:	2309      	movs	r3, #9
 8101398:	e02d      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 810139a:	230a      	movs	r3, #10
 810139c:	e02b      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 810139e:	2308      	movs	r3, #8
 81013a0:	e029      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013a2:	2307      	movs	r3, #7
 81013a4:	e027      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013a6:	2306      	movs	r3, #6
 81013a8:	e025      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013aa:	2305      	movs	r3, #5
 81013ac:	e023      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013ae:	2304      	movs	r3, #4
 81013b0:	e021      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013b2:	2303      	movs	r3, #3
 81013b4:	e01f      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013b6:	2302      	movs	r3, #2
 81013b8:	e01d      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013ba:	2301      	movs	r3, #1
 81013bc:	e01b      	b.n	81013f6 <HAL_GPIO_Init+0x26a>
 81013be:	bf00      	nop
 81013c0:	580000c0 	.word	0x580000c0
 81013c4:	58024400 	.word	0x58024400
 81013c8:	58000400 	.word	0x58000400
 81013cc:	58020000 	.word	0x58020000
 81013d0:	58020400 	.word	0x58020400
 81013d4:	58020800 	.word	0x58020800
 81013d8:	58020c00 	.word	0x58020c00
 81013dc:	58021000 	.word	0x58021000
 81013e0:	58021400 	.word	0x58021400
 81013e4:	58021800 	.word	0x58021800
 81013e8:	58021c00 	.word	0x58021c00
 81013ec:	58022000 	.word	0x58022000
 81013f0:	58022400 	.word	0x58022400
 81013f4:	2300      	movs	r3, #0
 81013f6:	69fa      	ldr	r2, [r7, #28]
 81013f8:	f002 0203 	and.w	r2, r2, #3
 81013fc:	0092      	lsls	r2, r2, #2
 81013fe:	4093      	lsls	r3, r2
 8101400:	69ba      	ldr	r2, [r7, #24]
 8101402:	4313      	orrs	r3, r2
 8101404:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101406:	4938      	ldr	r1, [pc, #224]	@ (81014e8 <HAL_GPIO_Init+0x35c>)
 8101408:	69fb      	ldr	r3, [r7, #28]
 810140a:	089b      	lsrs	r3, r3, #2
 810140c:	3302      	adds	r3, #2
 810140e:	69ba      	ldr	r2, [r7, #24]
 8101410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101418:	681b      	ldr	r3, [r3, #0]
 810141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810141c:	693b      	ldr	r3, [r7, #16]
 810141e:	43db      	mvns	r3, r3
 8101420:	69ba      	ldr	r2, [r7, #24]
 8101422:	4013      	ands	r3, r2
 8101424:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101426:	683b      	ldr	r3, [r7, #0]
 8101428:	685b      	ldr	r3, [r3, #4]
 810142a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810142e:	2b00      	cmp	r3, #0
 8101430:	d003      	beq.n	810143a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101432:	69ba      	ldr	r2, [r7, #24]
 8101434:	693b      	ldr	r3, [r7, #16]
 8101436:	4313      	orrs	r3, r2
 8101438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810143a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810143e:	69bb      	ldr	r3, [r7, #24]
 8101440:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101446:	685b      	ldr	r3, [r3, #4]
 8101448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810144a:	693b      	ldr	r3, [r7, #16]
 810144c:	43db      	mvns	r3, r3
 810144e:	69ba      	ldr	r2, [r7, #24]
 8101450:	4013      	ands	r3, r2
 8101452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101454:	683b      	ldr	r3, [r7, #0]
 8101456:	685b      	ldr	r3, [r3, #4]
 8101458:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810145c:	2b00      	cmp	r3, #0
 810145e:	d003      	beq.n	8101468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101460:	69ba      	ldr	r2, [r7, #24]
 8101462:	693b      	ldr	r3, [r7, #16]
 8101464:	4313      	orrs	r3, r2
 8101466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101468:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810146c:	69bb      	ldr	r3, [r7, #24]
 810146e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101470:	697b      	ldr	r3, [r7, #20]
 8101472:	685b      	ldr	r3, [r3, #4]
 8101474:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101476:	693b      	ldr	r3, [r7, #16]
 8101478:	43db      	mvns	r3, r3
 810147a:	69ba      	ldr	r2, [r7, #24]
 810147c:	4013      	ands	r3, r2
 810147e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101480:	683b      	ldr	r3, [r7, #0]
 8101482:	685b      	ldr	r3, [r3, #4]
 8101484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101488:	2b00      	cmp	r3, #0
 810148a:	d003      	beq.n	8101494 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810148c:	69ba      	ldr	r2, [r7, #24]
 810148e:	693b      	ldr	r3, [r7, #16]
 8101490:	4313      	orrs	r3, r2
 8101492:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101494:	697b      	ldr	r3, [r7, #20]
 8101496:	69ba      	ldr	r2, [r7, #24]
 8101498:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810149a:	697b      	ldr	r3, [r7, #20]
 810149c:	681b      	ldr	r3, [r3, #0]
 810149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81014a0:	693b      	ldr	r3, [r7, #16]
 81014a2:	43db      	mvns	r3, r3
 81014a4:	69ba      	ldr	r2, [r7, #24]
 81014a6:	4013      	ands	r3, r2
 81014a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81014aa:	683b      	ldr	r3, [r7, #0]
 81014ac:	685b      	ldr	r3, [r3, #4]
 81014ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81014b2:	2b00      	cmp	r3, #0
 81014b4:	d003      	beq.n	81014be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81014b6:	69ba      	ldr	r2, [r7, #24]
 81014b8:	693b      	ldr	r3, [r7, #16]
 81014ba:	4313      	orrs	r3, r2
 81014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81014be:	697b      	ldr	r3, [r7, #20]
 81014c0:	69ba      	ldr	r2, [r7, #24]
 81014c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81014c4:	69fb      	ldr	r3, [r7, #28]
 81014c6:	3301      	adds	r3, #1
 81014c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81014ca:	683b      	ldr	r3, [r7, #0]
 81014cc:	681a      	ldr	r2, [r3, #0]
 81014ce:	69fb      	ldr	r3, [r7, #28]
 81014d0:	fa22 f303 	lsr.w	r3, r2, r3
 81014d4:	2b00      	cmp	r3, #0
 81014d6:	f47f ae63 	bne.w	81011a0 <HAL_GPIO_Init+0x14>
  }
}
 81014da:	bf00      	nop
 81014dc:	bf00      	nop
 81014de:	3724      	adds	r7, #36	@ 0x24
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr
 81014e8:	58000400 	.word	0x58000400

081014ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81014ec:	b480      	push	{r7}
 81014ee:	b083      	sub	sp, #12
 81014f0:	af00      	add	r7, sp, #0
 81014f2:	6078      	str	r0, [r7, #4]
 81014f4:	460b      	mov	r3, r1
 81014f6:	807b      	strh	r3, [r7, #2]
 81014f8:	4613      	mov	r3, r2
 81014fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81014fc:	787b      	ldrb	r3, [r7, #1]
 81014fe:	2b00      	cmp	r3, #0
 8101500:	d003      	beq.n	810150a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101502:	887a      	ldrh	r2, [r7, #2]
 8101504:	687b      	ldr	r3, [r7, #4]
 8101506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101508:	e003      	b.n	8101512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810150a:	887b      	ldrh	r3, [r7, #2]
 810150c:	041a      	lsls	r2, r3, #16
 810150e:	687b      	ldr	r3, [r7, #4]
 8101510:	619a      	str	r2, [r3, #24]
}
 8101512:	bf00      	nop
 8101514:	370c      	adds	r7, #12
 8101516:	46bd      	mov	sp, r7
 8101518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810151c:	4770      	bx	lr

0810151e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810151e:	b480      	push	{r7}
 8101520:	b085      	sub	sp, #20
 8101522:	af00      	add	r7, sp, #0
 8101524:	6078      	str	r0, [r7, #4]
 8101526:	460b      	mov	r3, r1
 8101528:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810152a:	687b      	ldr	r3, [r7, #4]
 810152c:	695b      	ldr	r3, [r3, #20]
 810152e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8101530:	887a      	ldrh	r2, [r7, #2]
 8101532:	68fb      	ldr	r3, [r7, #12]
 8101534:	4013      	ands	r3, r2
 8101536:	041a      	lsls	r2, r3, #16
 8101538:	68fb      	ldr	r3, [r7, #12]
 810153a:	43d9      	mvns	r1, r3
 810153c:	887b      	ldrh	r3, [r7, #2]
 810153e:	400b      	ands	r3, r1
 8101540:	431a      	orrs	r2, r3
 8101542:	687b      	ldr	r3, [r7, #4]
 8101544:	619a      	str	r2, [r3, #24]
}
 8101546:	bf00      	nop
 8101548:	3714      	adds	r7, #20
 810154a:	46bd      	mov	sp, r7
 810154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101550:	4770      	bx	lr
	...

08101554 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8101554:	b480      	push	{r7}
 8101556:	b083      	sub	sp, #12
 8101558:	af00      	add	r7, sp, #0
 810155a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 810155c:	4a08      	ldr	r2, [pc, #32]	@ (8101580 <HAL_HSEM_FastTake+0x2c>)
 810155e:	687b      	ldr	r3, [r7, #4]
 8101560:	3320      	adds	r3, #32
 8101562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101566:	4a07      	ldr	r2, [pc, #28]	@ (8101584 <HAL_HSEM_FastTake+0x30>)
 8101568:	4293      	cmp	r3, r2
 810156a:	d101      	bne.n	8101570 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 810156c:	2300      	movs	r3, #0
 810156e:	e000      	b.n	8101572 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8101570:	2301      	movs	r3, #1
}
 8101572:	4618      	mov	r0, r3
 8101574:	370c      	adds	r7, #12
 8101576:	46bd      	mov	sp, r7
 8101578:	f85d 7b04 	ldr.w	r7, [sp], #4
 810157c:	4770      	bx	lr
 810157e:	bf00      	nop
 8101580:	58026400 	.word	0x58026400
 8101584:	80000100 	.word	0x80000100

08101588 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8101588:	b480      	push	{r7}
 810158a:	b083      	sub	sp, #12
 810158c:	af00      	add	r7, sp, #0
 810158e:	6078      	str	r0, [r7, #4]
 8101590:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101592:	4906      	ldr	r1, [pc, #24]	@ (81015ac <HAL_HSEM_Release+0x24>)
 8101594:	683b      	ldr	r3, [r7, #0]
 8101596:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810159a:	687b      	ldr	r3, [r7, #4]
 810159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 81015a0:	bf00      	nop
 81015a2:	370c      	adds	r7, #12
 81015a4:	46bd      	mov	sp, r7
 81015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015aa:	4770      	bx	lr
 81015ac:	58026400 	.word	0x58026400

081015b0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81015b0:	b480      	push	{r7}
 81015b2:	b083      	sub	sp, #12
 81015b4:	af00      	add	r7, sp, #0
 81015b6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81015b8:	4b05      	ldr	r3, [pc, #20]	@ (81015d0 <HAL_HSEM_ActivateNotification+0x20>)
 81015ba:	681a      	ldr	r2, [r3, #0]
 81015bc:	4904      	ldr	r1, [pc, #16]	@ (81015d0 <HAL_HSEM_ActivateNotification+0x20>)
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	4313      	orrs	r3, r2
 81015c2:	600b      	str	r3, [r1, #0]
#endif
}
 81015c4:	bf00      	nop
 81015c6:	370c      	adds	r7, #12
 81015c8:	46bd      	mov	sp, r7
 81015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ce:	4770      	bx	lr
 81015d0:	58026510 	.word	0x58026510

081015d4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81015d4:	b580      	push	{r7, lr}
 81015d6:	b082      	sub	sp, #8
 81015d8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81015da:	4b0a      	ldr	r3, [pc, #40]	@ (8101604 <HAL_HSEM_IRQHandler+0x30>)
 81015dc:	68db      	ldr	r3, [r3, #12]
 81015de:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81015e0:	4b08      	ldr	r3, [pc, #32]	@ (8101604 <HAL_HSEM_IRQHandler+0x30>)
 81015e2:	681a      	ldr	r2, [r3, #0]
 81015e4:	687b      	ldr	r3, [r7, #4]
 81015e6:	43db      	mvns	r3, r3
 81015e8:	4906      	ldr	r1, [pc, #24]	@ (8101604 <HAL_HSEM_IRQHandler+0x30>)
 81015ea:	4013      	ands	r3, r2
 81015ec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81015ee:	4a05      	ldr	r2, [pc, #20]	@ (8101604 <HAL_HSEM_IRQHandler+0x30>)
 81015f0:	687b      	ldr	r3, [r7, #4]
 81015f2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81015f4:	6878      	ldr	r0, [r7, #4]
 81015f6:	f009 f929 	bl	810a84c <HAL_HSEM_FreeCallback>
}
 81015fa:	bf00      	nop
 81015fc:	3708      	adds	r7, #8
 81015fe:	46bd      	mov	sp, r7
 8101600:	bd80      	pop	{r7, pc}
 8101602:	bf00      	nop
 8101604:	58026510 	.word	0x58026510

08101608 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101608:	b580      	push	{r7, lr}
 810160a:	b084      	sub	sp, #16
 810160c:	af00      	add	r7, sp, #0
 810160e:	60f8      	str	r0, [r7, #12]
 8101610:	460b      	mov	r3, r1
 8101612:	607a      	str	r2, [r7, #4]
 8101614:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101616:	4b37      	ldr	r3, [pc, #220]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101618:	681b      	ldr	r3, [r3, #0]
 810161a:	f023 0201 	bic.w	r2, r3, #1
 810161e:	4935      	ldr	r1, [pc, #212]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101620:	68fb      	ldr	r3, [r7, #12]
 8101622:	4313      	orrs	r3, r2
 8101624:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101626:	687b      	ldr	r3, [r7, #4]
 8101628:	2b00      	cmp	r3, #0
 810162a:	d123      	bne.n	8101674 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810162c:	f7ff fd9a 	bl	8101164 <HAL_GetCurrentCPUID>
 8101630:	4603      	mov	r3, r0
 8101632:	2b03      	cmp	r3, #3
 8101634:	d158      	bne.n	81016e8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101636:	4b2f      	ldr	r3, [pc, #188]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101638:	691b      	ldr	r3, [r3, #16]
 810163a:	4a2e      	ldr	r2, [pc, #184]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810163c:	f023 0301 	bic.w	r3, r3, #1
 8101640:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101642:	4b2d      	ldr	r3, [pc, #180]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101644:	691b      	ldr	r3, [r3, #16]
 8101646:	4a2c      	ldr	r2, [pc, #176]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101648:	f043 0304 	orr.w	r3, r3, #4
 810164c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810164e:	f3bf 8f4f 	dsb	sy
}
 8101652:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101654:	f3bf 8f6f 	isb	sy
}
 8101658:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810165a:	7afb      	ldrb	r3, [r7, #11]
 810165c:	2b01      	cmp	r3, #1
 810165e:	d101      	bne.n	8101664 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101660:	bf30      	wfi
 8101662:	e000      	b.n	8101666 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101664:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101666:	4b24      	ldr	r3, [pc, #144]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101668:	691b      	ldr	r3, [r3, #16]
 810166a:	4a23      	ldr	r2, [pc, #140]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810166c:	f023 0304 	bic.w	r3, r3, #4
 8101670:	6113      	str	r3, [r2, #16]
 8101672:	e03c      	b.n	81016ee <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	2b01      	cmp	r3, #1
 8101678:	d123      	bne.n	81016c2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810167a:	f7ff fd73 	bl	8101164 <HAL_GetCurrentCPUID>
 810167e:	4603      	mov	r3, r0
 8101680:	2b01      	cmp	r3, #1
 8101682:	d133      	bne.n	81016ec <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101684:	4b1b      	ldr	r3, [pc, #108]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101686:	695b      	ldr	r3, [r3, #20]
 8101688:	4a1a      	ldr	r2, [pc, #104]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810168a:	f023 0302 	bic.w	r3, r3, #2
 810168e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101690:	4b19      	ldr	r3, [pc, #100]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101692:	691b      	ldr	r3, [r3, #16]
 8101694:	4a18      	ldr	r2, [pc, #96]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101696:	f043 0304 	orr.w	r3, r3, #4
 810169a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810169c:	f3bf 8f4f 	dsb	sy
}
 81016a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81016a2:	f3bf 8f6f 	isb	sy
}
 81016a6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81016a8:	7afb      	ldrb	r3, [r7, #11]
 81016aa:	2b01      	cmp	r3, #1
 81016ac:	d101      	bne.n	81016b2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81016ae:	bf30      	wfi
 81016b0:	e000      	b.n	81016b4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81016b2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016b4:	4b10      	ldr	r3, [pc, #64]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016b6:	691b      	ldr	r3, [r3, #16]
 81016b8:	4a0f      	ldr	r2, [pc, #60]	@ (81016f8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81016ba:	f023 0304 	bic.w	r3, r3, #4
 81016be:	6113      	str	r3, [r2, #16]
 81016c0:	e015      	b.n	81016ee <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81016c2:	f7ff fd4f 	bl	8101164 <HAL_GetCurrentCPUID>
 81016c6:	4603      	mov	r3, r0
 81016c8:	2b03      	cmp	r3, #3
 81016ca:	d106      	bne.n	81016da <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81016cc:	4b09      	ldr	r3, [pc, #36]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016ce:	691b      	ldr	r3, [r3, #16]
 81016d0:	4a08      	ldr	r2, [pc, #32]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016d2:	f023 0304 	bic.w	r3, r3, #4
 81016d6:	6113      	str	r3, [r2, #16]
 81016d8:	e009      	b.n	81016ee <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81016da:	4b06      	ldr	r3, [pc, #24]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016dc:	695b      	ldr	r3, [r3, #20]
 81016de:	4a05      	ldr	r2, [pc, #20]	@ (81016f4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81016e0:	f023 0304 	bic.w	r3, r3, #4
 81016e4:	6153      	str	r3, [r2, #20]
 81016e6:	e002      	b.n	81016ee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016e8:	bf00      	nop
 81016ea:	e000      	b.n	81016ee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81016ec:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81016ee:	3710      	adds	r7, #16
 81016f0:	46bd      	mov	sp, r7
 81016f2:	bd80      	pop	{r7, pc}
 81016f4:	58024800 	.word	0x58024800
 81016f8:	e000ed00 	.word	0xe000ed00

081016fc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81016fc:	b580      	push	{r7, lr}
 81016fe:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101700:	f7ff fd30 	bl	8101164 <HAL_GetCurrentCPUID>
 8101704:	4603      	mov	r3, r0
 8101706:	2b03      	cmp	r3, #3
 8101708:	d101      	bne.n	810170e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810170a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810170c:	e001      	b.n	8101712 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810170e:	bf40      	sev
    __WFE ();
 8101710:	bf20      	wfe
}
 8101712:	bf00      	nop
 8101714:	bd80      	pop	{r7, pc}
	...

08101718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101718:	b480      	push	{r7}
 810171a:	b089      	sub	sp, #36	@ 0x24
 810171c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810171e:	4bb3      	ldr	r3, [pc, #716]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101720:	691b      	ldr	r3, [r3, #16]
 8101722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101726:	2b18      	cmp	r3, #24
 8101728:	f200 8155 	bhi.w	81019d6 <HAL_RCC_GetSysClockFreq+0x2be>
 810172c:	a201      	add	r2, pc, #4	@ (adr r2, 8101734 <HAL_RCC_GetSysClockFreq+0x1c>)
 810172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101732:	bf00      	nop
 8101734:	08101799 	.word	0x08101799
 8101738:	081019d7 	.word	0x081019d7
 810173c:	081019d7 	.word	0x081019d7
 8101740:	081019d7 	.word	0x081019d7
 8101744:	081019d7 	.word	0x081019d7
 8101748:	081019d7 	.word	0x081019d7
 810174c:	081019d7 	.word	0x081019d7
 8101750:	081019d7 	.word	0x081019d7
 8101754:	081017bf 	.word	0x081017bf
 8101758:	081019d7 	.word	0x081019d7
 810175c:	081019d7 	.word	0x081019d7
 8101760:	081019d7 	.word	0x081019d7
 8101764:	081019d7 	.word	0x081019d7
 8101768:	081019d7 	.word	0x081019d7
 810176c:	081019d7 	.word	0x081019d7
 8101770:	081019d7 	.word	0x081019d7
 8101774:	081017c5 	.word	0x081017c5
 8101778:	081019d7 	.word	0x081019d7
 810177c:	081019d7 	.word	0x081019d7
 8101780:	081019d7 	.word	0x081019d7
 8101784:	081019d7 	.word	0x081019d7
 8101788:	081019d7 	.word	0x081019d7
 810178c:	081019d7 	.word	0x081019d7
 8101790:	081019d7 	.word	0x081019d7
 8101794:	081017cb 	.word	0x081017cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101798:	4b94      	ldr	r3, [pc, #592]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	f003 0320 	and.w	r3, r3, #32
 81017a0:	2b00      	cmp	r3, #0
 81017a2:	d009      	beq.n	81017b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81017a4:	4b91      	ldr	r3, [pc, #580]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017a6:	681b      	ldr	r3, [r3, #0]
 81017a8:	08db      	lsrs	r3, r3, #3
 81017aa:	f003 0303 	and.w	r3, r3, #3
 81017ae:	4a90      	ldr	r2, [pc, #576]	@ (81019f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017b0:	fa22 f303 	lsr.w	r3, r2, r3
 81017b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81017b6:	e111      	b.n	81019dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81017b8:	4b8d      	ldr	r3, [pc, #564]	@ (81019f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81017ba:	61bb      	str	r3, [r7, #24]
      break;
 81017bc:	e10e      	b.n	81019dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81017be:	4b8d      	ldr	r3, [pc, #564]	@ (81019f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81017c0:	61bb      	str	r3, [r7, #24]
      break;
 81017c2:	e10b      	b.n	81019dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81017c4:	4b8c      	ldr	r3, [pc, #560]	@ (81019f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81017c6:	61bb      	str	r3, [r7, #24]
      break;
 81017c8:	e108      	b.n	81019dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81017ca:	4b88      	ldr	r3, [pc, #544]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81017ce:	f003 0303 	and.w	r3, r3, #3
 81017d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81017d4:	4b85      	ldr	r3, [pc, #532]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81017d8:	091b      	lsrs	r3, r3, #4
 81017da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81017de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81017e0:	4b82      	ldr	r3, [pc, #520]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81017e4:	f003 0301 	and.w	r3, r3, #1
 81017e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81017ea:	4b80      	ldr	r3, [pc, #512]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81017ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81017ee:	08db      	lsrs	r3, r3, #3
 81017f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81017f4:	68fa      	ldr	r2, [r7, #12]
 81017f6:	fb02 f303 	mul.w	r3, r2, r3
 81017fa:	ee07 3a90 	vmov	s15, r3
 81017fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101802:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101806:	693b      	ldr	r3, [r7, #16]
 8101808:	2b00      	cmp	r3, #0
 810180a:	f000 80e1 	beq.w	81019d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 810180e:	697b      	ldr	r3, [r7, #20]
 8101810:	2b02      	cmp	r3, #2
 8101812:	f000 8083 	beq.w	810191c <HAL_RCC_GetSysClockFreq+0x204>
 8101816:	697b      	ldr	r3, [r7, #20]
 8101818:	2b02      	cmp	r3, #2
 810181a:	f200 80a1 	bhi.w	8101960 <HAL_RCC_GetSysClockFreq+0x248>
 810181e:	697b      	ldr	r3, [r7, #20]
 8101820:	2b00      	cmp	r3, #0
 8101822:	d003      	beq.n	810182c <HAL_RCC_GetSysClockFreq+0x114>
 8101824:	697b      	ldr	r3, [r7, #20]
 8101826:	2b01      	cmp	r3, #1
 8101828:	d056      	beq.n	81018d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810182a:	e099      	b.n	8101960 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810182c:	4b6f      	ldr	r3, [pc, #444]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	f003 0320 	and.w	r3, r3, #32
 8101834:	2b00      	cmp	r3, #0
 8101836:	d02d      	beq.n	8101894 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101838:	4b6c      	ldr	r3, [pc, #432]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 810183a:	681b      	ldr	r3, [r3, #0]
 810183c:	08db      	lsrs	r3, r3, #3
 810183e:	f003 0303 	and.w	r3, r3, #3
 8101842:	4a6b      	ldr	r2, [pc, #428]	@ (81019f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101844:	fa22 f303 	lsr.w	r3, r2, r3
 8101848:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810184a:	687b      	ldr	r3, [r7, #4]
 810184c:	ee07 3a90 	vmov	s15, r3
 8101850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101854:	693b      	ldr	r3, [r7, #16]
 8101856:	ee07 3a90 	vmov	s15, r3
 810185a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810185e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101862:	4b62      	ldr	r3, [pc, #392]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810186a:	ee07 3a90 	vmov	s15, r3
 810186e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101872:	ed97 6a02 	vldr	s12, [r7, #8]
 8101876:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81019fc <HAL_RCC_GetSysClockFreq+0x2e4>
 810187a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810187e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101882:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810188a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810188e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101892:	e087      	b.n	81019a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101894:	693b      	ldr	r3, [r7, #16]
 8101896:	ee07 3a90 	vmov	s15, r3
 810189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810189e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101a00 <HAL_RCC_GetSysClockFreq+0x2e8>
 81018a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018a6:	4b51      	ldr	r3, [pc, #324]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81018aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018ae:	ee07 3a90 	vmov	s15, r3
 81018b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81018ba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81019fc <HAL_RCC_GetSysClockFreq+0x2e4>
 81018be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81018c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81018c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81018ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81018ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81018d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81018d6:	e065      	b.n	81019a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81018d8:	693b      	ldr	r3, [r7, #16]
 81018da:	ee07 3a90 	vmov	s15, r3
 81018de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018e2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 81018e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018ea:	4b40      	ldr	r3, [pc, #256]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81018ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81018f2:	ee07 3a90 	vmov	s15, r3
 81018f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81018fe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81019fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810190a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810190e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101916:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810191a:	e043      	b.n	81019a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810191c:	693b      	ldr	r3, [r7, #16]
 810191e:	ee07 3a90 	vmov	s15, r3
 8101922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101926:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8101a08 <HAL_RCC_GetSysClockFreq+0x2f0>
 810192a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810192e:	4b2f      	ldr	r3, [pc, #188]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101936:	ee07 3a90 	vmov	s15, r3
 810193a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810193e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101942:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81019fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810194a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810194e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101956:	ee67 7a27 	vmul.f32	s15, s14, s15
 810195a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810195e:	e021      	b.n	81019a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101960:	693b      	ldr	r3, [r7, #16]
 8101962:	ee07 3a90 	vmov	s15, r3
 8101966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810196a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101a04 <HAL_RCC_GetSysClockFreq+0x2ec>
 810196e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101972:	4b1e      	ldr	r3, [pc, #120]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810197a:	ee07 3a90 	vmov	s15, r3
 810197e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101982:	ed97 6a02 	vldr	s12, [r7, #8]
 8101986:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81019fc <HAL_RCC_GetSysClockFreq+0x2e4>
 810198a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810198e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810199e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81019a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81019a4:	4b11      	ldr	r3, [pc, #68]	@ (81019ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81019a8:	0a5b      	lsrs	r3, r3, #9
 81019aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81019ae:	3301      	adds	r3, #1
 81019b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81019b2:	683b      	ldr	r3, [r7, #0]
 81019b4:	ee07 3a90 	vmov	s15, r3
 81019b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81019bc:	edd7 6a07 	vldr	s13, [r7, #28]
 81019c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81019c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81019c8:	ee17 3a90 	vmov	r3, s15
 81019cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81019ce:	e005      	b.n	81019dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81019d0:	2300      	movs	r3, #0
 81019d2:	61bb      	str	r3, [r7, #24]
      break;
 81019d4:	e002      	b.n	81019dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81019d6:	4b07      	ldr	r3, [pc, #28]	@ (81019f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81019d8:	61bb      	str	r3, [r7, #24]
      break;
 81019da:	bf00      	nop
  }

  return sysclockfreq;
 81019dc:	69bb      	ldr	r3, [r7, #24]
}
 81019de:	4618      	mov	r0, r3
 81019e0:	3724      	adds	r7, #36	@ 0x24
 81019e2:	46bd      	mov	sp, r7
 81019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e8:	4770      	bx	lr
 81019ea:	bf00      	nop
 81019ec:	58024400 	.word	0x58024400
 81019f0:	03d09000 	.word	0x03d09000
 81019f4:	003d0900 	.word	0x003d0900
 81019f8:	007a1200 	.word	0x007a1200
 81019fc:	46000000 	.word	0x46000000
 8101a00:	4c742400 	.word	0x4c742400
 8101a04:	4a742400 	.word	0x4a742400
 8101a08:	4af42400 	.word	0x4af42400

08101a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101a0c:	b580      	push	{r7, lr}
 8101a0e:	b082      	sub	sp, #8
 8101a10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101a12:	f7ff fe81 	bl	8101718 <HAL_RCC_GetSysClockFreq>
 8101a16:	4602      	mov	r2, r0
 8101a18:	4b11      	ldr	r3, [pc, #68]	@ (8101a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a1a:	699b      	ldr	r3, [r3, #24]
 8101a1c:	0a1b      	lsrs	r3, r3, #8
 8101a1e:	f003 030f 	and.w	r3, r3, #15
 8101a22:	4910      	ldr	r1, [pc, #64]	@ (8101a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8101a24:	5ccb      	ldrb	r3, [r1, r3]
 8101a26:	f003 031f 	and.w	r3, r3, #31
 8101a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8101a2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101a30:	4b0b      	ldr	r3, [pc, #44]	@ (8101a60 <HAL_RCC_GetHCLKFreq+0x54>)
 8101a32:	699b      	ldr	r3, [r3, #24]
 8101a34:	f003 030f 	and.w	r3, r3, #15
 8101a38:	4a0a      	ldr	r2, [pc, #40]	@ (8101a64 <HAL_RCC_GetHCLKFreq+0x58>)
 8101a3a:	5cd3      	ldrb	r3, [r2, r3]
 8101a3c:	f003 031f 	and.w	r3, r3, #31
 8101a40:	687a      	ldr	r2, [r7, #4]
 8101a42:	fa22 f303 	lsr.w	r3, r2, r3
 8101a46:	4a08      	ldr	r2, [pc, #32]	@ (8101a68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a48:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101a4a:	4b07      	ldr	r3, [pc, #28]	@ (8101a68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	4a07      	ldr	r2, [pc, #28]	@ (8101a6c <HAL_RCC_GetHCLKFreq+0x60>)
 8101a50:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101a52:	4b05      	ldr	r3, [pc, #20]	@ (8101a68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101a54:	681b      	ldr	r3, [r3, #0]
}
 8101a56:	4618      	mov	r0, r3
 8101a58:	3708      	adds	r7, #8
 8101a5a:	46bd      	mov	sp, r7
 8101a5c:	bd80      	pop	{r7, pc}
 8101a5e:	bf00      	nop
 8101a60:	58024400 	.word	0x58024400
 8101a64:	0810c1c4 	.word	0x0810c1c4
 8101a68:	10000004 	.word	0x10000004
 8101a6c:	10000000 	.word	0x10000000

08101a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101a70:	b580      	push	{r7, lr}
 8101a72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101a74:	f7ff ffca 	bl	8101a0c <HAL_RCC_GetHCLKFreq>
 8101a78:	4602      	mov	r2, r0
 8101a7a:	4b06      	ldr	r3, [pc, #24]	@ (8101a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101a7c:	69db      	ldr	r3, [r3, #28]
 8101a7e:	091b      	lsrs	r3, r3, #4
 8101a80:	f003 0307 	and.w	r3, r3, #7
 8101a84:	4904      	ldr	r1, [pc, #16]	@ (8101a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101a86:	5ccb      	ldrb	r3, [r1, r3]
 8101a88:	f003 031f 	and.w	r3, r3, #31
 8101a8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101a90:	4618      	mov	r0, r3
 8101a92:	bd80      	pop	{r7, pc}
 8101a94:	58024400 	.word	0x58024400
 8101a98:	0810c1c4 	.word	0x0810c1c4

08101a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101a9c:	b580      	push	{r7, lr}
 8101a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101aa0:	f7ff ffb4 	bl	8101a0c <HAL_RCC_GetHCLKFreq>
 8101aa4:	4602      	mov	r2, r0
 8101aa6:	4b06      	ldr	r3, [pc, #24]	@ (8101ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101aa8:	69db      	ldr	r3, [r3, #28]
 8101aaa:	0a1b      	lsrs	r3, r3, #8
 8101aac:	f003 0307 	and.w	r3, r3, #7
 8101ab0:	4904      	ldr	r1, [pc, #16]	@ (8101ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101ab2:	5ccb      	ldrb	r3, [r1, r3]
 8101ab4:	f003 031f 	and.w	r3, r3, #31
 8101ab8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101abc:	4618      	mov	r0, r3
 8101abe:	bd80      	pop	{r7, pc}
 8101ac0:	58024400 	.word	0x58024400
 8101ac4:	0810c1c4 	.word	0x0810c1c4

08101ac8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101ac8:	b480      	push	{r7}
 8101aca:	b083      	sub	sp, #12
 8101acc:	af00      	add	r7, sp, #0
 8101ace:	6078      	str	r0, [r7, #4]
 8101ad0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	223f      	movs	r2, #63	@ 0x3f
 8101ad6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8101b44 <HAL_RCC_GetClockConfig+0x7c>)
 8101ada:	691b      	ldr	r3, [r3, #16]
 8101adc:	f003 0207 	and.w	r2, r3, #7
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101ae4:	4b17      	ldr	r3, [pc, #92]	@ (8101b44 <HAL_RCC_GetClockConfig+0x7c>)
 8101ae6:	699b      	ldr	r3, [r3, #24]
 8101ae8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101af0:	4b14      	ldr	r3, [pc, #80]	@ (8101b44 <HAL_RCC_GetClockConfig+0x7c>)
 8101af2:	699b      	ldr	r3, [r3, #24]
 8101af4:	f003 020f 	and.w	r2, r3, #15
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101afc:	4b11      	ldr	r3, [pc, #68]	@ (8101b44 <HAL_RCC_GetClockConfig+0x7c>)
 8101afe:	699b      	ldr	r3, [r3, #24]
 8101b00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101b04:	687b      	ldr	r3, [r7, #4]
 8101b06:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101b08:	4b0e      	ldr	r3, [pc, #56]	@ (8101b44 <HAL_RCC_GetClockConfig+0x7c>)
 8101b0a:	69db      	ldr	r3, [r3, #28]
 8101b0c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101b14:	4b0b      	ldr	r3, [pc, #44]	@ (8101b44 <HAL_RCC_GetClockConfig+0x7c>)
 8101b16:	69db      	ldr	r3, [r3, #28]
 8101b18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101b20:	4b08      	ldr	r3, [pc, #32]	@ (8101b44 <HAL_RCC_GetClockConfig+0x7c>)
 8101b22:	6a1b      	ldr	r3, [r3, #32]
 8101b24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8101b28:	687b      	ldr	r3, [r7, #4]
 8101b2a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101b2c:	4b06      	ldr	r3, [pc, #24]	@ (8101b48 <HAL_RCC_GetClockConfig+0x80>)
 8101b2e:	681b      	ldr	r3, [r3, #0]
 8101b30:	f003 020f 	and.w	r2, r3, #15
 8101b34:	683b      	ldr	r3, [r7, #0]
 8101b36:	601a      	str	r2, [r3, #0]
}
 8101b38:	bf00      	nop
 8101b3a:	370c      	adds	r7, #12
 8101b3c:	46bd      	mov	sp, r7
 8101b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b42:	4770      	bx	lr
 8101b44:	58024400 	.word	0x58024400
 8101b48:	52002000 	.word	0x52002000

08101b4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101b50:	b0ca      	sub	sp, #296	@ 0x128
 8101b52:	af00      	add	r7, sp, #0
 8101b54:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101b58:	2300      	movs	r3, #0
 8101b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101b5e:	2300      	movs	r3, #0
 8101b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8101b70:	2500      	movs	r5, #0
 8101b72:	ea54 0305 	orrs.w	r3, r4, r5
 8101b76:	d049      	beq.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8101b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101b7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101b82:	d02f      	beq.n	8101be4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8101b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101b88:	d828      	bhi.n	8101bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101b8e:	d01a      	beq.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101b94:	d822      	bhi.n	8101bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101b96:	2b00      	cmp	r3, #0
 8101b98:	d003      	beq.n	8101ba2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8101b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8101b9e:	d007      	beq.n	8101bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101ba0:	e01c      	b.n	8101bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ba2:	4bb8      	ldr	r3, [pc, #736]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101ba6:	4ab7      	ldr	r2, [pc, #732]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101bae:	e01a      	b.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bb4:	3308      	adds	r3, #8
 8101bb6:	2102      	movs	r1, #2
 8101bb8:	4618      	mov	r0, r3
 8101bba:	f001 fc8f 	bl	81034dc <RCCEx_PLL2_Config>
 8101bbe:	4603      	mov	r3, r0
 8101bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101bc4:	e00f      	b.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8101bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bca:	3328      	adds	r3, #40	@ 0x28
 8101bcc:	2102      	movs	r1, #2
 8101bce:	4618      	mov	r0, r3
 8101bd0:	f001 fd36 	bl	8103640 <RCCEx_PLL3_Config>
 8101bd4:	4603      	mov	r3, r0
 8101bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8101bda:	e004      	b.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101bdc:	2301      	movs	r3, #1
 8101bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101be2:	e000      	b.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8101be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101bea:	2b00      	cmp	r3, #0
 8101bec:	d10a      	bne.n	8101c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101bee:	4ba5      	ldr	r3, [pc, #660]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101bf2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8101bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101bfc:	4aa1      	ldr	r2, [pc, #644]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101bfe:	430b      	orrs	r3, r1
 8101c00:	6513      	str	r3, [r2, #80]	@ 0x50
 8101c02:	e003      	b.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101c18:	f04f 0900 	mov.w	r9, #0
 8101c1c:	ea58 0309 	orrs.w	r3, r8, r9
 8101c20:	d047      	beq.n	8101cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101c28:	2b04      	cmp	r3, #4
 8101c2a:	d82a      	bhi.n	8101c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8101c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8101c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8101c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c32:	bf00      	nop
 8101c34:	08101c49 	.word	0x08101c49
 8101c38:	08101c57 	.word	0x08101c57
 8101c3c:	08101c6d 	.word	0x08101c6d
 8101c40:	08101c8b 	.word	0x08101c8b
 8101c44:	08101c8b 	.word	0x08101c8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c48:	4b8e      	ldr	r3, [pc, #568]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101c4c:	4a8d      	ldr	r2, [pc, #564]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c54:	e01a      	b.n	8101c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c5a:	3308      	adds	r3, #8
 8101c5c:	2100      	movs	r1, #0
 8101c5e:	4618      	mov	r0, r3
 8101c60:	f001 fc3c 	bl	81034dc <RCCEx_PLL2_Config>
 8101c64:	4603      	mov	r3, r0
 8101c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c6a:	e00f      	b.n	8101c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c70:	3328      	adds	r3, #40	@ 0x28
 8101c72:	2100      	movs	r1, #0
 8101c74:	4618      	mov	r0, r3
 8101c76:	f001 fce3 	bl	8103640 <RCCEx_PLL3_Config>
 8101c7a:	4603      	mov	r3, r0
 8101c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101c80:	e004      	b.n	8101c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c82:	2301      	movs	r3, #1
 8101c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101c88:	e000      	b.n	8101c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8101c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c90:	2b00      	cmp	r3, #0
 8101c92:	d10a      	bne.n	8101caa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101c94:	4b7b      	ldr	r3, [pc, #492]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101c98:	f023 0107 	bic.w	r1, r3, #7
 8101c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101ca2:	4a78      	ldr	r2, [pc, #480]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101ca4:	430b      	orrs	r3, r1
 8101ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8101ca8:	e003      	b.n	8101cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101cba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8101cbe:	f04f 0b00 	mov.w	fp, #0
 8101cc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8101cc6:	d04c      	beq.n	8101d62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8101cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101cd2:	d030      	beq.n	8101d36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8101cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101cd8:	d829      	bhi.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8101cdc:	d02d      	beq.n	8101d3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8101cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8101ce0:	d825      	bhi.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101ce2:	2b80      	cmp	r3, #128	@ 0x80
 8101ce4:	d018      	beq.n	8101d18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8101ce6:	2b80      	cmp	r3, #128	@ 0x80
 8101ce8:	d821      	bhi.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8101cea:	2b00      	cmp	r3, #0
 8101cec:	d002      	beq.n	8101cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8101cee:	2b40      	cmp	r3, #64	@ 0x40
 8101cf0:	d007      	beq.n	8101d02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8101cf2:	e01c      	b.n	8101d2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101cf4:	4b63      	ldr	r3, [pc, #396]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101cf8:	4a62      	ldr	r2, [pc, #392]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101d00:	e01c      	b.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d06:	3308      	adds	r3, #8
 8101d08:	2100      	movs	r1, #0
 8101d0a:	4618      	mov	r0, r3
 8101d0c:	f001 fbe6 	bl	81034dc <RCCEx_PLL2_Config>
 8101d10:	4603      	mov	r3, r0
 8101d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101d16:	e011      	b.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d1c:	3328      	adds	r3, #40	@ 0x28
 8101d1e:	2100      	movs	r1, #0
 8101d20:	4618      	mov	r0, r3
 8101d22:	f001 fc8d 	bl	8103640 <RCCEx_PLL3_Config>
 8101d26:	4603      	mov	r3, r0
 8101d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101d2c:	e006      	b.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101d2e:	2301      	movs	r3, #1
 8101d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d34:	e002      	b.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101d36:	bf00      	nop
 8101d38:	e000      	b.n	8101d3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d40:	2b00      	cmp	r3, #0
 8101d42:	d10a      	bne.n	8101d5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101d44:	4b4f      	ldr	r3, [pc, #316]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101d48:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8101d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101d52:	4a4c      	ldr	r2, [pc, #304]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101d54:	430b      	orrs	r3, r1
 8101d56:	6513      	str	r3, [r2, #80]	@ 0x50
 8101d58:	e003      	b.n	8101d62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d6a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8101d6e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8101d72:	2300      	movs	r3, #0
 8101d74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8101d78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8101d7c:	460b      	mov	r3, r1
 8101d7e:	4313      	orrs	r3, r2
 8101d80:	d053      	beq.n	8101e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101d8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101d8e:	d035      	beq.n	8101dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101d90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101d94:	d82e      	bhi.n	8101df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101d96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101d9a:	d031      	beq.n	8101e00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8101d9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8101da0:	d828      	bhi.n	8101df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101da2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101da6:	d01a      	beq.n	8101dde <HAL_RCCEx_PeriphCLKConfig+0x292>
 8101da8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8101dac:	d822      	bhi.n	8101df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101dae:	2b00      	cmp	r3, #0
 8101db0:	d003      	beq.n	8101dba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8101db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101db6:	d007      	beq.n	8101dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8101db8:	e01c      	b.n	8101df4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101dba:	4b32      	ldr	r3, [pc, #200]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101dbe:	4a31      	ldr	r2, [pc, #196]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101dc6:	e01c      	b.n	8101e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dcc:	3308      	adds	r3, #8
 8101dce:	2100      	movs	r1, #0
 8101dd0:	4618      	mov	r0, r3
 8101dd2:	f001 fb83 	bl	81034dc <RCCEx_PLL2_Config>
 8101dd6:	4603      	mov	r3, r0
 8101dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101ddc:	e011      	b.n	8101e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101de2:	3328      	adds	r3, #40	@ 0x28
 8101de4:	2100      	movs	r1, #0
 8101de6:	4618      	mov	r0, r3
 8101de8:	f001 fc2a 	bl	8103640 <RCCEx_PLL3_Config>
 8101dec:	4603      	mov	r3, r0
 8101dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101df2:	e006      	b.n	8101e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101df4:	2301      	movs	r3, #1
 8101df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101dfa:	e002      	b.n	8101e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101dfc:	bf00      	nop
 8101dfe:	e000      	b.n	8101e02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e06:	2b00      	cmp	r3, #0
 8101e08:	d10b      	bne.n	8101e22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101e0e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8101e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8101e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8101e84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101e1c:	430b      	orrs	r3, r1
 8101e1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8101e20:	e003      	b.n	8101e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e32:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8101e36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8101e3a:	2300      	movs	r3, #0
 8101e3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101e40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8101e44:	460b      	mov	r3, r1
 8101e46:	4313      	orrs	r3, r2
 8101e48:	d056      	beq.n	8101ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8101e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101e52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101e56:	d038      	beq.n	8101eca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101e5c:	d831      	bhi.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101e62:	d034      	beq.n	8101ece <HAL_RCCEx_PeriphCLKConfig+0x382>
 8101e64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101e68:	d82b      	bhi.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101e6e:	d01d      	beq.n	8101eac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101e70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101e74:	d825      	bhi.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e76:	2b00      	cmp	r3, #0
 8101e78:	d006      	beq.n	8101e88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8101e7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101e7e:	d00a      	beq.n	8101e96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101e80:	e01f      	b.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101e82:	bf00      	nop
 8101e84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e88:	4ba2      	ldr	r3, [pc, #648]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101e8c:	4aa1      	ldr	r2, [pc, #644]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101e94:	e01c      	b.n	8101ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e9a:	3308      	adds	r3, #8
 8101e9c:	2100      	movs	r1, #0
 8101e9e:	4618      	mov	r0, r3
 8101ea0:	f001 fb1c 	bl	81034dc <RCCEx_PLL2_Config>
 8101ea4:	4603      	mov	r3, r0
 8101ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8101eaa:	e011      	b.n	8101ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101eb0:	3328      	adds	r3, #40	@ 0x28
 8101eb2:	2100      	movs	r1, #0
 8101eb4:	4618      	mov	r0, r3
 8101eb6:	f001 fbc3 	bl	8103640 <RCCEx_PLL3_Config>
 8101eba:	4603      	mov	r3, r0
 8101ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101ec0:	e006      	b.n	8101ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8101ec2:	2301      	movs	r3, #1
 8101ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101ec8:	e002      	b.n	8101ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101eca:	bf00      	nop
 8101ecc:	e000      	b.n	8101ed0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8101ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ed4:	2b00      	cmp	r3, #0
 8101ed6:	d10b      	bne.n	8101ef0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101edc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8101ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ee4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101ee8:	4a8a      	ldr	r2, [pc, #552]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101eea:	430b      	orrs	r3, r1
 8101eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8101eee:	e003      	b.n	8101ef8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101f08:	2300      	movs	r3, #0
 8101f0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8101f0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101f12:	460b      	mov	r3, r1
 8101f14:	4313      	orrs	r3, r2
 8101f16:	d03a      	beq.n	8101f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f1e:	2b30      	cmp	r3, #48	@ 0x30
 8101f20:	d01f      	beq.n	8101f62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101f22:	2b30      	cmp	r3, #48	@ 0x30
 8101f24:	d819      	bhi.n	8101f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101f26:	2b20      	cmp	r3, #32
 8101f28:	d00c      	beq.n	8101f44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8101f2a:	2b20      	cmp	r3, #32
 8101f2c:	d815      	bhi.n	8101f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101f2e:	2b00      	cmp	r3, #0
 8101f30:	d019      	beq.n	8101f66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101f32:	2b10      	cmp	r3, #16
 8101f34:	d111      	bne.n	8101f5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f36:	4b77      	ldr	r3, [pc, #476]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101f3a:	4a76      	ldr	r2, [pc, #472]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101f42:	e011      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f48:	3308      	adds	r3, #8
 8101f4a:	2102      	movs	r1, #2
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	f001 fac5 	bl	81034dc <RCCEx_PLL2_Config>
 8101f52:	4603      	mov	r3, r0
 8101f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101f58:	e006      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101f5a:	2301      	movs	r3, #1
 8101f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101f60:	e002      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101f62:	bf00      	nop
 8101f64:	e000      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f6c:	2b00      	cmp	r3, #0
 8101f6e:	d10a      	bne.n	8101f86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101f70:	4b68      	ldr	r3, [pc, #416]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101f7e:	4a65      	ldr	r2, [pc, #404]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101f80:	430b      	orrs	r3, r1
 8101f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101f84:	e003      	b.n	8101f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8101f9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8101f9e:	2300      	movs	r3, #0
 8101fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8101fa4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8101fa8:	460b      	mov	r3, r1
 8101faa:	4313      	orrs	r3, r2
 8101fac:	d051      	beq.n	8102052 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8101fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101fb8:	d035      	beq.n	8102026 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8101fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8101fbe:	d82e      	bhi.n	810201e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101fc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101fc4:	d031      	beq.n	810202a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8101fc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8101fca:	d828      	bhi.n	810201e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101fd0:	d01a      	beq.n	8102008 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8101fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8101fd6:	d822      	bhi.n	810201e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8101fd8:	2b00      	cmp	r3, #0
 8101fda:	d003      	beq.n	8101fe4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8101fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8101fe0:	d007      	beq.n	8101ff2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8101fe2:	e01c      	b.n	810201e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101fe8:	4a4a      	ldr	r2, [pc, #296]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101ff0:	e01c      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ff6:	3308      	adds	r3, #8
 8101ff8:	2100      	movs	r1, #0
 8101ffa:	4618      	mov	r0, r3
 8101ffc:	f001 fa6e 	bl	81034dc <RCCEx_PLL2_Config>
 8102000:	4603      	mov	r3, r0
 8102002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102006:	e011      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810200c:	3328      	adds	r3, #40	@ 0x28
 810200e:	2100      	movs	r1, #0
 8102010:	4618      	mov	r0, r3
 8102012:	f001 fb15 	bl	8103640 <RCCEx_PLL3_Config>
 8102016:	4603      	mov	r3, r0
 8102018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810201c:	e006      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810201e:	2301      	movs	r3, #1
 8102020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102024:	e002      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102026:	bf00      	nop
 8102028:	e000      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810202a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810202c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102030:	2b00      	cmp	r3, #0
 8102032:	d10a      	bne.n	810204a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102034:	4b37      	ldr	r3, [pc, #220]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102038:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810203c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102042:	4a34      	ldr	r2, [pc, #208]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102044:	430b      	orrs	r3, r1
 8102046:	6513      	str	r3, [r2, #80]	@ 0x50
 8102048:	e003      	b.n	8102052 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810204a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810204e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102056:	e9d3 2300 	ldrd	r2, r3, [r3]
 810205a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810205e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8102062:	2300      	movs	r3, #0
 8102064:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102068:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810206c:	460b      	mov	r3, r1
 810206e:	4313      	orrs	r3, r2
 8102070:	d056      	beq.n	8102120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810207c:	d033      	beq.n	81020e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810207e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102082:	d82c      	bhi.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102084:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102088:	d02f      	beq.n	81020ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810208a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810208e:	d826      	bhi.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102094:	d02b      	beq.n	81020ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102096:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810209a:	d820      	bhi.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x592>
 810209c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81020a0:	d012      	beq.n	81020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81020a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81020a6:	d81a      	bhi.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x592>
 81020a8:	2b00      	cmp	r3, #0
 81020aa:	d022      	beq.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81020ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81020b0:	d115      	bne.n	81020de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81020b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020b6:	3308      	adds	r3, #8
 81020b8:	2101      	movs	r1, #1
 81020ba:	4618      	mov	r0, r3
 81020bc:	f001 fa0e 	bl	81034dc <RCCEx_PLL2_Config>
 81020c0:	4603      	mov	r3, r0
 81020c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81020c6:	e015      	b.n	81020f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81020c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020cc:	3328      	adds	r3, #40	@ 0x28
 81020ce:	2101      	movs	r1, #1
 81020d0:	4618      	mov	r0, r3
 81020d2:	f001 fab5 	bl	8103640 <RCCEx_PLL3_Config>
 81020d6:	4603      	mov	r3, r0
 81020d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81020dc:	e00a      	b.n	81020f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81020de:	2301      	movs	r3, #1
 81020e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81020e4:	e006      	b.n	81020f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020e6:	bf00      	nop
 81020e8:	e004      	b.n	81020f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020ea:	bf00      	nop
 81020ec:	e002      	b.n	81020f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020ee:	bf00      	nop
 81020f0:	e000      	b.n	81020f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81020f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81020f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	d10d      	bne.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81020fc:	4b05      	ldr	r3, [pc, #20]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81020fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102100:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810210a:	4a02      	ldr	r2, [pc, #8]	@ (8102114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810210c:	430b      	orrs	r3, r1
 810210e:	6513      	str	r3, [r2, #80]	@ 0x50
 8102110:	e006      	b.n	8102120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8102112:	bf00      	nop
 8102114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810211c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102128:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810212c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8102130:	2300      	movs	r3, #0
 8102132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8102136:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810213a:	460b      	mov	r3, r1
 810213c:	4313      	orrs	r3, r2
 810213e:	d055      	beq.n	81021ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810214c:	d033      	beq.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810214e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102152:	d82c      	bhi.n	81021ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102158:	d02f      	beq.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810215a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810215e:	d826      	bhi.n	81021ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102160:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102164:	d02b      	beq.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8102166:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810216a:	d820      	bhi.n	81021ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 810216c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102170:	d012      	beq.n	8102198 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102176:	d81a      	bhi.n	81021ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102178:	2b00      	cmp	r3, #0
 810217a:	d022      	beq.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810217c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102180:	d115      	bne.n	81021ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102186:	3308      	adds	r3, #8
 8102188:	2101      	movs	r1, #1
 810218a:	4618      	mov	r0, r3
 810218c:	f001 f9a6 	bl	81034dc <RCCEx_PLL2_Config>
 8102190:	4603      	mov	r3, r0
 8102192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102196:	e015      	b.n	81021c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810219c:	3328      	adds	r3, #40	@ 0x28
 810219e:	2101      	movs	r1, #1
 81021a0:	4618      	mov	r0, r3
 81021a2:	f001 fa4d 	bl	8103640 <RCCEx_PLL3_Config>
 81021a6:	4603      	mov	r3, r0
 81021a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81021ac:	e00a      	b.n	81021c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81021ae:	2301      	movs	r3, #1
 81021b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81021b4:	e006      	b.n	81021c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021b6:	bf00      	nop
 81021b8:	e004      	b.n	81021c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021ba:	bf00      	nop
 81021bc:	e002      	b.n	81021c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021be:	bf00      	nop
 81021c0:	e000      	b.n	81021c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81021c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d10b      	bne.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81021cc:	4ba4      	ldr	r3, [pc, #656]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81021d0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81021d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81021dc:	4aa0      	ldr	r2, [pc, #640]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81021de:	430b      	orrs	r3, r1
 81021e0:	6593      	str	r3, [r2, #88]	@ 0x58
 81021e2:	e003      	b.n	81021ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81021ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81021f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81021f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81021fc:	2300      	movs	r3, #0
 81021fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102206:	460b      	mov	r3, r1
 8102208:	4313      	orrs	r3, r2
 810220a:	d037      	beq.n	810227c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810220c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102216:	d00e      	beq.n	8102236 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8102218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810221c:	d816      	bhi.n	810224c <HAL_RCCEx_PeriphCLKConfig+0x700>
 810221e:	2b00      	cmp	r3, #0
 8102220:	d018      	beq.n	8102254 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8102222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102226:	d111      	bne.n	810224c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102228:	4b8d      	ldr	r3, [pc, #564]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810222c:	4a8c      	ldr	r2, [pc, #560]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810222e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102232:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102234:	e00f      	b.n	8102256 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810223a:	3308      	adds	r3, #8
 810223c:	2101      	movs	r1, #1
 810223e:	4618      	mov	r0, r3
 8102240:	f001 f94c 	bl	81034dc <RCCEx_PLL2_Config>
 8102244:	4603      	mov	r3, r0
 8102246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810224a:	e004      	b.n	8102256 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810224c:	2301      	movs	r3, #1
 810224e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102252:	e000      	b.n	8102256 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8102254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810225a:	2b00      	cmp	r3, #0
 810225c:	d10a      	bne.n	8102274 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810225e:	4b80      	ldr	r3, [pc, #512]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102262:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810226c:	4a7c      	ldr	r2, [pc, #496]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810226e:	430b      	orrs	r3, r1
 8102270:	6513      	str	r3, [r2, #80]	@ 0x50
 8102272:	e003      	b.n	810227c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810227c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102284:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810228c:	2300      	movs	r3, #0
 810228e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8102292:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8102296:	460b      	mov	r3, r1
 8102298:	4313      	orrs	r3, r2
 810229a:	d039      	beq.n	8102310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810229c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81022a2:	2b03      	cmp	r3, #3
 81022a4:	d81c      	bhi.n	81022e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81022a6:	a201      	add	r2, pc, #4	@ (adr r2, 81022ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81022ac:	081022e9 	.word	0x081022e9
 81022b0:	081022bd 	.word	0x081022bd
 81022b4:	081022cb 	.word	0x081022cb
 81022b8:	081022e9 	.word	0x081022e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022bc:	4b68      	ldr	r3, [pc, #416]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81022c0:	4a67      	ldr	r2, [pc, #412]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81022c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81022c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81022c8:	e00f      	b.n	81022ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81022ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022ce:	3308      	adds	r3, #8
 81022d0:	2102      	movs	r1, #2
 81022d2:	4618      	mov	r0, r3
 81022d4:	f001 f902 	bl	81034dc <RCCEx_PLL2_Config>
 81022d8:	4603      	mov	r3, r0
 81022da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81022de:	e004      	b.n	81022ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81022e0:	2301      	movs	r3, #1
 81022e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81022e6:	e000      	b.n	81022ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81022e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022ee:	2b00      	cmp	r3, #0
 81022f0:	d10a      	bne.n	8102308 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81022f2:	4b5b      	ldr	r3, [pc, #364]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81022f6:	f023 0103 	bic.w	r1, r3, #3
 81022fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102300:	4a57      	ldr	r2, [pc, #348]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102302:	430b      	orrs	r3, r1
 8102304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102306:	e003      	b.n	8102310 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810230c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102318:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 810231c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8102320:	2300      	movs	r3, #0
 8102322:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8102326:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 810232a:	460b      	mov	r3, r1
 810232c:	4313      	orrs	r3, r2
 810232e:	f000 809f 	beq.w	8102470 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102332:	4b4c      	ldr	r3, [pc, #304]	@ (8102464 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	4a4b      	ldr	r2, [pc, #300]	@ (8102464 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810233c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810233e:	f7fe fe25 	bl	8100f8c <HAL_GetTick>
 8102342:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102346:	e00b      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102348:	f7fe fe20 	bl	8100f8c <HAL_GetTick>
 810234c:	4602      	mov	r2, r0
 810234e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102352:	1ad3      	subs	r3, r2, r3
 8102354:	2b64      	cmp	r3, #100	@ 0x64
 8102356:	d903      	bls.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8102358:	2303      	movs	r3, #3
 810235a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810235e:	e005      	b.n	810236c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102360:	4b40      	ldr	r3, [pc, #256]	@ (8102464 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102368:	2b00      	cmp	r3, #0
 810236a:	d0ed      	beq.n	8102348 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 810236c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102370:	2b00      	cmp	r3, #0
 8102372:	d179      	bne.n	8102468 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102374:	4b3a      	ldr	r3, [pc, #232]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102376:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810237c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102380:	4053      	eors	r3, r2
 8102382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102386:	2b00      	cmp	r3, #0
 8102388:	d015      	beq.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810238a:	4b35      	ldr	r3, [pc, #212]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810238e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8102392:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102396:	4b32      	ldr	r3, [pc, #200]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810239a:	4a31      	ldr	r2, [pc, #196]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81023a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81023a2:	4b2f      	ldr	r3, [pc, #188]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81023a6:	4a2e      	ldr	r2, [pc, #184]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81023ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81023ae:	4a2c      	ldr	r2, [pc, #176]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81023b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81023b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81023be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81023c2:	d118      	bne.n	81023f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81023c4:	f7fe fde2 	bl	8100f8c <HAL_GetTick>
 81023c8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81023cc:	e00d      	b.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81023ce:	f7fe fddd 	bl	8100f8c <HAL_GetTick>
 81023d2:	4602      	mov	r2, r0
 81023d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81023d8:	1ad2      	subs	r2, r2, r3
 81023da:	f241 3388 	movw	r3, #5000	@ 0x1388
 81023de:	429a      	cmp	r2, r3
 81023e0:	d903      	bls.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81023e2:	2303      	movs	r3, #3
 81023e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81023e8:	e005      	b.n	81023f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81023ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81023ee:	f003 0302 	and.w	r3, r3, #2
 81023f2:	2b00      	cmp	r3, #0
 81023f4:	d0eb      	beq.n	81023ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81023f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d12b      	bne.n	8102456 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81023fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810240a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810240e:	d110      	bne.n	8102432 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8102410:	4b13      	ldr	r3, [pc, #76]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102412:	691b      	ldr	r3, [r3, #16]
 8102414:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810241c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102420:	091b      	lsrs	r3, r3, #4
 8102422:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8102426:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 810242a:	4a0d      	ldr	r2, [pc, #52]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810242c:	430b      	orrs	r3, r1
 810242e:	6113      	str	r3, [r2, #16]
 8102430:	e005      	b.n	810243e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8102432:	4b0b      	ldr	r3, [pc, #44]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102434:	691b      	ldr	r3, [r3, #16]
 8102436:	4a0a      	ldr	r2, [pc, #40]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102438:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 810243c:	6113      	str	r3, [r2, #16]
 810243e:	4b08      	ldr	r3, [pc, #32]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102440:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8102442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810244e:	4a04      	ldr	r2, [pc, #16]	@ (8102460 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102450:	430b      	orrs	r3, r1
 8102452:	6713      	str	r3, [r2, #112]	@ 0x70
 8102454:	e00c      	b.n	8102470 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810245a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810245e:	e007      	b.n	8102470 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8102460:	58024400 	.word	0x58024400
 8102464:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810246c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102478:	f002 0301 	and.w	r3, r2, #1
 810247c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102480:	2300      	movs	r3, #0
 8102482:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8102486:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810248a:	460b      	mov	r3, r1
 810248c:	4313      	orrs	r3, r2
 810248e:	f000 8089 	beq.w	81025a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102498:	2b28      	cmp	r3, #40	@ 0x28
 810249a:	d86b      	bhi.n	8102574 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 810249c:	a201      	add	r2, pc, #4	@ (adr r2, 81024a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81024a2:	bf00      	nop
 81024a4:	0810257d 	.word	0x0810257d
 81024a8:	08102575 	.word	0x08102575
 81024ac:	08102575 	.word	0x08102575
 81024b0:	08102575 	.word	0x08102575
 81024b4:	08102575 	.word	0x08102575
 81024b8:	08102575 	.word	0x08102575
 81024bc:	08102575 	.word	0x08102575
 81024c0:	08102575 	.word	0x08102575
 81024c4:	08102549 	.word	0x08102549
 81024c8:	08102575 	.word	0x08102575
 81024cc:	08102575 	.word	0x08102575
 81024d0:	08102575 	.word	0x08102575
 81024d4:	08102575 	.word	0x08102575
 81024d8:	08102575 	.word	0x08102575
 81024dc:	08102575 	.word	0x08102575
 81024e0:	08102575 	.word	0x08102575
 81024e4:	0810255f 	.word	0x0810255f
 81024e8:	08102575 	.word	0x08102575
 81024ec:	08102575 	.word	0x08102575
 81024f0:	08102575 	.word	0x08102575
 81024f4:	08102575 	.word	0x08102575
 81024f8:	08102575 	.word	0x08102575
 81024fc:	08102575 	.word	0x08102575
 8102500:	08102575 	.word	0x08102575
 8102504:	0810257d 	.word	0x0810257d
 8102508:	08102575 	.word	0x08102575
 810250c:	08102575 	.word	0x08102575
 8102510:	08102575 	.word	0x08102575
 8102514:	08102575 	.word	0x08102575
 8102518:	08102575 	.word	0x08102575
 810251c:	08102575 	.word	0x08102575
 8102520:	08102575 	.word	0x08102575
 8102524:	0810257d 	.word	0x0810257d
 8102528:	08102575 	.word	0x08102575
 810252c:	08102575 	.word	0x08102575
 8102530:	08102575 	.word	0x08102575
 8102534:	08102575 	.word	0x08102575
 8102538:	08102575 	.word	0x08102575
 810253c:	08102575 	.word	0x08102575
 8102540:	08102575 	.word	0x08102575
 8102544:	0810257d 	.word	0x0810257d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810254c:	3308      	adds	r3, #8
 810254e:	2101      	movs	r1, #1
 8102550:	4618      	mov	r0, r3
 8102552:	f000 ffc3 	bl	81034dc <RCCEx_PLL2_Config>
 8102556:	4603      	mov	r3, r0
 8102558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810255c:	e00f      	b.n	810257e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810255e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102562:	3328      	adds	r3, #40	@ 0x28
 8102564:	2101      	movs	r1, #1
 8102566:	4618      	mov	r0, r3
 8102568:	f001 f86a 	bl	8103640 <RCCEx_PLL3_Config>
 810256c:	4603      	mov	r3, r0
 810256e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102572:	e004      	b.n	810257e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102574:	2301      	movs	r3, #1
 8102576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810257a:	e000      	b.n	810257e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 810257c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810257e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102582:	2b00      	cmp	r3, #0
 8102584:	d10a      	bne.n	810259c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102586:	4bbf      	ldr	r3, [pc, #764]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810258a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810258e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102594:	4abb      	ldr	r2, [pc, #748]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102596:	430b      	orrs	r3, r1
 8102598:	6553      	str	r3, [r2, #84]	@ 0x54
 810259a:	e003      	b.n	81025a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810259c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81025a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025ac:	f002 0302 	and.w	r3, r2, #2
 81025b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81025b4:	2300      	movs	r3, #0
 81025b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81025ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81025be:	460b      	mov	r3, r1
 81025c0:	4313      	orrs	r3, r2
 81025c2:	d041      	beq.n	8102648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81025c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81025ca:	2b05      	cmp	r3, #5
 81025cc:	d824      	bhi.n	8102618 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81025ce:	a201      	add	r2, pc, #4	@ (adr r2, 81025d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81025d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81025d4:	08102621 	.word	0x08102621
 81025d8:	081025ed 	.word	0x081025ed
 81025dc:	08102603 	.word	0x08102603
 81025e0:	08102621 	.word	0x08102621
 81025e4:	08102621 	.word	0x08102621
 81025e8:	08102621 	.word	0x08102621
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81025ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025f0:	3308      	adds	r3, #8
 81025f2:	2101      	movs	r1, #1
 81025f4:	4618      	mov	r0, r3
 81025f6:	f000 ff71 	bl	81034dc <RCCEx_PLL2_Config>
 81025fa:	4603      	mov	r3, r0
 81025fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102600:	e00f      	b.n	8102622 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102606:	3328      	adds	r3, #40	@ 0x28
 8102608:	2101      	movs	r1, #1
 810260a:	4618      	mov	r0, r3
 810260c:	f001 f818 	bl	8103640 <RCCEx_PLL3_Config>
 8102610:	4603      	mov	r3, r0
 8102612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102616:	e004      	b.n	8102622 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102618:	2301      	movs	r3, #1
 810261a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810261e:	e000      	b.n	8102622 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102626:	2b00      	cmp	r3, #0
 8102628:	d10a      	bne.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810262a:	4b96      	ldr	r3, [pc, #600]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810262e:	f023 0107 	bic.w	r1, r3, #7
 8102632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102638:	4a92      	ldr	r2, [pc, #584]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810263a:	430b      	orrs	r3, r1
 810263c:	6553      	str	r3, [r2, #84]	@ 0x54
 810263e:	e003      	b.n	8102648 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102650:	f002 0304 	and.w	r3, r2, #4
 8102654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102658:	2300      	movs	r3, #0
 810265a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810265e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102662:	460b      	mov	r3, r1
 8102664:	4313      	orrs	r3, r2
 8102666:	d044      	beq.n	81026f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810266c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102670:	2b05      	cmp	r3, #5
 8102672:	d825      	bhi.n	81026c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102674:	a201      	add	r2, pc, #4	@ (adr r2, 810267c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8102676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810267a:	bf00      	nop
 810267c:	081026c9 	.word	0x081026c9
 8102680:	08102695 	.word	0x08102695
 8102684:	081026ab 	.word	0x081026ab
 8102688:	081026c9 	.word	0x081026c9
 810268c:	081026c9 	.word	0x081026c9
 8102690:	081026c9 	.word	0x081026c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102698:	3308      	adds	r3, #8
 810269a:	2101      	movs	r1, #1
 810269c:	4618      	mov	r0, r3
 810269e:	f000 ff1d 	bl	81034dc <RCCEx_PLL2_Config>
 81026a2:	4603      	mov	r3, r0
 81026a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81026a8:	e00f      	b.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81026aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ae:	3328      	adds	r3, #40	@ 0x28
 81026b0:	2101      	movs	r1, #1
 81026b2:	4618      	mov	r0, r3
 81026b4:	f000 ffc4 	bl	8103640 <RCCEx_PLL3_Config>
 81026b8:	4603      	mov	r3, r0
 81026ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81026be:	e004      	b.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81026c0:	2301      	movs	r3, #1
 81026c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81026c6:	e000      	b.n	81026ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81026c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d10b      	bne.n	81026ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81026d2:	4b6c      	ldr	r3, [pc, #432]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81026d6:	f023 0107 	bic.w	r1, r3, #7
 81026da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81026e2:	4a68      	ldr	r2, [pc, #416]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81026e4:	430b      	orrs	r3, r1
 81026e6:	6593      	str	r3, [r2, #88]	@ 0x58
 81026e8:	e003      	b.n	81026f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81026ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81026f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026fa:	f002 0320 	and.w	r3, r2, #32
 81026fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102702:	2300      	movs	r3, #0
 8102704:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810270c:	460b      	mov	r3, r1
 810270e:	4313      	orrs	r3, r2
 8102710:	d055      	beq.n	81027be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810271e:	d033      	beq.n	8102788 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102724:	d82c      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810272a:	d02f      	beq.n	810278c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810272c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102730:	d826      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102736:	d02b      	beq.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102738:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810273c:	d820      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810273e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102742:	d012      	beq.n	810276a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102748:	d81a      	bhi.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810274a:	2b00      	cmp	r3, #0
 810274c:	d022      	beq.n	8102794 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810274e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102752:	d115      	bne.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102758:	3308      	adds	r3, #8
 810275a:	2100      	movs	r1, #0
 810275c:	4618      	mov	r0, r3
 810275e:	f000 febd 	bl	81034dc <RCCEx_PLL2_Config>
 8102762:	4603      	mov	r3, r0
 8102764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102768:	e015      	b.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810276a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810276e:	3328      	adds	r3, #40	@ 0x28
 8102770:	2102      	movs	r1, #2
 8102772:	4618      	mov	r0, r3
 8102774:	f000 ff64 	bl	8103640 <RCCEx_PLL3_Config>
 8102778:	4603      	mov	r3, r0
 810277a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810277e:	e00a      	b.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102780:	2301      	movs	r3, #1
 8102782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102786:	e006      	b.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102788:	bf00      	nop
 810278a:	e004      	b.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810278c:	bf00      	nop
 810278e:	e002      	b.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102790:	bf00      	nop
 8102792:	e000      	b.n	8102796 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810279a:	2b00      	cmp	r3, #0
 810279c:	d10b      	bne.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810279e:	4b39      	ldr	r3, [pc, #228]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81027a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81027a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81027ae:	4a35      	ldr	r2, [pc, #212]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81027b0:	430b      	orrs	r3, r1
 81027b2:	6553      	str	r3, [r2, #84]	@ 0x54
 81027b4:	e003      	b.n	81027be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81027be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81027ce:	2300      	movs	r3, #0
 81027d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81027d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81027d8:	460b      	mov	r3, r1
 81027da:	4313      	orrs	r3, r2
 81027dc:	d058      	beq.n	8102890 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81027de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81027e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81027ea:	d033      	beq.n	8102854 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81027ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81027f0:	d82c      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81027f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81027f6:	d02f      	beq.n	8102858 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81027f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81027fc:	d826      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81027fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102802:	d02b      	beq.n	810285c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102804:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102808:	d820      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810280a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810280e:	d012      	beq.n	8102836 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102814:	d81a      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102816:	2b00      	cmp	r3, #0
 8102818:	d022      	beq.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810281a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810281e:	d115      	bne.n	810284c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102824:	3308      	adds	r3, #8
 8102826:	2100      	movs	r1, #0
 8102828:	4618      	mov	r0, r3
 810282a:	f000 fe57 	bl	81034dc <RCCEx_PLL2_Config>
 810282e:	4603      	mov	r3, r0
 8102830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102834:	e015      	b.n	8102862 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810283a:	3328      	adds	r3, #40	@ 0x28
 810283c:	2102      	movs	r1, #2
 810283e:	4618      	mov	r0, r3
 8102840:	f000 fefe 	bl	8103640 <RCCEx_PLL3_Config>
 8102844:	4603      	mov	r3, r0
 8102846:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810284a:	e00a      	b.n	8102862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810284c:	2301      	movs	r3, #1
 810284e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102852:	e006      	b.n	8102862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102854:	bf00      	nop
 8102856:	e004      	b.n	8102862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102858:	bf00      	nop
 810285a:	e002      	b.n	8102862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810285c:	bf00      	nop
 810285e:	e000      	b.n	8102862 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102866:	2b00      	cmp	r3, #0
 8102868:	d10e      	bne.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810286a:	4b06      	ldr	r3, [pc, #24]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810286c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810286e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102876:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810287a:	4a02      	ldr	r2, [pc, #8]	@ (8102884 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810287c:	430b      	orrs	r3, r1
 810287e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102880:	e006      	b.n	8102890 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102882:	bf00      	nop
 8102884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810288c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102898:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810289c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81028a0:	2300      	movs	r3, #0
 81028a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81028a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81028aa:	460b      	mov	r3, r1
 81028ac:	4313      	orrs	r3, r2
 81028ae:	d055      	beq.n	810295c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81028b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81028b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81028bc:	d033      	beq.n	8102926 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81028be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81028c2:	d82c      	bhi.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81028c8:	d02f      	beq.n	810292a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81028ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81028ce:	d826      	bhi.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81028d4:	d02b      	beq.n	810292e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81028d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81028da:	d820      	bhi.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81028e0:	d012      	beq.n	8102908 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81028e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81028e6:	d81a      	bhi.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81028e8:	2b00      	cmp	r3, #0
 81028ea:	d022      	beq.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81028ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81028f0:	d115      	bne.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81028f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028f6:	3308      	adds	r3, #8
 81028f8:	2100      	movs	r1, #0
 81028fa:	4618      	mov	r0, r3
 81028fc:	f000 fdee 	bl	81034dc <RCCEx_PLL2_Config>
 8102900:	4603      	mov	r3, r0
 8102902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102906:	e015      	b.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810290c:	3328      	adds	r3, #40	@ 0x28
 810290e:	2102      	movs	r1, #2
 8102910:	4618      	mov	r0, r3
 8102912:	f000 fe95 	bl	8103640 <RCCEx_PLL3_Config>
 8102916:	4603      	mov	r3, r0
 8102918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810291c:	e00a      	b.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810291e:	2301      	movs	r3, #1
 8102920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102924:	e006      	b.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102926:	bf00      	nop
 8102928:	e004      	b.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810292a:	bf00      	nop
 810292c:	e002      	b.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810292e:	bf00      	nop
 8102930:	e000      	b.n	8102934 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102938:	2b00      	cmp	r3, #0
 810293a:	d10b      	bne.n	8102954 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810293c:	4ba1      	ldr	r3, [pc, #644]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102940:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102948:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810294c:	4a9d      	ldr	r2, [pc, #628]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810294e:	430b      	orrs	r3, r1
 8102950:	6593      	str	r3, [r2, #88]	@ 0x58
 8102952:	e003      	b.n	810295c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102958:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102964:	f002 0308 	and.w	r3, r2, #8
 8102968:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810296c:	2300      	movs	r3, #0
 810296e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102972:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102976:	460b      	mov	r3, r1
 8102978:	4313      	orrs	r3, r2
 810297a:	d01e      	beq.n	81029ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102988:	d10c      	bne.n	81029a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810298e:	3328      	adds	r3, #40	@ 0x28
 8102990:	2102      	movs	r1, #2
 8102992:	4618      	mov	r0, r3
 8102994:	f000 fe54 	bl	8103640 <RCCEx_PLL3_Config>
 8102998:	4603      	mov	r3, r0
 810299a:	2b00      	cmp	r3, #0
 810299c:	d002      	beq.n	81029a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810299e:	2301      	movs	r3, #1
 81029a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81029a4:	4b87      	ldr	r3, [pc, #540]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81029a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81029ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81029b4:	4a83      	ldr	r2, [pc, #524]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81029b6:	430b      	orrs	r3, r1
 81029b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81029ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029c2:	f002 0310 	and.w	r3, r2, #16
 81029c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81029ca:	2300      	movs	r3, #0
 81029cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81029d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81029d4:	460b      	mov	r3, r1
 81029d6:	4313      	orrs	r3, r2
 81029d8:	d01e      	beq.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81029da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81029e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81029e6:	d10c      	bne.n	8102a02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81029e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029ec:	3328      	adds	r3, #40	@ 0x28
 81029ee:	2102      	movs	r1, #2
 81029f0:	4618      	mov	r0, r3
 81029f2:	f000 fe25 	bl	8103640 <RCCEx_PLL3_Config>
 81029f6:	4603      	mov	r3, r0
 81029f8:	2b00      	cmp	r3, #0
 81029fa:	d002      	beq.n	8102a02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81029fc:	2301      	movs	r3, #1
 81029fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102a02:	4b70      	ldr	r3, [pc, #448]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102a06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102a12:	4a6c      	ldr	r2, [pc, #432]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a14:	430b      	orrs	r3, r1
 8102a16:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a20:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102a24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102a28:	2300      	movs	r3, #0
 8102a2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8102a2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102a32:	460b      	mov	r3, r1
 8102a34:	4313      	orrs	r3, r2
 8102a36:	d03e      	beq.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102a40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102a44:	d022      	beq.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8102a46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102a4a:	d81b      	bhi.n	8102a84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8102a4c:	2b00      	cmp	r3, #0
 8102a4e:	d003      	beq.n	8102a58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102a54:	d00b      	beq.n	8102a6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8102a56:	e015      	b.n	8102a84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a5c:	3308      	adds	r3, #8
 8102a5e:	2100      	movs	r1, #0
 8102a60:	4618      	mov	r0, r3
 8102a62:	f000 fd3b 	bl	81034dc <RCCEx_PLL2_Config>
 8102a66:	4603      	mov	r3, r0
 8102a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a6c:	e00f      	b.n	8102a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a72:	3328      	adds	r3, #40	@ 0x28
 8102a74:	2102      	movs	r1, #2
 8102a76:	4618      	mov	r0, r3
 8102a78:	f000 fde2 	bl	8103640 <RCCEx_PLL3_Config>
 8102a7c:	4603      	mov	r3, r0
 8102a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102a82:	e004      	b.n	8102a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a84:	2301      	movs	r3, #1
 8102a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a8a:	e000      	b.n	8102a8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8102a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a92:	2b00      	cmp	r3, #0
 8102a94:	d10b      	bne.n	8102aae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102a96:	4b4b      	ldr	r3, [pc, #300]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102a9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8102a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102aa6:	4a47      	ldr	r2, [pc, #284]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102aa8:	430b      	orrs	r3, r1
 8102aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8102aac:	e003      	b.n	8102ab6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102abe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8102ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8102ac4:	2300      	movs	r3, #0
 8102ac6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8102ac8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8102acc:	460b      	mov	r3, r1
 8102ace:	4313      	orrs	r3, r2
 8102ad0:	d03b      	beq.n	8102b4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8102ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102ade:	d01f      	beq.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8102ae0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102ae4:	d818      	bhi.n	8102b18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8102ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102aea:	d003      	beq.n	8102af4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8102aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102af0:	d007      	beq.n	8102b02 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8102af2:	e011      	b.n	8102b18 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102af4:	4b33      	ldr	r3, [pc, #204]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102af8:	4a32      	ldr	r2, [pc, #200]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102b00:	e00f      	b.n	8102b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b06:	3328      	adds	r3, #40	@ 0x28
 8102b08:	2101      	movs	r1, #1
 8102b0a:	4618      	mov	r0, r3
 8102b0c:	f000 fd98 	bl	8103640 <RCCEx_PLL3_Config>
 8102b10:	4603      	mov	r3, r0
 8102b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8102b16:	e004      	b.n	8102b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b18:	2301      	movs	r3, #1
 8102b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102b1e:	e000      	b.n	8102b22 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b26:	2b00      	cmp	r3, #0
 8102b28:	d10b      	bne.n	8102b42 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102b2a:	4b26      	ldr	r3, [pc, #152]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102b2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8102b3a:	4a22      	ldr	r2, [pc, #136]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b3c:	430b      	orrs	r3, r1
 8102b3e:	6553      	str	r3, [r2, #84]	@ 0x54
 8102b40:	e003      	b.n	8102b4a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b52:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8102b56:	673b      	str	r3, [r7, #112]	@ 0x70
 8102b58:	2300      	movs	r3, #0
 8102b5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8102b5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102b60:	460b      	mov	r3, r1
 8102b62:	4313      	orrs	r3, r2
 8102b64:	d034      	beq.n	8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b6c:	2b00      	cmp	r3, #0
 8102b6e:	d003      	beq.n	8102b78 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8102b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102b74:	d007      	beq.n	8102b86 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8102b76:	e011      	b.n	8102b9c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b78:	4b12      	ldr	r3, [pc, #72]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b7c:	4a11      	ldr	r2, [pc, #68]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b84:	e00e      	b.n	8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b8a:	3308      	adds	r3, #8
 8102b8c:	2102      	movs	r1, #2
 8102b8e:	4618      	mov	r0, r3
 8102b90:	f000 fca4 	bl	81034dc <RCCEx_PLL2_Config>
 8102b94:	4603      	mov	r3, r0
 8102b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102b9a:	e003      	b.n	8102ba4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8102b9c:	2301      	movs	r3, #1
 8102b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ba8:	2b00      	cmp	r3, #0
 8102baa:	d10d      	bne.n	8102bc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102bac:	4b05      	ldr	r3, [pc, #20]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102bb0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8102bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102bba:	4a02      	ldr	r2, [pc, #8]	@ (8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102bbc:	430b      	orrs	r3, r1
 8102bbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102bc0:	e006      	b.n	8102bd0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8102bc2:	bf00      	nop
 8102bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bd8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8102bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8102bde:	2300      	movs	r3, #0
 8102be0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8102be2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8102be6:	460b      	mov	r3, r1
 8102be8:	4313      	orrs	r3, r2
 8102bea:	d00c      	beq.n	8102c06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bf0:	3328      	adds	r3, #40	@ 0x28
 8102bf2:	2102      	movs	r1, #2
 8102bf4:	4618      	mov	r0, r3
 8102bf6:	f000 fd23 	bl	8103640 <RCCEx_PLL3_Config>
 8102bfa:	4603      	mov	r3, r0
 8102bfc:	2b00      	cmp	r3, #0
 8102bfe:	d002      	beq.n	8102c06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102c00:	2301      	movs	r3, #1
 8102c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102c12:	663b      	str	r3, [r7, #96]	@ 0x60
 8102c14:	2300      	movs	r3, #0
 8102c16:	667b      	str	r3, [r7, #100]	@ 0x64
 8102c18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8102c1c:	460b      	mov	r3, r1
 8102c1e:	4313      	orrs	r3, r2
 8102c20:	d038      	beq.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102c2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102c2e:	d018      	beq.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102c30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102c34:	d811      	bhi.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102c3a:	d014      	beq.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8102c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102c40:	d80b      	bhi.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102c42:	2b00      	cmp	r3, #0
 8102c44:	d011      	beq.n	8102c6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8102c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102c4a:	d106      	bne.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c4c:	4bc3      	ldr	r3, [pc, #780]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c50:	4ac2      	ldr	r2, [pc, #776]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102c58:	e008      	b.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c5a:	2301      	movs	r3, #1
 8102c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c60:	e004      	b.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102c62:	bf00      	nop
 8102c64:	e002      	b.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102c66:	bf00      	nop
 8102c68:	e000      	b.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c70:	2b00      	cmp	r3, #0
 8102c72:	d10b      	bne.n	8102c8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102c74:	4bb9      	ldr	r3, [pc, #740]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8102c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102c84:	4ab5      	ldr	r2, [pc, #724]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102c86:	430b      	orrs	r3, r1
 8102c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8102c8a:	e003      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8102ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8102ca2:	2300      	movs	r3, #0
 8102ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8102ca6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8102caa:	460b      	mov	r3, r1
 8102cac:	4313      	orrs	r3, r2
 8102cae:	d009      	beq.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102cb0:	4baa      	ldr	r3, [pc, #680]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102cb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8102cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8102cbe:	4aa7      	ldr	r2, [pc, #668]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cc0:	430b      	orrs	r3, r1
 8102cc2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ccc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8102cd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8102cd2:	2300      	movs	r3, #0
 8102cd4:	657b      	str	r3, [r7, #84]	@ 0x54
 8102cd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8102cda:	460b      	mov	r3, r1
 8102cdc:	4313      	orrs	r3, r2
 8102cde:	d00a      	beq.n	8102cf6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102ce0:	4b9e      	ldr	r3, [pc, #632]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102ce2:	691b      	ldr	r3, [r3, #16]
 8102ce4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8102ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8102cf0:	4a9a      	ldr	r2, [pc, #616]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102cf2:	430b      	orrs	r3, r1
 8102cf4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cfe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8102d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102d04:	2300      	movs	r3, #0
 8102d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102d08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8102d0c:	460b      	mov	r3, r1
 8102d0e:	4313      	orrs	r3, r2
 8102d10:	d009      	beq.n	8102d26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102d12:	4b92      	ldr	r3, [pc, #584]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102d16:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8102d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102d20:	4a8e      	ldr	r2, [pc, #568]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d22:	430b      	orrs	r3, r1
 8102d24:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8102d34:	2300      	movs	r3, #0
 8102d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8102d38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8102d3c:	460b      	mov	r3, r1
 8102d3e:	4313      	orrs	r3, r2
 8102d40:	d00e      	beq.n	8102d60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102d42:	4b86      	ldr	r3, [pc, #536]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d44:	691b      	ldr	r3, [r3, #16]
 8102d46:	4a85      	ldr	r2, [pc, #532]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8102d4c:	6113      	str	r3, [r2, #16]
 8102d4e:	4b83      	ldr	r3, [pc, #524]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d50:	6919      	ldr	r1, [r3, #16]
 8102d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8102d5a:	4a80      	ldr	r2, [pc, #512]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d5c:	430b      	orrs	r3, r1
 8102d5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d68:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8102d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8102d6e:	2300      	movs	r3, #0
 8102d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102d72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8102d76:	460b      	mov	r3, r1
 8102d78:	4313      	orrs	r3, r2
 8102d7a:	d009      	beq.n	8102d90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102d7c:	4b77      	ldr	r3, [pc, #476]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d80:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d8a:	4a74      	ldr	r2, [pc, #464]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102d8c:	430b      	orrs	r3, r1
 8102d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d98:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8102d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8102d9e:	2300      	movs	r3, #0
 8102da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8102da2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8102da6:	460b      	mov	r3, r1
 8102da8:	4313      	orrs	r3, r2
 8102daa:	d00a      	beq.n	8102dc2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102dac:	4b6b      	ldr	r3, [pc, #428]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102db0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8102db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8102dbc:	4a67      	ldr	r2, [pc, #412]	@ (8102f5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102dbe:	430b      	orrs	r3, r1
 8102dc0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8102dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dca:	2100      	movs	r1, #0
 8102dcc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8102dce:	f003 0301 	and.w	r3, r3, #1
 8102dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8102dd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8102dd8:	460b      	mov	r3, r1
 8102dda:	4313      	orrs	r3, r2
 8102ddc:	d011      	beq.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102de2:	3308      	adds	r3, #8
 8102de4:	2100      	movs	r1, #0
 8102de6:	4618      	mov	r0, r3
 8102de8:	f000 fb78 	bl	81034dc <RCCEx_PLL2_Config>
 8102dec:	4603      	mov	r3, r0
 8102dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102df6:	2b00      	cmp	r3, #0
 8102df8:	d003      	beq.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e0a:	2100      	movs	r1, #0
 8102e0c:	6239      	str	r1, [r7, #32]
 8102e0e:	f003 0302 	and.w	r3, r3, #2
 8102e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8102e14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102e18:	460b      	mov	r3, r1
 8102e1a:	4313      	orrs	r3, r2
 8102e1c:	d011      	beq.n	8102e42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e22:	3308      	adds	r3, #8
 8102e24:	2101      	movs	r1, #1
 8102e26:	4618      	mov	r0, r3
 8102e28:	f000 fb58 	bl	81034dc <RCCEx_PLL2_Config>
 8102e2c:	4603      	mov	r3, r0
 8102e2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e36:	2b00      	cmp	r3, #0
 8102e38:	d003      	beq.n	8102e42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e4a:	2100      	movs	r1, #0
 8102e4c:	61b9      	str	r1, [r7, #24]
 8102e4e:	f003 0304 	and.w	r3, r3, #4
 8102e52:	61fb      	str	r3, [r7, #28]
 8102e54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102e58:	460b      	mov	r3, r1
 8102e5a:	4313      	orrs	r3, r2
 8102e5c:	d011      	beq.n	8102e82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e62:	3308      	adds	r3, #8
 8102e64:	2102      	movs	r1, #2
 8102e66:	4618      	mov	r0, r3
 8102e68:	f000 fb38 	bl	81034dc <RCCEx_PLL2_Config>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e76:	2b00      	cmp	r3, #0
 8102e78:	d003      	beq.n	8102e82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e8a:	2100      	movs	r1, #0
 8102e8c:	6139      	str	r1, [r7, #16]
 8102e8e:	f003 0308 	and.w	r3, r3, #8
 8102e92:	617b      	str	r3, [r7, #20]
 8102e94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8102e98:	460b      	mov	r3, r1
 8102e9a:	4313      	orrs	r3, r2
 8102e9c:	d011      	beq.n	8102ec2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ea2:	3328      	adds	r3, #40	@ 0x28
 8102ea4:	2100      	movs	r1, #0
 8102ea6:	4618      	mov	r0, r3
 8102ea8:	f000 fbca 	bl	8103640 <RCCEx_PLL3_Config>
 8102eac:	4603      	mov	r3, r0
 8102eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8102eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eb6:	2b00      	cmp	r3, #0
 8102eb8:	d003      	beq.n	8102ec2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8102ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102eca:	2100      	movs	r1, #0
 8102ecc:	60b9      	str	r1, [r7, #8]
 8102ece:	f003 0310 	and.w	r3, r3, #16
 8102ed2:	60fb      	str	r3, [r7, #12]
 8102ed4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8102ed8:	460b      	mov	r3, r1
 8102eda:	4313      	orrs	r3, r2
 8102edc:	d011      	beq.n	8102f02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ee2:	3328      	adds	r3, #40	@ 0x28
 8102ee4:	2101      	movs	r1, #1
 8102ee6:	4618      	mov	r0, r3
 8102ee8:	f000 fbaa 	bl	8103640 <RCCEx_PLL3_Config>
 8102eec:	4603      	mov	r3, r0
 8102eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ef6:	2b00      	cmp	r3, #0
 8102ef8:	d003      	beq.n	8102f02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f0a:	2100      	movs	r1, #0
 8102f0c:	6039      	str	r1, [r7, #0]
 8102f0e:	f003 0320 	and.w	r3, r3, #32
 8102f12:	607b      	str	r3, [r7, #4]
 8102f14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102f18:	460b      	mov	r3, r1
 8102f1a:	4313      	orrs	r3, r2
 8102f1c:	d011      	beq.n	8102f42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f22:	3328      	adds	r3, #40	@ 0x28
 8102f24:	2102      	movs	r1, #2
 8102f26:	4618      	mov	r0, r3
 8102f28:	f000 fb8a 	bl	8103640 <RCCEx_PLL3_Config>
 8102f2c:	4603      	mov	r3, r0
 8102f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f36:	2b00      	cmp	r3, #0
 8102f38:	d003      	beq.n	8102f42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8102f42:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8102f46:	2b00      	cmp	r3, #0
 8102f48:	d101      	bne.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8102f4a:	2300      	movs	r3, #0
 8102f4c:	e000      	b.n	8102f50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8102f4e:	2301      	movs	r3, #1
}
 8102f50:	4618      	mov	r0, r3
 8102f52:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8102f56:	46bd      	mov	sp, r7
 8102f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8102f5c:	58024400 	.word	0x58024400

08102f60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102f60:	b580      	push	{r7, lr}
 8102f62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102f64:	f7fe fd52 	bl	8101a0c <HAL_RCC_GetHCLKFreq>
 8102f68:	4602      	mov	r2, r0
 8102f6a:	4b06      	ldr	r3, [pc, #24]	@ (8102f84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102f6c:	6a1b      	ldr	r3, [r3, #32]
 8102f6e:	091b      	lsrs	r3, r3, #4
 8102f70:	f003 0307 	and.w	r3, r3, #7
 8102f74:	4904      	ldr	r1, [pc, #16]	@ (8102f88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102f76:	5ccb      	ldrb	r3, [r1, r3]
 8102f78:	f003 031f 	and.w	r3, r3, #31
 8102f7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102f80:	4618      	mov	r0, r3
 8102f82:	bd80      	pop	{r7, pc}
 8102f84:	58024400 	.word	0x58024400
 8102f88:	0810c1c4 	.word	0x0810c1c4

08102f8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8102f8c:	b480      	push	{r7}
 8102f8e:	b089      	sub	sp, #36	@ 0x24
 8102f90:	af00      	add	r7, sp, #0
 8102f92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102f94:	4ba1      	ldr	r3, [pc, #644]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f98:	f003 0303 	and.w	r3, r3, #3
 8102f9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8102f9e:	4b9f      	ldr	r3, [pc, #636]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102fa2:	0b1b      	lsrs	r3, r3, #12
 8102fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102fa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102faa:	4b9c      	ldr	r3, [pc, #624]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fae:	091b      	lsrs	r3, r3, #4
 8102fb0:	f003 0301 	and.w	r3, r3, #1
 8102fb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8102fb6:	4b99      	ldr	r3, [pc, #612]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102fba:	08db      	lsrs	r3, r3, #3
 8102fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102fc0:	693a      	ldr	r2, [r7, #16]
 8102fc2:	fb02 f303 	mul.w	r3, r2, r3
 8102fc6:	ee07 3a90 	vmov	s15, r3
 8102fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102fd2:	697b      	ldr	r3, [r7, #20]
 8102fd4:	2b00      	cmp	r3, #0
 8102fd6:	f000 8111 	beq.w	81031fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102fda:	69bb      	ldr	r3, [r7, #24]
 8102fdc:	2b02      	cmp	r3, #2
 8102fde:	f000 8083 	beq.w	81030e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102fe2:	69bb      	ldr	r3, [r7, #24]
 8102fe4:	2b02      	cmp	r3, #2
 8102fe6:	f200 80a1 	bhi.w	810312c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102fea:	69bb      	ldr	r3, [r7, #24]
 8102fec:	2b00      	cmp	r3, #0
 8102fee:	d003      	beq.n	8102ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102ff0:	69bb      	ldr	r3, [r7, #24]
 8102ff2:	2b01      	cmp	r3, #1
 8102ff4:	d056      	beq.n	81030a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102ff6:	e099      	b.n	810312c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102ff8:	4b88      	ldr	r3, [pc, #544]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ffa:	681b      	ldr	r3, [r3, #0]
 8102ffc:	f003 0320 	and.w	r3, r3, #32
 8103000:	2b00      	cmp	r3, #0
 8103002:	d02d      	beq.n	8103060 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103004:	4b85      	ldr	r3, [pc, #532]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103006:	681b      	ldr	r3, [r3, #0]
 8103008:	08db      	lsrs	r3, r3, #3
 810300a:	f003 0303 	and.w	r3, r3, #3
 810300e:	4a84      	ldr	r2, [pc, #528]	@ (8103220 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103010:	fa22 f303 	lsr.w	r3, r2, r3
 8103014:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103016:	68bb      	ldr	r3, [r7, #8]
 8103018:	ee07 3a90 	vmov	s15, r3
 810301c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103020:	697b      	ldr	r3, [r7, #20]
 8103022:	ee07 3a90 	vmov	s15, r3
 8103026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810302a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810302e:	4b7b      	ldr	r3, [pc, #492]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103036:	ee07 3a90 	vmov	s15, r3
 810303a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810303e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103042:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810304a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810304e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103056:	ee67 7a27 	vmul.f32	s15, s14, s15
 810305a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810305e:	e087      	b.n	8103170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103060:	697b      	ldr	r3, [r7, #20]
 8103062:	ee07 3a90 	vmov	s15, r3
 8103066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810306a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103228 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810306e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103072:	4b6a      	ldr	r3, [pc, #424]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810307a:	ee07 3a90 	vmov	s15, r3
 810307e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103082:	ed97 6a03 	vldr	s12, [r7, #12]
 8103086:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810308a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810308e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810309e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81030a2:	e065      	b.n	8103170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81030a4:	697b      	ldr	r3, [r7, #20]
 81030a6:	ee07 3a90 	vmov	s15, r3
 81030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 810322c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81030b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030b6:	4b59      	ldr	r3, [pc, #356]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81030ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030be:	ee07 3a90 	vmov	s15, r3
 81030c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81030ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81030ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81030da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81030e6:	e043      	b.n	8103170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81030e8:	697b      	ldr	r3, [r7, #20]
 81030ea:	ee07 3a90 	vmov	s15, r3
 81030ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81030f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030fa:	4b48      	ldr	r3, [pc, #288]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103102:	ee07 3a90 	vmov	s15, r3
 8103106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810310a:	ed97 6a03 	vldr	s12, [r7, #12]
 810310e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810311a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810311e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810312a:	e021      	b.n	8103170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810312c:	697b      	ldr	r3, [r7, #20]
 810312e:	ee07 3a90 	vmov	s15, r3
 8103132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103136:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 810322c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810313a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810313e:	4b37      	ldr	r3, [pc, #220]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103146:	ee07 3a90 	vmov	s15, r3
 810314a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810314e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103152:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810315a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810315e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103166:	ee67 7a27 	vmul.f32	s15, s14, s15
 810316a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810316e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8103170:	4b2a      	ldr	r3, [pc, #168]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103174:	0a5b      	lsrs	r3, r3, #9
 8103176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810317a:	ee07 3a90 	vmov	s15, r3
 810317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103186:	ee37 7a87 	vadd.f32	s14, s15, s14
 810318a:	edd7 6a07 	vldr	s13, [r7, #28]
 810318e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103196:	ee17 2a90 	vmov	r2, s15
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810319e:	4b1f      	ldr	r3, [pc, #124]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81031a2:	0c1b      	lsrs	r3, r3, #16
 81031a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81031a8:	ee07 3a90 	vmov	s15, r3
 81031ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81031b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81031b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81031bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81031c4:	ee17 2a90 	vmov	r2, s15
 81031c8:	687b      	ldr	r3, [r7, #4]
 81031ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81031cc:	4b13      	ldr	r3, [pc, #76]	@ (810321c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81031d0:	0e1b      	lsrs	r3, r3, #24
 81031d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81031d6:	ee07 3a90 	vmov	s15, r3
 81031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81031e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81031e6:	edd7 6a07 	vldr	s13, [r7, #28]
 81031ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81031f2:	ee17 2a90 	vmov	r2, s15
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81031fa:	e008      	b.n	810320e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	2200      	movs	r2, #0
 8103200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	2200      	movs	r2, #0
 8103206:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	2200      	movs	r2, #0
 810320c:	609a      	str	r2, [r3, #8]
}
 810320e:	bf00      	nop
 8103210:	3724      	adds	r7, #36	@ 0x24
 8103212:	46bd      	mov	sp, r7
 8103214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103218:	4770      	bx	lr
 810321a:	bf00      	nop
 810321c:	58024400 	.word	0x58024400
 8103220:	03d09000 	.word	0x03d09000
 8103224:	46000000 	.word	0x46000000
 8103228:	4c742400 	.word	0x4c742400
 810322c:	4a742400 	.word	0x4a742400
 8103230:	4af42400 	.word	0x4af42400

08103234 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8103234:	b480      	push	{r7}
 8103236:	b089      	sub	sp, #36	@ 0x24
 8103238:	af00      	add	r7, sp, #0
 810323a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810323c:	4ba1      	ldr	r3, [pc, #644]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810323e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103240:	f003 0303 	and.w	r3, r3, #3
 8103244:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8103246:	4b9f      	ldr	r3, [pc, #636]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810324a:	0d1b      	lsrs	r3, r3, #20
 810324c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103250:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103252:	4b9c      	ldr	r3, [pc, #624]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103256:	0a1b      	lsrs	r3, r3, #8
 8103258:	f003 0301 	and.w	r3, r3, #1
 810325c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810325e:	4b99      	ldr	r3, [pc, #612]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103262:	08db      	lsrs	r3, r3, #3
 8103264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103268:	693a      	ldr	r2, [r7, #16]
 810326a:	fb02 f303 	mul.w	r3, r2, r3
 810326e:	ee07 3a90 	vmov	s15, r3
 8103272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810327a:	697b      	ldr	r3, [r7, #20]
 810327c:	2b00      	cmp	r3, #0
 810327e:	f000 8111 	beq.w	81034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103282:	69bb      	ldr	r3, [r7, #24]
 8103284:	2b02      	cmp	r3, #2
 8103286:	f000 8083 	beq.w	8103390 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810328a:	69bb      	ldr	r3, [r7, #24]
 810328c:	2b02      	cmp	r3, #2
 810328e:	f200 80a1 	bhi.w	81033d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103292:	69bb      	ldr	r3, [r7, #24]
 8103294:	2b00      	cmp	r3, #0
 8103296:	d003      	beq.n	81032a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103298:	69bb      	ldr	r3, [r7, #24]
 810329a:	2b01      	cmp	r3, #1
 810329c:	d056      	beq.n	810334c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810329e:	e099      	b.n	81033d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81032a0:	4b88      	ldr	r3, [pc, #544]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	f003 0320 	and.w	r3, r3, #32
 81032a8:	2b00      	cmp	r3, #0
 81032aa:	d02d      	beq.n	8103308 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81032ac:	4b85      	ldr	r3, [pc, #532]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032ae:	681b      	ldr	r3, [r3, #0]
 81032b0:	08db      	lsrs	r3, r3, #3
 81032b2:	f003 0303 	and.w	r3, r3, #3
 81032b6:	4a84      	ldr	r2, [pc, #528]	@ (81034c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81032b8:	fa22 f303 	lsr.w	r3, r2, r3
 81032bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81032be:	68bb      	ldr	r3, [r7, #8]
 81032c0:	ee07 3a90 	vmov	s15, r3
 81032c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032c8:	697b      	ldr	r3, [r7, #20]
 81032ca:	ee07 3a90 	vmov	s15, r3
 81032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032d6:	4b7b      	ldr	r3, [pc, #492]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032de:	ee07 3a90 	vmov	s15, r3
 81032e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81032ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81034cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81032ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81032fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103306:	e087      	b.n	8103418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103308:	697b      	ldr	r3, [r7, #20]
 810330a:	ee07 3a90 	vmov	s15, r3
 810330e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103312:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81034d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810331a:	4b6a      	ldr	r3, [pc, #424]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810331e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103322:	ee07 3a90 	vmov	s15, r3
 8103326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810332a:	ed97 6a03 	vldr	s12, [r7, #12]
 810332e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81034cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810333a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810333e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810334a:	e065      	b.n	8103418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810334c:	697b      	ldr	r3, [r7, #20]
 810334e:	ee07 3a90 	vmov	s15, r3
 8103352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103356:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81034d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810335a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810335e:	4b59      	ldr	r3, [pc, #356]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103366:	ee07 3a90 	vmov	s15, r3
 810336a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810336e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103372:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81034cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810337a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810337e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103386:	ee67 7a27 	vmul.f32	s15, s14, s15
 810338a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810338e:	e043      	b.n	8103418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103390:	697b      	ldr	r3, [r7, #20]
 8103392:	ee07 3a90 	vmov	s15, r3
 8103396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810339a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81034d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810339e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033a2:	4b48      	ldr	r3, [pc, #288]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033aa:	ee07 3a90 	vmov	s15, r3
 81033ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81033b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81034cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81033ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81033c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81033d2:	e021      	b.n	8103418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81033d4:	697b      	ldr	r3, [r7, #20]
 81033d6:	ee07 3a90 	vmov	s15, r3
 81033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81034d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81033e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033e6:	4b37      	ldr	r3, [pc, #220]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81033ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033ee:	ee07 3a90 	vmov	s15, r3
 81033f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81033fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81034cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81033fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810340a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103416:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8103418:	4b2a      	ldr	r3, [pc, #168]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810341c:	0a5b      	lsrs	r3, r3, #9
 810341e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103422:	ee07 3a90 	vmov	s15, r3
 8103426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810342a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810342e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103432:	edd7 6a07 	vldr	s13, [r7, #28]
 8103436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810343a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810343e:	ee17 2a90 	vmov	r2, s15
 8103442:	687b      	ldr	r3, [r7, #4]
 8103444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8103446:	4b1f      	ldr	r3, [pc, #124]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810344a:	0c1b      	lsrs	r3, r3, #16
 810344c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103450:	ee07 3a90 	vmov	s15, r3
 8103454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810345c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103460:	edd7 6a07 	vldr	s13, [r7, #28]
 8103464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810346c:	ee17 2a90 	vmov	r2, s15
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8103474:	4b13      	ldr	r3, [pc, #76]	@ (81034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8103478:	0e1b      	lsrs	r3, r3, #24
 810347a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810347e:	ee07 3a90 	vmov	s15, r3
 8103482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810348a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810348e:	edd7 6a07 	vldr	s13, [r7, #28]
 8103492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810349a:	ee17 2a90 	vmov	r2, s15
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81034a2:	e008      	b.n	81034b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	2200      	movs	r2, #0
 81034a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	2200      	movs	r2, #0
 81034ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	2200      	movs	r2, #0
 81034b4:	609a      	str	r2, [r3, #8]
}
 81034b6:	bf00      	nop
 81034b8:	3724      	adds	r7, #36	@ 0x24
 81034ba:	46bd      	mov	sp, r7
 81034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034c0:	4770      	bx	lr
 81034c2:	bf00      	nop
 81034c4:	58024400 	.word	0x58024400
 81034c8:	03d09000 	.word	0x03d09000
 81034cc:	46000000 	.word	0x46000000
 81034d0:	4c742400 	.word	0x4c742400
 81034d4:	4a742400 	.word	0x4a742400
 81034d8:	4af42400 	.word	0x4af42400

081034dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81034dc:	b580      	push	{r7, lr}
 81034de:	b084      	sub	sp, #16
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
 81034e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81034e6:	2300      	movs	r3, #0
 81034e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81034ea:	4b54      	ldr	r3, [pc, #336]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81034ee:	f003 0303 	and.w	r3, r3, #3
 81034f2:	2b03      	cmp	r3, #3
 81034f4:	d101      	bne.n	81034fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81034f6:	2301      	movs	r3, #1
 81034f8:	e09b      	b.n	8103632 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81034fa:	4b50      	ldr	r3, [pc, #320]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	4a4f      	ldr	r2, [pc, #316]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103500:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103506:	f7fd fd41 	bl	8100f8c <HAL_GetTick>
 810350a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810350c:	e008      	b.n	8103520 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810350e:	f7fd fd3d 	bl	8100f8c <HAL_GetTick>
 8103512:	4602      	mov	r2, r0
 8103514:	68bb      	ldr	r3, [r7, #8]
 8103516:	1ad3      	subs	r3, r2, r3
 8103518:	2b02      	cmp	r3, #2
 810351a:	d901      	bls.n	8103520 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810351c:	2303      	movs	r3, #3
 810351e:	e088      	b.n	8103632 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103520:	4b46      	ldr	r3, [pc, #280]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103522:	681b      	ldr	r3, [r3, #0]
 8103524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103528:	2b00      	cmp	r3, #0
 810352a:	d1f0      	bne.n	810350e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810352c:	4b43      	ldr	r3, [pc, #268]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 810352e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103530:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	681b      	ldr	r3, [r3, #0]
 8103538:	031b      	lsls	r3, r3, #12
 810353a:	4940      	ldr	r1, [pc, #256]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 810353c:	4313      	orrs	r3, r2
 810353e:	628b      	str	r3, [r1, #40]	@ 0x28
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	685b      	ldr	r3, [r3, #4]
 8103544:	3b01      	subs	r3, #1
 8103546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	689b      	ldr	r3, [r3, #8]
 810354e:	3b01      	subs	r3, #1
 8103550:	025b      	lsls	r3, r3, #9
 8103552:	b29b      	uxth	r3, r3
 8103554:	431a      	orrs	r2, r3
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	68db      	ldr	r3, [r3, #12]
 810355a:	3b01      	subs	r3, #1
 810355c:	041b      	lsls	r3, r3, #16
 810355e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8103562:	431a      	orrs	r2, r3
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	691b      	ldr	r3, [r3, #16]
 8103568:	3b01      	subs	r3, #1
 810356a:	061b      	lsls	r3, r3, #24
 810356c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103570:	4932      	ldr	r1, [pc, #200]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103572:	4313      	orrs	r3, r2
 8103574:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103576:	4b31      	ldr	r3, [pc, #196]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810357a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	695b      	ldr	r3, [r3, #20]
 8103582:	492e      	ldr	r1, [pc, #184]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103584:	4313      	orrs	r3, r2
 8103586:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103588:	4b2c      	ldr	r3, [pc, #176]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 810358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810358c:	f023 0220 	bic.w	r2, r3, #32
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	699b      	ldr	r3, [r3, #24]
 8103594:	4929      	ldr	r1, [pc, #164]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103596:	4313      	orrs	r3, r2
 8103598:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810359a:	4b28      	ldr	r3, [pc, #160]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 810359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810359e:	4a27      	ldr	r2, [pc, #156]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035a0:	f023 0310 	bic.w	r3, r3, #16
 81035a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81035a6:	4b25      	ldr	r3, [pc, #148]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81035aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81035ae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81035b2:	687a      	ldr	r2, [r7, #4]
 81035b4:	69d2      	ldr	r2, [r2, #28]
 81035b6:	00d2      	lsls	r2, r2, #3
 81035b8:	4920      	ldr	r1, [pc, #128]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035ba:	4313      	orrs	r3, r2
 81035bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81035be:	4b1f      	ldr	r3, [pc, #124]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035c2:	4a1e      	ldr	r2, [pc, #120]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035c4:	f043 0310 	orr.w	r3, r3, #16
 81035c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81035ca:	683b      	ldr	r3, [r7, #0]
 81035cc:	2b00      	cmp	r3, #0
 81035ce:	d106      	bne.n	81035de <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81035d0:	4b1a      	ldr	r3, [pc, #104]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035d4:	4a19      	ldr	r2, [pc, #100]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81035da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81035dc:	e00f      	b.n	81035fe <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81035de:	683b      	ldr	r3, [r7, #0]
 81035e0:	2b01      	cmp	r3, #1
 81035e2:	d106      	bne.n	81035f2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81035e4:	4b15      	ldr	r3, [pc, #84]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035e8:	4a14      	ldr	r2, [pc, #80]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81035ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81035f0:	e005      	b.n	81035fe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81035f2:	4b12      	ldr	r3, [pc, #72]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035f6:	4a11      	ldr	r2, [pc, #68]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 81035f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81035fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81035fe:	4b0f      	ldr	r3, [pc, #60]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	4a0e      	ldr	r2, [pc, #56]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103604:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810360a:	f7fd fcbf 	bl	8100f8c <HAL_GetTick>
 810360e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103610:	e008      	b.n	8103624 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103612:	f7fd fcbb 	bl	8100f8c <HAL_GetTick>
 8103616:	4602      	mov	r2, r0
 8103618:	68bb      	ldr	r3, [r7, #8]
 810361a:	1ad3      	subs	r3, r2, r3
 810361c:	2b02      	cmp	r3, #2
 810361e:	d901      	bls.n	8103624 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103620:	2303      	movs	r3, #3
 8103622:	e006      	b.n	8103632 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103624:	4b05      	ldr	r3, [pc, #20]	@ (810363c <RCCEx_PLL2_Config+0x160>)
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810362c:	2b00      	cmp	r3, #0
 810362e:	d0f0      	beq.n	8103612 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103630:	7bfb      	ldrb	r3, [r7, #15]
}
 8103632:	4618      	mov	r0, r3
 8103634:	3710      	adds	r7, #16
 8103636:	46bd      	mov	sp, r7
 8103638:	bd80      	pop	{r7, pc}
 810363a:	bf00      	nop
 810363c:	58024400 	.word	0x58024400

08103640 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103640:	b580      	push	{r7, lr}
 8103642:	b084      	sub	sp, #16
 8103644:	af00      	add	r7, sp, #0
 8103646:	6078      	str	r0, [r7, #4]
 8103648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810364a:	2300      	movs	r3, #0
 810364c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810364e:	4b54      	ldr	r3, [pc, #336]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103652:	f003 0303 	and.w	r3, r3, #3
 8103656:	2b03      	cmp	r3, #3
 8103658:	d101      	bne.n	810365e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810365a:	2301      	movs	r3, #1
 810365c:	e09b      	b.n	8103796 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810365e:	4b50      	ldr	r3, [pc, #320]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	4a4f      	ldr	r2, [pc, #316]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810366a:	f7fd fc8f 	bl	8100f8c <HAL_GetTick>
 810366e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103670:	e008      	b.n	8103684 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103672:	f7fd fc8b 	bl	8100f8c <HAL_GetTick>
 8103676:	4602      	mov	r2, r0
 8103678:	68bb      	ldr	r3, [r7, #8]
 810367a:	1ad3      	subs	r3, r2, r3
 810367c:	2b02      	cmp	r3, #2
 810367e:	d901      	bls.n	8103684 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103680:	2303      	movs	r3, #3
 8103682:	e088      	b.n	8103796 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103684:	4b46      	ldr	r3, [pc, #280]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810368c:	2b00      	cmp	r3, #0
 810368e:	d1f0      	bne.n	8103672 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103690:	4b43      	ldr	r3, [pc, #268]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103694:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	051b      	lsls	r3, r3, #20
 810369e:	4940      	ldr	r1, [pc, #256]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 81036a0:	4313      	orrs	r3, r2
 81036a2:	628b      	str	r3, [r1, #40]	@ 0x28
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	685b      	ldr	r3, [r3, #4]
 81036a8:	3b01      	subs	r3, #1
 81036aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81036ae:	687b      	ldr	r3, [r7, #4]
 81036b0:	689b      	ldr	r3, [r3, #8]
 81036b2:	3b01      	subs	r3, #1
 81036b4:	025b      	lsls	r3, r3, #9
 81036b6:	b29b      	uxth	r3, r3
 81036b8:	431a      	orrs	r2, r3
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	68db      	ldr	r3, [r3, #12]
 81036be:	3b01      	subs	r3, #1
 81036c0:	041b      	lsls	r3, r3, #16
 81036c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81036c6:	431a      	orrs	r2, r3
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	691b      	ldr	r3, [r3, #16]
 81036cc:	3b01      	subs	r3, #1
 81036ce:	061b      	lsls	r3, r3, #24
 81036d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81036d4:	4932      	ldr	r1, [pc, #200]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 81036d6:	4313      	orrs	r3, r2
 81036d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81036da:	4b31      	ldr	r3, [pc, #196]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 81036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	695b      	ldr	r3, [r3, #20]
 81036e6:	492e      	ldr	r1, [pc, #184]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 81036e8:	4313      	orrs	r3, r2
 81036ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81036ec:	4b2c      	ldr	r3, [pc, #176]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 81036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81036f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81036f4:	687b      	ldr	r3, [r7, #4]
 81036f6:	699b      	ldr	r3, [r3, #24]
 81036f8:	4929      	ldr	r1, [pc, #164]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 81036fa:	4313      	orrs	r3, r2
 81036fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81036fe:	4b28      	ldr	r3, [pc, #160]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103702:	4a27      	ldr	r2, [pc, #156]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810370a:	4b25      	ldr	r3, [pc, #148]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 810370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810370e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103712:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103716:	687a      	ldr	r2, [r7, #4]
 8103718:	69d2      	ldr	r2, [r2, #28]
 810371a:	00d2      	lsls	r2, r2, #3
 810371c:	4920      	ldr	r1, [pc, #128]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 810371e:	4313      	orrs	r3, r2
 8103720:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103722:	4b1f      	ldr	r3, [pc, #124]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103726:	4a1e      	ldr	r2, [pc, #120]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810372c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810372e:	683b      	ldr	r3, [r7, #0]
 8103730:	2b00      	cmp	r3, #0
 8103732:	d106      	bne.n	8103742 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103734:	4b1a      	ldr	r3, [pc, #104]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103738:	4a19      	ldr	r2, [pc, #100]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 810373a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810373e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103740:	e00f      	b.n	8103762 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103742:	683b      	ldr	r3, [r7, #0]
 8103744:	2b01      	cmp	r3, #1
 8103746:	d106      	bne.n	8103756 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103748:	4b15      	ldr	r3, [pc, #84]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 810374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810374c:	4a14      	ldr	r2, [pc, #80]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 810374e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103752:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103754:	e005      	b.n	8103762 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103756:	4b12      	ldr	r3, [pc, #72]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810375a:	4a11      	ldr	r2, [pc, #68]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 810375c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103760:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103762:	4b0f      	ldr	r3, [pc, #60]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	4a0e      	ldr	r2, [pc, #56]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 8103768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810376c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810376e:	f7fd fc0d 	bl	8100f8c <HAL_GetTick>
 8103772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103774:	e008      	b.n	8103788 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103776:	f7fd fc09 	bl	8100f8c <HAL_GetTick>
 810377a:	4602      	mov	r2, r0
 810377c:	68bb      	ldr	r3, [r7, #8]
 810377e:	1ad3      	subs	r3, r2, r3
 8103780:	2b02      	cmp	r3, #2
 8103782:	d901      	bls.n	8103788 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103784:	2303      	movs	r3, #3
 8103786:	e006      	b.n	8103796 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103788:	4b05      	ldr	r3, [pc, #20]	@ (81037a0 <RCCEx_PLL3_Config+0x160>)
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103790:	2b00      	cmp	r3, #0
 8103792:	d0f0      	beq.n	8103776 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103794:	7bfb      	ldrb	r3, [r7, #15]
}
 8103796:	4618      	mov	r0, r3
 8103798:	3710      	adds	r7, #16
 810379a:	46bd      	mov	sp, r7
 810379c:	bd80      	pop	{r7, pc}
 810379e:	bf00      	nop
 81037a0:	58024400 	.word	0x58024400

081037a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81037a4:	b580      	push	{r7, lr}
 81037a6:	b082      	sub	sp, #8
 81037a8:	af00      	add	r7, sp, #0
 81037aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	2b00      	cmp	r3, #0
 81037b0:	d101      	bne.n	81037b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81037b2:	2301      	movs	r3, #1
 81037b4:	e049      	b.n	810384a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81037bc:	b2db      	uxtb	r3, r3
 81037be:	2b00      	cmp	r3, #0
 81037c0:	d106      	bne.n	81037d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	2200      	movs	r2, #0
 81037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81037ca:	6878      	ldr	r0, [r7, #4]
 81037cc:	f000 f841 	bl	8103852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	2202      	movs	r2, #2
 81037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	681a      	ldr	r2, [r3, #0]
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	3304      	adds	r3, #4
 81037e0:	4619      	mov	r1, r3
 81037e2:	4610      	mov	r0, r2
 81037e4:	f000 f9e8 	bl	8103bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81037e8:	687b      	ldr	r3, [r7, #4]
 81037ea:	2201      	movs	r2, #1
 81037ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	2201      	movs	r2, #1
 81037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81037f8:	687b      	ldr	r3, [r7, #4]
 81037fa:	2201      	movs	r2, #1
 81037fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	2201      	movs	r2, #1
 8103804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	2201      	movs	r2, #1
 810380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	2201      	movs	r2, #1
 8103814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	2201      	movs	r2, #1
 810381c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	2201      	movs	r2, #1
 8103824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	2201      	movs	r2, #1
 810382c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	2201      	movs	r2, #1
 8103834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	2201      	movs	r2, #1
 810383c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	2201      	movs	r2, #1
 8103844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8103848:	2300      	movs	r3, #0
}
 810384a:	4618      	mov	r0, r3
 810384c:	3708      	adds	r7, #8
 810384e:	46bd      	mov	sp, r7
 8103850:	bd80      	pop	{r7, pc}

08103852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8103852:	b480      	push	{r7}
 8103854:	b083      	sub	sp, #12
 8103856:	af00      	add	r7, sp, #0
 8103858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810385a:	bf00      	nop
 810385c:	370c      	adds	r7, #12
 810385e:	46bd      	mov	sp, r7
 8103860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103864:	4770      	bx	lr
	...

08103868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103868:	b480      	push	{r7}
 810386a:	b085      	sub	sp, #20
 810386c:	af00      	add	r7, sp, #0
 810386e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8103876:	b2db      	uxtb	r3, r3
 8103878:	2b01      	cmp	r3, #1
 810387a:	d001      	beq.n	8103880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810387c:	2301      	movs	r3, #1
 810387e:	e054      	b.n	810392a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	2202      	movs	r2, #2
 8103884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	68da      	ldr	r2, [r3, #12]
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	f042 0201 	orr.w	r2, r2, #1
 8103896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	681b      	ldr	r3, [r3, #0]
 810389c:	4a26      	ldr	r2, [pc, #152]	@ (8103938 <HAL_TIM_Base_Start_IT+0xd0>)
 810389e:	4293      	cmp	r3, r2
 81038a0:	d022      	beq.n	81038e8 <HAL_TIM_Base_Start_IT+0x80>
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81038aa:	d01d      	beq.n	81038e8 <HAL_TIM_Base_Start_IT+0x80>
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	4a22      	ldr	r2, [pc, #136]	@ (810393c <HAL_TIM_Base_Start_IT+0xd4>)
 81038b2:	4293      	cmp	r3, r2
 81038b4:	d018      	beq.n	81038e8 <HAL_TIM_Base_Start_IT+0x80>
 81038b6:	687b      	ldr	r3, [r7, #4]
 81038b8:	681b      	ldr	r3, [r3, #0]
 81038ba:	4a21      	ldr	r2, [pc, #132]	@ (8103940 <HAL_TIM_Base_Start_IT+0xd8>)
 81038bc:	4293      	cmp	r3, r2
 81038be:	d013      	beq.n	81038e8 <HAL_TIM_Base_Start_IT+0x80>
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	4a1f      	ldr	r2, [pc, #124]	@ (8103944 <HAL_TIM_Base_Start_IT+0xdc>)
 81038c6:	4293      	cmp	r3, r2
 81038c8:	d00e      	beq.n	81038e8 <HAL_TIM_Base_Start_IT+0x80>
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	4a1e      	ldr	r2, [pc, #120]	@ (8103948 <HAL_TIM_Base_Start_IT+0xe0>)
 81038d0:	4293      	cmp	r3, r2
 81038d2:	d009      	beq.n	81038e8 <HAL_TIM_Base_Start_IT+0x80>
 81038d4:	687b      	ldr	r3, [r7, #4]
 81038d6:	681b      	ldr	r3, [r3, #0]
 81038d8:	4a1c      	ldr	r2, [pc, #112]	@ (810394c <HAL_TIM_Base_Start_IT+0xe4>)
 81038da:	4293      	cmp	r3, r2
 81038dc:	d004      	beq.n	81038e8 <HAL_TIM_Base_Start_IT+0x80>
 81038de:	687b      	ldr	r3, [r7, #4]
 81038e0:	681b      	ldr	r3, [r3, #0]
 81038e2:	4a1b      	ldr	r2, [pc, #108]	@ (8103950 <HAL_TIM_Base_Start_IT+0xe8>)
 81038e4:	4293      	cmp	r3, r2
 81038e6:	d115      	bne.n	8103914 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81038e8:	687b      	ldr	r3, [r7, #4]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	689a      	ldr	r2, [r3, #8]
 81038ee:	4b19      	ldr	r3, [pc, #100]	@ (8103954 <HAL_TIM_Base_Start_IT+0xec>)
 81038f0:	4013      	ands	r3, r2
 81038f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81038f4:	68fb      	ldr	r3, [r7, #12]
 81038f6:	2b06      	cmp	r3, #6
 81038f8:	d015      	beq.n	8103926 <HAL_TIM_Base_Start_IT+0xbe>
 81038fa:	68fb      	ldr	r3, [r7, #12]
 81038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103900:	d011      	beq.n	8103926 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	681b      	ldr	r3, [r3, #0]
 8103906:	681a      	ldr	r2, [r3, #0]
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	681b      	ldr	r3, [r3, #0]
 810390c:	f042 0201 	orr.w	r2, r2, #1
 8103910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103912:	e008      	b.n	8103926 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	681a      	ldr	r2, [r3, #0]
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	681b      	ldr	r3, [r3, #0]
 810391e:	f042 0201 	orr.w	r2, r2, #1
 8103922:	601a      	str	r2, [r3, #0]
 8103924:	e000      	b.n	8103928 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8103928:	2300      	movs	r3, #0
}
 810392a:	4618      	mov	r0, r3
 810392c:	3714      	adds	r7, #20
 810392e:	46bd      	mov	sp, r7
 8103930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103934:	4770      	bx	lr
 8103936:	bf00      	nop
 8103938:	40010000 	.word	0x40010000
 810393c:	40000400 	.word	0x40000400
 8103940:	40000800 	.word	0x40000800
 8103944:	40000c00 	.word	0x40000c00
 8103948:	40010400 	.word	0x40010400
 810394c:	40001800 	.word	0x40001800
 8103950:	40014000 	.word	0x40014000
 8103954:	00010007 	.word	0x00010007

08103958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103958:	b580      	push	{r7, lr}
 810395a:	b084      	sub	sp, #16
 810395c:	af00      	add	r7, sp, #0
 810395e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	68db      	ldr	r3, [r3, #12]
 8103966:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	691b      	ldr	r3, [r3, #16]
 810396e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8103970:	68bb      	ldr	r3, [r7, #8]
 8103972:	f003 0302 	and.w	r3, r3, #2
 8103976:	2b00      	cmp	r3, #0
 8103978:	d020      	beq.n	81039bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810397a:	68fb      	ldr	r3, [r7, #12]
 810397c:	f003 0302 	and.w	r3, r3, #2
 8103980:	2b00      	cmp	r3, #0
 8103982:	d01b      	beq.n	81039bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	f06f 0202 	mvn.w	r2, #2
 810398c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	2201      	movs	r2, #1
 8103992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	699b      	ldr	r3, [r3, #24]
 810399a:	f003 0303 	and.w	r3, r3, #3
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d003      	beq.n	81039aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81039a2:	6878      	ldr	r0, [r7, #4]
 81039a4:	f000 f8e9 	bl	8103b7a <HAL_TIM_IC_CaptureCallback>
 81039a8:	e005      	b.n	81039b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81039aa:	6878      	ldr	r0, [r7, #4]
 81039ac:	f000 f8db 	bl	8103b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81039b0:	6878      	ldr	r0, [r7, #4]
 81039b2:	f000 f8ec 	bl	8103b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	2200      	movs	r2, #0
 81039ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 81039bc:	68bb      	ldr	r3, [r7, #8]
 81039be:	f003 0304 	and.w	r3, r3, #4
 81039c2:	2b00      	cmp	r3, #0
 81039c4:	d020      	beq.n	8103a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 81039c6:	68fb      	ldr	r3, [r7, #12]
 81039c8:	f003 0304 	and.w	r3, r3, #4
 81039cc:	2b00      	cmp	r3, #0
 81039ce:	d01b      	beq.n	8103a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	f06f 0204 	mvn.w	r2, #4
 81039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81039da:	687b      	ldr	r3, [r7, #4]
 81039dc:	2202      	movs	r2, #2
 81039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	699b      	ldr	r3, [r3, #24]
 81039e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81039ea:	2b00      	cmp	r3, #0
 81039ec:	d003      	beq.n	81039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81039ee:	6878      	ldr	r0, [r7, #4]
 81039f0:	f000 f8c3 	bl	8103b7a <HAL_TIM_IC_CaptureCallback>
 81039f4:	e005      	b.n	8103a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81039f6:	6878      	ldr	r0, [r7, #4]
 81039f8:	f000 f8b5 	bl	8103b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81039fc:	6878      	ldr	r0, [r7, #4]
 81039fe:	f000 f8c6 	bl	8103b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	2200      	movs	r2, #0
 8103a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8103a08:	68bb      	ldr	r3, [r7, #8]
 8103a0a:	f003 0308 	and.w	r3, r3, #8
 8103a0e:	2b00      	cmp	r3, #0
 8103a10:	d020      	beq.n	8103a54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8103a12:	68fb      	ldr	r3, [r7, #12]
 8103a14:	f003 0308 	and.w	r3, r3, #8
 8103a18:	2b00      	cmp	r3, #0
 8103a1a:	d01b      	beq.n	8103a54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	f06f 0208 	mvn.w	r2, #8
 8103a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	2204      	movs	r2, #4
 8103a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	69db      	ldr	r3, [r3, #28]
 8103a32:	f003 0303 	and.w	r3, r3, #3
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d003      	beq.n	8103a42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103a3a:	6878      	ldr	r0, [r7, #4]
 8103a3c:	f000 f89d 	bl	8103b7a <HAL_TIM_IC_CaptureCallback>
 8103a40:	e005      	b.n	8103a4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103a42:	6878      	ldr	r0, [r7, #4]
 8103a44:	f000 f88f 	bl	8103b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103a48:	6878      	ldr	r0, [r7, #4]
 8103a4a:	f000 f8a0 	bl	8103b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	2200      	movs	r2, #0
 8103a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8103a54:	68bb      	ldr	r3, [r7, #8]
 8103a56:	f003 0310 	and.w	r3, r3, #16
 8103a5a:	2b00      	cmp	r3, #0
 8103a5c:	d020      	beq.n	8103aa0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8103a5e:	68fb      	ldr	r3, [r7, #12]
 8103a60:	f003 0310 	and.w	r3, r3, #16
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d01b      	beq.n	8103aa0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	f06f 0210 	mvn.w	r2, #16
 8103a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	2208      	movs	r2, #8
 8103a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	681b      	ldr	r3, [r3, #0]
 8103a7c:	69db      	ldr	r3, [r3, #28]
 8103a7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	d003      	beq.n	8103a8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103a86:	6878      	ldr	r0, [r7, #4]
 8103a88:	f000 f877 	bl	8103b7a <HAL_TIM_IC_CaptureCallback>
 8103a8c:	e005      	b.n	8103a9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103a8e:	6878      	ldr	r0, [r7, #4]
 8103a90:	f000 f869 	bl	8103b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103a94:	6878      	ldr	r0, [r7, #4]
 8103a96:	f000 f87a 	bl	8103b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	2200      	movs	r2, #0
 8103a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8103aa0:	68bb      	ldr	r3, [r7, #8]
 8103aa2:	f003 0301 	and.w	r3, r3, #1
 8103aa6:	2b00      	cmp	r3, #0
 8103aa8:	d00c      	beq.n	8103ac4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8103aaa:	68fb      	ldr	r3, [r7, #12]
 8103aac:	f003 0301 	and.w	r3, r3, #1
 8103ab0:	2b00      	cmp	r3, #0
 8103ab2:	d007      	beq.n	8103ac4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	681b      	ldr	r3, [r3, #0]
 8103ab8:	f06f 0201 	mvn.w	r2, #1
 8103abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103abe:	6878      	ldr	r0, [r7, #4]
 8103ac0:	f7fc ffc2 	bl	8100a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103ac4:	68bb      	ldr	r3, [r7, #8]
 8103ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103aca:	2b00      	cmp	r3, #0
 8103acc:	d104      	bne.n	8103ad8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8103ace:	68bb      	ldr	r3, [r7, #8]
 8103ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d00c      	beq.n	8103af2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103ad8:	68fb      	ldr	r3, [r7, #12]
 8103ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103ade:	2b00      	cmp	r3, #0
 8103ae0:	d007      	beq.n	8103af2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8103aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103aec:	6878      	ldr	r0, [r7, #4]
 8103aee:	f000 f913 	bl	8103d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8103af2:	68bb      	ldr	r3, [r7, #8]
 8103af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103af8:	2b00      	cmp	r3, #0
 8103afa:	d00c      	beq.n	8103b16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8103afc:	68fb      	ldr	r3, [r7, #12]
 8103afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d007      	beq.n	8103b16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8103b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103b10:	6878      	ldr	r0, [r7, #4]
 8103b12:	f000 f90b 	bl	8103d2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8103b16:	68bb      	ldr	r3, [r7, #8]
 8103b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103b1c:	2b00      	cmp	r3, #0
 8103b1e:	d00c      	beq.n	8103b3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8103b20:	68fb      	ldr	r3, [r7, #12]
 8103b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d007      	beq.n	8103b3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8103b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103b34:	6878      	ldr	r0, [r7, #4]
 8103b36:	f000 f834 	bl	8103ba2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8103b3a:	68bb      	ldr	r3, [r7, #8]
 8103b3c:	f003 0320 	and.w	r3, r3, #32
 8103b40:	2b00      	cmp	r3, #0
 8103b42:	d00c      	beq.n	8103b5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8103b44:	68fb      	ldr	r3, [r7, #12]
 8103b46:	f003 0320 	and.w	r3, r3, #32
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d007      	beq.n	8103b5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	f06f 0220 	mvn.w	r2, #32
 8103b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103b58:	6878      	ldr	r0, [r7, #4]
 8103b5a:	f000 f8d3 	bl	8103d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103b5e:	bf00      	nop
 8103b60:	3710      	adds	r7, #16
 8103b62:	46bd      	mov	sp, r7
 8103b64:	bd80      	pop	{r7, pc}

08103b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103b66:	b480      	push	{r7}
 8103b68:	b083      	sub	sp, #12
 8103b6a:	af00      	add	r7, sp, #0
 8103b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103b6e:	bf00      	nop
 8103b70:	370c      	adds	r7, #12
 8103b72:	46bd      	mov	sp, r7
 8103b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b78:	4770      	bx	lr

08103b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103b7a:	b480      	push	{r7}
 8103b7c:	b083      	sub	sp, #12
 8103b7e:	af00      	add	r7, sp, #0
 8103b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103b82:	bf00      	nop
 8103b84:	370c      	adds	r7, #12
 8103b86:	46bd      	mov	sp, r7
 8103b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b8c:	4770      	bx	lr

08103b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103b8e:	b480      	push	{r7}
 8103b90:	b083      	sub	sp, #12
 8103b92:	af00      	add	r7, sp, #0
 8103b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103b96:	bf00      	nop
 8103b98:	370c      	adds	r7, #12
 8103b9a:	46bd      	mov	sp, r7
 8103b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ba0:	4770      	bx	lr

08103ba2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103ba2:	b480      	push	{r7}
 8103ba4:	b083      	sub	sp, #12
 8103ba6:	af00      	add	r7, sp, #0
 8103ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103baa:	bf00      	nop
 8103bac:	370c      	adds	r7, #12
 8103bae:	46bd      	mov	sp, r7
 8103bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bb4:	4770      	bx	lr
	...

08103bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8103bb8:	b480      	push	{r7}
 8103bba:	b085      	sub	sp, #20
 8103bbc:	af00      	add	r7, sp, #0
 8103bbe:	6078      	str	r0, [r7, #4]
 8103bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103bc2:	687b      	ldr	r3, [r7, #4]
 8103bc4:	681b      	ldr	r3, [r3, #0]
 8103bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	4a46      	ldr	r2, [pc, #280]	@ (8103ce4 <TIM_Base_SetConfig+0x12c>)
 8103bcc:	4293      	cmp	r3, r2
 8103bce:	d013      	beq.n	8103bf8 <TIM_Base_SetConfig+0x40>
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103bd6:	d00f      	beq.n	8103bf8 <TIM_Base_SetConfig+0x40>
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	4a43      	ldr	r2, [pc, #268]	@ (8103ce8 <TIM_Base_SetConfig+0x130>)
 8103bdc:	4293      	cmp	r3, r2
 8103bde:	d00b      	beq.n	8103bf8 <TIM_Base_SetConfig+0x40>
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	4a42      	ldr	r2, [pc, #264]	@ (8103cec <TIM_Base_SetConfig+0x134>)
 8103be4:	4293      	cmp	r3, r2
 8103be6:	d007      	beq.n	8103bf8 <TIM_Base_SetConfig+0x40>
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	4a41      	ldr	r2, [pc, #260]	@ (8103cf0 <TIM_Base_SetConfig+0x138>)
 8103bec:	4293      	cmp	r3, r2
 8103bee:	d003      	beq.n	8103bf8 <TIM_Base_SetConfig+0x40>
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	4a40      	ldr	r2, [pc, #256]	@ (8103cf4 <TIM_Base_SetConfig+0x13c>)
 8103bf4:	4293      	cmp	r3, r2
 8103bf6:	d108      	bne.n	8103c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103bf8:	68fb      	ldr	r3, [r7, #12]
 8103bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8103bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103c00:	683b      	ldr	r3, [r7, #0]
 8103c02:	685b      	ldr	r3, [r3, #4]
 8103c04:	68fa      	ldr	r2, [r7, #12]
 8103c06:	4313      	orrs	r3, r2
 8103c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	4a35      	ldr	r2, [pc, #212]	@ (8103ce4 <TIM_Base_SetConfig+0x12c>)
 8103c0e:	4293      	cmp	r3, r2
 8103c10:	d01f      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103c18:	d01b      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	4a32      	ldr	r2, [pc, #200]	@ (8103ce8 <TIM_Base_SetConfig+0x130>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d017      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	4a31      	ldr	r2, [pc, #196]	@ (8103cec <TIM_Base_SetConfig+0x134>)
 8103c26:	4293      	cmp	r3, r2
 8103c28:	d013      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	4a30      	ldr	r2, [pc, #192]	@ (8103cf0 <TIM_Base_SetConfig+0x138>)
 8103c2e:	4293      	cmp	r3, r2
 8103c30:	d00f      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	4a2f      	ldr	r2, [pc, #188]	@ (8103cf4 <TIM_Base_SetConfig+0x13c>)
 8103c36:	4293      	cmp	r3, r2
 8103c38:	d00b      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8103cf8 <TIM_Base_SetConfig+0x140>)
 8103c3e:	4293      	cmp	r3, r2
 8103c40:	d007      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c42:	687b      	ldr	r3, [r7, #4]
 8103c44:	4a2d      	ldr	r2, [pc, #180]	@ (8103cfc <TIM_Base_SetConfig+0x144>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d003      	beq.n	8103c52 <TIM_Base_SetConfig+0x9a>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8103d00 <TIM_Base_SetConfig+0x148>)
 8103c4e:	4293      	cmp	r3, r2
 8103c50:	d108      	bne.n	8103c64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8103c52:	68fb      	ldr	r3, [r7, #12]
 8103c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103c5a:	683b      	ldr	r3, [r7, #0]
 8103c5c:	68db      	ldr	r3, [r3, #12]
 8103c5e:	68fa      	ldr	r2, [r7, #12]
 8103c60:	4313      	orrs	r3, r2
 8103c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8103c6a:	683b      	ldr	r3, [r7, #0]
 8103c6c:	695b      	ldr	r3, [r3, #20]
 8103c6e:	4313      	orrs	r3, r2
 8103c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	68fa      	ldr	r2, [r7, #12]
 8103c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8103c78:	683b      	ldr	r3, [r7, #0]
 8103c7a:	689a      	ldr	r2, [r3, #8]
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8103c80:	683b      	ldr	r3, [r7, #0]
 8103c82:	681a      	ldr	r2, [r3, #0]
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	4a16      	ldr	r2, [pc, #88]	@ (8103ce4 <TIM_Base_SetConfig+0x12c>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d00f      	beq.n	8103cb0 <TIM_Base_SetConfig+0xf8>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	4a18      	ldr	r2, [pc, #96]	@ (8103cf4 <TIM_Base_SetConfig+0x13c>)
 8103c94:	4293      	cmp	r3, r2
 8103c96:	d00b      	beq.n	8103cb0 <TIM_Base_SetConfig+0xf8>
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	4a17      	ldr	r2, [pc, #92]	@ (8103cf8 <TIM_Base_SetConfig+0x140>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d007      	beq.n	8103cb0 <TIM_Base_SetConfig+0xf8>
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	4a16      	ldr	r2, [pc, #88]	@ (8103cfc <TIM_Base_SetConfig+0x144>)
 8103ca4:	4293      	cmp	r3, r2
 8103ca6:	d003      	beq.n	8103cb0 <TIM_Base_SetConfig+0xf8>
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	4a15      	ldr	r2, [pc, #84]	@ (8103d00 <TIM_Base_SetConfig+0x148>)
 8103cac:	4293      	cmp	r3, r2
 8103cae:	d103      	bne.n	8103cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103cb0:	683b      	ldr	r3, [r7, #0]
 8103cb2:	691a      	ldr	r2, [r3, #16]
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	2201      	movs	r2, #1
 8103cbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	691b      	ldr	r3, [r3, #16]
 8103cc2:	f003 0301 	and.w	r3, r3, #1
 8103cc6:	2b01      	cmp	r3, #1
 8103cc8:	d105      	bne.n	8103cd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8103cca:	687b      	ldr	r3, [r7, #4]
 8103ccc:	691b      	ldr	r3, [r3, #16]
 8103cce:	f023 0201 	bic.w	r2, r3, #1
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	611a      	str	r2, [r3, #16]
  }
}
 8103cd6:	bf00      	nop
 8103cd8:	3714      	adds	r7, #20
 8103cda:	46bd      	mov	sp, r7
 8103cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ce0:	4770      	bx	lr
 8103ce2:	bf00      	nop
 8103ce4:	40010000 	.word	0x40010000
 8103ce8:	40000400 	.word	0x40000400
 8103cec:	40000800 	.word	0x40000800
 8103cf0:	40000c00 	.word	0x40000c00
 8103cf4:	40010400 	.word	0x40010400
 8103cf8:	40014000 	.word	0x40014000
 8103cfc:	40014400 	.word	0x40014400
 8103d00:	40014800 	.word	0x40014800

08103d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103d04:	b480      	push	{r7}
 8103d06:	b083      	sub	sp, #12
 8103d08:	af00      	add	r7, sp, #0
 8103d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8103d0c:	bf00      	nop
 8103d0e:	370c      	adds	r7, #12
 8103d10:	46bd      	mov	sp, r7
 8103d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d16:	4770      	bx	lr

08103d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103d18:	b480      	push	{r7}
 8103d1a:	b083      	sub	sp, #12
 8103d1c:	af00      	add	r7, sp, #0
 8103d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8103d20:	bf00      	nop
 8103d22:	370c      	adds	r7, #12
 8103d24:	46bd      	mov	sp, r7
 8103d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d2a:	4770      	bx	lr

08103d2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8103d2c:	b480      	push	{r7}
 8103d2e:	b083      	sub	sp, #12
 8103d30:	af00      	add	r7, sp, #0
 8103d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103d34:	bf00      	nop
 8103d36:	370c      	adds	r7, #12
 8103d38:	46bd      	mov	sp, r7
 8103d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d3e:	4770      	bx	lr

08103d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8103d40:	b580      	push	{r7, lr}
 8103d42:	b082      	sub	sp, #8
 8103d44:	af00      	add	r7, sp, #0
 8103d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	2b00      	cmp	r3, #0
 8103d4c:	d101      	bne.n	8103d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8103d4e:	2301      	movs	r3, #1
 8103d50:	e042      	b.n	8103dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d106      	bne.n	8103d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	2200      	movs	r2, #0
 8103d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8103d64:	6878      	ldr	r0, [r7, #4]
 8103d66:	f7fc fead 	bl	8100ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	2224      	movs	r2, #36	@ 0x24
 8103d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	681b      	ldr	r3, [r3, #0]
 8103d76:	681a      	ldr	r2, [r3, #0]
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	681b      	ldr	r3, [r3, #0]
 8103d7c:	f022 0201 	bic.w	r2, r2, #1
 8103d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d86:	2b00      	cmp	r3, #0
 8103d88:	d002      	beq.n	8103d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8103d8a:	6878      	ldr	r0, [r7, #4]
 8103d8c:	f000 fe1e 	bl	81049cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103d90:	6878      	ldr	r0, [r7, #4]
 8103d92:	f000 f8b3 	bl	8103efc <UART_SetConfig>
 8103d96:	4603      	mov	r3, r0
 8103d98:	2b01      	cmp	r3, #1
 8103d9a:	d101      	bne.n	8103da0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103d9c:	2301      	movs	r3, #1
 8103d9e:	e01b      	b.n	8103dd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	685a      	ldr	r2, [r3, #4]
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8103dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	689a      	ldr	r2, [r3, #8]
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8103dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	681a      	ldr	r2, [r3, #0]
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	681b      	ldr	r3, [r3, #0]
 8103dca:	f042 0201 	orr.w	r2, r2, #1
 8103dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8103dd0:	6878      	ldr	r0, [r7, #4]
 8103dd2:	f000 fe9d 	bl	8104b10 <UART_CheckIdleState>
 8103dd6:	4603      	mov	r3, r0
}
 8103dd8:	4618      	mov	r0, r3
 8103dda:	3708      	adds	r7, #8
 8103ddc:	46bd      	mov	sp, r7
 8103dde:	bd80      	pop	{r7, pc}

08103de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103de0:	b580      	push	{r7, lr}
 8103de2:	b08a      	sub	sp, #40	@ 0x28
 8103de4:	af02      	add	r7, sp, #8
 8103de6:	60f8      	str	r0, [r7, #12]
 8103de8:	60b9      	str	r1, [r7, #8]
 8103dea:	603b      	str	r3, [r7, #0]
 8103dec:	4613      	mov	r3, r2
 8103dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8103df0:	68fb      	ldr	r3, [r7, #12]
 8103df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8103df6:	2b20      	cmp	r3, #32
 8103df8:	d17b      	bne.n	8103ef2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8103dfa:	68bb      	ldr	r3, [r7, #8]
 8103dfc:	2b00      	cmp	r3, #0
 8103dfe:	d002      	beq.n	8103e06 <HAL_UART_Transmit+0x26>
 8103e00:	88fb      	ldrh	r3, [r7, #6]
 8103e02:	2b00      	cmp	r3, #0
 8103e04:	d101      	bne.n	8103e0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8103e06:	2301      	movs	r3, #1
 8103e08:	e074      	b.n	8103ef4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103e0a:	68fb      	ldr	r3, [r7, #12]
 8103e0c:	2200      	movs	r2, #0
 8103e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	2221      	movs	r2, #33	@ 0x21
 8103e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8103e1a:	f7fd f8b7 	bl	8100f8c <HAL_GetTick>
 8103e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8103e20:	68fb      	ldr	r3, [r7, #12]
 8103e22:	88fa      	ldrh	r2, [r7, #6]
 8103e24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8103e28:	68fb      	ldr	r3, [r7, #12]
 8103e2a:	88fa      	ldrh	r2, [r7, #6]
 8103e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8103e30:	68fb      	ldr	r3, [r7, #12]
 8103e32:	689b      	ldr	r3, [r3, #8]
 8103e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103e38:	d108      	bne.n	8103e4c <HAL_UART_Transmit+0x6c>
 8103e3a:	68fb      	ldr	r3, [r7, #12]
 8103e3c:	691b      	ldr	r3, [r3, #16]
 8103e3e:	2b00      	cmp	r3, #0
 8103e40:	d104      	bne.n	8103e4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8103e42:	2300      	movs	r3, #0
 8103e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8103e46:	68bb      	ldr	r3, [r7, #8]
 8103e48:	61bb      	str	r3, [r7, #24]
 8103e4a:	e003      	b.n	8103e54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8103e4c:	68bb      	ldr	r3, [r7, #8]
 8103e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8103e50:	2300      	movs	r3, #0
 8103e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8103e54:	e030      	b.n	8103eb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8103e56:	683b      	ldr	r3, [r7, #0]
 8103e58:	9300      	str	r3, [sp, #0]
 8103e5a:	697b      	ldr	r3, [r7, #20]
 8103e5c:	2200      	movs	r2, #0
 8103e5e:	2180      	movs	r1, #128	@ 0x80
 8103e60:	68f8      	ldr	r0, [r7, #12]
 8103e62:	f000 feff 	bl	8104c64 <UART_WaitOnFlagUntilTimeout>
 8103e66:	4603      	mov	r3, r0
 8103e68:	2b00      	cmp	r3, #0
 8103e6a:	d005      	beq.n	8103e78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8103e6c:	68fb      	ldr	r3, [r7, #12]
 8103e6e:	2220      	movs	r2, #32
 8103e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8103e74:	2303      	movs	r3, #3
 8103e76:	e03d      	b.n	8103ef4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8103e78:	69fb      	ldr	r3, [r7, #28]
 8103e7a:	2b00      	cmp	r3, #0
 8103e7c:	d10b      	bne.n	8103e96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8103e7e:	69bb      	ldr	r3, [r7, #24]
 8103e80:	881b      	ldrh	r3, [r3, #0]
 8103e82:	461a      	mov	r2, r3
 8103e84:	68fb      	ldr	r3, [r7, #12]
 8103e86:	681b      	ldr	r3, [r3, #0]
 8103e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8103e8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8103e8e:	69bb      	ldr	r3, [r7, #24]
 8103e90:	3302      	adds	r3, #2
 8103e92:	61bb      	str	r3, [r7, #24]
 8103e94:	e007      	b.n	8103ea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8103e96:	69fb      	ldr	r3, [r7, #28]
 8103e98:	781a      	ldrb	r2, [r3, #0]
 8103e9a:	68fb      	ldr	r3, [r7, #12]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8103ea0:	69fb      	ldr	r3, [r7, #28]
 8103ea2:	3301      	adds	r3, #1
 8103ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8103ea6:	68fb      	ldr	r3, [r7, #12]
 8103ea8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103eac:	b29b      	uxth	r3, r3
 8103eae:	3b01      	subs	r3, #1
 8103eb0:	b29a      	uxth	r2, r3
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103ebe:	b29b      	uxth	r3, r3
 8103ec0:	2b00      	cmp	r3, #0
 8103ec2:	d1c8      	bne.n	8103e56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8103ec4:	683b      	ldr	r3, [r7, #0]
 8103ec6:	9300      	str	r3, [sp, #0]
 8103ec8:	697b      	ldr	r3, [r7, #20]
 8103eca:	2200      	movs	r2, #0
 8103ecc:	2140      	movs	r1, #64	@ 0x40
 8103ece:	68f8      	ldr	r0, [r7, #12]
 8103ed0:	f000 fec8 	bl	8104c64 <UART_WaitOnFlagUntilTimeout>
 8103ed4:	4603      	mov	r3, r0
 8103ed6:	2b00      	cmp	r3, #0
 8103ed8:	d005      	beq.n	8103ee6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8103eda:	68fb      	ldr	r3, [r7, #12]
 8103edc:	2220      	movs	r2, #32
 8103ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8103ee2:	2303      	movs	r3, #3
 8103ee4:	e006      	b.n	8103ef4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8103ee6:	68fb      	ldr	r3, [r7, #12]
 8103ee8:	2220      	movs	r2, #32
 8103eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8103eee:	2300      	movs	r3, #0
 8103ef0:	e000      	b.n	8103ef4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8103ef2:	2302      	movs	r3, #2
  }
}
 8103ef4:	4618      	mov	r0, r3
 8103ef6:	3720      	adds	r7, #32
 8103ef8:	46bd      	mov	sp, r7
 8103efa:	bd80      	pop	{r7, pc}

08103efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8103efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103f00:	b092      	sub	sp, #72	@ 0x48
 8103f02:	af00      	add	r7, sp, #0
 8103f04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8103f06:	2300      	movs	r3, #0
 8103f08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8103f0c:	697b      	ldr	r3, [r7, #20]
 8103f0e:	689a      	ldr	r2, [r3, #8]
 8103f10:	697b      	ldr	r3, [r7, #20]
 8103f12:	691b      	ldr	r3, [r3, #16]
 8103f14:	431a      	orrs	r2, r3
 8103f16:	697b      	ldr	r3, [r7, #20]
 8103f18:	695b      	ldr	r3, [r3, #20]
 8103f1a:	431a      	orrs	r2, r3
 8103f1c:	697b      	ldr	r3, [r7, #20]
 8103f1e:	69db      	ldr	r3, [r3, #28]
 8103f20:	4313      	orrs	r3, r2
 8103f22:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8103f24:	697b      	ldr	r3, [r7, #20]
 8103f26:	681b      	ldr	r3, [r3, #0]
 8103f28:	681a      	ldr	r2, [r3, #0]
 8103f2a:	4bbd      	ldr	r3, [pc, #756]	@ (8104220 <UART_SetConfig+0x324>)
 8103f2c:	4013      	ands	r3, r2
 8103f2e:	697a      	ldr	r2, [r7, #20]
 8103f30:	6812      	ldr	r2, [r2, #0]
 8103f32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103f34:	430b      	orrs	r3, r1
 8103f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103f38:	697b      	ldr	r3, [r7, #20]
 8103f3a:	681b      	ldr	r3, [r3, #0]
 8103f3c:	685b      	ldr	r3, [r3, #4]
 8103f3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103f42:	697b      	ldr	r3, [r7, #20]
 8103f44:	68da      	ldr	r2, [r3, #12]
 8103f46:	697b      	ldr	r3, [r7, #20]
 8103f48:	681b      	ldr	r3, [r3, #0]
 8103f4a:	430a      	orrs	r2, r1
 8103f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8103f4e:	697b      	ldr	r3, [r7, #20]
 8103f50:	699b      	ldr	r3, [r3, #24]
 8103f52:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8103f54:	697b      	ldr	r3, [r7, #20]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	4ab2      	ldr	r2, [pc, #712]	@ (8104224 <UART_SetConfig+0x328>)
 8103f5a:	4293      	cmp	r3, r2
 8103f5c:	d004      	beq.n	8103f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8103f5e:	697b      	ldr	r3, [r7, #20]
 8103f60:	6a1b      	ldr	r3, [r3, #32]
 8103f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103f64:	4313      	orrs	r3, r2
 8103f66:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8103f68:	697b      	ldr	r3, [r7, #20]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	689b      	ldr	r3, [r3, #8]
 8103f6e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8103f72:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8103f76:	697a      	ldr	r2, [r7, #20]
 8103f78:	6812      	ldr	r2, [r2, #0]
 8103f7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8103f7c:	430b      	orrs	r3, r1
 8103f7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103f80:	697b      	ldr	r3, [r7, #20]
 8103f82:	681b      	ldr	r3, [r3, #0]
 8103f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f86:	f023 010f 	bic.w	r1, r3, #15
 8103f8a:	697b      	ldr	r3, [r7, #20]
 8103f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103f8e:	697b      	ldr	r3, [r7, #20]
 8103f90:	681b      	ldr	r3, [r3, #0]
 8103f92:	430a      	orrs	r2, r1
 8103f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8103f96:	697b      	ldr	r3, [r7, #20]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4aa3      	ldr	r2, [pc, #652]	@ (8104228 <UART_SetConfig+0x32c>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d177      	bne.n	8104090 <UART_SetConfig+0x194>
 8103fa0:	4ba2      	ldr	r3, [pc, #648]	@ (810422c <UART_SetConfig+0x330>)
 8103fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103fa4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103fa8:	2b28      	cmp	r3, #40	@ 0x28
 8103faa:	d86d      	bhi.n	8104088 <UART_SetConfig+0x18c>
 8103fac:	a201      	add	r2, pc, #4	@ (adr r2, 8103fb4 <UART_SetConfig+0xb8>)
 8103fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fb2:	bf00      	nop
 8103fb4:	08104059 	.word	0x08104059
 8103fb8:	08104089 	.word	0x08104089
 8103fbc:	08104089 	.word	0x08104089
 8103fc0:	08104089 	.word	0x08104089
 8103fc4:	08104089 	.word	0x08104089
 8103fc8:	08104089 	.word	0x08104089
 8103fcc:	08104089 	.word	0x08104089
 8103fd0:	08104089 	.word	0x08104089
 8103fd4:	08104061 	.word	0x08104061
 8103fd8:	08104089 	.word	0x08104089
 8103fdc:	08104089 	.word	0x08104089
 8103fe0:	08104089 	.word	0x08104089
 8103fe4:	08104089 	.word	0x08104089
 8103fe8:	08104089 	.word	0x08104089
 8103fec:	08104089 	.word	0x08104089
 8103ff0:	08104089 	.word	0x08104089
 8103ff4:	08104069 	.word	0x08104069
 8103ff8:	08104089 	.word	0x08104089
 8103ffc:	08104089 	.word	0x08104089
 8104000:	08104089 	.word	0x08104089
 8104004:	08104089 	.word	0x08104089
 8104008:	08104089 	.word	0x08104089
 810400c:	08104089 	.word	0x08104089
 8104010:	08104089 	.word	0x08104089
 8104014:	08104071 	.word	0x08104071
 8104018:	08104089 	.word	0x08104089
 810401c:	08104089 	.word	0x08104089
 8104020:	08104089 	.word	0x08104089
 8104024:	08104089 	.word	0x08104089
 8104028:	08104089 	.word	0x08104089
 810402c:	08104089 	.word	0x08104089
 8104030:	08104089 	.word	0x08104089
 8104034:	08104079 	.word	0x08104079
 8104038:	08104089 	.word	0x08104089
 810403c:	08104089 	.word	0x08104089
 8104040:	08104089 	.word	0x08104089
 8104044:	08104089 	.word	0x08104089
 8104048:	08104089 	.word	0x08104089
 810404c:	08104089 	.word	0x08104089
 8104050:	08104089 	.word	0x08104089
 8104054:	08104081 	.word	0x08104081
 8104058:	2301      	movs	r3, #1
 810405a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810405e:	e220      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104060:	2304      	movs	r3, #4
 8104062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104066:	e21c      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104068:	2308      	movs	r3, #8
 810406a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810406e:	e218      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104070:	2310      	movs	r3, #16
 8104072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104076:	e214      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104078:	2320      	movs	r3, #32
 810407a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810407e:	e210      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104080:	2340      	movs	r3, #64	@ 0x40
 8104082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104086:	e20c      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104088:	2380      	movs	r3, #128	@ 0x80
 810408a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810408e:	e208      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104090:	697b      	ldr	r3, [r7, #20]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	4a66      	ldr	r2, [pc, #408]	@ (8104230 <UART_SetConfig+0x334>)
 8104096:	4293      	cmp	r3, r2
 8104098:	d130      	bne.n	81040fc <UART_SetConfig+0x200>
 810409a:	4b64      	ldr	r3, [pc, #400]	@ (810422c <UART_SetConfig+0x330>)
 810409c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810409e:	f003 0307 	and.w	r3, r3, #7
 81040a2:	2b05      	cmp	r3, #5
 81040a4:	d826      	bhi.n	81040f4 <UART_SetConfig+0x1f8>
 81040a6:	a201      	add	r2, pc, #4	@ (adr r2, 81040ac <UART_SetConfig+0x1b0>)
 81040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81040ac:	081040c5 	.word	0x081040c5
 81040b0:	081040cd 	.word	0x081040cd
 81040b4:	081040d5 	.word	0x081040d5
 81040b8:	081040dd 	.word	0x081040dd
 81040bc:	081040e5 	.word	0x081040e5
 81040c0:	081040ed 	.word	0x081040ed
 81040c4:	2300      	movs	r3, #0
 81040c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040ca:	e1ea      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81040cc:	2304      	movs	r3, #4
 81040ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040d2:	e1e6      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81040d4:	2308      	movs	r3, #8
 81040d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040da:	e1e2      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81040dc:	2310      	movs	r3, #16
 81040de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040e2:	e1de      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81040e4:	2320      	movs	r3, #32
 81040e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040ea:	e1da      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81040ec:	2340      	movs	r3, #64	@ 0x40
 81040ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040f2:	e1d6      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81040f4:	2380      	movs	r3, #128	@ 0x80
 81040f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81040fa:	e1d2      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81040fc:	697b      	ldr	r3, [r7, #20]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	4a4c      	ldr	r2, [pc, #304]	@ (8104234 <UART_SetConfig+0x338>)
 8104102:	4293      	cmp	r3, r2
 8104104:	d130      	bne.n	8104168 <UART_SetConfig+0x26c>
 8104106:	4b49      	ldr	r3, [pc, #292]	@ (810422c <UART_SetConfig+0x330>)
 8104108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810410a:	f003 0307 	and.w	r3, r3, #7
 810410e:	2b05      	cmp	r3, #5
 8104110:	d826      	bhi.n	8104160 <UART_SetConfig+0x264>
 8104112:	a201      	add	r2, pc, #4	@ (adr r2, 8104118 <UART_SetConfig+0x21c>)
 8104114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104118:	08104131 	.word	0x08104131
 810411c:	08104139 	.word	0x08104139
 8104120:	08104141 	.word	0x08104141
 8104124:	08104149 	.word	0x08104149
 8104128:	08104151 	.word	0x08104151
 810412c:	08104159 	.word	0x08104159
 8104130:	2300      	movs	r3, #0
 8104132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104136:	e1b4      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104138:	2304      	movs	r3, #4
 810413a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810413e:	e1b0      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104140:	2308      	movs	r3, #8
 8104142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104146:	e1ac      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104148:	2310      	movs	r3, #16
 810414a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810414e:	e1a8      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104150:	2320      	movs	r3, #32
 8104152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104156:	e1a4      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104158:	2340      	movs	r3, #64	@ 0x40
 810415a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810415e:	e1a0      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104160:	2380      	movs	r3, #128	@ 0x80
 8104162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104166:	e19c      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104168:	697b      	ldr	r3, [r7, #20]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	4a32      	ldr	r2, [pc, #200]	@ (8104238 <UART_SetConfig+0x33c>)
 810416e:	4293      	cmp	r3, r2
 8104170:	d130      	bne.n	81041d4 <UART_SetConfig+0x2d8>
 8104172:	4b2e      	ldr	r3, [pc, #184]	@ (810422c <UART_SetConfig+0x330>)
 8104174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104176:	f003 0307 	and.w	r3, r3, #7
 810417a:	2b05      	cmp	r3, #5
 810417c:	d826      	bhi.n	81041cc <UART_SetConfig+0x2d0>
 810417e:	a201      	add	r2, pc, #4	@ (adr r2, 8104184 <UART_SetConfig+0x288>)
 8104180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104184:	0810419d 	.word	0x0810419d
 8104188:	081041a5 	.word	0x081041a5
 810418c:	081041ad 	.word	0x081041ad
 8104190:	081041b5 	.word	0x081041b5
 8104194:	081041bd 	.word	0x081041bd
 8104198:	081041c5 	.word	0x081041c5
 810419c:	2300      	movs	r3, #0
 810419e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041a2:	e17e      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81041a4:	2304      	movs	r3, #4
 81041a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041aa:	e17a      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81041ac:	2308      	movs	r3, #8
 81041ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041b2:	e176      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81041b4:	2310      	movs	r3, #16
 81041b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041ba:	e172      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81041bc:	2320      	movs	r3, #32
 81041be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041c2:	e16e      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81041c4:	2340      	movs	r3, #64	@ 0x40
 81041c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041ca:	e16a      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81041cc:	2380      	movs	r3, #128	@ 0x80
 81041ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81041d2:	e166      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81041d4:	697b      	ldr	r3, [r7, #20]
 81041d6:	681b      	ldr	r3, [r3, #0]
 81041d8:	4a18      	ldr	r2, [pc, #96]	@ (810423c <UART_SetConfig+0x340>)
 81041da:	4293      	cmp	r3, r2
 81041dc:	d140      	bne.n	8104260 <UART_SetConfig+0x364>
 81041de:	4b13      	ldr	r3, [pc, #76]	@ (810422c <UART_SetConfig+0x330>)
 81041e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041e2:	f003 0307 	and.w	r3, r3, #7
 81041e6:	2b05      	cmp	r3, #5
 81041e8:	d836      	bhi.n	8104258 <UART_SetConfig+0x35c>
 81041ea:	a201      	add	r2, pc, #4	@ (adr r2, 81041f0 <UART_SetConfig+0x2f4>)
 81041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041f0:	08104209 	.word	0x08104209
 81041f4:	08104211 	.word	0x08104211
 81041f8:	08104219 	.word	0x08104219
 81041fc:	08104241 	.word	0x08104241
 8104200:	08104249 	.word	0x08104249
 8104204:	08104251 	.word	0x08104251
 8104208:	2300      	movs	r3, #0
 810420a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810420e:	e148      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104210:	2304      	movs	r3, #4
 8104212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104216:	e144      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104218:	2308      	movs	r3, #8
 810421a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810421e:	e140      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104220:	cfff69f3 	.word	0xcfff69f3
 8104224:	58000c00 	.word	0x58000c00
 8104228:	40011000 	.word	0x40011000
 810422c:	58024400 	.word	0x58024400
 8104230:	40004400 	.word	0x40004400
 8104234:	40004800 	.word	0x40004800
 8104238:	40004c00 	.word	0x40004c00
 810423c:	40005000 	.word	0x40005000
 8104240:	2310      	movs	r3, #16
 8104242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104246:	e12c      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104248:	2320      	movs	r3, #32
 810424a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810424e:	e128      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104250:	2340      	movs	r3, #64	@ 0x40
 8104252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104256:	e124      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104258:	2380      	movs	r3, #128	@ 0x80
 810425a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810425e:	e120      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104260:	697b      	ldr	r3, [r7, #20]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	4acb      	ldr	r2, [pc, #812]	@ (8104594 <UART_SetConfig+0x698>)
 8104266:	4293      	cmp	r3, r2
 8104268:	d176      	bne.n	8104358 <UART_SetConfig+0x45c>
 810426a:	4bcb      	ldr	r3, [pc, #812]	@ (8104598 <UART_SetConfig+0x69c>)
 810426c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810426e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8104272:	2b28      	cmp	r3, #40	@ 0x28
 8104274:	d86c      	bhi.n	8104350 <UART_SetConfig+0x454>
 8104276:	a201      	add	r2, pc, #4	@ (adr r2, 810427c <UART_SetConfig+0x380>)
 8104278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810427c:	08104321 	.word	0x08104321
 8104280:	08104351 	.word	0x08104351
 8104284:	08104351 	.word	0x08104351
 8104288:	08104351 	.word	0x08104351
 810428c:	08104351 	.word	0x08104351
 8104290:	08104351 	.word	0x08104351
 8104294:	08104351 	.word	0x08104351
 8104298:	08104351 	.word	0x08104351
 810429c:	08104329 	.word	0x08104329
 81042a0:	08104351 	.word	0x08104351
 81042a4:	08104351 	.word	0x08104351
 81042a8:	08104351 	.word	0x08104351
 81042ac:	08104351 	.word	0x08104351
 81042b0:	08104351 	.word	0x08104351
 81042b4:	08104351 	.word	0x08104351
 81042b8:	08104351 	.word	0x08104351
 81042bc:	08104331 	.word	0x08104331
 81042c0:	08104351 	.word	0x08104351
 81042c4:	08104351 	.word	0x08104351
 81042c8:	08104351 	.word	0x08104351
 81042cc:	08104351 	.word	0x08104351
 81042d0:	08104351 	.word	0x08104351
 81042d4:	08104351 	.word	0x08104351
 81042d8:	08104351 	.word	0x08104351
 81042dc:	08104339 	.word	0x08104339
 81042e0:	08104351 	.word	0x08104351
 81042e4:	08104351 	.word	0x08104351
 81042e8:	08104351 	.word	0x08104351
 81042ec:	08104351 	.word	0x08104351
 81042f0:	08104351 	.word	0x08104351
 81042f4:	08104351 	.word	0x08104351
 81042f8:	08104351 	.word	0x08104351
 81042fc:	08104341 	.word	0x08104341
 8104300:	08104351 	.word	0x08104351
 8104304:	08104351 	.word	0x08104351
 8104308:	08104351 	.word	0x08104351
 810430c:	08104351 	.word	0x08104351
 8104310:	08104351 	.word	0x08104351
 8104314:	08104351 	.word	0x08104351
 8104318:	08104351 	.word	0x08104351
 810431c:	08104349 	.word	0x08104349
 8104320:	2301      	movs	r3, #1
 8104322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104326:	e0bc      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104328:	2304      	movs	r3, #4
 810432a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810432e:	e0b8      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104330:	2308      	movs	r3, #8
 8104332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104336:	e0b4      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104338:	2310      	movs	r3, #16
 810433a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810433e:	e0b0      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104340:	2320      	movs	r3, #32
 8104342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104346:	e0ac      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104348:	2340      	movs	r3, #64	@ 0x40
 810434a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810434e:	e0a8      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104350:	2380      	movs	r3, #128	@ 0x80
 8104352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104356:	e0a4      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104358:	697b      	ldr	r3, [r7, #20]
 810435a:	681b      	ldr	r3, [r3, #0]
 810435c:	4a8f      	ldr	r2, [pc, #572]	@ (810459c <UART_SetConfig+0x6a0>)
 810435e:	4293      	cmp	r3, r2
 8104360:	d130      	bne.n	81043c4 <UART_SetConfig+0x4c8>
 8104362:	4b8d      	ldr	r3, [pc, #564]	@ (8104598 <UART_SetConfig+0x69c>)
 8104364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104366:	f003 0307 	and.w	r3, r3, #7
 810436a:	2b05      	cmp	r3, #5
 810436c:	d826      	bhi.n	81043bc <UART_SetConfig+0x4c0>
 810436e:	a201      	add	r2, pc, #4	@ (adr r2, 8104374 <UART_SetConfig+0x478>)
 8104370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104374:	0810438d 	.word	0x0810438d
 8104378:	08104395 	.word	0x08104395
 810437c:	0810439d 	.word	0x0810439d
 8104380:	081043a5 	.word	0x081043a5
 8104384:	081043ad 	.word	0x081043ad
 8104388:	081043b5 	.word	0x081043b5
 810438c:	2300      	movs	r3, #0
 810438e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104392:	e086      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104394:	2304      	movs	r3, #4
 8104396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810439a:	e082      	b.n	81044a2 <UART_SetConfig+0x5a6>
 810439c:	2308      	movs	r3, #8
 810439e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043a2:	e07e      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81043a4:	2310      	movs	r3, #16
 81043a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043aa:	e07a      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81043ac:	2320      	movs	r3, #32
 81043ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043b2:	e076      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81043b4:	2340      	movs	r3, #64	@ 0x40
 81043b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043ba:	e072      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81043bc:	2380      	movs	r3, #128	@ 0x80
 81043be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043c2:	e06e      	b.n	81044a2 <UART_SetConfig+0x5a6>
 81043c4:	697b      	ldr	r3, [r7, #20]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	4a75      	ldr	r2, [pc, #468]	@ (81045a0 <UART_SetConfig+0x6a4>)
 81043ca:	4293      	cmp	r3, r2
 81043cc:	d130      	bne.n	8104430 <UART_SetConfig+0x534>
 81043ce:	4b72      	ldr	r3, [pc, #456]	@ (8104598 <UART_SetConfig+0x69c>)
 81043d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81043d2:	f003 0307 	and.w	r3, r3, #7
 81043d6:	2b05      	cmp	r3, #5
 81043d8:	d826      	bhi.n	8104428 <UART_SetConfig+0x52c>
 81043da:	a201      	add	r2, pc, #4	@ (adr r2, 81043e0 <UART_SetConfig+0x4e4>)
 81043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81043e0:	081043f9 	.word	0x081043f9
 81043e4:	08104401 	.word	0x08104401
 81043e8:	08104409 	.word	0x08104409
 81043ec:	08104411 	.word	0x08104411
 81043f0:	08104419 	.word	0x08104419
 81043f4:	08104421 	.word	0x08104421
 81043f8:	2300      	movs	r3, #0
 81043fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81043fe:	e050      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104400:	2304      	movs	r3, #4
 8104402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104406:	e04c      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104408:	2308      	movs	r3, #8
 810440a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810440e:	e048      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104410:	2310      	movs	r3, #16
 8104412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104416:	e044      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104418:	2320      	movs	r3, #32
 810441a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810441e:	e040      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104420:	2340      	movs	r3, #64	@ 0x40
 8104422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104426:	e03c      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104428:	2380      	movs	r3, #128	@ 0x80
 810442a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810442e:	e038      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104430:	697b      	ldr	r3, [r7, #20]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a5b      	ldr	r2, [pc, #364]	@ (81045a4 <UART_SetConfig+0x6a8>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d130      	bne.n	810449c <UART_SetConfig+0x5a0>
 810443a:	4b57      	ldr	r3, [pc, #348]	@ (8104598 <UART_SetConfig+0x69c>)
 810443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810443e:	f003 0307 	and.w	r3, r3, #7
 8104442:	2b05      	cmp	r3, #5
 8104444:	d826      	bhi.n	8104494 <UART_SetConfig+0x598>
 8104446:	a201      	add	r2, pc, #4	@ (adr r2, 810444c <UART_SetConfig+0x550>)
 8104448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810444c:	08104465 	.word	0x08104465
 8104450:	0810446d 	.word	0x0810446d
 8104454:	08104475 	.word	0x08104475
 8104458:	0810447d 	.word	0x0810447d
 810445c:	08104485 	.word	0x08104485
 8104460:	0810448d 	.word	0x0810448d
 8104464:	2302      	movs	r3, #2
 8104466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810446a:	e01a      	b.n	81044a2 <UART_SetConfig+0x5a6>
 810446c:	2304      	movs	r3, #4
 810446e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104472:	e016      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104474:	2308      	movs	r3, #8
 8104476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810447a:	e012      	b.n	81044a2 <UART_SetConfig+0x5a6>
 810447c:	2310      	movs	r3, #16
 810447e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104482:	e00e      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104484:	2320      	movs	r3, #32
 8104486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810448a:	e00a      	b.n	81044a2 <UART_SetConfig+0x5a6>
 810448c:	2340      	movs	r3, #64	@ 0x40
 810448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8104492:	e006      	b.n	81044a2 <UART_SetConfig+0x5a6>
 8104494:	2380      	movs	r3, #128	@ 0x80
 8104496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810449a:	e002      	b.n	81044a2 <UART_SetConfig+0x5a6>
 810449c:	2380      	movs	r3, #128	@ 0x80
 810449e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81044a2:	697b      	ldr	r3, [r7, #20]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	4a3f      	ldr	r2, [pc, #252]	@ (81045a4 <UART_SetConfig+0x6a8>)
 81044a8:	4293      	cmp	r3, r2
 81044aa:	f040 80f8 	bne.w	810469e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81044ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81044b2:	2b20      	cmp	r3, #32
 81044b4:	dc46      	bgt.n	8104544 <UART_SetConfig+0x648>
 81044b6:	2b02      	cmp	r3, #2
 81044b8:	f2c0 8082 	blt.w	81045c0 <UART_SetConfig+0x6c4>
 81044bc:	3b02      	subs	r3, #2
 81044be:	2b1e      	cmp	r3, #30
 81044c0:	d87e      	bhi.n	81045c0 <UART_SetConfig+0x6c4>
 81044c2:	a201      	add	r2, pc, #4	@ (adr r2, 81044c8 <UART_SetConfig+0x5cc>)
 81044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044c8:	0810454b 	.word	0x0810454b
 81044cc:	081045c1 	.word	0x081045c1
 81044d0:	08104553 	.word	0x08104553
 81044d4:	081045c1 	.word	0x081045c1
 81044d8:	081045c1 	.word	0x081045c1
 81044dc:	081045c1 	.word	0x081045c1
 81044e0:	08104563 	.word	0x08104563
 81044e4:	081045c1 	.word	0x081045c1
 81044e8:	081045c1 	.word	0x081045c1
 81044ec:	081045c1 	.word	0x081045c1
 81044f0:	081045c1 	.word	0x081045c1
 81044f4:	081045c1 	.word	0x081045c1
 81044f8:	081045c1 	.word	0x081045c1
 81044fc:	081045c1 	.word	0x081045c1
 8104500:	08104573 	.word	0x08104573
 8104504:	081045c1 	.word	0x081045c1
 8104508:	081045c1 	.word	0x081045c1
 810450c:	081045c1 	.word	0x081045c1
 8104510:	081045c1 	.word	0x081045c1
 8104514:	081045c1 	.word	0x081045c1
 8104518:	081045c1 	.word	0x081045c1
 810451c:	081045c1 	.word	0x081045c1
 8104520:	081045c1 	.word	0x081045c1
 8104524:	081045c1 	.word	0x081045c1
 8104528:	081045c1 	.word	0x081045c1
 810452c:	081045c1 	.word	0x081045c1
 8104530:	081045c1 	.word	0x081045c1
 8104534:	081045c1 	.word	0x081045c1
 8104538:	081045c1 	.word	0x081045c1
 810453c:	081045c1 	.word	0x081045c1
 8104540:	081045b3 	.word	0x081045b3
 8104544:	2b40      	cmp	r3, #64	@ 0x40
 8104546:	d037      	beq.n	81045b8 <UART_SetConfig+0x6bc>
 8104548:	e03a      	b.n	81045c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810454a:	f7fe fd09 	bl	8102f60 <HAL_RCCEx_GetD3PCLK1Freq>
 810454e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104550:	e03c      	b.n	81045cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8104556:	4618      	mov	r0, r3
 8104558:	f7fe fd18 	bl	8102f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810455c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810455e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104560:	e034      	b.n	81045cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104562:	f107 0318 	add.w	r3, r7, #24
 8104566:	4618      	mov	r0, r3
 8104568:	f7fe fe64 	bl	8103234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810456c:	69fb      	ldr	r3, [r7, #28]
 810456e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104570:	e02c      	b.n	81045cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104572:	4b09      	ldr	r3, [pc, #36]	@ (8104598 <UART_SetConfig+0x69c>)
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	f003 0320 	and.w	r3, r3, #32
 810457a:	2b00      	cmp	r3, #0
 810457c:	d016      	beq.n	81045ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810457e:	4b06      	ldr	r3, [pc, #24]	@ (8104598 <UART_SetConfig+0x69c>)
 8104580:	681b      	ldr	r3, [r3, #0]
 8104582:	08db      	lsrs	r3, r3, #3
 8104584:	f003 0303 	and.w	r3, r3, #3
 8104588:	4a07      	ldr	r2, [pc, #28]	@ (81045a8 <UART_SetConfig+0x6ac>)
 810458a:	fa22 f303 	lsr.w	r3, r2, r3
 810458e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104590:	e01c      	b.n	81045cc <UART_SetConfig+0x6d0>
 8104592:	bf00      	nop
 8104594:	40011400 	.word	0x40011400
 8104598:	58024400 	.word	0x58024400
 810459c:	40007800 	.word	0x40007800
 81045a0:	40007c00 	.word	0x40007c00
 81045a4:	58000c00 	.word	0x58000c00
 81045a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81045ac:	4b9d      	ldr	r3, [pc, #628]	@ (8104824 <UART_SetConfig+0x928>)
 81045ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045b0:	e00c      	b.n	81045cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81045b2:	4b9d      	ldr	r3, [pc, #628]	@ (8104828 <UART_SetConfig+0x92c>)
 81045b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045b6:	e009      	b.n	81045cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81045b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81045be:	e005      	b.n	81045cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81045c0:	2300      	movs	r3, #0
 81045c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81045c4:	2301      	movs	r3, #1
 81045c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81045ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81045cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81045ce:	2b00      	cmp	r3, #0
 81045d0:	f000 81de 	beq.w	8104990 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81045d4:	697b      	ldr	r3, [r7, #20]
 81045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81045d8:	4a94      	ldr	r2, [pc, #592]	@ (810482c <UART_SetConfig+0x930>)
 81045da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81045de:	461a      	mov	r2, r3
 81045e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81045e2:	fbb3 f3f2 	udiv	r3, r3, r2
 81045e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81045e8:	697b      	ldr	r3, [r7, #20]
 81045ea:	685a      	ldr	r2, [r3, #4]
 81045ec:	4613      	mov	r3, r2
 81045ee:	005b      	lsls	r3, r3, #1
 81045f0:	4413      	add	r3, r2
 81045f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81045f4:	429a      	cmp	r2, r3
 81045f6:	d305      	bcc.n	8104604 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81045f8:	697b      	ldr	r3, [r7, #20]
 81045fa:	685b      	ldr	r3, [r3, #4]
 81045fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81045fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104600:	429a      	cmp	r2, r3
 8104602:	d903      	bls.n	810460c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8104604:	2301      	movs	r3, #1
 8104606:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810460a:	e1c1      	b.n	8104990 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810460c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810460e:	2200      	movs	r2, #0
 8104610:	60bb      	str	r3, [r7, #8]
 8104612:	60fa      	str	r2, [r7, #12]
 8104614:	697b      	ldr	r3, [r7, #20]
 8104616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104618:	4a84      	ldr	r2, [pc, #528]	@ (810482c <UART_SetConfig+0x930>)
 810461a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810461e:	b29b      	uxth	r3, r3
 8104620:	2200      	movs	r2, #0
 8104622:	603b      	str	r3, [r7, #0]
 8104624:	607a      	str	r2, [r7, #4]
 8104626:	e9d7 2300 	ldrd	r2, r3, [r7]
 810462a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810462e:	f7fb febf 	bl	81003b0 <__aeabi_uldivmod>
 8104632:	4602      	mov	r2, r0
 8104634:	460b      	mov	r3, r1
 8104636:	4610      	mov	r0, r2
 8104638:	4619      	mov	r1, r3
 810463a:	f04f 0200 	mov.w	r2, #0
 810463e:	f04f 0300 	mov.w	r3, #0
 8104642:	020b      	lsls	r3, r1, #8
 8104644:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8104648:	0202      	lsls	r2, r0, #8
 810464a:	6979      	ldr	r1, [r7, #20]
 810464c:	6849      	ldr	r1, [r1, #4]
 810464e:	0849      	lsrs	r1, r1, #1
 8104650:	2000      	movs	r0, #0
 8104652:	460c      	mov	r4, r1
 8104654:	4605      	mov	r5, r0
 8104656:	eb12 0804 	adds.w	r8, r2, r4
 810465a:	eb43 0905 	adc.w	r9, r3, r5
 810465e:	697b      	ldr	r3, [r7, #20]
 8104660:	685b      	ldr	r3, [r3, #4]
 8104662:	2200      	movs	r2, #0
 8104664:	469a      	mov	sl, r3
 8104666:	4693      	mov	fp, r2
 8104668:	4652      	mov	r2, sl
 810466a:	465b      	mov	r3, fp
 810466c:	4640      	mov	r0, r8
 810466e:	4649      	mov	r1, r9
 8104670:	f7fb fe9e 	bl	81003b0 <__aeabi_uldivmod>
 8104674:	4602      	mov	r2, r0
 8104676:	460b      	mov	r3, r1
 8104678:	4613      	mov	r3, r2
 810467a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810467e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104682:	d308      	bcc.n	8104696 <UART_SetConfig+0x79a>
 8104684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810468a:	d204      	bcs.n	8104696 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810468c:	697b      	ldr	r3, [r7, #20]
 810468e:	681b      	ldr	r3, [r3, #0]
 8104690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8104692:	60da      	str	r2, [r3, #12]
 8104694:	e17c      	b.n	8104990 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8104696:	2301      	movs	r3, #1
 8104698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810469c:	e178      	b.n	8104990 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810469e:	697b      	ldr	r3, [r7, #20]
 81046a0:	69db      	ldr	r3, [r3, #28]
 81046a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81046a6:	f040 80c5 	bne.w	8104834 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81046aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81046ae:	2b20      	cmp	r3, #32
 81046b0:	dc48      	bgt.n	8104744 <UART_SetConfig+0x848>
 81046b2:	2b00      	cmp	r3, #0
 81046b4:	db7b      	blt.n	81047ae <UART_SetConfig+0x8b2>
 81046b6:	2b20      	cmp	r3, #32
 81046b8:	d879      	bhi.n	81047ae <UART_SetConfig+0x8b2>
 81046ba:	a201      	add	r2, pc, #4	@ (adr r2, 81046c0 <UART_SetConfig+0x7c4>)
 81046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81046c0:	0810474b 	.word	0x0810474b
 81046c4:	08104753 	.word	0x08104753
 81046c8:	081047af 	.word	0x081047af
 81046cc:	081047af 	.word	0x081047af
 81046d0:	0810475b 	.word	0x0810475b
 81046d4:	081047af 	.word	0x081047af
 81046d8:	081047af 	.word	0x081047af
 81046dc:	081047af 	.word	0x081047af
 81046e0:	0810476b 	.word	0x0810476b
 81046e4:	081047af 	.word	0x081047af
 81046e8:	081047af 	.word	0x081047af
 81046ec:	081047af 	.word	0x081047af
 81046f0:	081047af 	.word	0x081047af
 81046f4:	081047af 	.word	0x081047af
 81046f8:	081047af 	.word	0x081047af
 81046fc:	081047af 	.word	0x081047af
 8104700:	0810477b 	.word	0x0810477b
 8104704:	081047af 	.word	0x081047af
 8104708:	081047af 	.word	0x081047af
 810470c:	081047af 	.word	0x081047af
 8104710:	081047af 	.word	0x081047af
 8104714:	081047af 	.word	0x081047af
 8104718:	081047af 	.word	0x081047af
 810471c:	081047af 	.word	0x081047af
 8104720:	081047af 	.word	0x081047af
 8104724:	081047af 	.word	0x081047af
 8104728:	081047af 	.word	0x081047af
 810472c:	081047af 	.word	0x081047af
 8104730:	081047af 	.word	0x081047af
 8104734:	081047af 	.word	0x081047af
 8104738:	081047af 	.word	0x081047af
 810473c:	081047af 	.word	0x081047af
 8104740:	081047a1 	.word	0x081047a1
 8104744:	2b40      	cmp	r3, #64	@ 0x40
 8104746:	d02e      	beq.n	81047a6 <UART_SetConfig+0x8aa>
 8104748:	e031      	b.n	81047ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810474a:	f7fd f991 	bl	8101a70 <HAL_RCC_GetPCLK1Freq>
 810474e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104750:	e033      	b.n	81047ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104752:	f7fd f9a3 	bl	8101a9c <HAL_RCC_GetPCLK2Freq>
 8104756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8104758:	e02f      	b.n	81047ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810475a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810475e:	4618      	mov	r0, r3
 8104760:	f7fe fc14 	bl	8102f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104768:	e027      	b.n	81047ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810476a:	f107 0318 	add.w	r3, r7, #24
 810476e:	4618      	mov	r0, r3
 8104770:	f7fe fd60 	bl	8103234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104774:	69fb      	ldr	r3, [r7, #28]
 8104776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104778:	e01f      	b.n	81047ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810477a:	4b2d      	ldr	r3, [pc, #180]	@ (8104830 <UART_SetConfig+0x934>)
 810477c:	681b      	ldr	r3, [r3, #0]
 810477e:	f003 0320 	and.w	r3, r3, #32
 8104782:	2b00      	cmp	r3, #0
 8104784:	d009      	beq.n	810479a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104786:	4b2a      	ldr	r3, [pc, #168]	@ (8104830 <UART_SetConfig+0x934>)
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	08db      	lsrs	r3, r3, #3
 810478c:	f003 0303 	and.w	r3, r3, #3
 8104790:	4a24      	ldr	r2, [pc, #144]	@ (8104824 <UART_SetConfig+0x928>)
 8104792:	fa22 f303 	lsr.w	r3, r2, r3
 8104796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104798:	e00f      	b.n	81047ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810479a:	4b22      	ldr	r3, [pc, #136]	@ (8104824 <UART_SetConfig+0x928>)
 810479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810479e:	e00c      	b.n	81047ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81047a0:	4b21      	ldr	r3, [pc, #132]	@ (8104828 <UART_SetConfig+0x92c>)
 81047a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047a4:	e009      	b.n	81047ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81047a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81047aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81047ac:	e005      	b.n	81047ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81047ae:	2300      	movs	r3, #0
 81047b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 81047b2:	2301      	movs	r3, #1
 81047b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 81047b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81047ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81047bc:	2b00      	cmp	r3, #0
 81047be:	f000 80e7 	beq.w	8104990 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81047c2:	697b      	ldr	r3, [r7, #20]
 81047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81047c6:	4a19      	ldr	r2, [pc, #100]	@ (810482c <UART_SetConfig+0x930>)
 81047c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81047cc:	461a      	mov	r2, r3
 81047ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 81047d0:	fbb3 f3f2 	udiv	r3, r3, r2
 81047d4:	005a      	lsls	r2, r3, #1
 81047d6:	697b      	ldr	r3, [r7, #20]
 81047d8:	685b      	ldr	r3, [r3, #4]
 81047da:	085b      	lsrs	r3, r3, #1
 81047dc:	441a      	add	r2, r3
 81047de:	697b      	ldr	r3, [r7, #20]
 81047e0:	685b      	ldr	r3, [r3, #4]
 81047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 81047e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81047e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047ea:	2b0f      	cmp	r3, #15
 81047ec:	d916      	bls.n	810481c <UART_SetConfig+0x920>
 81047ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81047f4:	d212      	bcs.n	810481c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81047f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81047f8:	b29b      	uxth	r3, r3
 81047fa:	f023 030f 	bic.w	r3, r3, #15
 81047fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8104800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104802:	085b      	lsrs	r3, r3, #1
 8104804:	b29b      	uxth	r3, r3
 8104806:	f003 0307 	and.w	r3, r3, #7
 810480a:	b29a      	uxth	r2, r3
 810480c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810480e:	4313      	orrs	r3, r2
 8104810:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8104812:	697b      	ldr	r3, [r7, #20]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8104818:	60da      	str	r2, [r3, #12]
 810481a:	e0b9      	b.n	8104990 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810481c:	2301      	movs	r3, #1
 810481e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8104822:	e0b5      	b.n	8104990 <UART_SetConfig+0xa94>
 8104824:	03d09000 	.word	0x03d09000
 8104828:	003d0900 	.word	0x003d0900
 810482c:	0810c22c 	.word	0x0810c22c
 8104830:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8104834:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8104838:	2b20      	cmp	r3, #32
 810483a:	dc49      	bgt.n	81048d0 <UART_SetConfig+0x9d4>
 810483c:	2b00      	cmp	r3, #0
 810483e:	db7c      	blt.n	810493a <UART_SetConfig+0xa3e>
 8104840:	2b20      	cmp	r3, #32
 8104842:	d87a      	bhi.n	810493a <UART_SetConfig+0xa3e>
 8104844:	a201      	add	r2, pc, #4	@ (adr r2, 810484c <UART_SetConfig+0x950>)
 8104846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810484a:	bf00      	nop
 810484c:	081048d7 	.word	0x081048d7
 8104850:	081048df 	.word	0x081048df
 8104854:	0810493b 	.word	0x0810493b
 8104858:	0810493b 	.word	0x0810493b
 810485c:	081048e7 	.word	0x081048e7
 8104860:	0810493b 	.word	0x0810493b
 8104864:	0810493b 	.word	0x0810493b
 8104868:	0810493b 	.word	0x0810493b
 810486c:	081048f7 	.word	0x081048f7
 8104870:	0810493b 	.word	0x0810493b
 8104874:	0810493b 	.word	0x0810493b
 8104878:	0810493b 	.word	0x0810493b
 810487c:	0810493b 	.word	0x0810493b
 8104880:	0810493b 	.word	0x0810493b
 8104884:	0810493b 	.word	0x0810493b
 8104888:	0810493b 	.word	0x0810493b
 810488c:	08104907 	.word	0x08104907
 8104890:	0810493b 	.word	0x0810493b
 8104894:	0810493b 	.word	0x0810493b
 8104898:	0810493b 	.word	0x0810493b
 810489c:	0810493b 	.word	0x0810493b
 81048a0:	0810493b 	.word	0x0810493b
 81048a4:	0810493b 	.word	0x0810493b
 81048a8:	0810493b 	.word	0x0810493b
 81048ac:	0810493b 	.word	0x0810493b
 81048b0:	0810493b 	.word	0x0810493b
 81048b4:	0810493b 	.word	0x0810493b
 81048b8:	0810493b 	.word	0x0810493b
 81048bc:	0810493b 	.word	0x0810493b
 81048c0:	0810493b 	.word	0x0810493b
 81048c4:	0810493b 	.word	0x0810493b
 81048c8:	0810493b 	.word	0x0810493b
 81048cc:	0810492d 	.word	0x0810492d
 81048d0:	2b40      	cmp	r3, #64	@ 0x40
 81048d2:	d02e      	beq.n	8104932 <UART_SetConfig+0xa36>
 81048d4:	e031      	b.n	810493a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81048d6:	f7fd f8cb 	bl	8101a70 <HAL_RCC_GetPCLK1Freq>
 81048da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81048dc:	e033      	b.n	8104946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81048de:	f7fd f8dd 	bl	8101a9c <HAL_RCC_GetPCLK2Freq>
 81048e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81048e4:	e02f      	b.n	8104946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81048e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81048ea:	4618      	mov	r0, r3
 81048ec:	f7fe fb4e 	bl	8102f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81048f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81048f4:	e027      	b.n	8104946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81048f6:	f107 0318 	add.w	r3, r7, #24
 81048fa:	4618      	mov	r0, r3
 81048fc:	f7fe fc9a 	bl	8103234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104900:	69fb      	ldr	r3, [r7, #28]
 8104902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104904:	e01f      	b.n	8104946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104906:	4b2d      	ldr	r3, [pc, #180]	@ (81049bc <UART_SetConfig+0xac0>)
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	f003 0320 	and.w	r3, r3, #32
 810490e:	2b00      	cmp	r3, #0
 8104910:	d009      	beq.n	8104926 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104912:	4b2a      	ldr	r3, [pc, #168]	@ (81049bc <UART_SetConfig+0xac0>)
 8104914:	681b      	ldr	r3, [r3, #0]
 8104916:	08db      	lsrs	r3, r3, #3
 8104918:	f003 0303 	and.w	r3, r3, #3
 810491c:	4a28      	ldr	r2, [pc, #160]	@ (81049c0 <UART_SetConfig+0xac4>)
 810491e:	fa22 f303 	lsr.w	r3, r2, r3
 8104922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104924:	e00f      	b.n	8104946 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8104926:	4b26      	ldr	r3, [pc, #152]	@ (81049c0 <UART_SetConfig+0xac4>)
 8104928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810492a:	e00c      	b.n	8104946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810492c:	4b25      	ldr	r3, [pc, #148]	@ (81049c4 <UART_SetConfig+0xac8>)
 810492e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104930:	e009      	b.n	8104946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8104936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8104938:	e005      	b.n	8104946 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810493a:	2300      	movs	r3, #0
 810493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810493e:	2301      	movs	r3, #1
 8104940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8104944:	bf00      	nop
    }

    if (pclk != 0U)
 8104946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104948:	2b00      	cmp	r3, #0
 810494a:	d021      	beq.n	8104990 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810494c:	697b      	ldr	r3, [r7, #20]
 810494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104950:	4a1d      	ldr	r2, [pc, #116]	@ (81049c8 <UART_SetConfig+0xacc>)
 8104952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104956:	461a      	mov	r2, r3
 8104958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810495a:	fbb3 f2f2 	udiv	r2, r3, r2
 810495e:	697b      	ldr	r3, [r7, #20]
 8104960:	685b      	ldr	r3, [r3, #4]
 8104962:	085b      	lsrs	r3, r3, #1
 8104964:	441a      	add	r2, r3
 8104966:	697b      	ldr	r3, [r7, #20]
 8104968:	685b      	ldr	r3, [r3, #4]
 810496a:	fbb2 f3f3 	udiv	r3, r2, r3
 810496e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104972:	2b0f      	cmp	r3, #15
 8104974:	d909      	bls.n	810498a <UART_SetConfig+0xa8e>
 8104976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810497c:	d205      	bcs.n	810498a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810497e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104980:	b29a      	uxth	r2, r3
 8104982:	697b      	ldr	r3, [r7, #20]
 8104984:	681b      	ldr	r3, [r3, #0]
 8104986:	60da      	str	r2, [r3, #12]
 8104988:	e002      	b.n	8104990 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810498a:	2301      	movs	r3, #1
 810498c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8104990:	697b      	ldr	r3, [r7, #20]
 8104992:	2201      	movs	r2, #1
 8104994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8104998:	697b      	ldr	r3, [r7, #20]
 810499a:	2201      	movs	r2, #1
 810499c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81049a0:	697b      	ldr	r3, [r7, #20]
 81049a2:	2200      	movs	r2, #0
 81049a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 81049a6:	697b      	ldr	r3, [r7, #20]
 81049a8:	2200      	movs	r2, #0
 81049aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 81049ac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 81049b0:	4618      	mov	r0, r3
 81049b2:	3748      	adds	r7, #72	@ 0x48
 81049b4:	46bd      	mov	sp, r7
 81049b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81049ba:	bf00      	nop
 81049bc:	58024400 	.word	0x58024400
 81049c0:	03d09000 	.word	0x03d09000
 81049c4:	003d0900 	.word	0x003d0900
 81049c8:	0810c22c 	.word	0x0810c22c

081049cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81049cc:	b480      	push	{r7}
 81049ce:	b083      	sub	sp, #12
 81049d0:	af00      	add	r7, sp, #0
 81049d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049d8:	f003 0308 	and.w	r3, r3, #8
 81049dc:	2b00      	cmp	r3, #0
 81049de:	d00a      	beq.n	81049f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	685b      	ldr	r3, [r3, #4]
 81049e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	681b      	ldr	r3, [r3, #0]
 81049f2:	430a      	orrs	r2, r1
 81049f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81049fa:	f003 0301 	and.w	r3, r3, #1
 81049fe:	2b00      	cmp	r3, #0
 8104a00:	d00a      	beq.n	8104a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8104a02:	687b      	ldr	r3, [r7, #4]
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	685b      	ldr	r3, [r3, #4]
 8104a08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	430a      	orrs	r2, r1
 8104a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a1c:	f003 0302 	and.w	r3, r3, #2
 8104a20:	2b00      	cmp	r3, #0
 8104a22:	d00a      	beq.n	8104a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8104a24:	687b      	ldr	r3, [r7, #4]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	685b      	ldr	r3, [r3, #4]
 8104a2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104a2e:	687b      	ldr	r3, [r7, #4]
 8104a30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8104a32:	687b      	ldr	r3, [r7, #4]
 8104a34:	681b      	ldr	r3, [r3, #0]
 8104a36:	430a      	orrs	r2, r1
 8104a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a3e:	f003 0304 	and.w	r3, r3, #4
 8104a42:	2b00      	cmp	r3, #0
 8104a44:	d00a      	beq.n	8104a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8104a46:	687b      	ldr	r3, [r7, #4]
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	685b      	ldr	r3, [r3, #4]
 8104a4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8104a50:	687b      	ldr	r3, [r7, #4]
 8104a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	430a      	orrs	r2, r1
 8104a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8104a5c:	687b      	ldr	r3, [r7, #4]
 8104a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a60:	f003 0310 	and.w	r3, r3, #16
 8104a64:	2b00      	cmp	r3, #0
 8104a66:	d00a      	beq.n	8104a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	689b      	ldr	r3, [r3, #8]
 8104a6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	681b      	ldr	r3, [r3, #0]
 8104a7a:	430a      	orrs	r2, r1
 8104a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104a82:	f003 0320 	and.w	r3, r3, #32
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	d00a      	beq.n	8104aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8104a8a:	687b      	ldr	r3, [r7, #4]
 8104a8c:	681b      	ldr	r3, [r3, #0]
 8104a8e:	689b      	ldr	r3, [r3, #8]
 8104a90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8104a94:	687b      	ldr	r3, [r7, #4]
 8104a96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8104a98:	687b      	ldr	r3, [r7, #4]
 8104a9a:	681b      	ldr	r3, [r3, #0]
 8104a9c:	430a      	orrs	r2, r1
 8104a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104aa8:	2b00      	cmp	r3, #0
 8104aaa:	d01a      	beq.n	8104ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	681b      	ldr	r3, [r3, #0]
 8104ab0:	685b      	ldr	r3, [r3, #4]
 8104ab2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	430a      	orrs	r2, r1
 8104ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8104ac2:	687b      	ldr	r3, [r7, #4]
 8104ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104aca:	d10a      	bne.n	8104ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	685b      	ldr	r3, [r3, #4]
 8104ad2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	430a      	orrs	r2, r1
 8104ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104aea:	2b00      	cmp	r3, #0
 8104aec:	d00a      	beq.n	8104b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	681b      	ldr	r3, [r3, #0]
 8104af2:	685b      	ldr	r3, [r3, #4]
 8104af4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8104af8:	687b      	ldr	r3, [r7, #4]
 8104afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	430a      	orrs	r2, r1
 8104b02:	605a      	str	r2, [r3, #4]
  }
}
 8104b04:	bf00      	nop
 8104b06:	370c      	adds	r7, #12
 8104b08:	46bd      	mov	sp, r7
 8104b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b0e:	4770      	bx	lr

08104b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8104b10:	b580      	push	{r7, lr}
 8104b12:	b098      	sub	sp, #96	@ 0x60
 8104b14:	af02      	add	r7, sp, #8
 8104b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	2200      	movs	r2, #0
 8104b1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8104b20:	f7fc fa34 	bl	8100f8c <HAL_GetTick>
 8104b24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	f003 0308 	and.w	r3, r3, #8
 8104b30:	2b08      	cmp	r3, #8
 8104b32:	d12f      	bne.n	8104b94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104b34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8104b38:	9300      	str	r3, [sp, #0]
 8104b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104b3c:	2200      	movs	r2, #0
 8104b3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8104b42:	6878      	ldr	r0, [r7, #4]
 8104b44:	f000 f88e 	bl	8104c64 <UART_WaitOnFlagUntilTimeout>
 8104b48:	4603      	mov	r3, r0
 8104b4a:	2b00      	cmp	r3, #0
 8104b4c:	d022      	beq.n	8104b94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104b56:	e853 3f00 	ldrex	r3, [r3]
 8104b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8104b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8104b62:	653b      	str	r3, [r7, #80]	@ 0x50
 8104b64:	687b      	ldr	r3, [r7, #4]
 8104b66:	681b      	ldr	r3, [r3, #0]
 8104b68:	461a      	mov	r2, r3
 8104b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8104b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8104b6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104b70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8104b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8104b74:	e841 2300 	strex	r3, r2, [r1]
 8104b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8104b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8104b7c:	2b00      	cmp	r3, #0
 8104b7e:	d1e6      	bne.n	8104b4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	2220      	movs	r2, #32
 8104b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	2200      	movs	r2, #0
 8104b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104b90:	2303      	movs	r3, #3
 8104b92:	e063      	b.n	8104c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	f003 0304 	and.w	r3, r3, #4
 8104b9e:	2b04      	cmp	r3, #4
 8104ba0:	d149      	bne.n	8104c36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104ba2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8104ba6:	9300      	str	r3, [sp, #0]
 8104ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8104baa:	2200      	movs	r2, #0
 8104bac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8104bb0:	6878      	ldr	r0, [r7, #4]
 8104bb2:	f000 f857 	bl	8104c64 <UART_WaitOnFlagUntilTimeout>
 8104bb6:	4603      	mov	r3, r0
 8104bb8:	2b00      	cmp	r3, #0
 8104bba:	d03c      	beq.n	8104c36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	681b      	ldr	r3, [r3, #0]
 8104bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104bc4:	e853 3f00 	ldrex	r3, [r3]
 8104bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8104bca:	6a3b      	ldr	r3, [r7, #32]
 8104bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	681b      	ldr	r3, [r3, #0]
 8104bd6:	461a      	mov	r2, r3
 8104bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8104bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8104be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8104be2:	e841 2300 	strex	r3, r2, [r1]
 8104be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8104be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104bea:	2b00      	cmp	r3, #0
 8104bec:	d1e6      	bne.n	8104bbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	3308      	adds	r3, #8
 8104bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104bf6:	693b      	ldr	r3, [r7, #16]
 8104bf8:	e853 3f00 	ldrex	r3, [r3]
 8104bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	f023 0301 	bic.w	r3, r3, #1
 8104c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104c06:	687b      	ldr	r3, [r7, #4]
 8104c08:	681b      	ldr	r3, [r3, #0]
 8104c0a:	3308      	adds	r3, #8
 8104c0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104c0e:	61fa      	str	r2, [r7, #28]
 8104c10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104c12:	69b9      	ldr	r1, [r7, #24]
 8104c14:	69fa      	ldr	r2, [r7, #28]
 8104c16:	e841 2300 	strex	r3, r2, [r1]
 8104c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8104c1c:	697b      	ldr	r3, [r7, #20]
 8104c1e:	2b00      	cmp	r3, #0
 8104c20:	d1e5      	bne.n	8104bee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	2220      	movs	r2, #32
 8104c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	2200      	movs	r2, #0
 8104c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8104c32:	2303      	movs	r3, #3
 8104c34:	e012      	b.n	8104c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8104c36:	687b      	ldr	r3, [r7, #4]
 8104c38:	2220      	movs	r2, #32
 8104c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	2220      	movs	r2, #32
 8104c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104c46:	687b      	ldr	r3, [r7, #4]
 8104c48:	2200      	movs	r2, #0
 8104c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	2200      	movs	r2, #0
 8104c50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8104c52:	687b      	ldr	r3, [r7, #4]
 8104c54:	2200      	movs	r2, #0
 8104c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104c5a:	2300      	movs	r3, #0
}
 8104c5c:	4618      	mov	r0, r3
 8104c5e:	3758      	adds	r7, #88	@ 0x58
 8104c60:	46bd      	mov	sp, r7
 8104c62:	bd80      	pop	{r7, pc}

08104c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8104c64:	b580      	push	{r7, lr}
 8104c66:	b084      	sub	sp, #16
 8104c68:	af00      	add	r7, sp, #0
 8104c6a:	60f8      	str	r0, [r7, #12]
 8104c6c:	60b9      	str	r1, [r7, #8]
 8104c6e:	603b      	str	r3, [r7, #0]
 8104c70:	4613      	mov	r3, r2
 8104c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104c74:	e04f      	b.n	8104d16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104c76:	69bb      	ldr	r3, [r7, #24]
 8104c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8104c7c:	d04b      	beq.n	8104d16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104c7e:	f7fc f985 	bl	8100f8c <HAL_GetTick>
 8104c82:	4602      	mov	r2, r0
 8104c84:	683b      	ldr	r3, [r7, #0]
 8104c86:	1ad3      	subs	r3, r2, r3
 8104c88:	69ba      	ldr	r2, [r7, #24]
 8104c8a:	429a      	cmp	r2, r3
 8104c8c:	d302      	bcc.n	8104c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8104c8e:	69bb      	ldr	r3, [r7, #24]
 8104c90:	2b00      	cmp	r3, #0
 8104c92:	d101      	bne.n	8104c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8104c94:	2303      	movs	r3, #3
 8104c96:	e04e      	b.n	8104d36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8104c98:	68fb      	ldr	r3, [r7, #12]
 8104c9a:	681b      	ldr	r3, [r3, #0]
 8104c9c:	681b      	ldr	r3, [r3, #0]
 8104c9e:	f003 0304 	and.w	r3, r3, #4
 8104ca2:	2b00      	cmp	r3, #0
 8104ca4:	d037      	beq.n	8104d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8104ca6:	68bb      	ldr	r3, [r7, #8]
 8104ca8:	2b80      	cmp	r3, #128	@ 0x80
 8104caa:	d034      	beq.n	8104d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8104cac:	68bb      	ldr	r3, [r7, #8]
 8104cae:	2b40      	cmp	r3, #64	@ 0x40
 8104cb0:	d031      	beq.n	8104d16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8104cb2:	68fb      	ldr	r3, [r7, #12]
 8104cb4:	681b      	ldr	r3, [r3, #0]
 8104cb6:	69db      	ldr	r3, [r3, #28]
 8104cb8:	f003 0308 	and.w	r3, r3, #8
 8104cbc:	2b08      	cmp	r3, #8
 8104cbe:	d110      	bne.n	8104ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104cc0:	68fb      	ldr	r3, [r7, #12]
 8104cc2:	681b      	ldr	r3, [r3, #0]
 8104cc4:	2208      	movs	r2, #8
 8104cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104cc8:	68f8      	ldr	r0, [r7, #12]
 8104cca:	f000 f838 	bl	8104d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8104cce:	68fb      	ldr	r3, [r7, #12]
 8104cd0:	2208      	movs	r2, #8
 8104cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104cd6:	68fb      	ldr	r3, [r7, #12]
 8104cd8:	2200      	movs	r2, #0
 8104cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8104cde:	2301      	movs	r3, #1
 8104ce0:	e029      	b.n	8104d36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	681b      	ldr	r3, [r3, #0]
 8104ce6:	69db      	ldr	r3, [r3, #28]
 8104ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104cf0:	d111      	bne.n	8104d16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8104cf2:	68fb      	ldr	r3, [r7, #12]
 8104cf4:	681b      	ldr	r3, [r3, #0]
 8104cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8104cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104cfc:	68f8      	ldr	r0, [r7, #12]
 8104cfe:	f000 f81e 	bl	8104d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8104d02:	68fb      	ldr	r3, [r7, #12]
 8104d04:	2220      	movs	r2, #32
 8104d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104d0a:	68fb      	ldr	r3, [r7, #12]
 8104d0c:	2200      	movs	r2, #0
 8104d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8104d12:	2303      	movs	r3, #3
 8104d14:	e00f      	b.n	8104d36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104d16:	68fb      	ldr	r3, [r7, #12]
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	69da      	ldr	r2, [r3, #28]
 8104d1c:	68bb      	ldr	r3, [r7, #8]
 8104d1e:	4013      	ands	r3, r2
 8104d20:	68ba      	ldr	r2, [r7, #8]
 8104d22:	429a      	cmp	r2, r3
 8104d24:	bf0c      	ite	eq
 8104d26:	2301      	moveq	r3, #1
 8104d28:	2300      	movne	r3, #0
 8104d2a:	b2db      	uxtb	r3, r3
 8104d2c:	461a      	mov	r2, r3
 8104d2e:	79fb      	ldrb	r3, [r7, #7]
 8104d30:	429a      	cmp	r2, r3
 8104d32:	d0a0      	beq.n	8104c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8104d34:	2300      	movs	r3, #0
}
 8104d36:	4618      	mov	r0, r3
 8104d38:	3710      	adds	r7, #16
 8104d3a:	46bd      	mov	sp, r7
 8104d3c:	bd80      	pop	{r7, pc}

08104d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8104d3e:	b480      	push	{r7}
 8104d40:	b095      	sub	sp, #84	@ 0x54
 8104d42:	af00      	add	r7, sp, #0
 8104d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8104d46:	687b      	ldr	r3, [r7, #4]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104d4e:	e853 3f00 	ldrex	r3, [r3]
 8104d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8104d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8104d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	681b      	ldr	r3, [r3, #0]
 8104d60:	461a      	mov	r2, r3
 8104d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8104d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8104d66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8104d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8104d6c:	e841 2300 	strex	r3, r2, [r1]
 8104d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8104d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8104d74:	2b00      	cmp	r3, #0
 8104d76:	d1e6      	bne.n	8104d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	681b      	ldr	r3, [r3, #0]
 8104d7c:	3308      	adds	r3, #8
 8104d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104d80:	6a3b      	ldr	r3, [r7, #32]
 8104d82:	e853 3f00 	ldrex	r3, [r3]
 8104d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8104d88:	69fb      	ldr	r3, [r7, #28]
 8104d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104d8e:	f023 0301 	bic.w	r3, r3, #1
 8104d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	3308      	adds	r3, #8
 8104d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8104d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8104d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8104da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104da4:	e841 2300 	strex	r3, r2, [r1]
 8104da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8104daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104dac:	2b00      	cmp	r3, #0
 8104dae:	d1e3      	bne.n	8104d78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104db4:	2b01      	cmp	r3, #1
 8104db6:	d118      	bne.n	8104dea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104dbe:	68fb      	ldr	r3, [r7, #12]
 8104dc0:	e853 3f00 	ldrex	r3, [r3]
 8104dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8104dc6:	68bb      	ldr	r3, [r7, #8]
 8104dc8:	f023 0310 	bic.w	r3, r3, #16
 8104dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8104dce:	687b      	ldr	r3, [r7, #4]
 8104dd0:	681b      	ldr	r3, [r3, #0]
 8104dd2:	461a      	mov	r2, r3
 8104dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8104dd6:	61bb      	str	r3, [r7, #24]
 8104dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104dda:	6979      	ldr	r1, [r7, #20]
 8104ddc:	69ba      	ldr	r2, [r7, #24]
 8104dde:	e841 2300 	strex	r3, r2, [r1]
 8104de2:	613b      	str	r3, [r7, #16]
   return(result);
 8104de4:	693b      	ldr	r3, [r7, #16]
 8104de6:	2b00      	cmp	r3, #0
 8104de8:	d1e6      	bne.n	8104db8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	2220      	movs	r2, #32
 8104dee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	2200      	movs	r2, #0
 8104df6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	2200      	movs	r2, #0
 8104dfc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8104dfe:	bf00      	nop
 8104e00:	3754      	adds	r7, #84	@ 0x54
 8104e02:	46bd      	mov	sp, r7
 8104e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e08:	4770      	bx	lr

08104e0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8104e0a:	b480      	push	{r7}
 8104e0c:	b085      	sub	sp, #20
 8104e0e:	af00      	add	r7, sp, #0
 8104e10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104e12:	687b      	ldr	r3, [r7, #4]
 8104e14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104e18:	2b01      	cmp	r3, #1
 8104e1a:	d101      	bne.n	8104e20 <HAL_UARTEx_DisableFifoMode+0x16>
 8104e1c:	2302      	movs	r3, #2
 8104e1e:	e027      	b.n	8104e70 <HAL_UARTEx_DisableFifoMode+0x66>
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	2201      	movs	r2, #1
 8104e24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	2224      	movs	r2, #36	@ 0x24
 8104e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	681b      	ldr	r3, [r3, #0]
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104e38:	687b      	ldr	r3, [r7, #4]
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	681a      	ldr	r2, [r3, #0]
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	681b      	ldr	r3, [r3, #0]
 8104e42:	f022 0201 	bic.w	r2, r2, #1
 8104e46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8104e48:	68fb      	ldr	r3, [r7, #12]
 8104e4a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8104e4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8104e50:	687b      	ldr	r3, [r7, #4]
 8104e52:	2200      	movs	r2, #0
 8104e54:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	681b      	ldr	r3, [r3, #0]
 8104e5a:	68fa      	ldr	r2, [r7, #12]
 8104e5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	2220      	movs	r2, #32
 8104e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	2200      	movs	r2, #0
 8104e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104e6e:	2300      	movs	r3, #0
}
 8104e70:	4618      	mov	r0, r3
 8104e72:	3714      	adds	r7, #20
 8104e74:	46bd      	mov	sp, r7
 8104e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e7a:	4770      	bx	lr

08104e7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104e7c:	b580      	push	{r7, lr}
 8104e7e:	b084      	sub	sp, #16
 8104e80:	af00      	add	r7, sp, #0
 8104e82:	6078      	str	r0, [r7, #4]
 8104e84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104e8c:	2b01      	cmp	r3, #1
 8104e8e:	d101      	bne.n	8104e94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8104e90:	2302      	movs	r3, #2
 8104e92:	e02d      	b.n	8104ef0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	2201      	movs	r2, #1
 8104e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	2224      	movs	r2, #36	@ 0x24
 8104ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	681b      	ldr	r3, [r3, #0]
 8104eaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	681a      	ldr	r2, [r3, #0]
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	681b      	ldr	r3, [r3, #0]
 8104eb6:	f022 0201 	bic.w	r2, r2, #1
 8104eba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104ebc:	687b      	ldr	r3, [r7, #4]
 8104ebe:	681b      	ldr	r3, [r3, #0]
 8104ec0:	689b      	ldr	r3, [r3, #8]
 8104ec2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8104ec6:	687b      	ldr	r3, [r7, #4]
 8104ec8:	681b      	ldr	r3, [r3, #0]
 8104eca:	683a      	ldr	r2, [r7, #0]
 8104ecc:	430a      	orrs	r2, r1
 8104ece:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104ed0:	6878      	ldr	r0, [r7, #4]
 8104ed2:	f000 f84f 	bl	8104f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	68fa      	ldr	r2, [r7, #12]
 8104edc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104ede:	687b      	ldr	r3, [r7, #4]
 8104ee0:	2220      	movs	r2, #32
 8104ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	2200      	movs	r2, #0
 8104eea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104eee:	2300      	movs	r3, #0
}
 8104ef0:	4618      	mov	r0, r3
 8104ef2:	3710      	adds	r7, #16
 8104ef4:	46bd      	mov	sp, r7
 8104ef6:	bd80      	pop	{r7, pc}

08104ef8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104ef8:	b580      	push	{r7, lr}
 8104efa:	b084      	sub	sp, #16
 8104efc:	af00      	add	r7, sp, #0
 8104efe:	6078      	str	r0, [r7, #4]
 8104f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104f08:	2b01      	cmp	r3, #1
 8104f0a:	d101      	bne.n	8104f10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8104f0c:	2302      	movs	r3, #2
 8104f0e:	e02d      	b.n	8104f6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8104f10:	687b      	ldr	r3, [r7, #4]
 8104f12:	2201      	movs	r2, #1
 8104f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104f18:	687b      	ldr	r3, [r7, #4]
 8104f1a:	2224      	movs	r2, #36	@ 0x24
 8104f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104f20:	687b      	ldr	r3, [r7, #4]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104f28:	687b      	ldr	r3, [r7, #4]
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	681a      	ldr	r2, [r3, #0]
 8104f2e:	687b      	ldr	r3, [r7, #4]
 8104f30:	681b      	ldr	r3, [r3, #0]
 8104f32:	f022 0201 	bic.w	r2, r2, #1
 8104f36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8104f38:	687b      	ldr	r3, [r7, #4]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	689b      	ldr	r3, [r3, #8]
 8104f3e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	683a      	ldr	r2, [r7, #0]
 8104f48:	430a      	orrs	r2, r1
 8104f4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104f4c:	6878      	ldr	r0, [r7, #4]
 8104f4e:	f000 f811 	bl	8104f74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	68fa      	ldr	r2, [r7, #12]
 8104f58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	2220      	movs	r2, #32
 8104f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8104f62:	687b      	ldr	r3, [r7, #4]
 8104f64:	2200      	movs	r2, #0
 8104f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104f6a:	2300      	movs	r3, #0
}
 8104f6c:	4618      	mov	r0, r3
 8104f6e:	3710      	adds	r7, #16
 8104f70:	46bd      	mov	sp, r7
 8104f72:	bd80      	pop	{r7, pc}

08104f74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8104f74:	b480      	push	{r7}
 8104f76:	b085      	sub	sp, #20
 8104f78:	af00      	add	r7, sp, #0
 8104f7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8104f7c:	687b      	ldr	r3, [r7, #4]
 8104f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f80:	2b00      	cmp	r3, #0
 8104f82:	d108      	bne.n	8104f96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	2201      	movs	r2, #1
 8104f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8104f8c:	687b      	ldr	r3, [r7, #4]
 8104f8e:	2201      	movs	r2, #1
 8104f90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8104f94:	e031      	b.n	8104ffa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8104f96:	2310      	movs	r3, #16
 8104f98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8104f9a:	2310      	movs	r3, #16
 8104f9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	689b      	ldr	r3, [r3, #8]
 8104fa4:	0e5b      	lsrs	r3, r3, #25
 8104fa6:	b2db      	uxtb	r3, r3
 8104fa8:	f003 0307 	and.w	r3, r3, #7
 8104fac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	681b      	ldr	r3, [r3, #0]
 8104fb2:	689b      	ldr	r3, [r3, #8]
 8104fb4:	0f5b      	lsrs	r3, r3, #29
 8104fb6:	b2db      	uxtb	r3, r3
 8104fb8:	f003 0307 	and.w	r3, r3, #7
 8104fbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104fbe:	7bbb      	ldrb	r3, [r7, #14]
 8104fc0:	7b3a      	ldrb	r2, [r7, #12]
 8104fc2:	4911      	ldr	r1, [pc, #68]	@ (8105008 <UARTEx_SetNbDataToProcess+0x94>)
 8104fc4:	5c8a      	ldrb	r2, [r1, r2]
 8104fc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8104fca:	7b3a      	ldrb	r2, [r7, #12]
 8104fcc:	490f      	ldr	r1, [pc, #60]	@ (810500c <UARTEx_SetNbDataToProcess+0x98>)
 8104fce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104fd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8104fd4:	b29a      	uxth	r2, r3
 8104fd6:	687b      	ldr	r3, [r7, #4]
 8104fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104fdc:	7bfb      	ldrb	r3, [r7, #15]
 8104fde:	7b7a      	ldrb	r2, [r7, #13]
 8104fe0:	4909      	ldr	r1, [pc, #36]	@ (8105008 <UARTEx_SetNbDataToProcess+0x94>)
 8104fe2:	5c8a      	ldrb	r2, [r1, r2]
 8104fe4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8104fe8:	7b7a      	ldrb	r2, [r7, #13]
 8104fea:	4908      	ldr	r1, [pc, #32]	@ (810500c <UARTEx_SetNbDataToProcess+0x98>)
 8104fec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104fee:	fb93 f3f2 	sdiv	r3, r3, r2
 8104ff2:	b29a      	uxth	r2, r3
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8104ffa:	bf00      	nop
 8104ffc:	3714      	adds	r7, #20
 8104ffe:	46bd      	mov	sp, r7
 8105000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105004:	4770      	bx	lr
 8105006:	bf00      	nop
 8105008:	0810c244 	.word	0x0810c244
 810500c:	0810c24c 	.word	0x0810c24c

08105010 <__NVIC_SetPriority>:
{
 8105010:	b480      	push	{r7}
 8105012:	b083      	sub	sp, #12
 8105014:	af00      	add	r7, sp, #0
 8105016:	4603      	mov	r3, r0
 8105018:	6039      	str	r1, [r7, #0]
 810501a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810501c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105020:	2b00      	cmp	r3, #0
 8105022:	db0a      	blt.n	810503a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8105024:	683b      	ldr	r3, [r7, #0]
 8105026:	b2da      	uxtb	r2, r3
 8105028:	490c      	ldr	r1, [pc, #48]	@ (810505c <__NVIC_SetPriority+0x4c>)
 810502a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810502e:	0112      	lsls	r2, r2, #4
 8105030:	b2d2      	uxtb	r2, r2
 8105032:	440b      	add	r3, r1
 8105034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8105038:	e00a      	b.n	8105050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810503a:	683b      	ldr	r3, [r7, #0]
 810503c:	b2da      	uxtb	r2, r3
 810503e:	4908      	ldr	r1, [pc, #32]	@ (8105060 <__NVIC_SetPriority+0x50>)
 8105040:	88fb      	ldrh	r3, [r7, #6]
 8105042:	f003 030f 	and.w	r3, r3, #15
 8105046:	3b04      	subs	r3, #4
 8105048:	0112      	lsls	r2, r2, #4
 810504a:	b2d2      	uxtb	r2, r2
 810504c:	440b      	add	r3, r1
 810504e:	761a      	strb	r2, [r3, #24]
}
 8105050:	bf00      	nop
 8105052:	370c      	adds	r7, #12
 8105054:	46bd      	mov	sp, r7
 8105056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810505a:	4770      	bx	lr
 810505c:	e000e100 	.word	0xe000e100
 8105060:	e000ed00 	.word	0xe000ed00

08105064 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8105064:	b580      	push	{r7, lr}
 8105066:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8105068:	4b05      	ldr	r3, [pc, #20]	@ (8105080 <SysTick_Handler+0x1c>)
 810506a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810506c:	f002 fdac 	bl	8107bc8 <xTaskGetSchedulerState>
 8105070:	4603      	mov	r3, r0
 8105072:	2b01      	cmp	r3, #1
 8105074:	d001      	beq.n	810507a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8105076:	f000 febf 	bl	8105df8 <xPortSysTickHandler>
  }
}
 810507a:	bf00      	nop
 810507c:	bd80      	pop	{r7, pc}
 810507e:	bf00      	nop
 8105080:	e000e010 	.word	0xe000e010

08105084 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8105084:	b580      	push	{r7, lr}
 8105086:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8105088:	2100      	movs	r1, #0
 810508a:	f06f 0004 	mvn.w	r0, #4
 810508e:	f7ff ffbf 	bl	8105010 <__NVIC_SetPriority>
#endif
}
 8105092:	bf00      	nop
 8105094:	bd80      	pop	{r7, pc}
	...

08105098 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8105098:	b480      	push	{r7}
 810509a:	b083      	sub	sp, #12
 810509c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810509e:	f3ef 8305 	mrs	r3, IPSR
 81050a2:	603b      	str	r3, [r7, #0]
  return(result);
 81050a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81050a6:	2b00      	cmp	r3, #0
 81050a8:	d003      	beq.n	81050b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 81050aa:	f06f 0305 	mvn.w	r3, #5
 81050ae:	607b      	str	r3, [r7, #4]
 81050b0:	e00c      	b.n	81050cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 81050b2:	4b0a      	ldr	r3, [pc, #40]	@ (81050dc <osKernelInitialize+0x44>)
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	2b00      	cmp	r3, #0
 81050b8:	d105      	bne.n	81050c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81050ba:	4b08      	ldr	r3, [pc, #32]	@ (81050dc <osKernelInitialize+0x44>)
 81050bc:	2201      	movs	r2, #1
 81050be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81050c0:	2300      	movs	r3, #0
 81050c2:	607b      	str	r3, [r7, #4]
 81050c4:	e002      	b.n	81050cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 81050c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 81050ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 81050cc:	687b      	ldr	r3, [r7, #4]
}
 81050ce:	4618      	mov	r0, r3
 81050d0:	370c      	adds	r7, #12
 81050d2:	46bd      	mov	sp, r7
 81050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050d8:	4770      	bx	lr
 81050da:	bf00      	nop
 81050dc:	1000026c 	.word	0x1000026c

081050e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 81050e0:	b580      	push	{r7, lr}
 81050e2:	b082      	sub	sp, #8
 81050e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81050e6:	f3ef 8305 	mrs	r3, IPSR
 81050ea:	603b      	str	r3, [r7, #0]
  return(result);
 81050ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 81050ee:	2b00      	cmp	r3, #0
 81050f0:	d003      	beq.n	81050fa <osKernelStart+0x1a>
    stat = osErrorISR;
 81050f2:	f06f 0305 	mvn.w	r3, #5
 81050f6:	607b      	str	r3, [r7, #4]
 81050f8:	e010      	b.n	810511c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 81050fa:	4b0b      	ldr	r3, [pc, #44]	@ (8105128 <osKernelStart+0x48>)
 81050fc:	681b      	ldr	r3, [r3, #0]
 81050fe:	2b01      	cmp	r3, #1
 8105100:	d109      	bne.n	8105116 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8105102:	f7ff ffbf 	bl	8105084 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8105106:	4b08      	ldr	r3, [pc, #32]	@ (8105128 <osKernelStart+0x48>)
 8105108:	2202      	movs	r2, #2
 810510a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810510c:	f002 f90e 	bl	810732c <vTaskStartScheduler>
      stat = osOK;
 8105110:	2300      	movs	r3, #0
 8105112:	607b      	str	r3, [r7, #4]
 8105114:	e002      	b.n	810511c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8105116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810511a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810511c:	687b      	ldr	r3, [r7, #4]
}
 810511e:	4618      	mov	r0, r3
 8105120:	3708      	adds	r7, #8
 8105122:	46bd      	mov	sp, r7
 8105124:	bd80      	pop	{r7, pc}
 8105126:	bf00      	nop
 8105128:	1000026c 	.word	0x1000026c

0810512c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810512c:	b580      	push	{r7, lr}
 810512e:	b08e      	sub	sp, #56	@ 0x38
 8105130:	af04      	add	r7, sp, #16
 8105132:	60f8      	str	r0, [r7, #12]
 8105134:	60b9      	str	r1, [r7, #8]
 8105136:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8105138:	2300      	movs	r3, #0
 810513a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810513c:	f3ef 8305 	mrs	r3, IPSR
 8105140:	617b      	str	r3, [r7, #20]
  return(result);
 8105142:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8105144:	2b00      	cmp	r3, #0
 8105146:	d17e      	bne.n	8105246 <osThreadNew+0x11a>
 8105148:	68fb      	ldr	r3, [r7, #12]
 810514a:	2b00      	cmp	r3, #0
 810514c:	d07b      	beq.n	8105246 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810514e:	2380      	movs	r3, #128	@ 0x80
 8105150:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8105152:	2318      	movs	r3, #24
 8105154:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8105156:	2300      	movs	r3, #0
 8105158:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810515a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810515e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	2b00      	cmp	r3, #0
 8105164:	d045      	beq.n	81051f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	2b00      	cmp	r3, #0
 810516c:	d002      	beq.n	8105174 <osThreadNew+0x48>
        name = attr->name;
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	699b      	ldr	r3, [r3, #24]
 8105178:	2b00      	cmp	r3, #0
 810517a:	d002      	beq.n	8105182 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	699b      	ldr	r3, [r3, #24]
 8105180:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8105182:	69fb      	ldr	r3, [r7, #28]
 8105184:	2b00      	cmp	r3, #0
 8105186:	d008      	beq.n	810519a <osThreadNew+0x6e>
 8105188:	69fb      	ldr	r3, [r7, #28]
 810518a:	2b38      	cmp	r3, #56	@ 0x38
 810518c:	d805      	bhi.n	810519a <osThreadNew+0x6e>
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	685b      	ldr	r3, [r3, #4]
 8105192:	f003 0301 	and.w	r3, r3, #1
 8105196:	2b00      	cmp	r3, #0
 8105198:	d001      	beq.n	810519e <osThreadNew+0x72>
        return (NULL);
 810519a:	2300      	movs	r3, #0
 810519c:	e054      	b.n	8105248 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810519e:	687b      	ldr	r3, [r7, #4]
 81051a0:	695b      	ldr	r3, [r3, #20]
 81051a2:	2b00      	cmp	r3, #0
 81051a4:	d003      	beq.n	81051ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 81051a6:	687b      	ldr	r3, [r7, #4]
 81051a8:	695b      	ldr	r3, [r3, #20]
 81051aa:	089b      	lsrs	r3, r3, #2
 81051ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	689b      	ldr	r3, [r3, #8]
 81051b2:	2b00      	cmp	r3, #0
 81051b4:	d00e      	beq.n	81051d4 <osThreadNew+0xa8>
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	68db      	ldr	r3, [r3, #12]
 81051ba:	2b5b      	cmp	r3, #91	@ 0x5b
 81051bc:	d90a      	bls.n	81051d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81051c2:	2b00      	cmp	r3, #0
 81051c4:	d006      	beq.n	81051d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81051c6:	687b      	ldr	r3, [r7, #4]
 81051c8:	695b      	ldr	r3, [r3, #20]
 81051ca:	2b00      	cmp	r3, #0
 81051cc:	d002      	beq.n	81051d4 <osThreadNew+0xa8>
        mem = 1;
 81051ce:	2301      	movs	r3, #1
 81051d0:	61bb      	str	r3, [r7, #24]
 81051d2:	e010      	b.n	81051f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	689b      	ldr	r3, [r3, #8]
 81051d8:	2b00      	cmp	r3, #0
 81051da:	d10c      	bne.n	81051f6 <osThreadNew+0xca>
 81051dc:	687b      	ldr	r3, [r7, #4]
 81051de:	68db      	ldr	r3, [r3, #12]
 81051e0:	2b00      	cmp	r3, #0
 81051e2:	d108      	bne.n	81051f6 <osThreadNew+0xca>
 81051e4:	687b      	ldr	r3, [r7, #4]
 81051e6:	691b      	ldr	r3, [r3, #16]
 81051e8:	2b00      	cmp	r3, #0
 81051ea:	d104      	bne.n	81051f6 <osThreadNew+0xca>
          mem = 0;
 81051ec:	2300      	movs	r3, #0
 81051ee:	61bb      	str	r3, [r7, #24]
 81051f0:	e001      	b.n	81051f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 81051f2:	2300      	movs	r3, #0
 81051f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 81051f6:	69bb      	ldr	r3, [r7, #24]
 81051f8:	2b01      	cmp	r3, #1
 81051fa:	d110      	bne.n	810521e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8105200:	687a      	ldr	r2, [r7, #4]
 8105202:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105204:	9202      	str	r2, [sp, #8]
 8105206:	9301      	str	r3, [sp, #4]
 8105208:	69fb      	ldr	r3, [r7, #28]
 810520a:	9300      	str	r3, [sp, #0]
 810520c:	68bb      	ldr	r3, [r7, #8]
 810520e:	6a3a      	ldr	r2, [r7, #32]
 8105210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8105212:	68f8      	ldr	r0, [r7, #12]
 8105214:	f001 feae 	bl	8106f74 <xTaskCreateStatic>
 8105218:	4603      	mov	r3, r0
 810521a:	613b      	str	r3, [r7, #16]
 810521c:	e013      	b.n	8105246 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810521e:	69bb      	ldr	r3, [r7, #24]
 8105220:	2b00      	cmp	r3, #0
 8105222:	d110      	bne.n	8105246 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8105224:	6a3b      	ldr	r3, [r7, #32]
 8105226:	b29a      	uxth	r2, r3
 8105228:	f107 0310 	add.w	r3, r7, #16
 810522c:	9301      	str	r3, [sp, #4]
 810522e:	69fb      	ldr	r3, [r7, #28]
 8105230:	9300      	str	r3, [sp, #0]
 8105232:	68bb      	ldr	r3, [r7, #8]
 8105234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8105236:	68f8      	ldr	r0, [r7, #12]
 8105238:	f001 fefc 	bl	8107034 <xTaskCreate>
 810523c:	4603      	mov	r3, r0
 810523e:	2b01      	cmp	r3, #1
 8105240:	d001      	beq.n	8105246 <osThreadNew+0x11a>
            hTask = NULL;
 8105242:	2300      	movs	r3, #0
 8105244:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8105246:	693b      	ldr	r3, [r7, #16]
}
 8105248:	4618      	mov	r0, r3
 810524a:	3728      	adds	r7, #40	@ 0x28
 810524c:	46bd      	mov	sp, r7
 810524e:	bd80      	pop	{r7, pc}

08105250 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8105250:	b580      	push	{r7, lr}
 8105252:	b084      	sub	sp, #16
 8105254:	af00      	add	r7, sp, #0
 8105256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105258:	f3ef 8305 	mrs	r3, IPSR
 810525c:	60bb      	str	r3, [r7, #8]
  return(result);
 810525e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105260:	2b00      	cmp	r3, #0
 8105262:	d003      	beq.n	810526c <osDelay+0x1c>
    stat = osErrorISR;
 8105264:	f06f 0305 	mvn.w	r3, #5
 8105268:	60fb      	str	r3, [r7, #12]
 810526a:	e007      	b.n	810527c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810526c:	2300      	movs	r3, #0
 810526e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	2b00      	cmp	r3, #0
 8105274:	d002      	beq.n	810527c <osDelay+0x2c>
      vTaskDelay(ticks);
 8105276:	6878      	ldr	r0, [r7, #4]
 8105278:	f002 f822 	bl	81072c0 <vTaskDelay>
    }
  }

  return (stat);
 810527c:	68fb      	ldr	r3, [r7, #12]
}
 810527e:	4618      	mov	r0, r3
 8105280:	3710      	adds	r7, #16
 8105282:	46bd      	mov	sp, r7
 8105284:	bd80      	pop	{r7, pc}

08105286 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8105286:	b580      	push	{r7, lr}
 8105288:	b08a      	sub	sp, #40	@ 0x28
 810528a:	af02      	add	r7, sp, #8
 810528c:	60f8      	str	r0, [r7, #12]
 810528e:	60b9      	str	r1, [r7, #8]
 8105290:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8105292:	2300      	movs	r3, #0
 8105294:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105296:	f3ef 8305 	mrs	r3, IPSR
 810529a:	613b      	str	r3, [r7, #16]
  return(result);
 810529c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 810529e:	2b00      	cmp	r3, #0
 81052a0:	d175      	bne.n	810538e <osSemaphoreNew+0x108>
 81052a2:	68fb      	ldr	r3, [r7, #12]
 81052a4:	2b00      	cmp	r3, #0
 81052a6:	d072      	beq.n	810538e <osSemaphoreNew+0x108>
 81052a8:	68ba      	ldr	r2, [r7, #8]
 81052aa:	68fb      	ldr	r3, [r7, #12]
 81052ac:	429a      	cmp	r2, r3
 81052ae:	d86e      	bhi.n	810538e <osSemaphoreNew+0x108>
    mem = -1;
 81052b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 81052b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	2b00      	cmp	r3, #0
 81052ba:	d015      	beq.n	81052e8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	689b      	ldr	r3, [r3, #8]
 81052c0:	2b00      	cmp	r3, #0
 81052c2:	d006      	beq.n	81052d2 <osSemaphoreNew+0x4c>
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	68db      	ldr	r3, [r3, #12]
 81052c8:	2b4f      	cmp	r3, #79	@ 0x4f
 81052ca:	d902      	bls.n	81052d2 <osSemaphoreNew+0x4c>
        mem = 1;
 81052cc:	2301      	movs	r3, #1
 81052ce:	61bb      	str	r3, [r7, #24]
 81052d0:	e00c      	b.n	81052ec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	689b      	ldr	r3, [r3, #8]
 81052d6:	2b00      	cmp	r3, #0
 81052d8:	d108      	bne.n	81052ec <osSemaphoreNew+0x66>
 81052da:	687b      	ldr	r3, [r7, #4]
 81052dc:	68db      	ldr	r3, [r3, #12]
 81052de:	2b00      	cmp	r3, #0
 81052e0:	d104      	bne.n	81052ec <osSemaphoreNew+0x66>
          mem = 0;
 81052e2:	2300      	movs	r3, #0
 81052e4:	61bb      	str	r3, [r7, #24]
 81052e6:	e001      	b.n	81052ec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 81052e8:	2300      	movs	r3, #0
 81052ea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 81052ec:	69bb      	ldr	r3, [r7, #24]
 81052ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81052f2:	d04c      	beq.n	810538e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 81052f4:	68fb      	ldr	r3, [r7, #12]
 81052f6:	2b01      	cmp	r3, #1
 81052f8:	d128      	bne.n	810534c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 81052fa:	69bb      	ldr	r3, [r7, #24]
 81052fc:	2b01      	cmp	r3, #1
 81052fe:	d10a      	bne.n	8105316 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	689b      	ldr	r3, [r3, #8]
 8105304:	2203      	movs	r2, #3
 8105306:	9200      	str	r2, [sp, #0]
 8105308:	2200      	movs	r2, #0
 810530a:	2100      	movs	r1, #0
 810530c:	2001      	movs	r0, #1
 810530e:	f000 fe6f 	bl	8105ff0 <xQueueGenericCreateStatic>
 8105312:	61f8      	str	r0, [r7, #28]
 8105314:	e005      	b.n	8105322 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8105316:	2203      	movs	r2, #3
 8105318:	2100      	movs	r1, #0
 810531a:	2001      	movs	r0, #1
 810531c:	f000 fee5 	bl	81060ea <xQueueGenericCreate>
 8105320:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8105322:	69fb      	ldr	r3, [r7, #28]
 8105324:	2b00      	cmp	r3, #0
 8105326:	d022      	beq.n	810536e <osSemaphoreNew+0xe8>
 8105328:	68bb      	ldr	r3, [r7, #8]
 810532a:	2b00      	cmp	r3, #0
 810532c:	d01f      	beq.n	810536e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810532e:	2300      	movs	r3, #0
 8105330:	2200      	movs	r2, #0
 8105332:	2100      	movs	r1, #0
 8105334:	69f8      	ldr	r0, [r7, #28]
 8105336:	f000 ffa5 	bl	8106284 <xQueueGenericSend>
 810533a:	4603      	mov	r3, r0
 810533c:	2b01      	cmp	r3, #1
 810533e:	d016      	beq.n	810536e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8105340:	69f8      	ldr	r0, [r7, #28]
 8105342:	f001 fc43 	bl	8106bcc <vQueueDelete>
            hSemaphore = NULL;
 8105346:	2300      	movs	r3, #0
 8105348:	61fb      	str	r3, [r7, #28]
 810534a:	e010      	b.n	810536e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 810534c:	69bb      	ldr	r3, [r7, #24]
 810534e:	2b01      	cmp	r3, #1
 8105350:	d108      	bne.n	8105364 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	689b      	ldr	r3, [r3, #8]
 8105356:	461a      	mov	r2, r3
 8105358:	68b9      	ldr	r1, [r7, #8]
 810535a:	68f8      	ldr	r0, [r7, #12]
 810535c:	f000 ff23 	bl	81061a6 <xQueueCreateCountingSemaphoreStatic>
 8105360:	61f8      	str	r0, [r7, #28]
 8105362:	e004      	b.n	810536e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8105364:	68b9      	ldr	r1, [r7, #8]
 8105366:	68f8      	ldr	r0, [r7, #12]
 8105368:	f000 ff56 	bl	8106218 <xQueueCreateCountingSemaphore>
 810536c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 810536e:	69fb      	ldr	r3, [r7, #28]
 8105370:	2b00      	cmp	r3, #0
 8105372:	d00c      	beq.n	810538e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	2b00      	cmp	r3, #0
 8105378:	d003      	beq.n	8105382 <osSemaphoreNew+0xfc>
          name = attr->name;
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	617b      	str	r3, [r7, #20]
 8105380:	e001      	b.n	8105386 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8105382:	2300      	movs	r3, #0
 8105384:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8105386:	6979      	ldr	r1, [r7, #20]
 8105388:	69f8      	ldr	r0, [r7, #28]
 810538a:	f001 fd6b 	bl	8106e64 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 810538e:	69fb      	ldr	r3, [r7, #28]
}
 8105390:	4618      	mov	r0, r3
 8105392:	3720      	adds	r7, #32
 8105394:	46bd      	mov	sp, r7
 8105396:	bd80      	pop	{r7, pc}

08105398 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8105398:	b580      	push	{r7, lr}
 810539a:	b086      	sub	sp, #24
 810539c:	af00      	add	r7, sp, #0
 810539e:	6078      	str	r0, [r7, #4]
 81053a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 81053a6:	2300      	movs	r3, #0
 81053a8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 81053aa:	693b      	ldr	r3, [r7, #16]
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	d103      	bne.n	81053b8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 81053b0:	f06f 0303 	mvn.w	r3, #3
 81053b4:	617b      	str	r3, [r7, #20]
 81053b6:	e039      	b.n	810542c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81053b8:	f3ef 8305 	mrs	r3, IPSR
 81053bc:	60fb      	str	r3, [r7, #12]
  return(result);
 81053be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d022      	beq.n	810540a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 81053c4:	683b      	ldr	r3, [r7, #0]
 81053c6:	2b00      	cmp	r3, #0
 81053c8:	d003      	beq.n	81053d2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 81053ca:	f06f 0303 	mvn.w	r3, #3
 81053ce:	617b      	str	r3, [r7, #20]
 81053d0:	e02c      	b.n	810542c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 81053d2:	2300      	movs	r3, #0
 81053d4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 81053d6:	f107 0308 	add.w	r3, r7, #8
 81053da:	461a      	mov	r2, r3
 81053dc:	2100      	movs	r1, #0
 81053de:	6938      	ldr	r0, [r7, #16]
 81053e0:	f001 fb72 	bl	8106ac8 <xQueueReceiveFromISR>
 81053e4:	4603      	mov	r3, r0
 81053e6:	2b01      	cmp	r3, #1
 81053e8:	d003      	beq.n	81053f2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 81053ea:	f06f 0302 	mvn.w	r3, #2
 81053ee:	617b      	str	r3, [r7, #20]
 81053f0:	e01c      	b.n	810542c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 81053f2:	68bb      	ldr	r3, [r7, #8]
 81053f4:	2b00      	cmp	r3, #0
 81053f6:	d019      	beq.n	810542c <osSemaphoreAcquire+0x94>
 81053f8:	4b0f      	ldr	r3, [pc, #60]	@ (8105438 <osSemaphoreAcquire+0xa0>)
 81053fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81053fe:	601a      	str	r2, [r3, #0]
 8105400:	f3bf 8f4f 	dsb	sy
 8105404:	f3bf 8f6f 	isb	sy
 8105408:	e010      	b.n	810542c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 810540a:	6839      	ldr	r1, [r7, #0]
 810540c:	6938      	ldr	r0, [r7, #16]
 810540e:	f001 fa4b 	bl	81068a8 <xQueueSemaphoreTake>
 8105412:	4603      	mov	r3, r0
 8105414:	2b01      	cmp	r3, #1
 8105416:	d009      	beq.n	810542c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8105418:	683b      	ldr	r3, [r7, #0]
 810541a:	2b00      	cmp	r3, #0
 810541c:	d003      	beq.n	8105426 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 810541e:	f06f 0301 	mvn.w	r3, #1
 8105422:	617b      	str	r3, [r7, #20]
 8105424:	e002      	b.n	810542c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8105426:	f06f 0302 	mvn.w	r3, #2
 810542a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810542c:	697b      	ldr	r3, [r7, #20]
}
 810542e:	4618      	mov	r0, r3
 8105430:	3718      	adds	r7, #24
 8105432:	46bd      	mov	sp, r7
 8105434:	bd80      	pop	{r7, pc}
 8105436:	bf00      	nop
 8105438:	e000ed04 	.word	0xe000ed04

0810543c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 810543c:	b580      	push	{r7, lr}
 810543e:	b086      	sub	sp, #24
 8105440:	af00      	add	r7, sp, #0
 8105442:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8105448:	2300      	movs	r3, #0
 810544a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 810544c:	693b      	ldr	r3, [r7, #16]
 810544e:	2b00      	cmp	r3, #0
 8105450:	d103      	bne.n	810545a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8105452:	f06f 0303 	mvn.w	r3, #3
 8105456:	617b      	str	r3, [r7, #20]
 8105458:	e02c      	b.n	81054b4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810545a:	f3ef 8305 	mrs	r3, IPSR
 810545e:	60fb      	str	r3, [r7, #12]
  return(result);
 8105460:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8105462:	2b00      	cmp	r3, #0
 8105464:	d01a      	beq.n	810549c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8105466:	2300      	movs	r3, #0
 8105468:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 810546a:	f107 0308 	add.w	r3, r7, #8
 810546e:	4619      	mov	r1, r3
 8105470:	6938      	ldr	r0, [r7, #16]
 8105472:	f001 f8a7 	bl	81065c4 <xQueueGiveFromISR>
 8105476:	4603      	mov	r3, r0
 8105478:	2b01      	cmp	r3, #1
 810547a:	d003      	beq.n	8105484 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 810547c:	f06f 0302 	mvn.w	r3, #2
 8105480:	617b      	str	r3, [r7, #20]
 8105482:	e017      	b.n	81054b4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8105484:	68bb      	ldr	r3, [r7, #8]
 8105486:	2b00      	cmp	r3, #0
 8105488:	d014      	beq.n	81054b4 <osSemaphoreRelease+0x78>
 810548a:	4b0d      	ldr	r3, [pc, #52]	@ (81054c0 <osSemaphoreRelease+0x84>)
 810548c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105490:	601a      	str	r2, [r3, #0]
 8105492:	f3bf 8f4f 	dsb	sy
 8105496:	f3bf 8f6f 	isb	sy
 810549a:	e00b      	b.n	81054b4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 810549c:	2300      	movs	r3, #0
 810549e:	2200      	movs	r2, #0
 81054a0:	2100      	movs	r1, #0
 81054a2:	6938      	ldr	r0, [r7, #16]
 81054a4:	f000 feee 	bl	8106284 <xQueueGenericSend>
 81054a8:	4603      	mov	r3, r0
 81054aa:	2b01      	cmp	r3, #1
 81054ac:	d002      	beq.n	81054b4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 81054ae:	f06f 0302 	mvn.w	r3, #2
 81054b2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 81054b4:	697b      	ldr	r3, [r7, #20]
}
 81054b6:	4618      	mov	r0, r3
 81054b8:	3718      	adds	r7, #24
 81054ba:	46bd      	mov	sp, r7
 81054bc:	bd80      	pop	{r7, pc}
 81054be:	bf00      	nop
 81054c0:	e000ed04 	.word	0xe000ed04

081054c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81054c4:	b480      	push	{r7}
 81054c6:	b085      	sub	sp, #20
 81054c8:	af00      	add	r7, sp, #0
 81054ca:	60f8      	str	r0, [r7, #12]
 81054cc:	60b9      	str	r1, [r7, #8]
 81054ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81054d0:	68fb      	ldr	r3, [r7, #12]
 81054d2:	4a07      	ldr	r2, [pc, #28]	@ (81054f0 <vApplicationGetIdleTaskMemory+0x2c>)
 81054d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81054d6:	68bb      	ldr	r3, [r7, #8]
 81054d8:	4a06      	ldr	r2, [pc, #24]	@ (81054f4 <vApplicationGetIdleTaskMemory+0x30>)
 81054da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	2280      	movs	r2, #128	@ 0x80
 81054e0:	601a      	str	r2, [r3, #0]
}
 81054e2:	bf00      	nop
 81054e4:	3714      	adds	r7, #20
 81054e6:	46bd      	mov	sp, r7
 81054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054ec:	4770      	bx	lr
 81054ee:	bf00      	nop
 81054f0:	10000270 	.word	0x10000270
 81054f4:	100002cc 	.word	0x100002cc

081054f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81054f8:	b480      	push	{r7}
 81054fa:	b085      	sub	sp, #20
 81054fc:	af00      	add	r7, sp, #0
 81054fe:	60f8      	str	r0, [r7, #12]
 8105500:	60b9      	str	r1, [r7, #8]
 8105502:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8105504:	68fb      	ldr	r3, [r7, #12]
 8105506:	4a07      	ldr	r2, [pc, #28]	@ (8105524 <vApplicationGetTimerTaskMemory+0x2c>)
 8105508:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810550a:	68bb      	ldr	r3, [r7, #8]
 810550c:	4a06      	ldr	r2, [pc, #24]	@ (8105528 <vApplicationGetTimerTaskMemory+0x30>)
 810550e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8105516:	601a      	str	r2, [r3, #0]
}
 8105518:	bf00      	nop
 810551a:	3714      	adds	r7, #20
 810551c:	46bd      	mov	sp, r7
 810551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105522:	4770      	bx	lr
 8105524:	100004cc 	.word	0x100004cc
 8105528:	10000528 	.word	0x10000528

0810552c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810552c:	b580      	push	{r7, lr}
 810552e:	b08a      	sub	sp, #40	@ 0x28
 8105530:	af00      	add	r7, sp, #0
 8105532:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8105534:	2300      	movs	r3, #0
 8105536:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8105538:	f001 ff60 	bl	81073fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810553c:	4b5c      	ldr	r3, [pc, #368]	@ (81056b0 <pvPortMalloc+0x184>)
 810553e:	681b      	ldr	r3, [r3, #0]
 8105540:	2b00      	cmp	r3, #0
 8105542:	d101      	bne.n	8105548 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8105544:	f000 f924 	bl	8105790 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8105548:	4b5a      	ldr	r3, [pc, #360]	@ (81056b4 <pvPortMalloc+0x188>)
 810554a:	681a      	ldr	r2, [r3, #0]
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	4013      	ands	r3, r2
 8105550:	2b00      	cmp	r3, #0
 8105552:	f040 8095 	bne.w	8105680 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	2b00      	cmp	r3, #0
 810555a:	d01e      	beq.n	810559a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810555c:	2208      	movs	r2, #8
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	4413      	add	r3, r2
 8105562:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	f003 0307 	and.w	r3, r3, #7
 810556a:	2b00      	cmp	r3, #0
 810556c:	d015      	beq.n	810559a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	f023 0307 	bic.w	r3, r3, #7
 8105574:	3308      	adds	r3, #8
 8105576:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	f003 0307 	and.w	r3, r3, #7
 810557e:	2b00      	cmp	r3, #0
 8105580:	d00b      	beq.n	810559a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8105582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105586:	f383 8811 	msr	BASEPRI, r3
 810558a:	f3bf 8f6f 	isb	sy
 810558e:	f3bf 8f4f 	dsb	sy
 8105592:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8105594:	bf00      	nop
 8105596:	bf00      	nop
 8105598:	e7fd      	b.n	8105596 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	2b00      	cmp	r3, #0
 810559e:	d06f      	beq.n	8105680 <pvPortMalloc+0x154>
 81055a0:	4b45      	ldr	r3, [pc, #276]	@ (81056b8 <pvPortMalloc+0x18c>)
 81055a2:	681b      	ldr	r3, [r3, #0]
 81055a4:	687a      	ldr	r2, [r7, #4]
 81055a6:	429a      	cmp	r2, r3
 81055a8:	d86a      	bhi.n	8105680 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81055aa:	4b44      	ldr	r3, [pc, #272]	@ (81056bc <pvPortMalloc+0x190>)
 81055ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81055ae:	4b43      	ldr	r3, [pc, #268]	@ (81056bc <pvPortMalloc+0x190>)
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81055b4:	e004      	b.n	81055c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 81055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81055b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81055bc:	681b      	ldr	r3, [r3, #0]
 81055be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81055c2:	685b      	ldr	r3, [r3, #4]
 81055c4:	687a      	ldr	r2, [r7, #4]
 81055c6:	429a      	cmp	r2, r3
 81055c8:	d903      	bls.n	81055d2 <pvPortMalloc+0xa6>
 81055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	2b00      	cmp	r3, #0
 81055d0:	d1f1      	bne.n	81055b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81055d2:	4b37      	ldr	r3, [pc, #220]	@ (81056b0 <pvPortMalloc+0x184>)
 81055d4:	681b      	ldr	r3, [r3, #0]
 81055d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81055d8:	429a      	cmp	r2, r3
 81055da:	d051      	beq.n	8105680 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81055dc:	6a3b      	ldr	r3, [r7, #32]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	2208      	movs	r2, #8
 81055e2:	4413      	add	r3, r2
 81055e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81055e8:	681a      	ldr	r2, [r3, #0]
 81055ea:	6a3b      	ldr	r3, [r7, #32]
 81055ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81055ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81055f0:	685a      	ldr	r2, [r3, #4]
 81055f2:	687b      	ldr	r3, [r7, #4]
 81055f4:	1ad2      	subs	r2, r2, r3
 81055f6:	2308      	movs	r3, #8
 81055f8:	005b      	lsls	r3, r3, #1
 81055fa:	429a      	cmp	r2, r3
 81055fc:	d920      	bls.n	8105640 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81055fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	4413      	add	r3, r2
 8105604:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8105606:	69bb      	ldr	r3, [r7, #24]
 8105608:	f003 0307 	and.w	r3, r3, #7
 810560c:	2b00      	cmp	r3, #0
 810560e:	d00b      	beq.n	8105628 <pvPortMalloc+0xfc>
	__asm volatile
 8105610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105614:	f383 8811 	msr	BASEPRI, r3
 8105618:	f3bf 8f6f 	isb	sy
 810561c:	f3bf 8f4f 	dsb	sy
 8105620:	613b      	str	r3, [r7, #16]
}
 8105622:	bf00      	nop
 8105624:	bf00      	nop
 8105626:	e7fd      	b.n	8105624 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8105628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810562a:	685a      	ldr	r2, [r3, #4]
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	1ad2      	subs	r2, r2, r3
 8105630:	69bb      	ldr	r3, [r7, #24]
 8105632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8105634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105636:	687a      	ldr	r2, [r7, #4]
 8105638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810563a:	69b8      	ldr	r0, [r7, #24]
 810563c:	f000 f90a 	bl	8105854 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8105640:	4b1d      	ldr	r3, [pc, #116]	@ (81056b8 <pvPortMalloc+0x18c>)
 8105642:	681a      	ldr	r2, [r3, #0]
 8105644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105646:	685b      	ldr	r3, [r3, #4]
 8105648:	1ad3      	subs	r3, r2, r3
 810564a:	4a1b      	ldr	r2, [pc, #108]	@ (81056b8 <pvPortMalloc+0x18c>)
 810564c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810564e:	4b1a      	ldr	r3, [pc, #104]	@ (81056b8 <pvPortMalloc+0x18c>)
 8105650:	681a      	ldr	r2, [r3, #0]
 8105652:	4b1b      	ldr	r3, [pc, #108]	@ (81056c0 <pvPortMalloc+0x194>)
 8105654:	681b      	ldr	r3, [r3, #0]
 8105656:	429a      	cmp	r2, r3
 8105658:	d203      	bcs.n	8105662 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810565a:	4b17      	ldr	r3, [pc, #92]	@ (81056b8 <pvPortMalloc+0x18c>)
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	4a18      	ldr	r2, [pc, #96]	@ (81056c0 <pvPortMalloc+0x194>)
 8105660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8105662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105664:	685a      	ldr	r2, [r3, #4]
 8105666:	4b13      	ldr	r3, [pc, #76]	@ (81056b4 <pvPortMalloc+0x188>)
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	431a      	orrs	r2, r3
 810566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810566e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8105670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105672:	2200      	movs	r2, #0
 8105674:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8105676:	4b13      	ldr	r3, [pc, #76]	@ (81056c4 <pvPortMalloc+0x198>)
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	3301      	adds	r3, #1
 810567c:	4a11      	ldr	r2, [pc, #68]	@ (81056c4 <pvPortMalloc+0x198>)
 810567e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8105680:	f001 feca 	bl	8107418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8105684:	69fb      	ldr	r3, [r7, #28]
 8105686:	f003 0307 	and.w	r3, r3, #7
 810568a:	2b00      	cmp	r3, #0
 810568c:	d00b      	beq.n	81056a6 <pvPortMalloc+0x17a>
	__asm volatile
 810568e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105692:	f383 8811 	msr	BASEPRI, r3
 8105696:	f3bf 8f6f 	isb	sy
 810569a:	f3bf 8f4f 	dsb	sy
 810569e:	60fb      	str	r3, [r7, #12]
}
 81056a0:	bf00      	nop
 81056a2:	bf00      	nop
 81056a4:	e7fd      	b.n	81056a2 <pvPortMalloc+0x176>
	return pvReturn;
 81056a6:	69fb      	ldr	r3, [r7, #28]
}
 81056a8:	4618      	mov	r0, r3
 81056aa:	3728      	adds	r7, #40	@ 0x28
 81056ac:	46bd      	mov	sp, r7
 81056ae:	bd80      	pop	{r7, pc}
 81056b0:	10004530 	.word	0x10004530
 81056b4:	10004544 	.word	0x10004544
 81056b8:	10004534 	.word	0x10004534
 81056bc:	10004528 	.word	0x10004528
 81056c0:	10004538 	.word	0x10004538
 81056c4:	1000453c 	.word	0x1000453c

081056c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81056c8:	b580      	push	{r7, lr}
 81056ca:	b086      	sub	sp, #24
 81056cc:	af00      	add	r7, sp, #0
 81056ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81056d4:	687b      	ldr	r3, [r7, #4]
 81056d6:	2b00      	cmp	r3, #0
 81056d8:	d04f      	beq.n	810577a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81056da:	2308      	movs	r3, #8
 81056dc:	425b      	negs	r3, r3
 81056de:	697a      	ldr	r2, [r7, #20]
 81056e0:	4413      	add	r3, r2
 81056e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81056e4:	697b      	ldr	r3, [r7, #20]
 81056e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81056e8:	693b      	ldr	r3, [r7, #16]
 81056ea:	685a      	ldr	r2, [r3, #4]
 81056ec:	4b25      	ldr	r3, [pc, #148]	@ (8105784 <vPortFree+0xbc>)
 81056ee:	681b      	ldr	r3, [r3, #0]
 81056f0:	4013      	ands	r3, r2
 81056f2:	2b00      	cmp	r3, #0
 81056f4:	d10b      	bne.n	810570e <vPortFree+0x46>
	__asm volatile
 81056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81056fa:	f383 8811 	msr	BASEPRI, r3
 81056fe:	f3bf 8f6f 	isb	sy
 8105702:	f3bf 8f4f 	dsb	sy
 8105706:	60fb      	str	r3, [r7, #12]
}
 8105708:	bf00      	nop
 810570a:	bf00      	nop
 810570c:	e7fd      	b.n	810570a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810570e:	693b      	ldr	r3, [r7, #16]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	2b00      	cmp	r3, #0
 8105714:	d00b      	beq.n	810572e <vPortFree+0x66>
	__asm volatile
 8105716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810571a:	f383 8811 	msr	BASEPRI, r3
 810571e:	f3bf 8f6f 	isb	sy
 8105722:	f3bf 8f4f 	dsb	sy
 8105726:	60bb      	str	r3, [r7, #8]
}
 8105728:	bf00      	nop
 810572a:	bf00      	nop
 810572c:	e7fd      	b.n	810572a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810572e:	693b      	ldr	r3, [r7, #16]
 8105730:	685a      	ldr	r2, [r3, #4]
 8105732:	4b14      	ldr	r3, [pc, #80]	@ (8105784 <vPortFree+0xbc>)
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	4013      	ands	r3, r2
 8105738:	2b00      	cmp	r3, #0
 810573a:	d01e      	beq.n	810577a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810573c:	693b      	ldr	r3, [r7, #16]
 810573e:	681b      	ldr	r3, [r3, #0]
 8105740:	2b00      	cmp	r3, #0
 8105742:	d11a      	bne.n	810577a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8105744:	693b      	ldr	r3, [r7, #16]
 8105746:	685a      	ldr	r2, [r3, #4]
 8105748:	4b0e      	ldr	r3, [pc, #56]	@ (8105784 <vPortFree+0xbc>)
 810574a:	681b      	ldr	r3, [r3, #0]
 810574c:	43db      	mvns	r3, r3
 810574e:	401a      	ands	r2, r3
 8105750:	693b      	ldr	r3, [r7, #16]
 8105752:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8105754:	f001 fe52 	bl	81073fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8105758:	693b      	ldr	r3, [r7, #16]
 810575a:	685a      	ldr	r2, [r3, #4]
 810575c:	4b0a      	ldr	r3, [pc, #40]	@ (8105788 <vPortFree+0xc0>)
 810575e:	681b      	ldr	r3, [r3, #0]
 8105760:	4413      	add	r3, r2
 8105762:	4a09      	ldr	r2, [pc, #36]	@ (8105788 <vPortFree+0xc0>)
 8105764:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8105766:	6938      	ldr	r0, [r7, #16]
 8105768:	f000 f874 	bl	8105854 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810576c:	4b07      	ldr	r3, [pc, #28]	@ (810578c <vPortFree+0xc4>)
 810576e:	681b      	ldr	r3, [r3, #0]
 8105770:	3301      	adds	r3, #1
 8105772:	4a06      	ldr	r2, [pc, #24]	@ (810578c <vPortFree+0xc4>)
 8105774:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8105776:	f001 fe4f 	bl	8107418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810577a:	bf00      	nop
 810577c:	3718      	adds	r7, #24
 810577e:	46bd      	mov	sp, r7
 8105780:	bd80      	pop	{r7, pc}
 8105782:	bf00      	nop
 8105784:	10004544 	.word	0x10004544
 8105788:	10004534 	.word	0x10004534
 810578c:	10004540 	.word	0x10004540

08105790 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8105790:	b480      	push	{r7}
 8105792:	b085      	sub	sp, #20
 8105794:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8105796:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810579a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810579c:	4b27      	ldr	r3, [pc, #156]	@ (810583c <prvHeapInit+0xac>)
 810579e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81057a0:	68fb      	ldr	r3, [r7, #12]
 81057a2:	f003 0307 	and.w	r3, r3, #7
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d00c      	beq.n	81057c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81057aa:	68fb      	ldr	r3, [r7, #12]
 81057ac:	3307      	adds	r3, #7
 81057ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81057b0:	68fb      	ldr	r3, [r7, #12]
 81057b2:	f023 0307 	bic.w	r3, r3, #7
 81057b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81057b8:	68ba      	ldr	r2, [r7, #8]
 81057ba:	68fb      	ldr	r3, [r7, #12]
 81057bc:	1ad3      	subs	r3, r2, r3
 81057be:	4a1f      	ldr	r2, [pc, #124]	@ (810583c <prvHeapInit+0xac>)
 81057c0:	4413      	add	r3, r2
 81057c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81057c4:	68fb      	ldr	r3, [r7, #12]
 81057c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81057c8:	4a1d      	ldr	r2, [pc, #116]	@ (8105840 <prvHeapInit+0xb0>)
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81057ce:	4b1c      	ldr	r3, [pc, #112]	@ (8105840 <prvHeapInit+0xb0>)
 81057d0:	2200      	movs	r2, #0
 81057d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	68ba      	ldr	r2, [r7, #8]
 81057d8:	4413      	add	r3, r2
 81057da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81057dc:	2208      	movs	r2, #8
 81057de:	68fb      	ldr	r3, [r7, #12]
 81057e0:	1a9b      	subs	r3, r3, r2
 81057e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81057e4:	68fb      	ldr	r3, [r7, #12]
 81057e6:	f023 0307 	bic.w	r3, r3, #7
 81057ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	4a15      	ldr	r2, [pc, #84]	@ (8105844 <prvHeapInit+0xb4>)
 81057f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81057f2:	4b14      	ldr	r3, [pc, #80]	@ (8105844 <prvHeapInit+0xb4>)
 81057f4:	681b      	ldr	r3, [r3, #0]
 81057f6:	2200      	movs	r2, #0
 81057f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81057fa:	4b12      	ldr	r3, [pc, #72]	@ (8105844 <prvHeapInit+0xb4>)
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	2200      	movs	r2, #0
 8105800:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8105806:	683b      	ldr	r3, [r7, #0]
 8105808:	68fa      	ldr	r2, [r7, #12]
 810580a:	1ad2      	subs	r2, r2, r3
 810580c:	683b      	ldr	r3, [r7, #0]
 810580e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8105810:	4b0c      	ldr	r3, [pc, #48]	@ (8105844 <prvHeapInit+0xb4>)
 8105812:	681a      	ldr	r2, [r3, #0]
 8105814:	683b      	ldr	r3, [r7, #0]
 8105816:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8105818:	683b      	ldr	r3, [r7, #0]
 810581a:	685b      	ldr	r3, [r3, #4]
 810581c:	4a0a      	ldr	r2, [pc, #40]	@ (8105848 <prvHeapInit+0xb8>)
 810581e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8105820:	683b      	ldr	r3, [r7, #0]
 8105822:	685b      	ldr	r3, [r3, #4]
 8105824:	4a09      	ldr	r2, [pc, #36]	@ (810584c <prvHeapInit+0xbc>)
 8105826:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8105828:	4b09      	ldr	r3, [pc, #36]	@ (8105850 <prvHeapInit+0xc0>)
 810582a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810582e:	601a      	str	r2, [r3, #0]
}
 8105830:	bf00      	nop
 8105832:	3714      	adds	r7, #20
 8105834:	46bd      	mov	sp, r7
 8105836:	f85d 7b04 	ldr.w	r7, [sp], #4
 810583a:	4770      	bx	lr
 810583c:	10000928 	.word	0x10000928
 8105840:	10004528 	.word	0x10004528
 8105844:	10004530 	.word	0x10004530
 8105848:	10004538 	.word	0x10004538
 810584c:	10004534 	.word	0x10004534
 8105850:	10004544 	.word	0x10004544

08105854 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8105854:	b480      	push	{r7}
 8105856:	b085      	sub	sp, #20
 8105858:	af00      	add	r7, sp, #0
 810585a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810585c:	4b28      	ldr	r3, [pc, #160]	@ (8105900 <prvInsertBlockIntoFreeList+0xac>)
 810585e:	60fb      	str	r3, [r7, #12]
 8105860:	e002      	b.n	8105868 <prvInsertBlockIntoFreeList+0x14>
 8105862:	68fb      	ldr	r3, [r7, #12]
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	60fb      	str	r3, [r7, #12]
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	681b      	ldr	r3, [r3, #0]
 810586c:	687a      	ldr	r2, [r7, #4]
 810586e:	429a      	cmp	r2, r3
 8105870:	d8f7      	bhi.n	8105862 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8105872:	68fb      	ldr	r3, [r7, #12]
 8105874:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	685b      	ldr	r3, [r3, #4]
 810587a:	68ba      	ldr	r2, [r7, #8]
 810587c:	4413      	add	r3, r2
 810587e:	687a      	ldr	r2, [r7, #4]
 8105880:	429a      	cmp	r2, r3
 8105882:	d108      	bne.n	8105896 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	685a      	ldr	r2, [r3, #4]
 8105888:	687b      	ldr	r3, [r7, #4]
 810588a:	685b      	ldr	r3, [r3, #4]
 810588c:	441a      	add	r2, r3
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8105892:	68fb      	ldr	r3, [r7, #12]
 8105894:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	685b      	ldr	r3, [r3, #4]
 810589e:	68ba      	ldr	r2, [r7, #8]
 81058a0:	441a      	add	r2, r3
 81058a2:	68fb      	ldr	r3, [r7, #12]
 81058a4:	681b      	ldr	r3, [r3, #0]
 81058a6:	429a      	cmp	r2, r3
 81058a8:	d118      	bne.n	81058dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	681a      	ldr	r2, [r3, #0]
 81058ae:	4b15      	ldr	r3, [pc, #84]	@ (8105904 <prvInsertBlockIntoFreeList+0xb0>)
 81058b0:	681b      	ldr	r3, [r3, #0]
 81058b2:	429a      	cmp	r2, r3
 81058b4:	d00d      	beq.n	81058d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81058b6:	687b      	ldr	r3, [r7, #4]
 81058b8:	685a      	ldr	r2, [r3, #4]
 81058ba:	68fb      	ldr	r3, [r7, #12]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	685b      	ldr	r3, [r3, #4]
 81058c0:	441a      	add	r2, r3
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81058c6:	68fb      	ldr	r3, [r7, #12]
 81058c8:	681b      	ldr	r3, [r3, #0]
 81058ca:	681a      	ldr	r2, [r3, #0]
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	601a      	str	r2, [r3, #0]
 81058d0:	e008      	b.n	81058e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81058d2:	4b0c      	ldr	r3, [pc, #48]	@ (8105904 <prvInsertBlockIntoFreeList+0xb0>)
 81058d4:	681a      	ldr	r2, [r3, #0]
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	601a      	str	r2, [r3, #0]
 81058da:	e003      	b.n	81058e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81058dc:	68fb      	ldr	r3, [r7, #12]
 81058de:	681a      	ldr	r2, [r3, #0]
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81058e4:	68fa      	ldr	r2, [r7, #12]
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	429a      	cmp	r2, r3
 81058ea:	d002      	beq.n	81058f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81058ec:	68fb      	ldr	r3, [r7, #12]
 81058ee:	687a      	ldr	r2, [r7, #4]
 81058f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81058f2:	bf00      	nop
 81058f4:	3714      	adds	r7, #20
 81058f6:	46bd      	mov	sp, r7
 81058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058fc:	4770      	bx	lr
 81058fe:	bf00      	nop
 8105900:	10004528 	.word	0x10004528
 8105904:	10004530 	.word	0x10004530

08105908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8105908:	b480      	push	{r7}
 810590a:	b083      	sub	sp, #12
 810590c:	af00      	add	r7, sp, #0
 810590e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	f103 0208 	add.w	r2, r3, #8
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8105920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105922:	687b      	ldr	r3, [r7, #4]
 8105924:	f103 0208 	add.w	r2, r3, #8
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810592c:	687b      	ldr	r3, [r7, #4]
 810592e:	f103 0208 	add.w	r2, r3, #8
 8105932:	687b      	ldr	r3, [r7, #4]
 8105934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8105936:	687b      	ldr	r3, [r7, #4]
 8105938:	2200      	movs	r2, #0
 810593a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810593c:	bf00      	nop
 810593e:	370c      	adds	r7, #12
 8105940:	46bd      	mov	sp, r7
 8105942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105946:	4770      	bx	lr

08105948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8105948:	b480      	push	{r7}
 810594a:	b083      	sub	sp, #12
 810594c:	af00      	add	r7, sp, #0
 810594e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8105950:	687b      	ldr	r3, [r7, #4]
 8105952:	2200      	movs	r2, #0
 8105954:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8105956:	bf00      	nop
 8105958:	370c      	adds	r7, #12
 810595a:	46bd      	mov	sp, r7
 810595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105960:	4770      	bx	lr

08105962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8105962:	b480      	push	{r7}
 8105964:	b085      	sub	sp, #20
 8105966:	af00      	add	r7, sp, #0
 8105968:	6078      	str	r0, [r7, #4]
 810596a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810596c:	687b      	ldr	r3, [r7, #4]
 810596e:	685b      	ldr	r3, [r3, #4]
 8105970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8105972:	683b      	ldr	r3, [r7, #0]
 8105974:	68fa      	ldr	r2, [r7, #12]
 8105976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8105978:	68fb      	ldr	r3, [r7, #12]
 810597a:	689a      	ldr	r2, [r3, #8]
 810597c:	683b      	ldr	r3, [r7, #0]
 810597e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8105980:	68fb      	ldr	r3, [r7, #12]
 8105982:	689b      	ldr	r3, [r3, #8]
 8105984:	683a      	ldr	r2, [r7, #0]
 8105986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8105988:	68fb      	ldr	r3, [r7, #12]
 810598a:	683a      	ldr	r2, [r7, #0]
 810598c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810598e:	683b      	ldr	r3, [r7, #0]
 8105990:	687a      	ldr	r2, [r7, #4]
 8105992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	1c5a      	adds	r2, r3, #1
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	601a      	str	r2, [r3, #0]
}
 810599e:	bf00      	nop
 81059a0:	3714      	adds	r7, #20
 81059a2:	46bd      	mov	sp, r7
 81059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059a8:	4770      	bx	lr

081059aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81059aa:	b480      	push	{r7}
 81059ac:	b085      	sub	sp, #20
 81059ae:	af00      	add	r7, sp, #0
 81059b0:	6078      	str	r0, [r7, #4]
 81059b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81059b4:	683b      	ldr	r3, [r7, #0]
 81059b6:	681b      	ldr	r3, [r3, #0]
 81059b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81059ba:	68bb      	ldr	r3, [r7, #8]
 81059bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81059c0:	d103      	bne.n	81059ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	691b      	ldr	r3, [r3, #16]
 81059c6:	60fb      	str	r3, [r7, #12]
 81059c8:	e00c      	b.n	81059e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	3308      	adds	r3, #8
 81059ce:	60fb      	str	r3, [r7, #12]
 81059d0:	e002      	b.n	81059d8 <vListInsert+0x2e>
 81059d2:	68fb      	ldr	r3, [r7, #12]
 81059d4:	685b      	ldr	r3, [r3, #4]
 81059d6:	60fb      	str	r3, [r7, #12]
 81059d8:	68fb      	ldr	r3, [r7, #12]
 81059da:	685b      	ldr	r3, [r3, #4]
 81059dc:	681b      	ldr	r3, [r3, #0]
 81059de:	68ba      	ldr	r2, [r7, #8]
 81059e0:	429a      	cmp	r2, r3
 81059e2:	d2f6      	bcs.n	81059d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81059e4:	68fb      	ldr	r3, [r7, #12]
 81059e6:	685a      	ldr	r2, [r3, #4]
 81059e8:	683b      	ldr	r3, [r7, #0]
 81059ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81059ec:	683b      	ldr	r3, [r7, #0]
 81059ee:	685b      	ldr	r3, [r3, #4]
 81059f0:	683a      	ldr	r2, [r7, #0]
 81059f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81059f4:	683b      	ldr	r3, [r7, #0]
 81059f6:	68fa      	ldr	r2, [r7, #12]
 81059f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81059fa:	68fb      	ldr	r3, [r7, #12]
 81059fc:	683a      	ldr	r2, [r7, #0]
 81059fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8105a00:	683b      	ldr	r3, [r7, #0]
 8105a02:	687a      	ldr	r2, [r7, #4]
 8105a04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	681b      	ldr	r3, [r3, #0]
 8105a0a:	1c5a      	adds	r2, r3, #1
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	601a      	str	r2, [r3, #0]
}
 8105a10:	bf00      	nop
 8105a12:	3714      	adds	r7, #20
 8105a14:	46bd      	mov	sp, r7
 8105a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a1a:	4770      	bx	lr

08105a1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8105a1c:	b480      	push	{r7}
 8105a1e:	b085      	sub	sp, #20
 8105a20:	af00      	add	r7, sp, #0
 8105a22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	691b      	ldr	r3, [r3, #16]
 8105a28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	685b      	ldr	r3, [r3, #4]
 8105a2e:	687a      	ldr	r2, [r7, #4]
 8105a30:	6892      	ldr	r2, [r2, #8]
 8105a32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	689b      	ldr	r3, [r3, #8]
 8105a38:	687a      	ldr	r2, [r7, #4]
 8105a3a:	6852      	ldr	r2, [r2, #4]
 8105a3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8105a3e:	68fb      	ldr	r3, [r7, #12]
 8105a40:	685b      	ldr	r3, [r3, #4]
 8105a42:	687a      	ldr	r2, [r7, #4]
 8105a44:	429a      	cmp	r2, r3
 8105a46:	d103      	bne.n	8105a50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	689a      	ldr	r2, [r3, #8]
 8105a4c:	68fb      	ldr	r3, [r7, #12]
 8105a4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	2200      	movs	r2, #0
 8105a54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8105a56:	68fb      	ldr	r3, [r7, #12]
 8105a58:	681b      	ldr	r3, [r3, #0]
 8105a5a:	1e5a      	subs	r2, r3, #1
 8105a5c:	68fb      	ldr	r3, [r7, #12]
 8105a5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8105a60:	68fb      	ldr	r3, [r7, #12]
 8105a62:	681b      	ldr	r3, [r3, #0]
}
 8105a64:	4618      	mov	r0, r3
 8105a66:	3714      	adds	r7, #20
 8105a68:	46bd      	mov	sp, r7
 8105a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a6e:	4770      	bx	lr

08105a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8105a70:	b480      	push	{r7}
 8105a72:	b085      	sub	sp, #20
 8105a74:	af00      	add	r7, sp, #0
 8105a76:	60f8      	str	r0, [r7, #12]
 8105a78:	60b9      	str	r1, [r7, #8]
 8105a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8105a7c:	68fb      	ldr	r3, [r7, #12]
 8105a7e:	3b04      	subs	r3, #4
 8105a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8105a82:	68fb      	ldr	r3, [r7, #12]
 8105a84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8105a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8105a8a:	68fb      	ldr	r3, [r7, #12]
 8105a8c:	3b04      	subs	r3, #4
 8105a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8105a90:	68bb      	ldr	r3, [r7, #8]
 8105a92:	f023 0201 	bic.w	r2, r3, #1
 8105a96:	68fb      	ldr	r3, [r7, #12]
 8105a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8105a9a:	68fb      	ldr	r3, [r7, #12]
 8105a9c:	3b04      	subs	r3, #4
 8105a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8105aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8105ad4 <pxPortInitialiseStack+0x64>)
 8105aa2:	68fb      	ldr	r3, [r7, #12]
 8105aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8105aa6:	68fb      	ldr	r3, [r7, #12]
 8105aa8:	3b14      	subs	r3, #20
 8105aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8105aac:	687a      	ldr	r2, [r7, #4]
 8105aae:	68fb      	ldr	r3, [r7, #12]
 8105ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8105ab2:	68fb      	ldr	r3, [r7, #12]
 8105ab4:	3b04      	subs	r3, #4
 8105ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8105ab8:	68fb      	ldr	r3, [r7, #12]
 8105aba:	f06f 0202 	mvn.w	r2, #2
 8105abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8105ac0:	68fb      	ldr	r3, [r7, #12]
 8105ac2:	3b20      	subs	r3, #32
 8105ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8105ac6:	68fb      	ldr	r3, [r7, #12]
}
 8105ac8:	4618      	mov	r0, r3
 8105aca:	3714      	adds	r7, #20
 8105acc:	46bd      	mov	sp, r7
 8105ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ad2:	4770      	bx	lr
 8105ad4:	08105ad9 	.word	0x08105ad9

08105ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8105ad8:	b480      	push	{r7}
 8105ada:	b085      	sub	sp, #20
 8105adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8105ade:	2300      	movs	r3, #0
 8105ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8105ae2:	4b13      	ldr	r3, [pc, #76]	@ (8105b30 <prvTaskExitError+0x58>)
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8105aea:	d00b      	beq.n	8105b04 <prvTaskExitError+0x2c>
	__asm volatile
 8105aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105af0:	f383 8811 	msr	BASEPRI, r3
 8105af4:	f3bf 8f6f 	isb	sy
 8105af8:	f3bf 8f4f 	dsb	sy
 8105afc:	60fb      	str	r3, [r7, #12]
}
 8105afe:	bf00      	nop
 8105b00:	bf00      	nop
 8105b02:	e7fd      	b.n	8105b00 <prvTaskExitError+0x28>
	__asm volatile
 8105b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105b08:	f383 8811 	msr	BASEPRI, r3
 8105b0c:	f3bf 8f6f 	isb	sy
 8105b10:	f3bf 8f4f 	dsb	sy
 8105b14:	60bb      	str	r3, [r7, #8]
}
 8105b16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8105b18:	bf00      	nop
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	2b00      	cmp	r3, #0
 8105b1e:	d0fc      	beq.n	8105b1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8105b20:	bf00      	nop
 8105b22:	bf00      	nop
 8105b24:	3714      	adds	r7, #20
 8105b26:	46bd      	mov	sp, r7
 8105b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b2c:	4770      	bx	lr
 8105b2e:	bf00      	nop
 8105b30:	10000010 	.word	0x10000010
	...

08105b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8105b40:	4b07      	ldr	r3, [pc, #28]	@ (8105b60 <pxCurrentTCBConst2>)
 8105b42:	6819      	ldr	r1, [r3, #0]
 8105b44:	6808      	ldr	r0, [r1, #0]
 8105b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105b4a:	f380 8809 	msr	PSP, r0
 8105b4e:	f3bf 8f6f 	isb	sy
 8105b52:	f04f 0000 	mov.w	r0, #0
 8105b56:	f380 8811 	msr	BASEPRI, r0
 8105b5a:	4770      	bx	lr
 8105b5c:	f3af 8000 	nop.w

08105b60 <pxCurrentTCBConst2>:
 8105b60:	10004590 	.word	0x10004590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8105b64:	bf00      	nop
 8105b66:	bf00      	nop

08105b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8105b68:	4808      	ldr	r0, [pc, #32]	@ (8105b8c <prvPortStartFirstTask+0x24>)
 8105b6a:	6800      	ldr	r0, [r0, #0]
 8105b6c:	6800      	ldr	r0, [r0, #0]
 8105b6e:	f380 8808 	msr	MSP, r0
 8105b72:	f04f 0000 	mov.w	r0, #0
 8105b76:	f380 8814 	msr	CONTROL, r0
 8105b7a:	b662      	cpsie	i
 8105b7c:	b661      	cpsie	f
 8105b7e:	f3bf 8f4f 	dsb	sy
 8105b82:	f3bf 8f6f 	isb	sy
 8105b86:	df00      	svc	0
 8105b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8105b8a:	bf00      	nop
 8105b8c:	e000ed08 	.word	0xe000ed08

08105b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8105b90:	b580      	push	{r7, lr}
 8105b92:	b086      	sub	sp, #24
 8105b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8105b96:	4b47      	ldr	r3, [pc, #284]	@ (8105cb4 <xPortStartScheduler+0x124>)
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	4a47      	ldr	r2, [pc, #284]	@ (8105cb8 <xPortStartScheduler+0x128>)
 8105b9c:	4293      	cmp	r3, r2
 8105b9e:	d10b      	bne.n	8105bb8 <xPortStartScheduler+0x28>
	__asm volatile
 8105ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ba4:	f383 8811 	msr	BASEPRI, r3
 8105ba8:	f3bf 8f6f 	isb	sy
 8105bac:	f3bf 8f4f 	dsb	sy
 8105bb0:	613b      	str	r3, [r7, #16]
}
 8105bb2:	bf00      	nop
 8105bb4:	bf00      	nop
 8105bb6:	e7fd      	b.n	8105bb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8105bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8105cb4 <xPortStartScheduler+0x124>)
 8105bba:	681b      	ldr	r3, [r3, #0]
 8105bbc:	4a3f      	ldr	r2, [pc, #252]	@ (8105cbc <xPortStartScheduler+0x12c>)
 8105bbe:	4293      	cmp	r3, r2
 8105bc0:	d10b      	bne.n	8105bda <xPortStartScheduler+0x4a>
	__asm volatile
 8105bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105bc6:	f383 8811 	msr	BASEPRI, r3
 8105bca:	f3bf 8f6f 	isb	sy
 8105bce:	f3bf 8f4f 	dsb	sy
 8105bd2:	60fb      	str	r3, [r7, #12]
}
 8105bd4:	bf00      	nop
 8105bd6:	bf00      	nop
 8105bd8:	e7fd      	b.n	8105bd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8105bda:	4b39      	ldr	r3, [pc, #228]	@ (8105cc0 <xPortStartScheduler+0x130>)
 8105bdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8105bde:	697b      	ldr	r3, [r7, #20]
 8105be0:	781b      	ldrb	r3, [r3, #0]
 8105be2:	b2db      	uxtb	r3, r3
 8105be4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8105be6:	697b      	ldr	r3, [r7, #20]
 8105be8:	22ff      	movs	r2, #255	@ 0xff
 8105bea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8105bec:	697b      	ldr	r3, [r7, #20]
 8105bee:	781b      	ldrb	r3, [r3, #0]
 8105bf0:	b2db      	uxtb	r3, r3
 8105bf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8105bf4:	78fb      	ldrb	r3, [r7, #3]
 8105bf6:	b2db      	uxtb	r3, r3
 8105bf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8105bfc:	b2da      	uxtb	r2, r3
 8105bfe:	4b31      	ldr	r3, [pc, #196]	@ (8105cc4 <xPortStartScheduler+0x134>)
 8105c00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8105c02:	4b31      	ldr	r3, [pc, #196]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c04:	2207      	movs	r2, #7
 8105c06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8105c08:	e009      	b.n	8105c1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8105c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	3b01      	subs	r3, #1
 8105c10:	4a2d      	ldr	r2, [pc, #180]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8105c14:	78fb      	ldrb	r3, [r7, #3]
 8105c16:	b2db      	uxtb	r3, r3
 8105c18:	005b      	lsls	r3, r3, #1
 8105c1a:	b2db      	uxtb	r3, r3
 8105c1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8105c1e:	78fb      	ldrb	r3, [r7, #3]
 8105c20:	b2db      	uxtb	r3, r3
 8105c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105c26:	2b80      	cmp	r3, #128	@ 0x80
 8105c28:	d0ef      	beq.n	8105c0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8105c2a:	4b27      	ldr	r3, [pc, #156]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c2c:	681b      	ldr	r3, [r3, #0]
 8105c2e:	f1c3 0307 	rsb	r3, r3, #7
 8105c32:	2b04      	cmp	r3, #4
 8105c34:	d00b      	beq.n	8105c4e <xPortStartScheduler+0xbe>
	__asm volatile
 8105c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105c3a:	f383 8811 	msr	BASEPRI, r3
 8105c3e:	f3bf 8f6f 	isb	sy
 8105c42:	f3bf 8f4f 	dsb	sy
 8105c46:	60bb      	str	r3, [r7, #8]
}
 8105c48:	bf00      	nop
 8105c4a:	bf00      	nop
 8105c4c:	e7fd      	b.n	8105c4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8105c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	021b      	lsls	r3, r3, #8
 8105c54:	4a1c      	ldr	r2, [pc, #112]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8105c58:	4b1b      	ldr	r3, [pc, #108]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c5a:	681b      	ldr	r3, [r3, #0]
 8105c5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8105c60:	4a19      	ldr	r2, [pc, #100]	@ (8105cc8 <xPortStartScheduler+0x138>)
 8105c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	b2da      	uxtb	r2, r3
 8105c68:	697b      	ldr	r3, [r7, #20]
 8105c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8105c6c:	4b17      	ldr	r3, [pc, #92]	@ (8105ccc <xPortStartScheduler+0x13c>)
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	4a16      	ldr	r2, [pc, #88]	@ (8105ccc <xPortStartScheduler+0x13c>)
 8105c72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8105c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8105c78:	4b14      	ldr	r3, [pc, #80]	@ (8105ccc <xPortStartScheduler+0x13c>)
 8105c7a:	681b      	ldr	r3, [r3, #0]
 8105c7c:	4a13      	ldr	r2, [pc, #76]	@ (8105ccc <xPortStartScheduler+0x13c>)
 8105c7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8105c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8105c84:	f000 f8da 	bl	8105e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8105c88:	4b11      	ldr	r3, [pc, #68]	@ (8105cd0 <xPortStartScheduler+0x140>)
 8105c8a:	2200      	movs	r2, #0
 8105c8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8105c8e:	f000 f8f9 	bl	8105e84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8105c92:	4b10      	ldr	r3, [pc, #64]	@ (8105cd4 <xPortStartScheduler+0x144>)
 8105c94:	681b      	ldr	r3, [r3, #0]
 8105c96:	4a0f      	ldr	r2, [pc, #60]	@ (8105cd4 <xPortStartScheduler+0x144>)
 8105c98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8105c9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8105c9e:	f7ff ff63 	bl	8105b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8105ca2:	f001 fd21 	bl	81076e8 <vTaskSwitchContext>
	prvTaskExitError();
 8105ca6:	f7ff ff17 	bl	8105ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8105caa:	2300      	movs	r3, #0
}
 8105cac:	4618      	mov	r0, r3
 8105cae:	3718      	adds	r7, #24
 8105cb0:	46bd      	mov	sp, r7
 8105cb2:	bd80      	pop	{r7, pc}
 8105cb4:	e000ed00 	.word	0xe000ed00
 8105cb8:	410fc271 	.word	0x410fc271
 8105cbc:	410fc270 	.word	0x410fc270
 8105cc0:	e000e400 	.word	0xe000e400
 8105cc4:	10004548 	.word	0x10004548
 8105cc8:	1000454c 	.word	0x1000454c
 8105ccc:	e000ed20 	.word	0xe000ed20
 8105cd0:	10000010 	.word	0x10000010
 8105cd4:	e000ef34 	.word	0xe000ef34

08105cd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8105cd8:	b480      	push	{r7}
 8105cda:	b083      	sub	sp, #12
 8105cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8105cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ce2:	f383 8811 	msr	BASEPRI, r3
 8105ce6:	f3bf 8f6f 	isb	sy
 8105cea:	f3bf 8f4f 	dsb	sy
 8105cee:	607b      	str	r3, [r7, #4]
}
 8105cf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8105cf2:	4b10      	ldr	r3, [pc, #64]	@ (8105d34 <vPortEnterCritical+0x5c>)
 8105cf4:	681b      	ldr	r3, [r3, #0]
 8105cf6:	3301      	adds	r3, #1
 8105cf8:	4a0e      	ldr	r2, [pc, #56]	@ (8105d34 <vPortEnterCritical+0x5c>)
 8105cfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8105cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8105d34 <vPortEnterCritical+0x5c>)
 8105cfe:	681b      	ldr	r3, [r3, #0]
 8105d00:	2b01      	cmp	r3, #1
 8105d02:	d110      	bne.n	8105d26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8105d04:	4b0c      	ldr	r3, [pc, #48]	@ (8105d38 <vPortEnterCritical+0x60>)
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	b2db      	uxtb	r3, r3
 8105d0a:	2b00      	cmp	r3, #0
 8105d0c:	d00b      	beq.n	8105d26 <vPortEnterCritical+0x4e>
	__asm volatile
 8105d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d12:	f383 8811 	msr	BASEPRI, r3
 8105d16:	f3bf 8f6f 	isb	sy
 8105d1a:	f3bf 8f4f 	dsb	sy
 8105d1e:	603b      	str	r3, [r7, #0]
}
 8105d20:	bf00      	nop
 8105d22:	bf00      	nop
 8105d24:	e7fd      	b.n	8105d22 <vPortEnterCritical+0x4a>
	}
}
 8105d26:	bf00      	nop
 8105d28:	370c      	adds	r7, #12
 8105d2a:	46bd      	mov	sp, r7
 8105d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d30:	4770      	bx	lr
 8105d32:	bf00      	nop
 8105d34:	10000010 	.word	0x10000010
 8105d38:	e000ed04 	.word	0xe000ed04

08105d3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8105d3c:	b480      	push	{r7}
 8105d3e:	b083      	sub	sp, #12
 8105d40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8105d42:	4b12      	ldr	r3, [pc, #72]	@ (8105d8c <vPortExitCritical+0x50>)
 8105d44:	681b      	ldr	r3, [r3, #0]
 8105d46:	2b00      	cmp	r3, #0
 8105d48:	d10b      	bne.n	8105d62 <vPortExitCritical+0x26>
	__asm volatile
 8105d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105d4e:	f383 8811 	msr	BASEPRI, r3
 8105d52:	f3bf 8f6f 	isb	sy
 8105d56:	f3bf 8f4f 	dsb	sy
 8105d5a:	607b      	str	r3, [r7, #4]
}
 8105d5c:	bf00      	nop
 8105d5e:	bf00      	nop
 8105d60:	e7fd      	b.n	8105d5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8105d62:	4b0a      	ldr	r3, [pc, #40]	@ (8105d8c <vPortExitCritical+0x50>)
 8105d64:	681b      	ldr	r3, [r3, #0]
 8105d66:	3b01      	subs	r3, #1
 8105d68:	4a08      	ldr	r2, [pc, #32]	@ (8105d8c <vPortExitCritical+0x50>)
 8105d6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8105d6c:	4b07      	ldr	r3, [pc, #28]	@ (8105d8c <vPortExitCritical+0x50>)
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	2b00      	cmp	r3, #0
 8105d72:	d105      	bne.n	8105d80 <vPortExitCritical+0x44>
 8105d74:	2300      	movs	r3, #0
 8105d76:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8105d78:	683b      	ldr	r3, [r7, #0]
 8105d7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8105d7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8105d80:	bf00      	nop
 8105d82:	370c      	adds	r7, #12
 8105d84:	46bd      	mov	sp, r7
 8105d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d8a:	4770      	bx	lr
 8105d8c:	10000010 	.word	0x10000010

08105d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8105d90:	f3ef 8009 	mrs	r0, PSP
 8105d94:	f3bf 8f6f 	isb	sy
 8105d98:	4b15      	ldr	r3, [pc, #84]	@ (8105df0 <pxCurrentTCBConst>)
 8105d9a:	681a      	ldr	r2, [r3, #0]
 8105d9c:	f01e 0f10 	tst.w	lr, #16
 8105da0:	bf08      	it	eq
 8105da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8105da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105daa:	6010      	str	r0, [r2, #0]
 8105dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8105db0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8105db4:	f380 8811 	msr	BASEPRI, r0
 8105db8:	f3bf 8f4f 	dsb	sy
 8105dbc:	f3bf 8f6f 	isb	sy
 8105dc0:	f001 fc92 	bl	81076e8 <vTaskSwitchContext>
 8105dc4:	f04f 0000 	mov.w	r0, #0
 8105dc8:	f380 8811 	msr	BASEPRI, r0
 8105dcc:	bc09      	pop	{r0, r3}
 8105dce:	6819      	ldr	r1, [r3, #0]
 8105dd0:	6808      	ldr	r0, [r1, #0]
 8105dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105dd6:	f01e 0f10 	tst.w	lr, #16
 8105dda:	bf08      	it	eq
 8105ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8105de0:	f380 8809 	msr	PSP, r0
 8105de4:	f3bf 8f6f 	isb	sy
 8105de8:	4770      	bx	lr
 8105dea:	bf00      	nop
 8105dec:	f3af 8000 	nop.w

08105df0 <pxCurrentTCBConst>:
 8105df0:	10004590 	.word	0x10004590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8105df4:	bf00      	nop
 8105df6:	bf00      	nop

08105df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8105df8:	b580      	push	{r7, lr}
 8105dfa:	b082      	sub	sp, #8
 8105dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8105dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105e02:	f383 8811 	msr	BASEPRI, r3
 8105e06:	f3bf 8f6f 	isb	sy
 8105e0a:	f3bf 8f4f 	dsb	sy
 8105e0e:	607b      	str	r3, [r7, #4]
}
 8105e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8105e12:	f001 fbaf 	bl	8107574 <xTaskIncrementTick>
 8105e16:	4603      	mov	r3, r0
 8105e18:	2b00      	cmp	r3, #0
 8105e1a:	d003      	beq.n	8105e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8105e1c:	4b06      	ldr	r3, [pc, #24]	@ (8105e38 <xPortSysTickHandler+0x40>)
 8105e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105e22:	601a      	str	r2, [r3, #0]
 8105e24:	2300      	movs	r3, #0
 8105e26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8105e28:	683b      	ldr	r3, [r7, #0]
 8105e2a:	f383 8811 	msr	BASEPRI, r3
}
 8105e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8105e30:	bf00      	nop
 8105e32:	3708      	adds	r7, #8
 8105e34:	46bd      	mov	sp, r7
 8105e36:	bd80      	pop	{r7, pc}
 8105e38:	e000ed04 	.word	0xe000ed04

08105e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8105e3c:	b480      	push	{r7}
 8105e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8105e40:	4b0b      	ldr	r3, [pc, #44]	@ (8105e70 <vPortSetupTimerInterrupt+0x34>)
 8105e42:	2200      	movs	r2, #0
 8105e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8105e46:	4b0b      	ldr	r3, [pc, #44]	@ (8105e74 <vPortSetupTimerInterrupt+0x38>)
 8105e48:	2200      	movs	r2, #0
 8105e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8105e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8105e78 <vPortSetupTimerInterrupt+0x3c>)
 8105e4e:	681b      	ldr	r3, [r3, #0]
 8105e50:	4a0a      	ldr	r2, [pc, #40]	@ (8105e7c <vPortSetupTimerInterrupt+0x40>)
 8105e52:	fba2 2303 	umull	r2, r3, r2, r3
 8105e56:	099b      	lsrs	r3, r3, #6
 8105e58:	4a09      	ldr	r2, [pc, #36]	@ (8105e80 <vPortSetupTimerInterrupt+0x44>)
 8105e5a:	3b01      	subs	r3, #1
 8105e5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8105e5e:	4b04      	ldr	r3, [pc, #16]	@ (8105e70 <vPortSetupTimerInterrupt+0x34>)
 8105e60:	2207      	movs	r2, #7
 8105e62:	601a      	str	r2, [r3, #0]
}
 8105e64:	bf00      	nop
 8105e66:	46bd      	mov	sp, r7
 8105e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e6c:	4770      	bx	lr
 8105e6e:	bf00      	nop
 8105e70:	e000e010 	.word	0xe000e010
 8105e74:	e000e018 	.word	0xe000e018
 8105e78:	10000004 	.word	0x10000004
 8105e7c:	10624dd3 	.word	0x10624dd3
 8105e80:	e000e014 	.word	0xe000e014

08105e84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8105e84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8105e94 <vPortEnableVFP+0x10>
 8105e88:	6801      	ldr	r1, [r0, #0]
 8105e8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8105e8e:	6001      	str	r1, [r0, #0]
 8105e90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8105e92:	bf00      	nop
 8105e94:	e000ed88 	.word	0xe000ed88

08105e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8105e98:	b480      	push	{r7}
 8105e9a:	b085      	sub	sp, #20
 8105e9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8105e9e:	f3ef 8305 	mrs	r3, IPSR
 8105ea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8105ea4:	68fb      	ldr	r3, [r7, #12]
 8105ea6:	2b0f      	cmp	r3, #15
 8105ea8:	d915      	bls.n	8105ed6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8105eaa:	4a18      	ldr	r2, [pc, #96]	@ (8105f0c <vPortValidateInterruptPriority+0x74>)
 8105eac:	68fb      	ldr	r3, [r7, #12]
 8105eae:	4413      	add	r3, r2
 8105eb0:	781b      	ldrb	r3, [r3, #0]
 8105eb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8105eb4:	4b16      	ldr	r3, [pc, #88]	@ (8105f10 <vPortValidateInterruptPriority+0x78>)
 8105eb6:	781b      	ldrb	r3, [r3, #0]
 8105eb8:	7afa      	ldrb	r2, [r7, #11]
 8105eba:	429a      	cmp	r2, r3
 8105ebc:	d20b      	bcs.n	8105ed6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8105ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105ec2:	f383 8811 	msr	BASEPRI, r3
 8105ec6:	f3bf 8f6f 	isb	sy
 8105eca:	f3bf 8f4f 	dsb	sy
 8105ece:	607b      	str	r3, [r7, #4]
}
 8105ed0:	bf00      	nop
 8105ed2:	bf00      	nop
 8105ed4:	e7fd      	b.n	8105ed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8105ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8105f14 <vPortValidateInterruptPriority+0x7c>)
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8105ede:	4b0e      	ldr	r3, [pc, #56]	@ (8105f18 <vPortValidateInterruptPriority+0x80>)
 8105ee0:	681b      	ldr	r3, [r3, #0]
 8105ee2:	429a      	cmp	r2, r3
 8105ee4:	d90b      	bls.n	8105efe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8105ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105eea:	f383 8811 	msr	BASEPRI, r3
 8105eee:	f3bf 8f6f 	isb	sy
 8105ef2:	f3bf 8f4f 	dsb	sy
 8105ef6:	603b      	str	r3, [r7, #0]
}
 8105ef8:	bf00      	nop
 8105efa:	bf00      	nop
 8105efc:	e7fd      	b.n	8105efa <vPortValidateInterruptPriority+0x62>
	}
 8105efe:	bf00      	nop
 8105f00:	3714      	adds	r7, #20
 8105f02:	46bd      	mov	sp, r7
 8105f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f08:	4770      	bx	lr
 8105f0a:	bf00      	nop
 8105f0c:	e000e3f0 	.word	0xe000e3f0
 8105f10:	10004548 	.word	0x10004548
 8105f14:	e000ed0c 	.word	0xe000ed0c
 8105f18:	1000454c 	.word	0x1000454c

08105f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8105f1c:	b580      	push	{r7, lr}
 8105f1e:	b084      	sub	sp, #16
 8105f20:	af00      	add	r7, sp, #0
 8105f22:	6078      	str	r0, [r7, #4]
 8105f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8105f2a:	68fb      	ldr	r3, [r7, #12]
 8105f2c:	2b00      	cmp	r3, #0
 8105f2e:	d10b      	bne.n	8105f48 <xQueueGenericReset+0x2c>
	__asm volatile
 8105f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8105f34:	f383 8811 	msr	BASEPRI, r3
 8105f38:	f3bf 8f6f 	isb	sy
 8105f3c:	f3bf 8f4f 	dsb	sy
 8105f40:	60bb      	str	r3, [r7, #8]
}
 8105f42:	bf00      	nop
 8105f44:	bf00      	nop
 8105f46:	e7fd      	b.n	8105f44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8105f48:	f7ff fec6 	bl	8105cd8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105f4c:	68fb      	ldr	r3, [r7, #12]
 8105f4e:	681a      	ldr	r2, [r3, #0]
 8105f50:	68fb      	ldr	r3, [r7, #12]
 8105f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105f54:	68f9      	ldr	r1, [r7, #12]
 8105f56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8105f58:	fb01 f303 	mul.w	r3, r1, r3
 8105f5c:	441a      	add	r2, r3
 8105f5e:	68fb      	ldr	r3, [r7, #12]
 8105f60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8105f62:	68fb      	ldr	r3, [r7, #12]
 8105f64:	2200      	movs	r2, #0
 8105f66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8105f68:	68fb      	ldr	r3, [r7, #12]
 8105f6a:	681a      	ldr	r2, [r3, #0]
 8105f6c:	68fb      	ldr	r3, [r7, #12]
 8105f6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105f70:	68fb      	ldr	r3, [r7, #12]
 8105f72:	681a      	ldr	r2, [r3, #0]
 8105f74:	68fb      	ldr	r3, [r7, #12]
 8105f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105f78:	3b01      	subs	r3, #1
 8105f7a:	68f9      	ldr	r1, [r7, #12]
 8105f7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8105f7e:	fb01 f303 	mul.w	r3, r1, r3
 8105f82:	441a      	add	r2, r3
 8105f84:	68fb      	ldr	r3, [r7, #12]
 8105f86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8105f88:	68fb      	ldr	r3, [r7, #12]
 8105f8a:	22ff      	movs	r2, #255	@ 0xff
 8105f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8105f90:	68fb      	ldr	r3, [r7, #12]
 8105f92:	22ff      	movs	r2, #255	@ 0xff
 8105f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8105f98:	683b      	ldr	r3, [r7, #0]
 8105f9a:	2b00      	cmp	r3, #0
 8105f9c:	d114      	bne.n	8105fc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8105f9e:	68fb      	ldr	r3, [r7, #12]
 8105fa0:	691b      	ldr	r3, [r3, #16]
 8105fa2:	2b00      	cmp	r3, #0
 8105fa4:	d01a      	beq.n	8105fdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105fa6:	68fb      	ldr	r3, [r7, #12]
 8105fa8:	3310      	adds	r3, #16
 8105faa:	4618      	mov	r0, r3
 8105fac:	f001 fc4c 	bl	8107848 <xTaskRemoveFromEventList>
 8105fb0:	4603      	mov	r3, r0
 8105fb2:	2b00      	cmp	r3, #0
 8105fb4:	d012      	beq.n	8105fdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8105fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8105fec <xQueueGenericReset+0xd0>)
 8105fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8105fbc:	601a      	str	r2, [r3, #0]
 8105fbe:	f3bf 8f4f 	dsb	sy
 8105fc2:	f3bf 8f6f 	isb	sy
 8105fc6:	e009      	b.n	8105fdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8105fc8:	68fb      	ldr	r3, [r7, #12]
 8105fca:	3310      	adds	r3, #16
 8105fcc:	4618      	mov	r0, r3
 8105fce:	f7ff fc9b 	bl	8105908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8105fd2:	68fb      	ldr	r3, [r7, #12]
 8105fd4:	3324      	adds	r3, #36	@ 0x24
 8105fd6:	4618      	mov	r0, r3
 8105fd8:	f7ff fc96 	bl	8105908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8105fdc:	f7ff feae 	bl	8105d3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8105fe0:	2301      	movs	r3, #1
}
 8105fe2:	4618      	mov	r0, r3
 8105fe4:	3710      	adds	r7, #16
 8105fe6:	46bd      	mov	sp, r7
 8105fe8:	bd80      	pop	{r7, pc}
 8105fea:	bf00      	nop
 8105fec:	e000ed04 	.word	0xe000ed04

08105ff0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8105ff0:	b580      	push	{r7, lr}
 8105ff2:	b08e      	sub	sp, #56	@ 0x38
 8105ff4:	af02      	add	r7, sp, #8
 8105ff6:	60f8      	str	r0, [r7, #12]
 8105ff8:	60b9      	str	r1, [r7, #8]
 8105ffa:	607a      	str	r2, [r7, #4]
 8105ffc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8105ffe:	68fb      	ldr	r3, [r7, #12]
 8106000:	2b00      	cmp	r3, #0
 8106002:	d10b      	bne.n	810601c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8106004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106008:	f383 8811 	msr	BASEPRI, r3
 810600c:	f3bf 8f6f 	isb	sy
 8106010:	f3bf 8f4f 	dsb	sy
 8106014:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8106016:	bf00      	nop
 8106018:	bf00      	nop
 810601a:	e7fd      	b.n	8106018 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810601c:	683b      	ldr	r3, [r7, #0]
 810601e:	2b00      	cmp	r3, #0
 8106020:	d10b      	bne.n	810603a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8106022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106026:	f383 8811 	msr	BASEPRI, r3
 810602a:	f3bf 8f6f 	isb	sy
 810602e:	f3bf 8f4f 	dsb	sy
 8106032:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8106034:	bf00      	nop
 8106036:	bf00      	nop
 8106038:	e7fd      	b.n	8106036 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	2b00      	cmp	r3, #0
 810603e:	d002      	beq.n	8106046 <xQueueGenericCreateStatic+0x56>
 8106040:	68bb      	ldr	r3, [r7, #8]
 8106042:	2b00      	cmp	r3, #0
 8106044:	d001      	beq.n	810604a <xQueueGenericCreateStatic+0x5a>
 8106046:	2301      	movs	r3, #1
 8106048:	e000      	b.n	810604c <xQueueGenericCreateStatic+0x5c>
 810604a:	2300      	movs	r3, #0
 810604c:	2b00      	cmp	r3, #0
 810604e:	d10b      	bne.n	8106068 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8106050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106054:	f383 8811 	msr	BASEPRI, r3
 8106058:	f3bf 8f6f 	isb	sy
 810605c:	f3bf 8f4f 	dsb	sy
 8106060:	623b      	str	r3, [r7, #32]
}
 8106062:	bf00      	nop
 8106064:	bf00      	nop
 8106066:	e7fd      	b.n	8106064 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	2b00      	cmp	r3, #0
 810606c:	d102      	bne.n	8106074 <xQueueGenericCreateStatic+0x84>
 810606e:	68bb      	ldr	r3, [r7, #8]
 8106070:	2b00      	cmp	r3, #0
 8106072:	d101      	bne.n	8106078 <xQueueGenericCreateStatic+0x88>
 8106074:	2301      	movs	r3, #1
 8106076:	e000      	b.n	810607a <xQueueGenericCreateStatic+0x8a>
 8106078:	2300      	movs	r3, #0
 810607a:	2b00      	cmp	r3, #0
 810607c:	d10b      	bne.n	8106096 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106082:	f383 8811 	msr	BASEPRI, r3
 8106086:	f3bf 8f6f 	isb	sy
 810608a:	f3bf 8f4f 	dsb	sy
 810608e:	61fb      	str	r3, [r7, #28]
}
 8106090:	bf00      	nop
 8106092:	bf00      	nop
 8106094:	e7fd      	b.n	8106092 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8106096:	2350      	movs	r3, #80	@ 0x50
 8106098:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810609a:	697b      	ldr	r3, [r7, #20]
 810609c:	2b50      	cmp	r3, #80	@ 0x50
 810609e:	d00b      	beq.n	81060b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 81060a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81060a4:	f383 8811 	msr	BASEPRI, r3
 81060a8:	f3bf 8f6f 	isb	sy
 81060ac:	f3bf 8f4f 	dsb	sy
 81060b0:	61bb      	str	r3, [r7, #24]
}
 81060b2:	bf00      	nop
 81060b4:	bf00      	nop
 81060b6:	e7fd      	b.n	81060b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81060b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81060ba:	683b      	ldr	r3, [r7, #0]
 81060bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 81060be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81060c0:	2b00      	cmp	r3, #0
 81060c2:	d00d      	beq.n	81060e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81060c6:	2201      	movs	r2, #1
 81060c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81060cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 81060d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81060d2:	9300      	str	r3, [sp, #0]
 81060d4:	4613      	mov	r3, r2
 81060d6:	687a      	ldr	r2, [r7, #4]
 81060d8:	68b9      	ldr	r1, [r7, #8]
 81060da:	68f8      	ldr	r0, [r7, #12]
 81060dc:	f000 f840 	bl	8106160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81060e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 81060e2:	4618      	mov	r0, r3
 81060e4:	3730      	adds	r7, #48	@ 0x30
 81060e6:	46bd      	mov	sp, r7
 81060e8:	bd80      	pop	{r7, pc}

081060ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 81060ea:	b580      	push	{r7, lr}
 81060ec:	b08a      	sub	sp, #40	@ 0x28
 81060ee:	af02      	add	r7, sp, #8
 81060f0:	60f8      	str	r0, [r7, #12]
 81060f2:	60b9      	str	r1, [r7, #8]
 81060f4:	4613      	mov	r3, r2
 81060f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 81060f8:	68fb      	ldr	r3, [r7, #12]
 81060fa:	2b00      	cmp	r3, #0
 81060fc:	d10b      	bne.n	8106116 <xQueueGenericCreate+0x2c>
	__asm volatile
 81060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106102:	f383 8811 	msr	BASEPRI, r3
 8106106:	f3bf 8f6f 	isb	sy
 810610a:	f3bf 8f4f 	dsb	sy
 810610e:	613b      	str	r3, [r7, #16]
}
 8106110:	bf00      	nop
 8106112:	bf00      	nop
 8106114:	e7fd      	b.n	8106112 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106116:	68fb      	ldr	r3, [r7, #12]
 8106118:	68ba      	ldr	r2, [r7, #8]
 810611a:	fb02 f303 	mul.w	r3, r2, r3
 810611e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8106120:	69fb      	ldr	r3, [r7, #28]
 8106122:	3350      	adds	r3, #80	@ 0x50
 8106124:	4618      	mov	r0, r3
 8106126:	f7ff fa01 	bl	810552c <pvPortMalloc>
 810612a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810612c:	69bb      	ldr	r3, [r7, #24]
 810612e:	2b00      	cmp	r3, #0
 8106130:	d011      	beq.n	8106156 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8106132:	69bb      	ldr	r3, [r7, #24]
 8106134:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106136:	697b      	ldr	r3, [r7, #20]
 8106138:	3350      	adds	r3, #80	@ 0x50
 810613a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810613c:	69bb      	ldr	r3, [r7, #24]
 810613e:	2200      	movs	r2, #0
 8106140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8106144:	79fa      	ldrb	r2, [r7, #7]
 8106146:	69bb      	ldr	r3, [r7, #24]
 8106148:	9300      	str	r3, [sp, #0]
 810614a:	4613      	mov	r3, r2
 810614c:	697a      	ldr	r2, [r7, #20]
 810614e:	68b9      	ldr	r1, [r7, #8]
 8106150:	68f8      	ldr	r0, [r7, #12]
 8106152:	f000 f805 	bl	8106160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8106156:	69bb      	ldr	r3, [r7, #24]
	}
 8106158:	4618      	mov	r0, r3
 810615a:	3720      	adds	r7, #32
 810615c:	46bd      	mov	sp, r7
 810615e:	bd80      	pop	{r7, pc}

08106160 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8106160:	b580      	push	{r7, lr}
 8106162:	b084      	sub	sp, #16
 8106164:	af00      	add	r7, sp, #0
 8106166:	60f8      	str	r0, [r7, #12]
 8106168:	60b9      	str	r1, [r7, #8]
 810616a:	607a      	str	r2, [r7, #4]
 810616c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810616e:	68bb      	ldr	r3, [r7, #8]
 8106170:	2b00      	cmp	r3, #0
 8106172:	d103      	bne.n	810617c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8106174:	69bb      	ldr	r3, [r7, #24]
 8106176:	69ba      	ldr	r2, [r7, #24]
 8106178:	601a      	str	r2, [r3, #0]
 810617a:	e002      	b.n	8106182 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810617c:	69bb      	ldr	r3, [r7, #24]
 810617e:	687a      	ldr	r2, [r7, #4]
 8106180:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8106182:	69bb      	ldr	r3, [r7, #24]
 8106184:	68fa      	ldr	r2, [r7, #12]
 8106186:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8106188:	69bb      	ldr	r3, [r7, #24]
 810618a:	68ba      	ldr	r2, [r7, #8]
 810618c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810618e:	2101      	movs	r1, #1
 8106190:	69b8      	ldr	r0, [r7, #24]
 8106192:	f7ff fec3 	bl	8105f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8106196:	69bb      	ldr	r3, [r7, #24]
 8106198:	78fa      	ldrb	r2, [r7, #3]
 810619a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810619e:	bf00      	nop
 81061a0:	3710      	adds	r7, #16
 81061a2:	46bd      	mov	sp, r7
 81061a4:	bd80      	pop	{r7, pc}

081061a6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 81061a6:	b580      	push	{r7, lr}
 81061a8:	b08a      	sub	sp, #40	@ 0x28
 81061aa:	af02      	add	r7, sp, #8
 81061ac:	60f8      	str	r0, [r7, #12]
 81061ae:	60b9      	str	r1, [r7, #8]
 81061b0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 81061b2:	68fb      	ldr	r3, [r7, #12]
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	d10b      	bne.n	81061d0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 81061b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81061bc:	f383 8811 	msr	BASEPRI, r3
 81061c0:	f3bf 8f6f 	isb	sy
 81061c4:	f3bf 8f4f 	dsb	sy
 81061c8:	61bb      	str	r3, [r7, #24]
}
 81061ca:	bf00      	nop
 81061cc:	bf00      	nop
 81061ce:	e7fd      	b.n	81061cc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 81061d0:	68ba      	ldr	r2, [r7, #8]
 81061d2:	68fb      	ldr	r3, [r7, #12]
 81061d4:	429a      	cmp	r2, r3
 81061d6:	d90b      	bls.n	81061f0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 81061d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81061dc:	f383 8811 	msr	BASEPRI, r3
 81061e0:	f3bf 8f6f 	isb	sy
 81061e4:	f3bf 8f4f 	dsb	sy
 81061e8:	617b      	str	r3, [r7, #20]
}
 81061ea:	bf00      	nop
 81061ec:	bf00      	nop
 81061ee:	e7fd      	b.n	81061ec <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 81061f0:	2302      	movs	r3, #2
 81061f2:	9300      	str	r3, [sp, #0]
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	2200      	movs	r2, #0
 81061f8:	2100      	movs	r1, #0
 81061fa:	68f8      	ldr	r0, [r7, #12]
 81061fc:	f7ff fef8 	bl	8105ff0 <xQueueGenericCreateStatic>
 8106200:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8106202:	69fb      	ldr	r3, [r7, #28]
 8106204:	2b00      	cmp	r3, #0
 8106206:	d002      	beq.n	810620e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8106208:	69fb      	ldr	r3, [r7, #28]
 810620a:	68ba      	ldr	r2, [r7, #8]
 810620c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 810620e:	69fb      	ldr	r3, [r7, #28]
	}
 8106210:	4618      	mov	r0, r3
 8106212:	3720      	adds	r7, #32
 8106214:	46bd      	mov	sp, r7
 8106216:	bd80      	pop	{r7, pc}

08106218 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8106218:	b580      	push	{r7, lr}
 810621a:	b086      	sub	sp, #24
 810621c:	af00      	add	r7, sp, #0
 810621e:	6078      	str	r0, [r7, #4]
 8106220:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	2b00      	cmp	r3, #0
 8106226:	d10b      	bne.n	8106240 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8106228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810622c:	f383 8811 	msr	BASEPRI, r3
 8106230:	f3bf 8f6f 	isb	sy
 8106234:	f3bf 8f4f 	dsb	sy
 8106238:	613b      	str	r3, [r7, #16]
}
 810623a:	bf00      	nop
 810623c:	bf00      	nop
 810623e:	e7fd      	b.n	810623c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8106240:	683a      	ldr	r2, [r7, #0]
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	429a      	cmp	r2, r3
 8106246:	d90b      	bls.n	8106260 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8106248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810624c:	f383 8811 	msr	BASEPRI, r3
 8106250:	f3bf 8f6f 	isb	sy
 8106254:	f3bf 8f4f 	dsb	sy
 8106258:	60fb      	str	r3, [r7, #12]
}
 810625a:	bf00      	nop
 810625c:	bf00      	nop
 810625e:	e7fd      	b.n	810625c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8106260:	2202      	movs	r2, #2
 8106262:	2100      	movs	r1, #0
 8106264:	6878      	ldr	r0, [r7, #4]
 8106266:	f7ff ff40 	bl	81060ea <xQueueGenericCreate>
 810626a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 810626c:	697b      	ldr	r3, [r7, #20]
 810626e:	2b00      	cmp	r3, #0
 8106270:	d002      	beq.n	8106278 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8106272:	697b      	ldr	r3, [r7, #20]
 8106274:	683a      	ldr	r2, [r7, #0]
 8106276:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8106278:	697b      	ldr	r3, [r7, #20]
	}
 810627a:	4618      	mov	r0, r3
 810627c:	3718      	adds	r7, #24
 810627e:	46bd      	mov	sp, r7
 8106280:	bd80      	pop	{r7, pc}
	...

08106284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8106284:	b580      	push	{r7, lr}
 8106286:	b08e      	sub	sp, #56	@ 0x38
 8106288:	af00      	add	r7, sp, #0
 810628a:	60f8      	str	r0, [r7, #12]
 810628c:	60b9      	str	r1, [r7, #8]
 810628e:	607a      	str	r2, [r7, #4]
 8106290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8106292:	2300      	movs	r3, #0
 8106294:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106296:	68fb      	ldr	r3, [r7, #12]
 8106298:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810629c:	2b00      	cmp	r3, #0
 810629e:	d10b      	bne.n	81062b8 <xQueueGenericSend+0x34>
	__asm volatile
 81062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81062a4:	f383 8811 	msr	BASEPRI, r3
 81062a8:	f3bf 8f6f 	isb	sy
 81062ac:	f3bf 8f4f 	dsb	sy
 81062b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 81062b2:	bf00      	nop
 81062b4:	bf00      	nop
 81062b6:	e7fd      	b.n	81062b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81062b8:	68bb      	ldr	r3, [r7, #8]
 81062ba:	2b00      	cmp	r3, #0
 81062bc:	d103      	bne.n	81062c6 <xQueueGenericSend+0x42>
 81062be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81062c2:	2b00      	cmp	r3, #0
 81062c4:	d101      	bne.n	81062ca <xQueueGenericSend+0x46>
 81062c6:	2301      	movs	r3, #1
 81062c8:	e000      	b.n	81062cc <xQueueGenericSend+0x48>
 81062ca:	2300      	movs	r3, #0
 81062cc:	2b00      	cmp	r3, #0
 81062ce:	d10b      	bne.n	81062e8 <xQueueGenericSend+0x64>
	__asm volatile
 81062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81062d4:	f383 8811 	msr	BASEPRI, r3
 81062d8:	f3bf 8f6f 	isb	sy
 81062dc:	f3bf 8f4f 	dsb	sy
 81062e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81062e2:	bf00      	nop
 81062e4:	bf00      	nop
 81062e6:	e7fd      	b.n	81062e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81062e8:	683b      	ldr	r3, [r7, #0]
 81062ea:	2b02      	cmp	r3, #2
 81062ec:	d103      	bne.n	81062f6 <xQueueGenericSend+0x72>
 81062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81062f2:	2b01      	cmp	r3, #1
 81062f4:	d101      	bne.n	81062fa <xQueueGenericSend+0x76>
 81062f6:	2301      	movs	r3, #1
 81062f8:	e000      	b.n	81062fc <xQueueGenericSend+0x78>
 81062fa:	2300      	movs	r3, #0
 81062fc:	2b00      	cmp	r3, #0
 81062fe:	d10b      	bne.n	8106318 <xQueueGenericSend+0x94>
	__asm volatile
 8106300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106304:	f383 8811 	msr	BASEPRI, r3
 8106308:	f3bf 8f6f 	isb	sy
 810630c:	f3bf 8f4f 	dsb	sy
 8106310:	623b      	str	r3, [r7, #32]
}
 8106312:	bf00      	nop
 8106314:	bf00      	nop
 8106316:	e7fd      	b.n	8106314 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106318:	f001 fc56 	bl	8107bc8 <xTaskGetSchedulerState>
 810631c:	4603      	mov	r3, r0
 810631e:	2b00      	cmp	r3, #0
 8106320:	d102      	bne.n	8106328 <xQueueGenericSend+0xa4>
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	2b00      	cmp	r3, #0
 8106326:	d101      	bne.n	810632c <xQueueGenericSend+0xa8>
 8106328:	2301      	movs	r3, #1
 810632a:	e000      	b.n	810632e <xQueueGenericSend+0xaa>
 810632c:	2300      	movs	r3, #0
 810632e:	2b00      	cmp	r3, #0
 8106330:	d10b      	bne.n	810634a <xQueueGenericSend+0xc6>
	__asm volatile
 8106332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106336:	f383 8811 	msr	BASEPRI, r3
 810633a:	f3bf 8f6f 	isb	sy
 810633e:	f3bf 8f4f 	dsb	sy
 8106342:	61fb      	str	r3, [r7, #28]
}
 8106344:	bf00      	nop
 8106346:	bf00      	nop
 8106348:	e7fd      	b.n	8106346 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810634a:	f7ff fcc5 	bl	8105cd8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8106352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106356:	429a      	cmp	r2, r3
 8106358:	d302      	bcc.n	8106360 <xQueueGenericSend+0xdc>
 810635a:	683b      	ldr	r3, [r7, #0]
 810635c:	2b02      	cmp	r3, #2
 810635e:	d129      	bne.n	81063b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106360:	683a      	ldr	r2, [r7, #0]
 8106362:	68b9      	ldr	r1, [r7, #8]
 8106364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106366:	f000 fc6d 	bl	8106c44 <prvCopyDataToQueue>
 810636a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106370:	2b00      	cmp	r3, #0
 8106372:	d010      	beq.n	8106396 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106376:	3324      	adds	r3, #36	@ 0x24
 8106378:	4618      	mov	r0, r3
 810637a:	f001 fa65 	bl	8107848 <xTaskRemoveFromEventList>
 810637e:	4603      	mov	r3, r0
 8106380:	2b00      	cmp	r3, #0
 8106382:	d013      	beq.n	81063ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8106384:	4b3f      	ldr	r3, [pc, #252]	@ (8106484 <xQueueGenericSend+0x200>)
 8106386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810638a:	601a      	str	r2, [r3, #0]
 810638c:	f3bf 8f4f 	dsb	sy
 8106390:	f3bf 8f6f 	isb	sy
 8106394:	e00a      	b.n	81063ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8106396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106398:	2b00      	cmp	r3, #0
 810639a:	d007      	beq.n	81063ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810639c:	4b39      	ldr	r3, [pc, #228]	@ (8106484 <xQueueGenericSend+0x200>)
 810639e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81063a2:	601a      	str	r2, [r3, #0]
 81063a4:	f3bf 8f4f 	dsb	sy
 81063a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 81063ac:	f7ff fcc6 	bl	8105d3c <vPortExitCritical>
				return pdPASS;
 81063b0:	2301      	movs	r3, #1
 81063b2:	e063      	b.n	810647c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	2b00      	cmp	r3, #0
 81063b8:	d103      	bne.n	81063c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81063ba:	f7ff fcbf 	bl	8105d3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 81063be:	2300      	movs	r3, #0
 81063c0:	e05c      	b.n	810647c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81063c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81063c4:	2b00      	cmp	r3, #0
 81063c6:	d106      	bne.n	81063d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81063c8:	f107 0314 	add.w	r3, r7, #20
 81063cc:	4618      	mov	r0, r3
 81063ce:	f001 fa9f 	bl	8107910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81063d2:	2301      	movs	r3, #1
 81063d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81063d6:	f7ff fcb1 	bl	8105d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81063da:	f001 f80f 	bl	81073fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81063de:	f7ff fc7b 	bl	8105cd8 <vPortEnterCritical>
 81063e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81063e8:	b25b      	sxtb	r3, r3
 81063ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81063ee:	d103      	bne.n	81063f8 <xQueueGenericSend+0x174>
 81063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063f2:	2200      	movs	r2, #0
 81063f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81063fe:	b25b      	sxtb	r3, r3
 8106400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8106404:	d103      	bne.n	810640e <xQueueGenericSend+0x18a>
 8106406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106408:	2200      	movs	r2, #0
 810640a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810640e:	f7ff fc95 	bl	8105d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106412:	1d3a      	adds	r2, r7, #4
 8106414:	f107 0314 	add.w	r3, r7, #20
 8106418:	4611      	mov	r1, r2
 810641a:	4618      	mov	r0, r3
 810641c:	f001 fa8e 	bl	810793c <xTaskCheckForTimeOut>
 8106420:	4603      	mov	r3, r0
 8106422:	2b00      	cmp	r3, #0
 8106424:	d124      	bne.n	8106470 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8106426:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106428:	f000 fd04 	bl	8106e34 <prvIsQueueFull>
 810642c:	4603      	mov	r3, r0
 810642e:	2b00      	cmp	r3, #0
 8106430:	d018      	beq.n	8106464 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8106432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106434:	3310      	adds	r3, #16
 8106436:	687a      	ldr	r2, [r7, #4]
 8106438:	4611      	mov	r1, r2
 810643a:	4618      	mov	r0, r3
 810643c:	f001 f9b2 	bl	81077a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8106440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106442:	f000 fc8f 	bl	8106d64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8106446:	f000 ffe7 	bl	8107418 <xTaskResumeAll>
 810644a:	4603      	mov	r3, r0
 810644c:	2b00      	cmp	r3, #0
 810644e:	f47f af7c 	bne.w	810634a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8106452:	4b0c      	ldr	r3, [pc, #48]	@ (8106484 <xQueueGenericSend+0x200>)
 8106454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106458:	601a      	str	r2, [r3, #0]
 810645a:	f3bf 8f4f 	dsb	sy
 810645e:	f3bf 8f6f 	isb	sy
 8106462:	e772      	b.n	810634a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8106464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106466:	f000 fc7d 	bl	8106d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810646a:	f000 ffd5 	bl	8107418 <xTaskResumeAll>
 810646e:	e76c      	b.n	810634a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8106470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106472:	f000 fc77 	bl	8106d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106476:	f000 ffcf 	bl	8107418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810647a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810647c:	4618      	mov	r0, r3
 810647e:	3738      	adds	r7, #56	@ 0x38
 8106480:	46bd      	mov	sp, r7
 8106482:	bd80      	pop	{r7, pc}
 8106484:	e000ed04 	.word	0xe000ed04

08106488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8106488:	b580      	push	{r7, lr}
 810648a:	b090      	sub	sp, #64	@ 0x40
 810648c:	af00      	add	r7, sp, #0
 810648e:	60f8      	str	r0, [r7, #12]
 8106490:	60b9      	str	r1, [r7, #8]
 8106492:	607a      	str	r2, [r7, #4]
 8106494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8106496:	68fb      	ldr	r3, [r7, #12]
 8106498:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810649a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810649c:	2b00      	cmp	r3, #0
 810649e:	d10b      	bne.n	81064b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 81064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81064a4:	f383 8811 	msr	BASEPRI, r3
 81064a8:	f3bf 8f6f 	isb	sy
 81064ac:	f3bf 8f4f 	dsb	sy
 81064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 81064b2:	bf00      	nop
 81064b4:	bf00      	nop
 81064b6:	e7fd      	b.n	81064b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81064b8:	68bb      	ldr	r3, [r7, #8]
 81064ba:	2b00      	cmp	r3, #0
 81064bc:	d103      	bne.n	81064c6 <xQueueGenericSendFromISR+0x3e>
 81064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81064c2:	2b00      	cmp	r3, #0
 81064c4:	d101      	bne.n	81064ca <xQueueGenericSendFromISR+0x42>
 81064c6:	2301      	movs	r3, #1
 81064c8:	e000      	b.n	81064cc <xQueueGenericSendFromISR+0x44>
 81064ca:	2300      	movs	r3, #0
 81064cc:	2b00      	cmp	r3, #0
 81064ce:	d10b      	bne.n	81064e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 81064d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81064d4:	f383 8811 	msr	BASEPRI, r3
 81064d8:	f3bf 8f6f 	isb	sy
 81064dc:	f3bf 8f4f 	dsb	sy
 81064e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 81064e2:	bf00      	nop
 81064e4:	bf00      	nop
 81064e6:	e7fd      	b.n	81064e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81064e8:	683b      	ldr	r3, [r7, #0]
 81064ea:	2b02      	cmp	r3, #2
 81064ec:	d103      	bne.n	81064f6 <xQueueGenericSendFromISR+0x6e>
 81064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81064f2:	2b01      	cmp	r3, #1
 81064f4:	d101      	bne.n	81064fa <xQueueGenericSendFromISR+0x72>
 81064f6:	2301      	movs	r3, #1
 81064f8:	e000      	b.n	81064fc <xQueueGenericSendFromISR+0x74>
 81064fa:	2300      	movs	r3, #0
 81064fc:	2b00      	cmp	r3, #0
 81064fe:	d10b      	bne.n	8106518 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8106500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106504:	f383 8811 	msr	BASEPRI, r3
 8106508:	f3bf 8f6f 	isb	sy
 810650c:	f3bf 8f4f 	dsb	sy
 8106510:	623b      	str	r3, [r7, #32]
}
 8106512:	bf00      	nop
 8106514:	bf00      	nop
 8106516:	e7fd      	b.n	8106514 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106518:	f7ff fcbe 	bl	8105e98 <vPortValidateInterruptPriority>
	__asm volatile
 810651c:	f3ef 8211 	mrs	r2, BASEPRI
 8106520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106524:	f383 8811 	msr	BASEPRI, r3
 8106528:	f3bf 8f6f 	isb	sy
 810652c:	f3bf 8f4f 	dsb	sy
 8106530:	61fa      	str	r2, [r7, #28]
 8106532:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8106534:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106536:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810653a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810653e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106540:	429a      	cmp	r2, r3
 8106542:	d302      	bcc.n	810654a <xQueueGenericSendFromISR+0xc2>
 8106544:	683b      	ldr	r3, [r7, #0]
 8106546:	2b02      	cmp	r3, #2
 8106548:	d12f      	bne.n	81065aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810654c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106550:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106558:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810655a:	683a      	ldr	r2, [r7, #0]
 810655c:	68b9      	ldr	r1, [r7, #8]
 810655e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8106560:	f000 fb70 	bl	8106c44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8106564:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8106568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810656c:	d112      	bne.n	8106594 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106572:	2b00      	cmp	r3, #0
 8106574:	d016      	beq.n	81065a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106578:	3324      	adds	r3, #36	@ 0x24
 810657a:	4618      	mov	r0, r3
 810657c:	f001 f964 	bl	8107848 <xTaskRemoveFromEventList>
 8106580:	4603      	mov	r3, r0
 8106582:	2b00      	cmp	r3, #0
 8106584:	d00e      	beq.n	81065a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	2b00      	cmp	r3, #0
 810658a:	d00b      	beq.n	81065a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	2201      	movs	r2, #1
 8106590:	601a      	str	r2, [r3, #0]
 8106592:	e007      	b.n	81065a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8106594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8106598:	3301      	adds	r3, #1
 810659a:	b2db      	uxtb	r3, r3
 810659c:	b25a      	sxtb	r2, r3
 810659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81065a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 81065a4:	2301      	movs	r3, #1
 81065a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 81065a8:	e001      	b.n	81065ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81065aa:	2300      	movs	r3, #0
 81065ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81065ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81065b0:	617b      	str	r3, [r7, #20]
	__asm volatile
 81065b2:	697b      	ldr	r3, [r7, #20]
 81065b4:	f383 8811 	msr	BASEPRI, r3
}
 81065b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81065ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 81065bc:	4618      	mov	r0, r3
 81065be:	3740      	adds	r7, #64	@ 0x40
 81065c0:	46bd      	mov	sp, r7
 81065c2:	bd80      	pop	{r7, pc}

081065c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 81065c4:	b580      	push	{r7, lr}
 81065c6:	b08e      	sub	sp, #56	@ 0x38
 81065c8:	af00      	add	r7, sp, #0
 81065ca:	6078      	str	r0, [r7, #4]
 81065cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 81065d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065d4:	2b00      	cmp	r3, #0
 81065d6:	d10b      	bne.n	81065f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 81065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81065dc:	f383 8811 	msr	BASEPRI, r3
 81065e0:	f3bf 8f6f 	isb	sy
 81065e4:	f3bf 8f4f 	dsb	sy
 81065e8:	623b      	str	r3, [r7, #32]
}
 81065ea:	bf00      	nop
 81065ec:	bf00      	nop
 81065ee:	e7fd      	b.n	81065ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 81065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81065f4:	2b00      	cmp	r3, #0
 81065f6:	d00b      	beq.n	8106610 <xQueueGiveFromISR+0x4c>
	__asm volatile
 81065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81065fc:	f383 8811 	msr	BASEPRI, r3
 8106600:	f3bf 8f6f 	isb	sy
 8106604:	f3bf 8f4f 	dsb	sy
 8106608:	61fb      	str	r3, [r7, #28]
}
 810660a:	bf00      	nop
 810660c:	bf00      	nop
 810660e:	e7fd      	b.n	810660c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8106610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106612:	681b      	ldr	r3, [r3, #0]
 8106614:	2b00      	cmp	r3, #0
 8106616:	d103      	bne.n	8106620 <xQueueGiveFromISR+0x5c>
 8106618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810661a:	689b      	ldr	r3, [r3, #8]
 810661c:	2b00      	cmp	r3, #0
 810661e:	d101      	bne.n	8106624 <xQueueGiveFromISR+0x60>
 8106620:	2301      	movs	r3, #1
 8106622:	e000      	b.n	8106626 <xQueueGiveFromISR+0x62>
 8106624:	2300      	movs	r3, #0
 8106626:	2b00      	cmp	r3, #0
 8106628:	d10b      	bne.n	8106642 <xQueueGiveFromISR+0x7e>
	__asm volatile
 810662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810662e:	f383 8811 	msr	BASEPRI, r3
 8106632:	f3bf 8f6f 	isb	sy
 8106636:	f3bf 8f4f 	dsb	sy
 810663a:	61bb      	str	r3, [r7, #24]
}
 810663c:	bf00      	nop
 810663e:	bf00      	nop
 8106640:	e7fd      	b.n	810663e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106642:	f7ff fc29 	bl	8105e98 <vPortValidateInterruptPriority>
	__asm volatile
 8106646:	f3ef 8211 	mrs	r2, BASEPRI
 810664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810664e:	f383 8811 	msr	BASEPRI, r3
 8106652:	f3bf 8f6f 	isb	sy
 8106656:	f3bf 8f4f 	dsb	sy
 810665a:	617a      	str	r2, [r7, #20]
 810665c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 810665e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106660:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106666:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8106668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810666c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810666e:	429a      	cmp	r2, r3
 8106670:	d22b      	bcs.n	81066ca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8106672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810667e:	1c5a      	adds	r2, r3, #1
 8106680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106682:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8106684:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8106688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810668c:	d112      	bne.n	81066b4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106692:	2b00      	cmp	r3, #0
 8106694:	d016      	beq.n	81066c4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106698:	3324      	adds	r3, #36	@ 0x24
 810669a:	4618      	mov	r0, r3
 810669c:	f001 f8d4 	bl	8107848 <xTaskRemoveFromEventList>
 81066a0:	4603      	mov	r3, r0
 81066a2:	2b00      	cmp	r3, #0
 81066a4:	d00e      	beq.n	81066c4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81066a6:	683b      	ldr	r3, [r7, #0]
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	d00b      	beq.n	81066c4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81066ac:	683b      	ldr	r3, [r7, #0]
 81066ae:	2201      	movs	r2, #1
 81066b0:	601a      	str	r2, [r3, #0]
 81066b2:	e007      	b.n	81066c4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81066b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81066b8:	3301      	adds	r3, #1
 81066ba:	b2db      	uxtb	r3, r3
 81066bc:	b25a      	sxtb	r2, r3
 81066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81066c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 81066c4:	2301      	movs	r3, #1
 81066c6:	637b      	str	r3, [r7, #52]	@ 0x34
 81066c8:	e001      	b.n	81066ce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81066ca:	2300      	movs	r3, #0
 81066cc:	637b      	str	r3, [r7, #52]	@ 0x34
 81066ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81066d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 81066d2:	68fb      	ldr	r3, [r7, #12]
 81066d4:	f383 8811 	msr	BASEPRI, r3
}
 81066d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81066dc:	4618      	mov	r0, r3
 81066de:	3738      	adds	r7, #56	@ 0x38
 81066e0:	46bd      	mov	sp, r7
 81066e2:	bd80      	pop	{r7, pc}

081066e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81066e4:	b580      	push	{r7, lr}
 81066e6:	b08c      	sub	sp, #48	@ 0x30
 81066e8:	af00      	add	r7, sp, #0
 81066ea:	60f8      	str	r0, [r7, #12]
 81066ec:	60b9      	str	r1, [r7, #8]
 81066ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81066f0:	2300      	movs	r3, #0
 81066f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81066f4:	68fb      	ldr	r3, [r7, #12]
 81066f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81066fa:	2b00      	cmp	r3, #0
 81066fc:	d10b      	bne.n	8106716 <xQueueReceive+0x32>
	__asm volatile
 81066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106702:	f383 8811 	msr	BASEPRI, r3
 8106706:	f3bf 8f6f 	isb	sy
 810670a:	f3bf 8f4f 	dsb	sy
 810670e:	623b      	str	r3, [r7, #32]
}
 8106710:	bf00      	nop
 8106712:	bf00      	nop
 8106714:	e7fd      	b.n	8106712 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106716:	68bb      	ldr	r3, [r7, #8]
 8106718:	2b00      	cmp	r3, #0
 810671a:	d103      	bne.n	8106724 <xQueueReceive+0x40>
 810671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810671e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106720:	2b00      	cmp	r3, #0
 8106722:	d101      	bne.n	8106728 <xQueueReceive+0x44>
 8106724:	2301      	movs	r3, #1
 8106726:	e000      	b.n	810672a <xQueueReceive+0x46>
 8106728:	2300      	movs	r3, #0
 810672a:	2b00      	cmp	r3, #0
 810672c:	d10b      	bne.n	8106746 <xQueueReceive+0x62>
	__asm volatile
 810672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106732:	f383 8811 	msr	BASEPRI, r3
 8106736:	f3bf 8f6f 	isb	sy
 810673a:	f3bf 8f4f 	dsb	sy
 810673e:	61fb      	str	r3, [r7, #28]
}
 8106740:	bf00      	nop
 8106742:	bf00      	nop
 8106744:	e7fd      	b.n	8106742 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106746:	f001 fa3f 	bl	8107bc8 <xTaskGetSchedulerState>
 810674a:	4603      	mov	r3, r0
 810674c:	2b00      	cmp	r3, #0
 810674e:	d102      	bne.n	8106756 <xQueueReceive+0x72>
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	2b00      	cmp	r3, #0
 8106754:	d101      	bne.n	810675a <xQueueReceive+0x76>
 8106756:	2301      	movs	r3, #1
 8106758:	e000      	b.n	810675c <xQueueReceive+0x78>
 810675a:	2300      	movs	r3, #0
 810675c:	2b00      	cmp	r3, #0
 810675e:	d10b      	bne.n	8106778 <xQueueReceive+0x94>
	__asm volatile
 8106760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106764:	f383 8811 	msr	BASEPRI, r3
 8106768:	f3bf 8f6f 	isb	sy
 810676c:	f3bf 8f4f 	dsb	sy
 8106770:	61bb      	str	r3, [r7, #24]
}
 8106772:	bf00      	nop
 8106774:	bf00      	nop
 8106776:	e7fd      	b.n	8106774 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106778:	f7ff faae 	bl	8105cd8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810677c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810677e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106780:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8106782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106784:	2b00      	cmp	r3, #0
 8106786:	d01f      	beq.n	81067c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8106788:	68b9      	ldr	r1, [r7, #8]
 810678a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810678c:	f000 fac4 	bl	8106d18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8106790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106792:	1e5a      	subs	r2, r3, #1
 8106794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106796:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810679a:	691b      	ldr	r3, [r3, #16]
 810679c:	2b00      	cmp	r3, #0
 810679e:	d00f      	beq.n	81067c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81067a2:	3310      	adds	r3, #16
 81067a4:	4618      	mov	r0, r3
 81067a6:	f001 f84f 	bl	8107848 <xTaskRemoveFromEventList>
 81067aa:	4603      	mov	r3, r0
 81067ac:	2b00      	cmp	r3, #0
 81067ae:	d007      	beq.n	81067c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81067b0:	4b3c      	ldr	r3, [pc, #240]	@ (81068a4 <xQueueReceive+0x1c0>)
 81067b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81067b6:	601a      	str	r2, [r3, #0]
 81067b8:	f3bf 8f4f 	dsb	sy
 81067bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81067c0:	f7ff fabc 	bl	8105d3c <vPortExitCritical>
				return pdPASS;
 81067c4:	2301      	movs	r3, #1
 81067c6:	e069      	b.n	810689c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	2b00      	cmp	r3, #0
 81067cc:	d103      	bne.n	81067d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81067ce:	f7ff fab5 	bl	8105d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81067d2:	2300      	movs	r3, #0
 81067d4:	e062      	b.n	810689c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81067d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81067d8:	2b00      	cmp	r3, #0
 81067da:	d106      	bne.n	81067ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81067dc:	f107 0310 	add.w	r3, r7, #16
 81067e0:	4618      	mov	r0, r3
 81067e2:	f001 f895 	bl	8107910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81067e6:	2301      	movs	r3, #1
 81067e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81067ea:	f7ff faa7 	bl	8105d3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81067ee:	f000 fe05 	bl	81073fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81067f2:	f7ff fa71 	bl	8105cd8 <vPortEnterCritical>
 81067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81067f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81067fc:	b25b      	sxtb	r3, r3
 81067fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8106802:	d103      	bne.n	810680c <xQueueReceive+0x128>
 8106804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106806:	2200      	movs	r2, #0
 8106808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810680e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106812:	b25b      	sxtb	r3, r3
 8106814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8106818:	d103      	bne.n	8106822 <xQueueReceive+0x13e>
 810681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810681c:	2200      	movs	r2, #0
 810681e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106822:	f7ff fa8b 	bl	8105d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106826:	1d3a      	adds	r2, r7, #4
 8106828:	f107 0310 	add.w	r3, r7, #16
 810682c:	4611      	mov	r1, r2
 810682e:	4618      	mov	r0, r3
 8106830:	f001 f884 	bl	810793c <xTaskCheckForTimeOut>
 8106834:	4603      	mov	r3, r0
 8106836:	2b00      	cmp	r3, #0
 8106838:	d123      	bne.n	8106882 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810683a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810683c:	f000 fae4 	bl	8106e08 <prvIsQueueEmpty>
 8106840:	4603      	mov	r3, r0
 8106842:	2b00      	cmp	r3, #0
 8106844:	d017      	beq.n	8106876 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8106846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106848:	3324      	adds	r3, #36	@ 0x24
 810684a:	687a      	ldr	r2, [r7, #4]
 810684c:	4611      	mov	r1, r2
 810684e:	4618      	mov	r0, r3
 8106850:	f000 ffa8 	bl	81077a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8106854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106856:	f000 fa85 	bl	8106d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810685a:	f000 fddd 	bl	8107418 <xTaskResumeAll>
 810685e:	4603      	mov	r3, r0
 8106860:	2b00      	cmp	r3, #0
 8106862:	d189      	bne.n	8106778 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8106864:	4b0f      	ldr	r3, [pc, #60]	@ (81068a4 <xQueueReceive+0x1c0>)
 8106866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810686a:	601a      	str	r2, [r3, #0]
 810686c:	f3bf 8f4f 	dsb	sy
 8106870:	f3bf 8f6f 	isb	sy
 8106874:	e780      	b.n	8106778 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8106876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106878:	f000 fa74 	bl	8106d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810687c:	f000 fdcc 	bl	8107418 <xTaskResumeAll>
 8106880:	e77a      	b.n	8106778 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8106882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8106884:	f000 fa6e 	bl	8106d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106888:	f000 fdc6 	bl	8107418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810688c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810688e:	f000 fabb 	bl	8106e08 <prvIsQueueEmpty>
 8106892:	4603      	mov	r3, r0
 8106894:	2b00      	cmp	r3, #0
 8106896:	f43f af6f 	beq.w	8106778 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810689a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810689c:	4618      	mov	r0, r3
 810689e:	3730      	adds	r7, #48	@ 0x30
 81068a0:	46bd      	mov	sp, r7
 81068a2:	bd80      	pop	{r7, pc}
 81068a4:	e000ed04 	.word	0xe000ed04

081068a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 81068a8:	b580      	push	{r7, lr}
 81068aa:	b08e      	sub	sp, #56	@ 0x38
 81068ac:	af00      	add	r7, sp, #0
 81068ae:	6078      	str	r0, [r7, #4]
 81068b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 81068b2:	2300      	movs	r3, #0
 81068b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81068b6:	687b      	ldr	r3, [r7, #4]
 81068b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 81068ba:	2300      	movs	r3, #0
 81068bc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81068c0:	2b00      	cmp	r3, #0
 81068c2:	d10b      	bne.n	81068dc <xQueueSemaphoreTake+0x34>
	__asm volatile
 81068c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81068c8:	f383 8811 	msr	BASEPRI, r3
 81068cc:	f3bf 8f6f 	isb	sy
 81068d0:	f3bf 8f4f 	dsb	sy
 81068d4:	623b      	str	r3, [r7, #32]
}
 81068d6:	bf00      	nop
 81068d8:	bf00      	nop
 81068da:	e7fd      	b.n	81068d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 81068dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81068e0:	2b00      	cmp	r3, #0
 81068e2:	d00b      	beq.n	81068fc <xQueueSemaphoreTake+0x54>
	__asm volatile
 81068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81068e8:	f383 8811 	msr	BASEPRI, r3
 81068ec:	f3bf 8f6f 	isb	sy
 81068f0:	f3bf 8f4f 	dsb	sy
 81068f4:	61fb      	str	r3, [r7, #28]
}
 81068f6:	bf00      	nop
 81068f8:	bf00      	nop
 81068fa:	e7fd      	b.n	81068f8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81068fc:	f001 f964 	bl	8107bc8 <xTaskGetSchedulerState>
 8106900:	4603      	mov	r3, r0
 8106902:	2b00      	cmp	r3, #0
 8106904:	d102      	bne.n	810690c <xQueueSemaphoreTake+0x64>
 8106906:	683b      	ldr	r3, [r7, #0]
 8106908:	2b00      	cmp	r3, #0
 810690a:	d101      	bne.n	8106910 <xQueueSemaphoreTake+0x68>
 810690c:	2301      	movs	r3, #1
 810690e:	e000      	b.n	8106912 <xQueueSemaphoreTake+0x6a>
 8106910:	2300      	movs	r3, #0
 8106912:	2b00      	cmp	r3, #0
 8106914:	d10b      	bne.n	810692e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8106916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810691a:	f383 8811 	msr	BASEPRI, r3
 810691e:	f3bf 8f6f 	isb	sy
 8106922:	f3bf 8f4f 	dsb	sy
 8106926:	61bb      	str	r3, [r7, #24]
}
 8106928:	bf00      	nop
 810692a:	bf00      	nop
 810692c:	e7fd      	b.n	810692a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810692e:	f7ff f9d3 	bl	8105cd8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8106932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106936:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8106938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810693a:	2b00      	cmp	r3, #0
 810693c:	d024      	beq.n	8106988 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106940:	1e5a      	subs	r2, r3, #1
 8106942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106944:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8106946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106948:	681b      	ldr	r3, [r3, #0]
 810694a:	2b00      	cmp	r3, #0
 810694c:	d104      	bne.n	8106958 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810694e:	f001 fab5 	bl	8107ebc <pvTaskIncrementMutexHeldCount>
 8106952:	4602      	mov	r2, r0
 8106954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106956:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810695a:	691b      	ldr	r3, [r3, #16]
 810695c:	2b00      	cmp	r3, #0
 810695e:	d00f      	beq.n	8106980 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106962:	3310      	adds	r3, #16
 8106964:	4618      	mov	r0, r3
 8106966:	f000 ff6f 	bl	8107848 <xTaskRemoveFromEventList>
 810696a:	4603      	mov	r3, r0
 810696c:	2b00      	cmp	r3, #0
 810696e:	d007      	beq.n	8106980 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8106970:	4b54      	ldr	r3, [pc, #336]	@ (8106ac4 <xQueueSemaphoreTake+0x21c>)
 8106972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106976:	601a      	str	r2, [r3, #0]
 8106978:	f3bf 8f4f 	dsb	sy
 810697c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8106980:	f7ff f9dc 	bl	8105d3c <vPortExitCritical>
				return pdPASS;
 8106984:	2301      	movs	r3, #1
 8106986:	e098      	b.n	8106aba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106988:	683b      	ldr	r3, [r7, #0]
 810698a:	2b00      	cmp	r3, #0
 810698c:	d112      	bne.n	81069b4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106990:	2b00      	cmp	r3, #0
 8106992:	d00b      	beq.n	81069ac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8106994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106998:	f383 8811 	msr	BASEPRI, r3
 810699c:	f3bf 8f6f 	isb	sy
 81069a0:	f3bf 8f4f 	dsb	sy
 81069a4:	617b      	str	r3, [r7, #20]
}
 81069a6:	bf00      	nop
 81069a8:	bf00      	nop
 81069aa:	e7fd      	b.n	81069a8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 81069ac:	f7ff f9c6 	bl	8105d3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81069b0:	2300      	movs	r3, #0
 81069b2:	e082      	b.n	8106aba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 81069b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	d106      	bne.n	81069c8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81069ba:	f107 030c 	add.w	r3, r7, #12
 81069be:	4618      	mov	r0, r3
 81069c0:	f000 ffa6 	bl	8107910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81069c4:	2301      	movs	r3, #1
 81069c6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81069c8:	f7ff f9b8 	bl	8105d3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 81069cc:	f000 fd16 	bl	81073fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81069d0:	f7ff f982 	bl	8105cd8 <vPortEnterCritical>
 81069d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81069d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81069da:	b25b      	sxtb	r3, r3
 81069dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81069e0:	d103      	bne.n	81069ea <xQueueSemaphoreTake+0x142>
 81069e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81069e4:	2200      	movs	r2, #0
 81069e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81069ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81069f0:	b25b      	sxtb	r3, r3
 81069f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81069f6:	d103      	bne.n	8106a00 <xQueueSemaphoreTake+0x158>
 81069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81069fa:	2200      	movs	r2, #0
 81069fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106a00:	f7ff f99c 	bl	8105d3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106a04:	463a      	mov	r2, r7
 8106a06:	f107 030c 	add.w	r3, r7, #12
 8106a0a:	4611      	mov	r1, r2
 8106a0c:	4618      	mov	r0, r3
 8106a0e:	f000 ff95 	bl	810793c <xTaskCheckForTimeOut>
 8106a12:	4603      	mov	r3, r0
 8106a14:	2b00      	cmp	r3, #0
 8106a16:	d132      	bne.n	8106a7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8106a18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106a1a:	f000 f9f5 	bl	8106e08 <prvIsQueueEmpty>
 8106a1e:	4603      	mov	r3, r0
 8106a20:	2b00      	cmp	r3, #0
 8106a22:	d026      	beq.n	8106a72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8106a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a26:	681b      	ldr	r3, [r3, #0]
 8106a28:	2b00      	cmp	r3, #0
 8106a2a:	d109      	bne.n	8106a40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8106a2c:	f7ff f954 	bl	8105cd8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8106a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a32:	689b      	ldr	r3, [r3, #8]
 8106a34:	4618      	mov	r0, r3
 8106a36:	f001 f8e5 	bl	8107c04 <xTaskPriorityInherit>
 8106a3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8106a3c:	f7ff f97e 	bl	8105d3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8106a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106a42:	3324      	adds	r3, #36	@ 0x24
 8106a44:	683a      	ldr	r2, [r7, #0]
 8106a46:	4611      	mov	r1, r2
 8106a48:	4618      	mov	r0, r3
 8106a4a:	f000 feab 	bl	81077a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8106a4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106a50:	f000 f988 	bl	8106d64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8106a54:	f000 fce0 	bl	8107418 <xTaskResumeAll>
 8106a58:	4603      	mov	r3, r0
 8106a5a:	2b00      	cmp	r3, #0
 8106a5c:	f47f af67 	bne.w	810692e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8106a60:	4b18      	ldr	r3, [pc, #96]	@ (8106ac4 <xQueueSemaphoreTake+0x21c>)
 8106a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8106a66:	601a      	str	r2, [r3, #0]
 8106a68:	f3bf 8f4f 	dsb	sy
 8106a6c:	f3bf 8f6f 	isb	sy
 8106a70:	e75d      	b.n	810692e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8106a72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106a74:	f000 f976 	bl	8106d64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8106a78:	f000 fcce 	bl	8107418 <xTaskResumeAll>
 8106a7c:	e757      	b.n	810692e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8106a7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106a80:	f000 f970 	bl	8106d64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106a84:	f000 fcc8 	bl	8107418 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8106a88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106a8a:	f000 f9bd 	bl	8106e08 <prvIsQueueEmpty>
 8106a8e:	4603      	mov	r3, r0
 8106a90:	2b00      	cmp	r3, #0
 8106a92:	f43f af4c 	beq.w	810692e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8106a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a98:	2b00      	cmp	r3, #0
 8106a9a:	d00d      	beq.n	8106ab8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8106a9c:	f7ff f91c 	bl	8105cd8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8106aa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8106aa2:	f000 f8b7 	bl	8106c14 <prvGetDisinheritPriorityAfterTimeout>
 8106aa6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8106aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106aaa:	689b      	ldr	r3, [r3, #8]
 8106aac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8106aae:	4618      	mov	r0, r3
 8106ab0:	f001 f980 	bl	8107db4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8106ab4:	f7ff f942 	bl	8105d3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8106ab8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8106aba:	4618      	mov	r0, r3
 8106abc:	3738      	adds	r7, #56	@ 0x38
 8106abe:	46bd      	mov	sp, r7
 8106ac0:	bd80      	pop	{r7, pc}
 8106ac2:	bf00      	nop
 8106ac4:	e000ed04 	.word	0xe000ed04

08106ac8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8106ac8:	b580      	push	{r7, lr}
 8106aca:	b08e      	sub	sp, #56	@ 0x38
 8106acc:	af00      	add	r7, sp, #0
 8106ace:	60f8      	str	r0, [r7, #12]
 8106ad0:	60b9      	str	r1, [r7, #8]
 8106ad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8106ad4:	68fb      	ldr	r3, [r7, #12]
 8106ad6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8106ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ada:	2b00      	cmp	r3, #0
 8106adc:	d10b      	bne.n	8106af6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8106ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106ae2:	f383 8811 	msr	BASEPRI, r3
 8106ae6:	f3bf 8f6f 	isb	sy
 8106aea:	f3bf 8f4f 	dsb	sy
 8106aee:	623b      	str	r3, [r7, #32]
}
 8106af0:	bf00      	nop
 8106af2:	bf00      	nop
 8106af4:	e7fd      	b.n	8106af2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106af6:	68bb      	ldr	r3, [r7, #8]
 8106af8:	2b00      	cmp	r3, #0
 8106afa:	d103      	bne.n	8106b04 <xQueueReceiveFromISR+0x3c>
 8106afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106b00:	2b00      	cmp	r3, #0
 8106b02:	d101      	bne.n	8106b08 <xQueueReceiveFromISR+0x40>
 8106b04:	2301      	movs	r3, #1
 8106b06:	e000      	b.n	8106b0a <xQueueReceiveFromISR+0x42>
 8106b08:	2300      	movs	r3, #0
 8106b0a:	2b00      	cmp	r3, #0
 8106b0c:	d10b      	bne.n	8106b26 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8106b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b12:	f383 8811 	msr	BASEPRI, r3
 8106b16:	f3bf 8f6f 	isb	sy
 8106b1a:	f3bf 8f4f 	dsb	sy
 8106b1e:	61fb      	str	r3, [r7, #28]
}
 8106b20:	bf00      	nop
 8106b22:	bf00      	nop
 8106b24:	e7fd      	b.n	8106b22 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106b26:	f7ff f9b7 	bl	8105e98 <vPortValidateInterruptPriority>
	__asm volatile
 8106b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8106b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106b32:	f383 8811 	msr	BASEPRI, r3
 8106b36:	f3bf 8f6f 	isb	sy
 8106b3a:	f3bf 8f4f 	dsb	sy
 8106b3e:	61ba      	str	r2, [r7, #24]
 8106b40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8106b42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8106b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106b4e:	2b00      	cmp	r3, #0
 8106b50:	d02f      	beq.n	8106bb2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8106b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8106b5c:	68b9      	ldr	r1, [r7, #8]
 8106b5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8106b60:	f000 f8da 	bl	8106d18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8106b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106b66:	1e5a      	subs	r2, r3, #1
 8106b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8106b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8106b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8106b74:	d112      	bne.n	8106b9c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b78:	691b      	ldr	r3, [r3, #16]
 8106b7a:	2b00      	cmp	r3, #0
 8106b7c:	d016      	beq.n	8106bac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b80:	3310      	adds	r3, #16
 8106b82:	4618      	mov	r0, r3
 8106b84:	f000 fe60 	bl	8107848 <xTaskRemoveFromEventList>
 8106b88:	4603      	mov	r3, r0
 8106b8a:	2b00      	cmp	r3, #0
 8106b8c:	d00e      	beq.n	8106bac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8106b8e:	687b      	ldr	r3, [r7, #4]
 8106b90:	2b00      	cmp	r3, #0
 8106b92:	d00b      	beq.n	8106bac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	2201      	movs	r2, #1
 8106b98:	601a      	str	r2, [r3, #0]
 8106b9a:	e007      	b.n	8106bac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8106b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8106ba0:	3301      	adds	r3, #1
 8106ba2:	b2db      	uxtb	r3, r3
 8106ba4:	b25a      	sxtb	r2, r3
 8106ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8106bac:	2301      	movs	r3, #1
 8106bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8106bb0:	e001      	b.n	8106bb6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8106bb2:	2300      	movs	r3, #0
 8106bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8106bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8106bb8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8106bba:	693b      	ldr	r3, [r7, #16]
 8106bbc:	f383 8811 	msr	BASEPRI, r3
}
 8106bc0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8106bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8106bc4:	4618      	mov	r0, r3
 8106bc6:	3738      	adds	r7, #56	@ 0x38
 8106bc8:	46bd      	mov	sp, r7
 8106bca:	bd80      	pop	{r7, pc}

08106bcc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8106bcc:	b580      	push	{r7, lr}
 8106bce:	b084      	sub	sp, #16
 8106bd0:	af00      	add	r7, sp, #0
 8106bd2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8106bd8:	68fb      	ldr	r3, [r7, #12]
 8106bda:	2b00      	cmp	r3, #0
 8106bdc:	d10b      	bne.n	8106bf6 <vQueueDelete+0x2a>
	__asm volatile
 8106bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106be2:	f383 8811 	msr	BASEPRI, r3
 8106be6:	f3bf 8f6f 	isb	sy
 8106bea:	f3bf 8f4f 	dsb	sy
 8106bee:	60bb      	str	r3, [r7, #8]
}
 8106bf0:	bf00      	nop
 8106bf2:	bf00      	nop
 8106bf4:	e7fd      	b.n	8106bf2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8106bf6:	68f8      	ldr	r0, [r7, #12]
 8106bf8:	f000 f95e 	bl	8106eb8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8106bfc:	68fb      	ldr	r3, [r7, #12]
 8106bfe:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8106c02:	2b00      	cmp	r3, #0
 8106c04:	d102      	bne.n	8106c0c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8106c06:	68f8      	ldr	r0, [r7, #12]
 8106c08:	f7fe fd5e 	bl	81056c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8106c0c:	bf00      	nop
 8106c0e:	3710      	adds	r7, #16
 8106c10:	46bd      	mov	sp, r7
 8106c12:	bd80      	pop	{r7, pc}

08106c14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8106c14:	b480      	push	{r7}
 8106c16:	b085      	sub	sp, #20
 8106c18:	af00      	add	r7, sp, #0
 8106c1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8106c1c:	687b      	ldr	r3, [r7, #4]
 8106c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106c20:	2b00      	cmp	r3, #0
 8106c22:	d006      	beq.n	8106c32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8106c28:	681b      	ldr	r3, [r3, #0]
 8106c2a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8106c2e:	60fb      	str	r3, [r7, #12]
 8106c30:	e001      	b.n	8106c36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8106c32:	2300      	movs	r3, #0
 8106c34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8106c36:	68fb      	ldr	r3, [r7, #12]
	}
 8106c38:	4618      	mov	r0, r3
 8106c3a:	3714      	adds	r7, #20
 8106c3c:	46bd      	mov	sp, r7
 8106c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c42:	4770      	bx	lr

08106c44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8106c44:	b580      	push	{r7, lr}
 8106c46:	b086      	sub	sp, #24
 8106c48:	af00      	add	r7, sp, #0
 8106c4a:	60f8      	str	r0, [r7, #12]
 8106c4c:	60b9      	str	r1, [r7, #8]
 8106c4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8106c50:	2300      	movs	r3, #0
 8106c52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106c54:	68fb      	ldr	r3, [r7, #12]
 8106c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106c58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8106c5a:	68fb      	ldr	r3, [r7, #12]
 8106c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c5e:	2b00      	cmp	r3, #0
 8106c60:	d10d      	bne.n	8106c7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8106c62:	68fb      	ldr	r3, [r7, #12]
 8106c64:	681b      	ldr	r3, [r3, #0]
 8106c66:	2b00      	cmp	r3, #0
 8106c68:	d14d      	bne.n	8106d06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8106c6a:	68fb      	ldr	r3, [r7, #12]
 8106c6c:	689b      	ldr	r3, [r3, #8]
 8106c6e:	4618      	mov	r0, r3
 8106c70:	f001 f830 	bl	8107cd4 <xTaskPriorityDisinherit>
 8106c74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8106c76:	68fb      	ldr	r3, [r7, #12]
 8106c78:	2200      	movs	r2, #0
 8106c7a:	609a      	str	r2, [r3, #8]
 8106c7c:	e043      	b.n	8106d06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	2b00      	cmp	r3, #0
 8106c82:	d119      	bne.n	8106cb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8106c84:	68fb      	ldr	r3, [r7, #12]
 8106c86:	6858      	ldr	r0, [r3, #4]
 8106c88:	68fb      	ldr	r3, [r7, #12]
 8106c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c8c:	461a      	mov	r2, r3
 8106c8e:	68b9      	ldr	r1, [r7, #8]
 8106c90:	f004 fa05 	bl	810b09e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8106c94:	68fb      	ldr	r3, [r7, #12]
 8106c96:	685a      	ldr	r2, [r3, #4]
 8106c98:	68fb      	ldr	r3, [r7, #12]
 8106c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106c9c:	441a      	add	r2, r3
 8106c9e:	68fb      	ldr	r3, [r7, #12]
 8106ca0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8106ca2:	68fb      	ldr	r3, [r7, #12]
 8106ca4:	685a      	ldr	r2, [r3, #4]
 8106ca6:	68fb      	ldr	r3, [r7, #12]
 8106ca8:	689b      	ldr	r3, [r3, #8]
 8106caa:	429a      	cmp	r2, r3
 8106cac:	d32b      	bcc.n	8106d06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8106cae:	68fb      	ldr	r3, [r7, #12]
 8106cb0:	681a      	ldr	r2, [r3, #0]
 8106cb2:	68fb      	ldr	r3, [r7, #12]
 8106cb4:	605a      	str	r2, [r3, #4]
 8106cb6:	e026      	b.n	8106d06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8106cb8:	68fb      	ldr	r3, [r7, #12]
 8106cba:	68d8      	ldr	r0, [r3, #12]
 8106cbc:	68fb      	ldr	r3, [r7, #12]
 8106cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cc0:	461a      	mov	r2, r3
 8106cc2:	68b9      	ldr	r1, [r7, #8]
 8106cc4:	f004 f9eb 	bl	810b09e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8106cc8:	68fb      	ldr	r3, [r7, #12]
 8106cca:	68da      	ldr	r2, [r3, #12]
 8106ccc:	68fb      	ldr	r3, [r7, #12]
 8106cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cd0:	425b      	negs	r3, r3
 8106cd2:	441a      	add	r2, r3
 8106cd4:	68fb      	ldr	r3, [r7, #12]
 8106cd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8106cd8:	68fb      	ldr	r3, [r7, #12]
 8106cda:	68da      	ldr	r2, [r3, #12]
 8106cdc:	68fb      	ldr	r3, [r7, #12]
 8106cde:	681b      	ldr	r3, [r3, #0]
 8106ce0:	429a      	cmp	r2, r3
 8106ce2:	d207      	bcs.n	8106cf4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8106ce4:	68fb      	ldr	r3, [r7, #12]
 8106ce6:	689a      	ldr	r2, [r3, #8]
 8106ce8:	68fb      	ldr	r3, [r7, #12]
 8106cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106cec:	425b      	negs	r3, r3
 8106cee:	441a      	add	r2, r3
 8106cf0:	68fb      	ldr	r3, [r7, #12]
 8106cf2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	2b02      	cmp	r3, #2
 8106cf8:	d105      	bne.n	8106d06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8106cfa:	693b      	ldr	r3, [r7, #16]
 8106cfc:	2b00      	cmp	r3, #0
 8106cfe:	d002      	beq.n	8106d06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8106d00:	693b      	ldr	r3, [r7, #16]
 8106d02:	3b01      	subs	r3, #1
 8106d04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8106d06:	693b      	ldr	r3, [r7, #16]
 8106d08:	1c5a      	adds	r2, r3, #1
 8106d0a:	68fb      	ldr	r3, [r7, #12]
 8106d0c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8106d0e:	697b      	ldr	r3, [r7, #20]
}
 8106d10:	4618      	mov	r0, r3
 8106d12:	3718      	adds	r7, #24
 8106d14:	46bd      	mov	sp, r7
 8106d16:	bd80      	pop	{r7, pc}

08106d18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8106d18:	b580      	push	{r7, lr}
 8106d1a:	b082      	sub	sp, #8
 8106d1c:	af00      	add	r7, sp, #0
 8106d1e:	6078      	str	r0, [r7, #4]
 8106d20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8106d22:	687b      	ldr	r3, [r7, #4]
 8106d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d26:	2b00      	cmp	r3, #0
 8106d28:	d018      	beq.n	8106d5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	68da      	ldr	r2, [r3, #12]
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d32:	441a      	add	r2, r3
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	68da      	ldr	r2, [r3, #12]
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	689b      	ldr	r3, [r3, #8]
 8106d40:	429a      	cmp	r2, r3
 8106d42:	d303      	bcc.n	8106d4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8106d44:	687b      	ldr	r3, [r7, #4]
 8106d46:	681a      	ldr	r2, [r3, #0]
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	68d9      	ldr	r1, [r3, #12]
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8106d54:	461a      	mov	r2, r3
 8106d56:	6838      	ldr	r0, [r7, #0]
 8106d58:	f004 f9a1 	bl	810b09e <memcpy>
	}
}
 8106d5c:	bf00      	nop
 8106d5e:	3708      	adds	r7, #8
 8106d60:	46bd      	mov	sp, r7
 8106d62:	bd80      	pop	{r7, pc}

08106d64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8106d64:	b580      	push	{r7, lr}
 8106d66:	b084      	sub	sp, #16
 8106d68:	af00      	add	r7, sp, #0
 8106d6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8106d6c:	f7fe ffb4 	bl	8105cd8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8106d70:	687b      	ldr	r3, [r7, #4]
 8106d72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106d76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8106d78:	e011      	b.n	8106d9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8106d7e:	2b00      	cmp	r3, #0
 8106d80:	d012      	beq.n	8106da8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106d82:	687b      	ldr	r3, [r7, #4]
 8106d84:	3324      	adds	r3, #36	@ 0x24
 8106d86:	4618      	mov	r0, r3
 8106d88:	f000 fd5e 	bl	8107848 <xTaskRemoveFromEventList>
 8106d8c:	4603      	mov	r3, r0
 8106d8e:	2b00      	cmp	r3, #0
 8106d90:	d001      	beq.n	8106d96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8106d92:	f000 fe37 	bl	8107a04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8106d96:	7bfb      	ldrb	r3, [r7, #15]
 8106d98:	3b01      	subs	r3, #1
 8106d9a:	b2db      	uxtb	r3, r3
 8106d9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8106d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8106da2:	2b00      	cmp	r3, #0
 8106da4:	dce9      	bgt.n	8106d7a <prvUnlockQueue+0x16>
 8106da6:	e000      	b.n	8106daa <prvUnlockQueue+0x46>
					break;
 8106da8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8106daa:	687b      	ldr	r3, [r7, #4]
 8106dac:	22ff      	movs	r2, #255	@ 0xff
 8106dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8106db2:	f7fe ffc3 	bl	8105d3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8106db6:	f7fe ff8f 	bl	8105cd8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8106dba:	687b      	ldr	r3, [r7, #4]
 8106dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106dc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8106dc2:	e011      	b.n	8106de8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	691b      	ldr	r3, [r3, #16]
 8106dc8:	2b00      	cmp	r3, #0
 8106dca:	d012      	beq.n	8106df2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106dcc:	687b      	ldr	r3, [r7, #4]
 8106dce:	3310      	adds	r3, #16
 8106dd0:	4618      	mov	r0, r3
 8106dd2:	f000 fd39 	bl	8107848 <xTaskRemoveFromEventList>
 8106dd6:	4603      	mov	r3, r0
 8106dd8:	2b00      	cmp	r3, #0
 8106dda:	d001      	beq.n	8106de0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8106ddc:	f000 fe12 	bl	8107a04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8106de0:	7bbb      	ldrb	r3, [r7, #14]
 8106de2:	3b01      	subs	r3, #1
 8106de4:	b2db      	uxtb	r3, r3
 8106de6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8106de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106dec:	2b00      	cmp	r3, #0
 8106dee:	dce9      	bgt.n	8106dc4 <prvUnlockQueue+0x60>
 8106df0:	e000      	b.n	8106df4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8106df2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	22ff      	movs	r2, #255	@ 0xff
 8106df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8106dfc:	f7fe ff9e 	bl	8105d3c <vPortExitCritical>
}
 8106e00:	bf00      	nop
 8106e02:	3710      	adds	r7, #16
 8106e04:	46bd      	mov	sp, r7
 8106e06:	bd80      	pop	{r7, pc}

08106e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8106e08:	b580      	push	{r7, lr}
 8106e0a:	b084      	sub	sp, #16
 8106e0c:	af00      	add	r7, sp, #0
 8106e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8106e10:	f7fe ff62 	bl	8105cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106e18:	2b00      	cmp	r3, #0
 8106e1a:	d102      	bne.n	8106e22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8106e1c:	2301      	movs	r3, #1
 8106e1e:	60fb      	str	r3, [r7, #12]
 8106e20:	e001      	b.n	8106e26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8106e22:	2300      	movs	r3, #0
 8106e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8106e26:	f7fe ff89 	bl	8105d3c <vPortExitCritical>

	return xReturn;
 8106e2a:	68fb      	ldr	r3, [r7, #12]
}
 8106e2c:	4618      	mov	r0, r3
 8106e2e:	3710      	adds	r7, #16
 8106e30:	46bd      	mov	sp, r7
 8106e32:	bd80      	pop	{r7, pc}

08106e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8106e34:	b580      	push	{r7, lr}
 8106e36:	b084      	sub	sp, #16
 8106e38:	af00      	add	r7, sp, #0
 8106e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8106e3c:	f7fe ff4c 	bl	8105cd8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8106e48:	429a      	cmp	r2, r3
 8106e4a:	d102      	bne.n	8106e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8106e4c:	2301      	movs	r3, #1
 8106e4e:	60fb      	str	r3, [r7, #12]
 8106e50:	e001      	b.n	8106e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8106e52:	2300      	movs	r3, #0
 8106e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8106e56:	f7fe ff71 	bl	8105d3c <vPortExitCritical>

	return xReturn;
 8106e5a:	68fb      	ldr	r3, [r7, #12]
}
 8106e5c:	4618      	mov	r0, r3
 8106e5e:	3710      	adds	r7, #16
 8106e60:	46bd      	mov	sp, r7
 8106e62:	bd80      	pop	{r7, pc}

08106e64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8106e64:	b480      	push	{r7}
 8106e66:	b085      	sub	sp, #20
 8106e68:	af00      	add	r7, sp, #0
 8106e6a:	6078      	str	r0, [r7, #4]
 8106e6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106e6e:	2300      	movs	r3, #0
 8106e70:	60fb      	str	r3, [r7, #12]
 8106e72:	e014      	b.n	8106e9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8106e74:	4a0f      	ldr	r2, [pc, #60]	@ (8106eb4 <vQueueAddToRegistry+0x50>)
 8106e76:	68fb      	ldr	r3, [r7, #12]
 8106e78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8106e7c:	2b00      	cmp	r3, #0
 8106e7e:	d10b      	bne.n	8106e98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8106e80:	490c      	ldr	r1, [pc, #48]	@ (8106eb4 <vQueueAddToRegistry+0x50>)
 8106e82:	68fb      	ldr	r3, [r7, #12]
 8106e84:	683a      	ldr	r2, [r7, #0]
 8106e86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8106e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8106eb4 <vQueueAddToRegistry+0x50>)
 8106e8c:	68fb      	ldr	r3, [r7, #12]
 8106e8e:	00db      	lsls	r3, r3, #3
 8106e90:	4413      	add	r3, r2
 8106e92:	687a      	ldr	r2, [r7, #4]
 8106e94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8106e96:	e006      	b.n	8106ea6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106e98:	68fb      	ldr	r3, [r7, #12]
 8106e9a:	3301      	adds	r3, #1
 8106e9c:	60fb      	str	r3, [r7, #12]
 8106e9e:	68fb      	ldr	r3, [r7, #12]
 8106ea0:	2b07      	cmp	r3, #7
 8106ea2:	d9e7      	bls.n	8106e74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8106ea4:	bf00      	nop
 8106ea6:	bf00      	nop
 8106ea8:	3714      	adds	r7, #20
 8106eaa:	46bd      	mov	sp, r7
 8106eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eb0:	4770      	bx	lr
 8106eb2:	bf00      	nop
 8106eb4:	10004550 	.word	0x10004550

08106eb8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8106eb8:	b480      	push	{r7}
 8106eba:	b085      	sub	sp, #20
 8106ebc:	af00      	add	r7, sp, #0
 8106ebe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106ec0:	2300      	movs	r3, #0
 8106ec2:	60fb      	str	r3, [r7, #12]
 8106ec4:	e016      	b.n	8106ef4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8106ec6:	4a10      	ldr	r2, [pc, #64]	@ (8106f08 <vQueueUnregisterQueue+0x50>)
 8106ec8:	68fb      	ldr	r3, [r7, #12]
 8106eca:	00db      	lsls	r3, r3, #3
 8106ecc:	4413      	add	r3, r2
 8106ece:	685b      	ldr	r3, [r3, #4]
 8106ed0:	687a      	ldr	r2, [r7, #4]
 8106ed2:	429a      	cmp	r2, r3
 8106ed4:	d10b      	bne.n	8106eee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8106ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8106f08 <vQueueUnregisterQueue+0x50>)
 8106ed8:	68fb      	ldr	r3, [r7, #12]
 8106eda:	2100      	movs	r1, #0
 8106edc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8106ee0:	4a09      	ldr	r2, [pc, #36]	@ (8106f08 <vQueueUnregisterQueue+0x50>)
 8106ee2:	68fb      	ldr	r3, [r7, #12]
 8106ee4:	00db      	lsls	r3, r3, #3
 8106ee6:	4413      	add	r3, r2
 8106ee8:	2200      	movs	r2, #0
 8106eea:	605a      	str	r2, [r3, #4]
				break;
 8106eec:	e006      	b.n	8106efc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	3301      	adds	r3, #1
 8106ef2:	60fb      	str	r3, [r7, #12]
 8106ef4:	68fb      	ldr	r3, [r7, #12]
 8106ef6:	2b07      	cmp	r3, #7
 8106ef8:	d9e5      	bls.n	8106ec6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8106efa:	bf00      	nop
 8106efc:	bf00      	nop
 8106efe:	3714      	adds	r7, #20
 8106f00:	46bd      	mov	sp, r7
 8106f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f06:	4770      	bx	lr
 8106f08:	10004550 	.word	0x10004550

08106f0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106f0c:	b580      	push	{r7, lr}
 8106f0e:	b086      	sub	sp, #24
 8106f10:	af00      	add	r7, sp, #0
 8106f12:	60f8      	str	r0, [r7, #12]
 8106f14:	60b9      	str	r1, [r7, #8]
 8106f16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8106f18:	68fb      	ldr	r3, [r7, #12]
 8106f1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8106f1c:	f7fe fedc 	bl	8105cd8 <vPortEnterCritical>
 8106f20:	697b      	ldr	r3, [r7, #20]
 8106f22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8106f26:	b25b      	sxtb	r3, r3
 8106f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8106f2c:	d103      	bne.n	8106f36 <vQueueWaitForMessageRestricted+0x2a>
 8106f2e:	697b      	ldr	r3, [r7, #20]
 8106f30:	2200      	movs	r2, #0
 8106f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8106f36:	697b      	ldr	r3, [r7, #20]
 8106f38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8106f3c:	b25b      	sxtb	r3, r3
 8106f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8106f42:	d103      	bne.n	8106f4c <vQueueWaitForMessageRestricted+0x40>
 8106f44:	697b      	ldr	r3, [r7, #20]
 8106f46:	2200      	movs	r2, #0
 8106f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8106f4c:	f7fe fef6 	bl	8105d3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8106f50:	697b      	ldr	r3, [r7, #20]
 8106f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8106f54:	2b00      	cmp	r3, #0
 8106f56:	d106      	bne.n	8106f66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8106f58:	697b      	ldr	r3, [r7, #20]
 8106f5a:	3324      	adds	r3, #36	@ 0x24
 8106f5c:	687a      	ldr	r2, [r7, #4]
 8106f5e:	68b9      	ldr	r1, [r7, #8]
 8106f60:	4618      	mov	r0, r3
 8106f62:	f000 fc45 	bl	81077f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8106f66:	6978      	ldr	r0, [r7, #20]
 8106f68:	f7ff fefc 	bl	8106d64 <prvUnlockQueue>
	}
 8106f6c:	bf00      	nop
 8106f6e:	3718      	adds	r7, #24
 8106f70:	46bd      	mov	sp, r7
 8106f72:	bd80      	pop	{r7, pc}

08106f74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8106f74:	b580      	push	{r7, lr}
 8106f76:	b08e      	sub	sp, #56	@ 0x38
 8106f78:	af04      	add	r7, sp, #16
 8106f7a:	60f8      	str	r0, [r7, #12]
 8106f7c:	60b9      	str	r1, [r7, #8]
 8106f7e:	607a      	str	r2, [r7, #4]
 8106f80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8106f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f84:	2b00      	cmp	r3, #0
 8106f86:	d10b      	bne.n	8106fa0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8106f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106f8c:	f383 8811 	msr	BASEPRI, r3
 8106f90:	f3bf 8f6f 	isb	sy
 8106f94:	f3bf 8f4f 	dsb	sy
 8106f98:	623b      	str	r3, [r7, #32]
}
 8106f9a:	bf00      	nop
 8106f9c:	bf00      	nop
 8106f9e:	e7fd      	b.n	8106f9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8106fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fa2:	2b00      	cmp	r3, #0
 8106fa4:	d10b      	bne.n	8106fbe <xTaskCreateStatic+0x4a>
	__asm volatile
 8106fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106faa:	f383 8811 	msr	BASEPRI, r3
 8106fae:	f3bf 8f6f 	isb	sy
 8106fb2:	f3bf 8f4f 	dsb	sy
 8106fb6:	61fb      	str	r3, [r7, #28]
}
 8106fb8:	bf00      	nop
 8106fba:	bf00      	nop
 8106fbc:	e7fd      	b.n	8106fba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8106fbe:	235c      	movs	r3, #92	@ 0x5c
 8106fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8106fc2:	693b      	ldr	r3, [r7, #16]
 8106fc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8106fc6:	d00b      	beq.n	8106fe0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8106fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8106fcc:	f383 8811 	msr	BASEPRI, r3
 8106fd0:	f3bf 8f6f 	isb	sy
 8106fd4:	f3bf 8f4f 	dsb	sy
 8106fd8:	61bb      	str	r3, [r7, #24]
}
 8106fda:	bf00      	nop
 8106fdc:	bf00      	nop
 8106fde:	e7fd      	b.n	8106fdc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8106fe0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8106fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106fe4:	2b00      	cmp	r3, #0
 8106fe6:	d01e      	beq.n	8107026 <xTaskCreateStatic+0xb2>
 8106fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106fea:	2b00      	cmp	r3, #0
 8106fec:	d01b      	beq.n	8107026 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8106ff0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8106ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106ff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8106ff6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8106ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106ffa:	2202      	movs	r2, #2
 8106ffc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8107000:	2300      	movs	r3, #0
 8107002:	9303      	str	r3, [sp, #12]
 8107004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8107006:	9302      	str	r3, [sp, #8]
 8107008:	f107 0314 	add.w	r3, r7, #20
 810700c:	9301      	str	r3, [sp, #4]
 810700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107010:	9300      	str	r3, [sp, #0]
 8107012:	683b      	ldr	r3, [r7, #0]
 8107014:	687a      	ldr	r2, [r7, #4]
 8107016:	68b9      	ldr	r1, [r7, #8]
 8107018:	68f8      	ldr	r0, [r7, #12]
 810701a:	f000 f850 	bl	81070be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810701e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8107020:	f000 f8de 	bl	81071e0 <prvAddNewTaskToReadyList>
 8107024:	e001      	b.n	810702a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8107026:	2300      	movs	r3, #0
 8107028:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810702a:	697b      	ldr	r3, [r7, #20]
	}
 810702c:	4618      	mov	r0, r3
 810702e:	3728      	adds	r7, #40	@ 0x28
 8107030:	46bd      	mov	sp, r7
 8107032:	bd80      	pop	{r7, pc}

08107034 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8107034:	b580      	push	{r7, lr}
 8107036:	b08c      	sub	sp, #48	@ 0x30
 8107038:	af04      	add	r7, sp, #16
 810703a:	60f8      	str	r0, [r7, #12]
 810703c:	60b9      	str	r1, [r7, #8]
 810703e:	603b      	str	r3, [r7, #0]
 8107040:	4613      	mov	r3, r2
 8107042:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8107044:	88fb      	ldrh	r3, [r7, #6]
 8107046:	009b      	lsls	r3, r3, #2
 8107048:	4618      	mov	r0, r3
 810704a:	f7fe fa6f 	bl	810552c <pvPortMalloc>
 810704e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8107050:	697b      	ldr	r3, [r7, #20]
 8107052:	2b00      	cmp	r3, #0
 8107054:	d00e      	beq.n	8107074 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8107056:	205c      	movs	r0, #92	@ 0x5c
 8107058:	f7fe fa68 	bl	810552c <pvPortMalloc>
 810705c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810705e:	69fb      	ldr	r3, [r7, #28]
 8107060:	2b00      	cmp	r3, #0
 8107062:	d003      	beq.n	810706c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8107064:	69fb      	ldr	r3, [r7, #28]
 8107066:	697a      	ldr	r2, [r7, #20]
 8107068:	631a      	str	r2, [r3, #48]	@ 0x30
 810706a:	e005      	b.n	8107078 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810706c:	6978      	ldr	r0, [r7, #20]
 810706e:	f7fe fb2b 	bl	81056c8 <vPortFree>
 8107072:	e001      	b.n	8107078 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8107074:	2300      	movs	r3, #0
 8107076:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8107078:	69fb      	ldr	r3, [r7, #28]
 810707a:	2b00      	cmp	r3, #0
 810707c:	d017      	beq.n	81070ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810707e:	69fb      	ldr	r3, [r7, #28]
 8107080:	2200      	movs	r2, #0
 8107082:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8107086:	88fa      	ldrh	r2, [r7, #6]
 8107088:	2300      	movs	r3, #0
 810708a:	9303      	str	r3, [sp, #12]
 810708c:	69fb      	ldr	r3, [r7, #28]
 810708e:	9302      	str	r3, [sp, #8]
 8107090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107092:	9301      	str	r3, [sp, #4]
 8107094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107096:	9300      	str	r3, [sp, #0]
 8107098:	683b      	ldr	r3, [r7, #0]
 810709a:	68b9      	ldr	r1, [r7, #8]
 810709c:	68f8      	ldr	r0, [r7, #12]
 810709e:	f000 f80e 	bl	81070be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81070a2:	69f8      	ldr	r0, [r7, #28]
 81070a4:	f000 f89c 	bl	81071e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81070a8:	2301      	movs	r3, #1
 81070aa:	61bb      	str	r3, [r7, #24]
 81070ac:	e002      	b.n	81070b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81070ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 81070b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81070b4:	69bb      	ldr	r3, [r7, #24]
	}
 81070b6:	4618      	mov	r0, r3
 81070b8:	3720      	adds	r7, #32
 81070ba:	46bd      	mov	sp, r7
 81070bc:	bd80      	pop	{r7, pc}

081070be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81070be:	b580      	push	{r7, lr}
 81070c0:	b088      	sub	sp, #32
 81070c2:	af00      	add	r7, sp, #0
 81070c4:	60f8      	str	r0, [r7, #12]
 81070c6:	60b9      	str	r1, [r7, #8]
 81070c8:	607a      	str	r2, [r7, #4]
 81070ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	009b      	lsls	r3, r3, #2
 81070d4:	461a      	mov	r2, r3
 81070d6:	21a5      	movs	r1, #165	@ 0xa5
 81070d8:	f003 ff9b 	bl	810b012 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81070de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81070e0:	687b      	ldr	r3, [r7, #4]
 81070e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 81070e6:	3b01      	subs	r3, #1
 81070e8:	009b      	lsls	r3, r3, #2
 81070ea:	4413      	add	r3, r2
 81070ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81070ee:	69bb      	ldr	r3, [r7, #24]
 81070f0:	f023 0307 	bic.w	r3, r3, #7
 81070f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81070f6:	69bb      	ldr	r3, [r7, #24]
 81070f8:	f003 0307 	and.w	r3, r3, #7
 81070fc:	2b00      	cmp	r3, #0
 81070fe:	d00b      	beq.n	8107118 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8107100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107104:	f383 8811 	msr	BASEPRI, r3
 8107108:	f3bf 8f6f 	isb	sy
 810710c:	f3bf 8f4f 	dsb	sy
 8107110:	617b      	str	r3, [r7, #20]
}
 8107112:	bf00      	nop
 8107114:	bf00      	nop
 8107116:	e7fd      	b.n	8107114 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8107118:	68bb      	ldr	r3, [r7, #8]
 810711a:	2b00      	cmp	r3, #0
 810711c:	d01f      	beq.n	810715e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810711e:	2300      	movs	r3, #0
 8107120:	61fb      	str	r3, [r7, #28]
 8107122:	e012      	b.n	810714a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8107124:	68ba      	ldr	r2, [r7, #8]
 8107126:	69fb      	ldr	r3, [r7, #28]
 8107128:	4413      	add	r3, r2
 810712a:	7819      	ldrb	r1, [r3, #0]
 810712c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810712e:	69fb      	ldr	r3, [r7, #28]
 8107130:	4413      	add	r3, r2
 8107132:	3334      	adds	r3, #52	@ 0x34
 8107134:	460a      	mov	r2, r1
 8107136:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8107138:	68ba      	ldr	r2, [r7, #8]
 810713a:	69fb      	ldr	r3, [r7, #28]
 810713c:	4413      	add	r3, r2
 810713e:	781b      	ldrb	r3, [r3, #0]
 8107140:	2b00      	cmp	r3, #0
 8107142:	d006      	beq.n	8107152 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107144:	69fb      	ldr	r3, [r7, #28]
 8107146:	3301      	adds	r3, #1
 8107148:	61fb      	str	r3, [r7, #28]
 810714a:	69fb      	ldr	r3, [r7, #28]
 810714c:	2b0f      	cmp	r3, #15
 810714e:	d9e9      	bls.n	8107124 <prvInitialiseNewTask+0x66>
 8107150:	e000      	b.n	8107154 <prvInitialiseNewTask+0x96>
			{
				break;
 8107152:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8107154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107156:	2200      	movs	r2, #0
 8107158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810715c:	e003      	b.n	8107166 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107160:	2200      	movs	r2, #0
 8107162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8107166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107168:	2b37      	cmp	r3, #55	@ 0x37
 810716a:	d901      	bls.n	8107170 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810716c:	2337      	movs	r3, #55	@ 0x37
 810716e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8107170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8107174:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8107176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810717a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810717e:	2200      	movs	r2, #0
 8107180:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8107182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107184:	3304      	adds	r3, #4
 8107186:	4618      	mov	r0, r3
 8107188:	f7fe fbde 	bl	8105948 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810718e:	3318      	adds	r3, #24
 8107190:	4618      	mov	r0, r3
 8107192:	f7fe fbd9 	bl	8105948 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8107196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810719a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810719e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 81071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81071aa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071ae:	2200      	movs	r2, #0
 81071b0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071b4:	2200      	movs	r2, #0
 81071b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81071ba:	683a      	ldr	r2, [r7, #0]
 81071bc:	68f9      	ldr	r1, [r7, #12]
 81071be:	69b8      	ldr	r0, [r7, #24]
 81071c0:	f7fe fc56 	bl	8105a70 <pxPortInitialiseStack>
 81071c4:	4602      	mov	r2, r0
 81071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81071c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81071ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81071cc:	2b00      	cmp	r3, #0
 81071ce:	d002      	beq.n	81071d6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81071d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81071d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81071d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81071d6:	bf00      	nop
 81071d8:	3720      	adds	r7, #32
 81071da:	46bd      	mov	sp, r7
 81071dc:	bd80      	pop	{r7, pc}
	...

081071e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81071e0:	b580      	push	{r7, lr}
 81071e2:	b082      	sub	sp, #8
 81071e4:	af00      	add	r7, sp, #0
 81071e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81071e8:	f7fe fd76 	bl	8105cd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81071ec:	4b2d      	ldr	r3, [pc, #180]	@ (81072a4 <prvAddNewTaskToReadyList+0xc4>)
 81071ee:	681b      	ldr	r3, [r3, #0]
 81071f0:	3301      	adds	r3, #1
 81071f2:	4a2c      	ldr	r2, [pc, #176]	@ (81072a4 <prvAddNewTaskToReadyList+0xc4>)
 81071f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81071f6:	4b2c      	ldr	r3, [pc, #176]	@ (81072a8 <prvAddNewTaskToReadyList+0xc8>)
 81071f8:	681b      	ldr	r3, [r3, #0]
 81071fa:	2b00      	cmp	r3, #0
 81071fc:	d109      	bne.n	8107212 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81071fe:	4a2a      	ldr	r2, [pc, #168]	@ (81072a8 <prvAddNewTaskToReadyList+0xc8>)
 8107200:	687b      	ldr	r3, [r7, #4]
 8107202:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8107204:	4b27      	ldr	r3, [pc, #156]	@ (81072a4 <prvAddNewTaskToReadyList+0xc4>)
 8107206:	681b      	ldr	r3, [r3, #0]
 8107208:	2b01      	cmp	r3, #1
 810720a:	d110      	bne.n	810722e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810720c:	f000 fc1e 	bl	8107a4c <prvInitialiseTaskLists>
 8107210:	e00d      	b.n	810722e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8107212:	4b26      	ldr	r3, [pc, #152]	@ (81072ac <prvAddNewTaskToReadyList+0xcc>)
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	2b00      	cmp	r3, #0
 8107218:	d109      	bne.n	810722e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810721a:	4b23      	ldr	r3, [pc, #140]	@ (81072a8 <prvAddNewTaskToReadyList+0xc8>)
 810721c:	681b      	ldr	r3, [r3, #0]
 810721e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107220:	687b      	ldr	r3, [r7, #4]
 8107222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107224:	429a      	cmp	r2, r3
 8107226:	d802      	bhi.n	810722e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8107228:	4a1f      	ldr	r2, [pc, #124]	@ (81072a8 <prvAddNewTaskToReadyList+0xc8>)
 810722a:	687b      	ldr	r3, [r7, #4]
 810722c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810722e:	4b20      	ldr	r3, [pc, #128]	@ (81072b0 <prvAddNewTaskToReadyList+0xd0>)
 8107230:	681b      	ldr	r3, [r3, #0]
 8107232:	3301      	adds	r3, #1
 8107234:	4a1e      	ldr	r2, [pc, #120]	@ (81072b0 <prvAddNewTaskToReadyList+0xd0>)
 8107236:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8107238:	4b1d      	ldr	r3, [pc, #116]	@ (81072b0 <prvAddNewTaskToReadyList+0xd0>)
 810723a:	681a      	ldr	r2, [r3, #0]
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107244:	4b1b      	ldr	r3, [pc, #108]	@ (81072b4 <prvAddNewTaskToReadyList+0xd4>)
 8107246:	681b      	ldr	r3, [r3, #0]
 8107248:	429a      	cmp	r2, r3
 810724a:	d903      	bls.n	8107254 <prvAddNewTaskToReadyList+0x74>
 810724c:	687b      	ldr	r3, [r7, #4]
 810724e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107250:	4a18      	ldr	r2, [pc, #96]	@ (81072b4 <prvAddNewTaskToReadyList+0xd4>)
 8107252:	6013      	str	r3, [r2, #0]
 8107254:	687b      	ldr	r3, [r7, #4]
 8107256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107258:	4613      	mov	r3, r2
 810725a:	009b      	lsls	r3, r3, #2
 810725c:	4413      	add	r3, r2
 810725e:	009b      	lsls	r3, r3, #2
 8107260:	4a15      	ldr	r2, [pc, #84]	@ (81072b8 <prvAddNewTaskToReadyList+0xd8>)
 8107262:	441a      	add	r2, r3
 8107264:	687b      	ldr	r3, [r7, #4]
 8107266:	3304      	adds	r3, #4
 8107268:	4619      	mov	r1, r3
 810726a:	4610      	mov	r0, r2
 810726c:	f7fe fb79 	bl	8105962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8107270:	f7fe fd64 	bl	8105d3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8107274:	4b0d      	ldr	r3, [pc, #52]	@ (81072ac <prvAddNewTaskToReadyList+0xcc>)
 8107276:	681b      	ldr	r3, [r3, #0]
 8107278:	2b00      	cmp	r3, #0
 810727a:	d00e      	beq.n	810729a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810727c:	4b0a      	ldr	r3, [pc, #40]	@ (81072a8 <prvAddNewTaskToReadyList+0xc8>)
 810727e:	681b      	ldr	r3, [r3, #0]
 8107280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107282:	687b      	ldr	r3, [r7, #4]
 8107284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107286:	429a      	cmp	r2, r3
 8107288:	d207      	bcs.n	810729a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810728a:	4b0c      	ldr	r3, [pc, #48]	@ (81072bc <prvAddNewTaskToReadyList+0xdc>)
 810728c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107290:	601a      	str	r2, [r3, #0]
 8107292:	f3bf 8f4f 	dsb	sy
 8107296:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810729a:	bf00      	nop
 810729c:	3708      	adds	r7, #8
 810729e:	46bd      	mov	sp, r7
 81072a0:	bd80      	pop	{r7, pc}
 81072a2:	bf00      	nop
 81072a4:	10004a64 	.word	0x10004a64
 81072a8:	10004590 	.word	0x10004590
 81072ac:	10004a70 	.word	0x10004a70
 81072b0:	10004a80 	.word	0x10004a80
 81072b4:	10004a6c 	.word	0x10004a6c
 81072b8:	10004594 	.word	0x10004594
 81072bc:	e000ed04 	.word	0xe000ed04

081072c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81072c0:	b580      	push	{r7, lr}
 81072c2:	b084      	sub	sp, #16
 81072c4:	af00      	add	r7, sp, #0
 81072c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81072c8:	2300      	movs	r3, #0
 81072ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	2b00      	cmp	r3, #0
 81072d0:	d018      	beq.n	8107304 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81072d2:	4b14      	ldr	r3, [pc, #80]	@ (8107324 <vTaskDelay+0x64>)
 81072d4:	681b      	ldr	r3, [r3, #0]
 81072d6:	2b00      	cmp	r3, #0
 81072d8:	d00b      	beq.n	81072f2 <vTaskDelay+0x32>
	__asm volatile
 81072da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81072de:	f383 8811 	msr	BASEPRI, r3
 81072e2:	f3bf 8f6f 	isb	sy
 81072e6:	f3bf 8f4f 	dsb	sy
 81072ea:	60bb      	str	r3, [r7, #8]
}
 81072ec:	bf00      	nop
 81072ee:	bf00      	nop
 81072f0:	e7fd      	b.n	81072ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 81072f2:	f000 f883 	bl	81073fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81072f6:	2100      	movs	r1, #0
 81072f8:	6878      	ldr	r0, [r7, #4]
 81072fa:	f000 fdf3 	bl	8107ee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81072fe:	f000 f88b 	bl	8107418 <xTaskResumeAll>
 8107302:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8107304:	68fb      	ldr	r3, [r7, #12]
 8107306:	2b00      	cmp	r3, #0
 8107308:	d107      	bne.n	810731a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810730a:	4b07      	ldr	r3, [pc, #28]	@ (8107328 <vTaskDelay+0x68>)
 810730c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107310:	601a      	str	r2, [r3, #0]
 8107312:	f3bf 8f4f 	dsb	sy
 8107316:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810731a:	bf00      	nop
 810731c:	3710      	adds	r7, #16
 810731e:	46bd      	mov	sp, r7
 8107320:	bd80      	pop	{r7, pc}
 8107322:	bf00      	nop
 8107324:	10004a8c 	.word	0x10004a8c
 8107328:	e000ed04 	.word	0xe000ed04

0810732c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810732c:	b580      	push	{r7, lr}
 810732e:	b08a      	sub	sp, #40	@ 0x28
 8107330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8107332:	2300      	movs	r3, #0
 8107334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8107336:	2300      	movs	r3, #0
 8107338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810733a:	463a      	mov	r2, r7
 810733c:	1d39      	adds	r1, r7, #4
 810733e:	f107 0308 	add.w	r3, r7, #8
 8107342:	4618      	mov	r0, r3
 8107344:	f7fe f8be 	bl	81054c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8107348:	6839      	ldr	r1, [r7, #0]
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	68ba      	ldr	r2, [r7, #8]
 810734e:	9202      	str	r2, [sp, #8]
 8107350:	9301      	str	r3, [sp, #4]
 8107352:	2300      	movs	r3, #0
 8107354:	9300      	str	r3, [sp, #0]
 8107356:	2300      	movs	r3, #0
 8107358:	460a      	mov	r2, r1
 810735a:	4922      	ldr	r1, [pc, #136]	@ (81073e4 <vTaskStartScheduler+0xb8>)
 810735c:	4822      	ldr	r0, [pc, #136]	@ (81073e8 <vTaskStartScheduler+0xbc>)
 810735e:	f7ff fe09 	bl	8106f74 <xTaskCreateStatic>
 8107362:	4603      	mov	r3, r0
 8107364:	4a21      	ldr	r2, [pc, #132]	@ (81073ec <vTaskStartScheduler+0xc0>)
 8107366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8107368:	4b20      	ldr	r3, [pc, #128]	@ (81073ec <vTaskStartScheduler+0xc0>)
 810736a:	681b      	ldr	r3, [r3, #0]
 810736c:	2b00      	cmp	r3, #0
 810736e:	d002      	beq.n	8107376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8107370:	2301      	movs	r3, #1
 8107372:	617b      	str	r3, [r7, #20]
 8107374:	e001      	b.n	810737a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8107376:	2300      	movs	r3, #0
 8107378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810737a:	697b      	ldr	r3, [r7, #20]
 810737c:	2b01      	cmp	r3, #1
 810737e:	d102      	bne.n	8107386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8107380:	f000 fe04 	bl	8107f8c <xTimerCreateTimerTask>
 8107384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8107386:	697b      	ldr	r3, [r7, #20]
 8107388:	2b01      	cmp	r3, #1
 810738a:	d116      	bne.n	81073ba <vTaskStartScheduler+0x8e>
	__asm volatile
 810738c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107390:	f383 8811 	msr	BASEPRI, r3
 8107394:	f3bf 8f6f 	isb	sy
 8107398:	f3bf 8f4f 	dsb	sy
 810739c:	613b      	str	r3, [r7, #16]
}
 810739e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81073a0:	4b13      	ldr	r3, [pc, #76]	@ (81073f0 <vTaskStartScheduler+0xc4>)
 81073a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81073a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81073a8:	4b12      	ldr	r3, [pc, #72]	@ (81073f4 <vTaskStartScheduler+0xc8>)
 81073aa:	2201      	movs	r2, #1
 81073ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81073ae:	4b12      	ldr	r3, [pc, #72]	@ (81073f8 <vTaskStartScheduler+0xcc>)
 81073b0:	2200      	movs	r2, #0
 81073b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81073b4:	f7fe fbec 	bl	8105b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81073b8:	e00f      	b.n	81073da <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81073ba:	697b      	ldr	r3, [r7, #20]
 81073bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81073c0:	d10b      	bne.n	81073da <vTaskStartScheduler+0xae>
	__asm volatile
 81073c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81073c6:	f383 8811 	msr	BASEPRI, r3
 81073ca:	f3bf 8f6f 	isb	sy
 81073ce:	f3bf 8f4f 	dsb	sy
 81073d2:	60fb      	str	r3, [r7, #12]
}
 81073d4:	bf00      	nop
 81073d6:	bf00      	nop
 81073d8:	e7fd      	b.n	81073d6 <vTaskStartScheduler+0xaa>
}
 81073da:	bf00      	nop
 81073dc:	3718      	adds	r7, #24
 81073de:	46bd      	mov	sp, r7
 81073e0:	bd80      	pop	{r7, pc}
 81073e2:	bf00      	nop
 81073e4:	0810bfc8 	.word	0x0810bfc8
 81073e8:	08107a1d 	.word	0x08107a1d
 81073ec:	10004a88 	.word	0x10004a88
 81073f0:	10004a84 	.word	0x10004a84
 81073f4:	10004a70 	.word	0x10004a70
 81073f8:	10004a68 	.word	0x10004a68

081073fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81073fc:	b480      	push	{r7}
 81073fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8107400:	4b04      	ldr	r3, [pc, #16]	@ (8107414 <vTaskSuspendAll+0x18>)
 8107402:	681b      	ldr	r3, [r3, #0]
 8107404:	3301      	adds	r3, #1
 8107406:	4a03      	ldr	r2, [pc, #12]	@ (8107414 <vTaskSuspendAll+0x18>)
 8107408:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810740a:	bf00      	nop
 810740c:	46bd      	mov	sp, r7
 810740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107412:	4770      	bx	lr
 8107414:	10004a8c 	.word	0x10004a8c

08107418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8107418:	b580      	push	{r7, lr}
 810741a:	b084      	sub	sp, #16
 810741c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810741e:	2300      	movs	r3, #0
 8107420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8107422:	2300      	movs	r3, #0
 8107424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8107426:	4b42      	ldr	r3, [pc, #264]	@ (8107530 <xTaskResumeAll+0x118>)
 8107428:	681b      	ldr	r3, [r3, #0]
 810742a:	2b00      	cmp	r3, #0
 810742c:	d10b      	bne.n	8107446 <xTaskResumeAll+0x2e>
	__asm volatile
 810742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107432:	f383 8811 	msr	BASEPRI, r3
 8107436:	f3bf 8f6f 	isb	sy
 810743a:	f3bf 8f4f 	dsb	sy
 810743e:	603b      	str	r3, [r7, #0]
}
 8107440:	bf00      	nop
 8107442:	bf00      	nop
 8107444:	e7fd      	b.n	8107442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8107446:	f7fe fc47 	bl	8105cd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810744a:	4b39      	ldr	r3, [pc, #228]	@ (8107530 <xTaskResumeAll+0x118>)
 810744c:	681b      	ldr	r3, [r3, #0]
 810744e:	3b01      	subs	r3, #1
 8107450:	4a37      	ldr	r2, [pc, #220]	@ (8107530 <xTaskResumeAll+0x118>)
 8107452:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107454:	4b36      	ldr	r3, [pc, #216]	@ (8107530 <xTaskResumeAll+0x118>)
 8107456:	681b      	ldr	r3, [r3, #0]
 8107458:	2b00      	cmp	r3, #0
 810745a:	d162      	bne.n	8107522 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810745c:	4b35      	ldr	r3, [pc, #212]	@ (8107534 <xTaskResumeAll+0x11c>)
 810745e:	681b      	ldr	r3, [r3, #0]
 8107460:	2b00      	cmp	r3, #0
 8107462:	d05e      	beq.n	8107522 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107464:	e02f      	b.n	81074c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107466:	4b34      	ldr	r3, [pc, #208]	@ (8107538 <xTaskResumeAll+0x120>)
 8107468:	68db      	ldr	r3, [r3, #12]
 810746a:	68db      	ldr	r3, [r3, #12]
 810746c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810746e:	68fb      	ldr	r3, [r7, #12]
 8107470:	3318      	adds	r3, #24
 8107472:	4618      	mov	r0, r3
 8107474:	f7fe fad2 	bl	8105a1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107478:	68fb      	ldr	r3, [r7, #12]
 810747a:	3304      	adds	r3, #4
 810747c:	4618      	mov	r0, r3
 810747e:	f7fe facd 	bl	8105a1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8107482:	68fb      	ldr	r3, [r7, #12]
 8107484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107486:	4b2d      	ldr	r3, [pc, #180]	@ (810753c <xTaskResumeAll+0x124>)
 8107488:	681b      	ldr	r3, [r3, #0]
 810748a:	429a      	cmp	r2, r3
 810748c:	d903      	bls.n	8107496 <xTaskResumeAll+0x7e>
 810748e:	68fb      	ldr	r3, [r7, #12]
 8107490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107492:	4a2a      	ldr	r2, [pc, #168]	@ (810753c <xTaskResumeAll+0x124>)
 8107494:	6013      	str	r3, [r2, #0]
 8107496:	68fb      	ldr	r3, [r7, #12]
 8107498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810749a:	4613      	mov	r3, r2
 810749c:	009b      	lsls	r3, r3, #2
 810749e:	4413      	add	r3, r2
 81074a0:	009b      	lsls	r3, r3, #2
 81074a2:	4a27      	ldr	r2, [pc, #156]	@ (8107540 <xTaskResumeAll+0x128>)
 81074a4:	441a      	add	r2, r3
 81074a6:	68fb      	ldr	r3, [r7, #12]
 81074a8:	3304      	adds	r3, #4
 81074aa:	4619      	mov	r1, r3
 81074ac:	4610      	mov	r0, r2
 81074ae:	f7fe fa58 	bl	8105962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81074b2:	68fb      	ldr	r3, [r7, #12]
 81074b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81074b6:	4b23      	ldr	r3, [pc, #140]	@ (8107544 <xTaskResumeAll+0x12c>)
 81074b8:	681b      	ldr	r3, [r3, #0]
 81074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81074bc:	429a      	cmp	r2, r3
 81074be:	d302      	bcc.n	81074c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 81074c0:	4b21      	ldr	r3, [pc, #132]	@ (8107548 <xTaskResumeAll+0x130>)
 81074c2:	2201      	movs	r2, #1
 81074c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81074c6:	4b1c      	ldr	r3, [pc, #112]	@ (8107538 <xTaskResumeAll+0x120>)
 81074c8:	681b      	ldr	r3, [r3, #0]
 81074ca:	2b00      	cmp	r3, #0
 81074cc:	d1cb      	bne.n	8107466 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81074ce:	68fb      	ldr	r3, [r7, #12]
 81074d0:	2b00      	cmp	r3, #0
 81074d2:	d001      	beq.n	81074d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81074d4:	f000 fb58 	bl	8107b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81074d8:	4b1c      	ldr	r3, [pc, #112]	@ (810754c <xTaskResumeAll+0x134>)
 81074da:	681b      	ldr	r3, [r3, #0]
 81074dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	2b00      	cmp	r3, #0
 81074e2:	d010      	beq.n	8107506 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81074e4:	f000 f846 	bl	8107574 <xTaskIncrementTick>
 81074e8:	4603      	mov	r3, r0
 81074ea:	2b00      	cmp	r3, #0
 81074ec:	d002      	beq.n	81074f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 81074ee:	4b16      	ldr	r3, [pc, #88]	@ (8107548 <xTaskResumeAll+0x130>)
 81074f0:	2201      	movs	r2, #1
 81074f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81074f4:	687b      	ldr	r3, [r7, #4]
 81074f6:	3b01      	subs	r3, #1
 81074f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	2b00      	cmp	r3, #0
 81074fe:	d1f1      	bne.n	81074e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8107500:	4b12      	ldr	r3, [pc, #72]	@ (810754c <xTaskResumeAll+0x134>)
 8107502:	2200      	movs	r2, #0
 8107504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8107506:	4b10      	ldr	r3, [pc, #64]	@ (8107548 <xTaskResumeAll+0x130>)
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	2b00      	cmp	r3, #0
 810750c:	d009      	beq.n	8107522 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810750e:	2301      	movs	r3, #1
 8107510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8107512:	4b0f      	ldr	r3, [pc, #60]	@ (8107550 <xTaskResumeAll+0x138>)
 8107514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107518:	601a      	str	r2, [r3, #0]
 810751a:	f3bf 8f4f 	dsb	sy
 810751e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8107522:	f7fe fc0b 	bl	8105d3c <vPortExitCritical>

	return xAlreadyYielded;
 8107526:	68bb      	ldr	r3, [r7, #8]
}
 8107528:	4618      	mov	r0, r3
 810752a:	3710      	adds	r7, #16
 810752c:	46bd      	mov	sp, r7
 810752e:	bd80      	pop	{r7, pc}
 8107530:	10004a8c 	.word	0x10004a8c
 8107534:	10004a64 	.word	0x10004a64
 8107538:	10004a24 	.word	0x10004a24
 810753c:	10004a6c 	.word	0x10004a6c
 8107540:	10004594 	.word	0x10004594
 8107544:	10004590 	.word	0x10004590
 8107548:	10004a78 	.word	0x10004a78
 810754c:	10004a74 	.word	0x10004a74
 8107550:	e000ed04 	.word	0xe000ed04

08107554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8107554:	b480      	push	{r7}
 8107556:	b083      	sub	sp, #12
 8107558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810755a:	4b05      	ldr	r3, [pc, #20]	@ (8107570 <xTaskGetTickCount+0x1c>)
 810755c:	681b      	ldr	r3, [r3, #0]
 810755e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8107560:	687b      	ldr	r3, [r7, #4]
}
 8107562:	4618      	mov	r0, r3
 8107564:	370c      	adds	r7, #12
 8107566:	46bd      	mov	sp, r7
 8107568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810756c:	4770      	bx	lr
 810756e:	bf00      	nop
 8107570:	10004a68 	.word	0x10004a68

08107574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8107574:	b580      	push	{r7, lr}
 8107576:	b086      	sub	sp, #24
 8107578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810757a:	2300      	movs	r3, #0
 810757c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810757e:	4b4f      	ldr	r3, [pc, #316]	@ (81076bc <xTaskIncrementTick+0x148>)
 8107580:	681b      	ldr	r3, [r3, #0]
 8107582:	2b00      	cmp	r3, #0
 8107584:	f040 8090 	bne.w	81076a8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107588:	4b4d      	ldr	r3, [pc, #308]	@ (81076c0 <xTaskIncrementTick+0x14c>)
 810758a:	681b      	ldr	r3, [r3, #0]
 810758c:	3301      	adds	r3, #1
 810758e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107590:	4a4b      	ldr	r2, [pc, #300]	@ (81076c0 <xTaskIncrementTick+0x14c>)
 8107592:	693b      	ldr	r3, [r7, #16]
 8107594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8107596:	693b      	ldr	r3, [r7, #16]
 8107598:	2b00      	cmp	r3, #0
 810759a:	d121      	bne.n	81075e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810759c:	4b49      	ldr	r3, [pc, #292]	@ (81076c4 <xTaskIncrementTick+0x150>)
 810759e:	681b      	ldr	r3, [r3, #0]
 81075a0:	681b      	ldr	r3, [r3, #0]
 81075a2:	2b00      	cmp	r3, #0
 81075a4:	d00b      	beq.n	81075be <xTaskIncrementTick+0x4a>
	__asm volatile
 81075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81075aa:	f383 8811 	msr	BASEPRI, r3
 81075ae:	f3bf 8f6f 	isb	sy
 81075b2:	f3bf 8f4f 	dsb	sy
 81075b6:	603b      	str	r3, [r7, #0]
}
 81075b8:	bf00      	nop
 81075ba:	bf00      	nop
 81075bc:	e7fd      	b.n	81075ba <xTaskIncrementTick+0x46>
 81075be:	4b41      	ldr	r3, [pc, #260]	@ (81076c4 <xTaskIncrementTick+0x150>)
 81075c0:	681b      	ldr	r3, [r3, #0]
 81075c2:	60fb      	str	r3, [r7, #12]
 81075c4:	4b40      	ldr	r3, [pc, #256]	@ (81076c8 <xTaskIncrementTick+0x154>)
 81075c6:	681b      	ldr	r3, [r3, #0]
 81075c8:	4a3e      	ldr	r2, [pc, #248]	@ (81076c4 <xTaskIncrementTick+0x150>)
 81075ca:	6013      	str	r3, [r2, #0]
 81075cc:	4a3e      	ldr	r2, [pc, #248]	@ (81076c8 <xTaskIncrementTick+0x154>)
 81075ce:	68fb      	ldr	r3, [r7, #12]
 81075d0:	6013      	str	r3, [r2, #0]
 81075d2:	4b3e      	ldr	r3, [pc, #248]	@ (81076cc <xTaskIncrementTick+0x158>)
 81075d4:	681b      	ldr	r3, [r3, #0]
 81075d6:	3301      	adds	r3, #1
 81075d8:	4a3c      	ldr	r2, [pc, #240]	@ (81076cc <xTaskIncrementTick+0x158>)
 81075da:	6013      	str	r3, [r2, #0]
 81075dc:	f000 fad4 	bl	8107b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81075e0:	4b3b      	ldr	r3, [pc, #236]	@ (81076d0 <xTaskIncrementTick+0x15c>)
 81075e2:	681b      	ldr	r3, [r3, #0]
 81075e4:	693a      	ldr	r2, [r7, #16]
 81075e6:	429a      	cmp	r2, r3
 81075e8:	d349      	bcc.n	810767e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81075ea:	4b36      	ldr	r3, [pc, #216]	@ (81076c4 <xTaskIncrementTick+0x150>)
 81075ec:	681b      	ldr	r3, [r3, #0]
 81075ee:	681b      	ldr	r3, [r3, #0]
 81075f0:	2b00      	cmp	r3, #0
 81075f2:	d104      	bne.n	81075fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81075f4:	4b36      	ldr	r3, [pc, #216]	@ (81076d0 <xTaskIncrementTick+0x15c>)
 81075f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81075fa:	601a      	str	r2, [r3, #0]
					break;
 81075fc:	e03f      	b.n	810767e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81075fe:	4b31      	ldr	r3, [pc, #196]	@ (81076c4 <xTaskIncrementTick+0x150>)
 8107600:	681b      	ldr	r3, [r3, #0]
 8107602:	68db      	ldr	r3, [r3, #12]
 8107604:	68db      	ldr	r3, [r3, #12]
 8107606:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107608:	68bb      	ldr	r3, [r7, #8]
 810760a:	685b      	ldr	r3, [r3, #4]
 810760c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810760e:	693a      	ldr	r2, [r7, #16]
 8107610:	687b      	ldr	r3, [r7, #4]
 8107612:	429a      	cmp	r2, r3
 8107614:	d203      	bcs.n	810761e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8107616:	4a2e      	ldr	r2, [pc, #184]	@ (81076d0 <xTaskIncrementTick+0x15c>)
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810761c:	e02f      	b.n	810767e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810761e:	68bb      	ldr	r3, [r7, #8]
 8107620:	3304      	adds	r3, #4
 8107622:	4618      	mov	r0, r3
 8107624:	f7fe f9fa 	bl	8105a1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107628:	68bb      	ldr	r3, [r7, #8]
 810762a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810762c:	2b00      	cmp	r3, #0
 810762e:	d004      	beq.n	810763a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107630:	68bb      	ldr	r3, [r7, #8]
 8107632:	3318      	adds	r3, #24
 8107634:	4618      	mov	r0, r3
 8107636:	f7fe f9f1 	bl	8105a1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810763a:	68bb      	ldr	r3, [r7, #8]
 810763c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810763e:	4b25      	ldr	r3, [pc, #148]	@ (81076d4 <xTaskIncrementTick+0x160>)
 8107640:	681b      	ldr	r3, [r3, #0]
 8107642:	429a      	cmp	r2, r3
 8107644:	d903      	bls.n	810764e <xTaskIncrementTick+0xda>
 8107646:	68bb      	ldr	r3, [r7, #8]
 8107648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810764a:	4a22      	ldr	r2, [pc, #136]	@ (81076d4 <xTaskIncrementTick+0x160>)
 810764c:	6013      	str	r3, [r2, #0]
 810764e:	68bb      	ldr	r3, [r7, #8]
 8107650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107652:	4613      	mov	r3, r2
 8107654:	009b      	lsls	r3, r3, #2
 8107656:	4413      	add	r3, r2
 8107658:	009b      	lsls	r3, r3, #2
 810765a:	4a1f      	ldr	r2, [pc, #124]	@ (81076d8 <xTaskIncrementTick+0x164>)
 810765c:	441a      	add	r2, r3
 810765e:	68bb      	ldr	r3, [r7, #8]
 8107660:	3304      	adds	r3, #4
 8107662:	4619      	mov	r1, r3
 8107664:	4610      	mov	r0, r2
 8107666:	f7fe f97c 	bl	8105962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810766a:	68bb      	ldr	r3, [r7, #8]
 810766c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810766e:	4b1b      	ldr	r3, [pc, #108]	@ (81076dc <xTaskIncrementTick+0x168>)
 8107670:	681b      	ldr	r3, [r3, #0]
 8107672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107674:	429a      	cmp	r2, r3
 8107676:	d3b8      	bcc.n	81075ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8107678:	2301      	movs	r3, #1
 810767a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810767c:	e7b5      	b.n	81075ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810767e:	4b17      	ldr	r3, [pc, #92]	@ (81076dc <xTaskIncrementTick+0x168>)
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107684:	4914      	ldr	r1, [pc, #80]	@ (81076d8 <xTaskIncrementTick+0x164>)
 8107686:	4613      	mov	r3, r2
 8107688:	009b      	lsls	r3, r3, #2
 810768a:	4413      	add	r3, r2
 810768c:	009b      	lsls	r3, r3, #2
 810768e:	440b      	add	r3, r1
 8107690:	681b      	ldr	r3, [r3, #0]
 8107692:	2b01      	cmp	r3, #1
 8107694:	d901      	bls.n	810769a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8107696:	2301      	movs	r3, #1
 8107698:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810769a:	4b11      	ldr	r3, [pc, #68]	@ (81076e0 <xTaskIncrementTick+0x16c>)
 810769c:	681b      	ldr	r3, [r3, #0]
 810769e:	2b00      	cmp	r3, #0
 81076a0:	d007      	beq.n	81076b2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 81076a2:	2301      	movs	r3, #1
 81076a4:	617b      	str	r3, [r7, #20]
 81076a6:	e004      	b.n	81076b2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81076a8:	4b0e      	ldr	r3, [pc, #56]	@ (81076e4 <xTaskIncrementTick+0x170>)
 81076aa:	681b      	ldr	r3, [r3, #0]
 81076ac:	3301      	adds	r3, #1
 81076ae:	4a0d      	ldr	r2, [pc, #52]	@ (81076e4 <xTaskIncrementTick+0x170>)
 81076b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81076b2:	697b      	ldr	r3, [r7, #20]
}
 81076b4:	4618      	mov	r0, r3
 81076b6:	3718      	adds	r7, #24
 81076b8:	46bd      	mov	sp, r7
 81076ba:	bd80      	pop	{r7, pc}
 81076bc:	10004a8c 	.word	0x10004a8c
 81076c0:	10004a68 	.word	0x10004a68
 81076c4:	10004a1c 	.word	0x10004a1c
 81076c8:	10004a20 	.word	0x10004a20
 81076cc:	10004a7c 	.word	0x10004a7c
 81076d0:	10004a84 	.word	0x10004a84
 81076d4:	10004a6c 	.word	0x10004a6c
 81076d8:	10004594 	.word	0x10004594
 81076dc:	10004590 	.word	0x10004590
 81076e0:	10004a78 	.word	0x10004a78
 81076e4:	10004a74 	.word	0x10004a74

081076e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81076e8:	b480      	push	{r7}
 81076ea:	b085      	sub	sp, #20
 81076ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81076ee:	4b28      	ldr	r3, [pc, #160]	@ (8107790 <vTaskSwitchContext+0xa8>)
 81076f0:	681b      	ldr	r3, [r3, #0]
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	d003      	beq.n	81076fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81076f6:	4b27      	ldr	r3, [pc, #156]	@ (8107794 <vTaskSwitchContext+0xac>)
 81076f8:	2201      	movs	r2, #1
 81076fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81076fc:	e042      	b.n	8107784 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 81076fe:	4b25      	ldr	r3, [pc, #148]	@ (8107794 <vTaskSwitchContext+0xac>)
 8107700:	2200      	movs	r2, #0
 8107702:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107704:	4b24      	ldr	r3, [pc, #144]	@ (8107798 <vTaskSwitchContext+0xb0>)
 8107706:	681b      	ldr	r3, [r3, #0]
 8107708:	60fb      	str	r3, [r7, #12]
 810770a:	e011      	b.n	8107730 <vTaskSwitchContext+0x48>
 810770c:	68fb      	ldr	r3, [r7, #12]
 810770e:	2b00      	cmp	r3, #0
 8107710:	d10b      	bne.n	810772a <vTaskSwitchContext+0x42>
	__asm volatile
 8107712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107716:	f383 8811 	msr	BASEPRI, r3
 810771a:	f3bf 8f6f 	isb	sy
 810771e:	f3bf 8f4f 	dsb	sy
 8107722:	607b      	str	r3, [r7, #4]
}
 8107724:	bf00      	nop
 8107726:	bf00      	nop
 8107728:	e7fd      	b.n	8107726 <vTaskSwitchContext+0x3e>
 810772a:	68fb      	ldr	r3, [r7, #12]
 810772c:	3b01      	subs	r3, #1
 810772e:	60fb      	str	r3, [r7, #12]
 8107730:	491a      	ldr	r1, [pc, #104]	@ (810779c <vTaskSwitchContext+0xb4>)
 8107732:	68fa      	ldr	r2, [r7, #12]
 8107734:	4613      	mov	r3, r2
 8107736:	009b      	lsls	r3, r3, #2
 8107738:	4413      	add	r3, r2
 810773a:	009b      	lsls	r3, r3, #2
 810773c:	440b      	add	r3, r1
 810773e:	681b      	ldr	r3, [r3, #0]
 8107740:	2b00      	cmp	r3, #0
 8107742:	d0e3      	beq.n	810770c <vTaskSwitchContext+0x24>
 8107744:	68fa      	ldr	r2, [r7, #12]
 8107746:	4613      	mov	r3, r2
 8107748:	009b      	lsls	r3, r3, #2
 810774a:	4413      	add	r3, r2
 810774c:	009b      	lsls	r3, r3, #2
 810774e:	4a13      	ldr	r2, [pc, #76]	@ (810779c <vTaskSwitchContext+0xb4>)
 8107750:	4413      	add	r3, r2
 8107752:	60bb      	str	r3, [r7, #8]
 8107754:	68bb      	ldr	r3, [r7, #8]
 8107756:	685b      	ldr	r3, [r3, #4]
 8107758:	685a      	ldr	r2, [r3, #4]
 810775a:	68bb      	ldr	r3, [r7, #8]
 810775c:	605a      	str	r2, [r3, #4]
 810775e:	68bb      	ldr	r3, [r7, #8]
 8107760:	685a      	ldr	r2, [r3, #4]
 8107762:	68bb      	ldr	r3, [r7, #8]
 8107764:	3308      	adds	r3, #8
 8107766:	429a      	cmp	r2, r3
 8107768:	d104      	bne.n	8107774 <vTaskSwitchContext+0x8c>
 810776a:	68bb      	ldr	r3, [r7, #8]
 810776c:	685b      	ldr	r3, [r3, #4]
 810776e:	685a      	ldr	r2, [r3, #4]
 8107770:	68bb      	ldr	r3, [r7, #8]
 8107772:	605a      	str	r2, [r3, #4]
 8107774:	68bb      	ldr	r3, [r7, #8]
 8107776:	685b      	ldr	r3, [r3, #4]
 8107778:	68db      	ldr	r3, [r3, #12]
 810777a:	4a09      	ldr	r2, [pc, #36]	@ (81077a0 <vTaskSwitchContext+0xb8>)
 810777c:	6013      	str	r3, [r2, #0]
 810777e:	4a06      	ldr	r2, [pc, #24]	@ (8107798 <vTaskSwitchContext+0xb0>)
 8107780:	68fb      	ldr	r3, [r7, #12]
 8107782:	6013      	str	r3, [r2, #0]
}
 8107784:	bf00      	nop
 8107786:	3714      	adds	r7, #20
 8107788:	46bd      	mov	sp, r7
 810778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810778e:	4770      	bx	lr
 8107790:	10004a8c 	.word	0x10004a8c
 8107794:	10004a78 	.word	0x10004a78
 8107798:	10004a6c 	.word	0x10004a6c
 810779c:	10004594 	.word	0x10004594
 81077a0:	10004590 	.word	0x10004590

081077a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81077a4:	b580      	push	{r7, lr}
 81077a6:	b084      	sub	sp, #16
 81077a8:	af00      	add	r7, sp, #0
 81077aa:	6078      	str	r0, [r7, #4]
 81077ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 81077ae:	687b      	ldr	r3, [r7, #4]
 81077b0:	2b00      	cmp	r3, #0
 81077b2:	d10b      	bne.n	81077cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 81077b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 81077b8:	f383 8811 	msr	BASEPRI, r3
 81077bc:	f3bf 8f6f 	isb	sy
 81077c0:	f3bf 8f4f 	dsb	sy
 81077c4:	60fb      	str	r3, [r7, #12]
}
 81077c6:	bf00      	nop
 81077c8:	bf00      	nop
 81077ca:	e7fd      	b.n	81077c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81077cc:	4b07      	ldr	r3, [pc, #28]	@ (81077ec <vTaskPlaceOnEventList+0x48>)
 81077ce:	681b      	ldr	r3, [r3, #0]
 81077d0:	3318      	adds	r3, #24
 81077d2:	4619      	mov	r1, r3
 81077d4:	6878      	ldr	r0, [r7, #4]
 81077d6:	f7fe f8e8 	bl	81059aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81077da:	2101      	movs	r1, #1
 81077dc:	6838      	ldr	r0, [r7, #0]
 81077de:	f000 fb81 	bl	8107ee4 <prvAddCurrentTaskToDelayedList>
}
 81077e2:	bf00      	nop
 81077e4:	3710      	adds	r7, #16
 81077e6:	46bd      	mov	sp, r7
 81077e8:	bd80      	pop	{r7, pc}
 81077ea:	bf00      	nop
 81077ec:	10004590 	.word	0x10004590

081077f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81077f0:	b580      	push	{r7, lr}
 81077f2:	b086      	sub	sp, #24
 81077f4:	af00      	add	r7, sp, #0
 81077f6:	60f8      	str	r0, [r7, #12]
 81077f8:	60b9      	str	r1, [r7, #8]
 81077fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81077fc:	68fb      	ldr	r3, [r7, #12]
 81077fe:	2b00      	cmp	r3, #0
 8107800:	d10b      	bne.n	810781a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8107802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107806:	f383 8811 	msr	BASEPRI, r3
 810780a:	f3bf 8f6f 	isb	sy
 810780e:	f3bf 8f4f 	dsb	sy
 8107812:	617b      	str	r3, [r7, #20]
}
 8107814:	bf00      	nop
 8107816:	bf00      	nop
 8107818:	e7fd      	b.n	8107816 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810781a:	4b0a      	ldr	r3, [pc, #40]	@ (8107844 <vTaskPlaceOnEventListRestricted+0x54>)
 810781c:	681b      	ldr	r3, [r3, #0]
 810781e:	3318      	adds	r3, #24
 8107820:	4619      	mov	r1, r3
 8107822:	68f8      	ldr	r0, [r7, #12]
 8107824:	f7fe f89d 	bl	8105962 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	2b00      	cmp	r3, #0
 810782c:	d002      	beq.n	8107834 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810782e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8107832:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8107834:	6879      	ldr	r1, [r7, #4]
 8107836:	68b8      	ldr	r0, [r7, #8]
 8107838:	f000 fb54 	bl	8107ee4 <prvAddCurrentTaskToDelayedList>
	}
 810783c:	bf00      	nop
 810783e:	3718      	adds	r7, #24
 8107840:	46bd      	mov	sp, r7
 8107842:	bd80      	pop	{r7, pc}
 8107844:	10004590 	.word	0x10004590

08107848 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8107848:	b580      	push	{r7, lr}
 810784a:	b086      	sub	sp, #24
 810784c:	af00      	add	r7, sp, #0
 810784e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	68db      	ldr	r3, [r3, #12]
 8107854:	68db      	ldr	r3, [r3, #12]
 8107856:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8107858:	693b      	ldr	r3, [r7, #16]
 810785a:	2b00      	cmp	r3, #0
 810785c:	d10b      	bne.n	8107876 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107862:	f383 8811 	msr	BASEPRI, r3
 8107866:	f3bf 8f6f 	isb	sy
 810786a:	f3bf 8f4f 	dsb	sy
 810786e:	60fb      	str	r3, [r7, #12]
}
 8107870:	bf00      	nop
 8107872:	bf00      	nop
 8107874:	e7fd      	b.n	8107872 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8107876:	693b      	ldr	r3, [r7, #16]
 8107878:	3318      	adds	r3, #24
 810787a:	4618      	mov	r0, r3
 810787c:	f7fe f8ce 	bl	8105a1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107880:	4b1d      	ldr	r3, [pc, #116]	@ (81078f8 <xTaskRemoveFromEventList+0xb0>)
 8107882:	681b      	ldr	r3, [r3, #0]
 8107884:	2b00      	cmp	r3, #0
 8107886:	d11d      	bne.n	81078c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107888:	693b      	ldr	r3, [r7, #16]
 810788a:	3304      	adds	r3, #4
 810788c:	4618      	mov	r0, r3
 810788e:	f7fe f8c5 	bl	8105a1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8107892:	693b      	ldr	r3, [r7, #16]
 8107894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107896:	4b19      	ldr	r3, [pc, #100]	@ (81078fc <xTaskRemoveFromEventList+0xb4>)
 8107898:	681b      	ldr	r3, [r3, #0]
 810789a:	429a      	cmp	r2, r3
 810789c:	d903      	bls.n	81078a6 <xTaskRemoveFromEventList+0x5e>
 810789e:	693b      	ldr	r3, [r7, #16]
 81078a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078a2:	4a16      	ldr	r2, [pc, #88]	@ (81078fc <xTaskRemoveFromEventList+0xb4>)
 81078a4:	6013      	str	r3, [r2, #0]
 81078a6:	693b      	ldr	r3, [r7, #16]
 81078a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81078aa:	4613      	mov	r3, r2
 81078ac:	009b      	lsls	r3, r3, #2
 81078ae:	4413      	add	r3, r2
 81078b0:	009b      	lsls	r3, r3, #2
 81078b2:	4a13      	ldr	r2, [pc, #76]	@ (8107900 <xTaskRemoveFromEventList+0xb8>)
 81078b4:	441a      	add	r2, r3
 81078b6:	693b      	ldr	r3, [r7, #16]
 81078b8:	3304      	adds	r3, #4
 81078ba:	4619      	mov	r1, r3
 81078bc:	4610      	mov	r0, r2
 81078be:	f7fe f850 	bl	8105962 <vListInsertEnd>
 81078c2:	e005      	b.n	81078d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81078c4:	693b      	ldr	r3, [r7, #16]
 81078c6:	3318      	adds	r3, #24
 81078c8:	4619      	mov	r1, r3
 81078ca:	480e      	ldr	r0, [pc, #56]	@ (8107904 <xTaskRemoveFromEventList+0xbc>)
 81078cc:	f7fe f849 	bl	8105962 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81078d0:	693b      	ldr	r3, [r7, #16]
 81078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81078d4:	4b0c      	ldr	r3, [pc, #48]	@ (8107908 <xTaskRemoveFromEventList+0xc0>)
 81078d6:	681b      	ldr	r3, [r3, #0]
 81078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81078da:	429a      	cmp	r2, r3
 81078dc:	d905      	bls.n	81078ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81078de:	2301      	movs	r3, #1
 81078e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81078e2:	4b0a      	ldr	r3, [pc, #40]	@ (810790c <xTaskRemoveFromEventList+0xc4>)
 81078e4:	2201      	movs	r2, #1
 81078e6:	601a      	str	r2, [r3, #0]
 81078e8:	e001      	b.n	81078ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 81078ea:	2300      	movs	r3, #0
 81078ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81078ee:	697b      	ldr	r3, [r7, #20]
}
 81078f0:	4618      	mov	r0, r3
 81078f2:	3718      	adds	r7, #24
 81078f4:	46bd      	mov	sp, r7
 81078f6:	bd80      	pop	{r7, pc}
 81078f8:	10004a8c 	.word	0x10004a8c
 81078fc:	10004a6c 	.word	0x10004a6c
 8107900:	10004594 	.word	0x10004594
 8107904:	10004a24 	.word	0x10004a24
 8107908:	10004590 	.word	0x10004590
 810790c:	10004a78 	.word	0x10004a78

08107910 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8107910:	b480      	push	{r7}
 8107912:	b083      	sub	sp, #12
 8107914:	af00      	add	r7, sp, #0
 8107916:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8107918:	4b06      	ldr	r3, [pc, #24]	@ (8107934 <vTaskInternalSetTimeOutState+0x24>)
 810791a:	681a      	ldr	r2, [r3, #0]
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8107920:	4b05      	ldr	r3, [pc, #20]	@ (8107938 <vTaskInternalSetTimeOutState+0x28>)
 8107922:	681a      	ldr	r2, [r3, #0]
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	605a      	str	r2, [r3, #4]
}
 8107928:	bf00      	nop
 810792a:	370c      	adds	r7, #12
 810792c:	46bd      	mov	sp, r7
 810792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107932:	4770      	bx	lr
 8107934:	10004a7c 	.word	0x10004a7c
 8107938:	10004a68 	.word	0x10004a68

0810793c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810793c:	b580      	push	{r7, lr}
 810793e:	b088      	sub	sp, #32
 8107940:	af00      	add	r7, sp, #0
 8107942:	6078      	str	r0, [r7, #4]
 8107944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8107946:	687b      	ldr	r3, [r7, #4]
 8107948:	2b00      	cmp	r3, #0
 810794a:	d10b      	bne.n	8107964 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810794c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107950:	f383 8811 	msr	BASEPRI, r3
 8107954:	f3bf 8f6f 	isb	sy
 8107958:	f3bf 8f4f 	dsb	sy
 810795c:	613b      	str	r3, [r7, #16]
}
 810795e:	bf00      	nop
 8107960:	bf00      	nop
 8107962:	e7fd      	b.n	8107960 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8107964:	683b      	ldr	r3, [r7, #0]
 8107966:	2b00      	cmp	r3, #0
 8107968:	d10b      	bne.n	8107982 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810796a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810796e:	f383 8811 	msr	BASEPRI, r3
 8107972:	f3bf 8f6f 	isb	sy
 8107976:	f3bf 8f4f 	dsb	sy
 810797a:	60fb      	str	r3, [r7, #12]
}
 810797c:	bf00      	nop
 810797e:	bf00      	nop
 8107980:	e7fd      	b.n	810797e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8107982:	f7fe f9a9 	bl	8105cd8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8107986:	4b1d      	ldr	r3, [pc, #116]	@ (81079fc <xTaskCheckForTimeOut+0xc0>)
 8107988:	681b      	ldr	r3, [r3, #0]
 810798a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	685b      	ldr	r3, [r3, #4]
 8107990:	69ba      	ldr	r2, [r7, #24]
 8107992:	1ad3      	subs	r3, r2, r3
 8107994:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8107996:	683b      	ldr	r3, [r7, #0]
 8107998:	681b      	ldr	r3, [r3, #0]
 810799a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810799e:	d102      	bne.n	81079a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81079a0:	2300      	movs	r3, #0
 81079a2:	61fb      	str	r3, [r7, #28]
 81079a4:	e023      	b.n	81079ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	681a      	ldr	r2, [r3, #0]
 81079aa:	4b15      	ldr	r3, [pc, #84]	@ (8107a00 <xTaskCheckForTimeOut+0xc4>)
 81079ac:	681b      	ldr	r3, [r3, #0]
 81079ae:	429a      	cmp	r2, r3
 81079b0:	d007      	beq.n	81079c2 <xTaskCheckForTimeOut+0x86>
 81079b2:	687b      	ldr	r3, [r7, #4]
 81079b4:	685b      	ldr	r3, [r3, #4]
 81079b6:	69ba      	ldr	r2, [r7, #24]
 81079b8:	429a      	cmp	r2, r3
 81079ba:	d302      	bcc.n	81079c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81079bc:	2301      	movs	r3, #1
 81079be:	61fb      	str	r3, [r7, #28]
 81079c0:	e015      	b.n	81079ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81079c2:	683b      	ldr	r3, [r7, #0]
 81079c4:	681b      	ldr	r3, [r3, #0]
 81079c6:	697a      	ldr	r2, [r7, #20]
 81079c8:	429a      	cmp	r2, r3
 81079ca:	d20b      	bcs.n	81079e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81079cc:	683b      	ldr	r3, [r7, #0]
 81079ce:	681a      	ldr	r2, [r3, #0]
 81079d0:	697b      	ldr	r3, [r7, #20]
 81079d2:	1ad2      	subs	r2, r2, r3
 81079d4:	683b      	ldr	r3, [r7, #0]
 81079d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81079d8:	6878      	ldr	r0, [r7, #4]
 81079da:	f7ff ff99 	bl	8107910 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81079de:	2300      	movs	r3, #0
 81079e0:	61fb      	str	r3, [r7, #28]
 81079e2:	e004      	b.n	81079ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 81079e4:	683b      	ldr	r3, [r7, #0]
 81079e6:	2200      	movs	r2, #0
 81079e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81079ea:	2301      	movs	r3, #1
 81079ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81079ee:	f7fe f9a5 	bl	8105d3c <vPortExitCritical>

	return xReturn;
 81079f2:	69fb      	ldr	r3, [r7, #28]
}
 81079f4:	4618      	mov	r0, r3
 81079f6:	3720      	adds	r7, #32
 81079f8:	46bd      	mov	sp, r7
 81079fa:	bd80      	pop	{r7, pc}
 81079fc:	10004a68 	.word	0x10004a68
 8107a00:	10004a7c 	.word	0x10004a7c

08107a04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8107a04:	b480      	push	{r7}
 8107a06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8107a08:	4b03      	ldr	r3, [pc, #12]	@ (8107a18 <vTaskMissedYield+0x14>)
 8107a0a:	2201      	movs	r2, #1
 8107a0c:	601a      	str	r2, [r3, #0]
}
 8107a0e:	bf00      	nop
 8107a10:	46bd      	mov	sp, r7
 8107a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a16:	4770      	bx	lr
 8107a18:	10004a78 	.word	0x10004a78

08107a1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8107a1c:	b580      	push	{r7, lr}
 8107a1e:	b082      	sub	sp, #8
 8107a20:	af00      	add	r7, sp, #0
 8107a22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8107a24:	f000 f852 	bl	8107acc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8107a28:	4b06      	ldr	r3, [pc, #24]	@ (8107a44 <prvIdleTask+0x28>)
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	2b01      	cmp	r3, #1
 8107a2e:	d9f9      	bls.n	8107a24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8107a30:	4b05      	ldr	r3, [pc, #20]	@ (8107a48 <prvIdleTask+0x2c>)
 8107a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8107a36:	601a      	str	r2, [r3, #0]
 8107a38:	f3bf 8f4f 	dsb	sy
 8107a3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8107a40:	e7f0      	b.n	8107a24 <prvIdleTask+0x8>
 8107a42:	bf00      	nop
 8107a44:	10004594 	.word	0x10004594
 8107a48:	e000ed04 	.word	0xe000ed04

08107a4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8107a4c:	b580      	push	{r7, lr}
 8107a4e:	b082      	sub	sp, #8
 8107a50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107a52:	2300      	movs	r3, #0
 8107a54:	607b      	str	r3, [r7, #4]
 8107a56:	e00c      	b.n	8107a72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8107a58:	687a      	ldr	r2, [r7, #4]
 8107a5a:	4613      	mov	r3, r2
 8107a5c:	009b      	lsls	r3, r3, #2
 8107a5e:	4413      	add	r3, r2
 8107a60:	009b      	lsls	r3, r3, #2
 8107a62:	4a12      	ldr	r2, [pc, #72]	@ (8107aac <prvInitialiseTaskLists+0x60>)
 8107a64:	4413      	add	r3, r2
 8107a66:	4618      	mov	r0, r3
 8107a68:	f7fd ff4e 	bl	8105908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	3301      	adds	r3, #1
 8107a70:	607b      	str	r3, [r7, #4]
 8107a72:	687b      	ldr	r3, [r7, #4]
 8107a74:	2b37      	cmp	r3, #55	@ 0x37
 8107a76:	d9ef      	bls.n	8107a58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8107a78:	480d      	ldr	r0, [pc, #52]	@ (8107ab0 <prvInitialiseTaskLists+0x64>)
 8107a7a:	f7fd ff45 	bl	8105908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8107a7e:	480d      	ldr	r0, [pc, #52]	@ (8107ab4 <prvInitialiseTaskLists+0x68>)
 8107a80:	f7fd ff42 	bl	8105908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8107a84:	480c      	ldr	r0, [pc, #48]	@ (8107ab8 <prvInitialiseTaskLists+0x6c>)
 8107a86:	f7fd ff3f 	bl	8105908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8107a8a:	480c      	ldr	r0, [pc, #48]	@ (8107abc <prvInitialiseTaskLists+0x70>)
 8107a8c:	f7fd ff3c 	bl	8105908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8107a90:	480b      	ldr	r0, [pc, #44]	@ (8107ac0 <prvInitialiseTaskLists+0x74>)
 8107a92:	f7fd ff39 	bl	8105908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8107a96:	4b0b      	ldr	r3, [pc, #44]	@ (8107ac4 <prvInitialiseTaskLists+0x78>)
 8107a98:	4a05      	ldr	r2, [pc, #20]	@ (8107ab0 <prvInitialiseTaskLists+0x64>)
 8107a9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8107a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8107ac8 <prvInitialiseTaskLists+0x7c>)
 8107a9e:	4a05      	ldr	r2, [pc, #20]	@ (8107ab4 <prvInitialiseTaskLists+0x68>)
 8107aa0:	601a      	str	r2, [r3, #0]
}
 8107aa2:	bf00      	nop
 8107aa4:	3708      	adds	r7, #8
 8107aa6:	46bd      	mov	sp, r7
 8107aa8:	bd80      	pop	{r7, pc}
 8107aaa:	bf00      	nop
 8107aac:	10004594 	.word	0x10004594
 8107ab0:	100049f4 	.word	0x100049f4
 8107ab4:	10004a08 	.word	0x10004a08
 8107ab8:	10004a24 	.word	0x10004a24
 8107abc:	10004a38 	.word	0x10004a38
 8107ac0:	10004a50 	.word	0x10004a50
 8107ac4:	10004a1c 	.word	0x10004a1c
 8107ac8:	10004a20 	.word	0x10004a20

08107acc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8107acc:	b580      	push	{r7, lr}
 8107ace:	b082      	sub	sp, #8
 8107ad0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107ad2:	e019      	b.n	8107b08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8107ad4:	f7fe f900 	bl	8105cd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107ad8:	4b10      	ldr	r3, [pc, #64]	@ (8107b1c <prvCheckTasksWaitingTermination+0x50>)
 8107ada:	68db      	ldr	r3, [r3, #12]
 8107adc:	68db      	ldr	r3, [r3, #12]
 8107ade:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107ae0:	687b      	ldr	r3, [r7, #4]
 8107ae2:	3304      	adds	r3, #4
 8107ae4:	4618      	mov	r0, r3
 8107ae6:	f7fd ff99 	bl	8105a1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8107aea:	4b0d      	ldr	r3, [pc, #52]	@ (8107b20 <prvCheckTasksWaitingTermination+0x54>)
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	3b01      	subs	r3, #1
 8107af0:	4a0b      	ldr	r2, [pc, #44]	@ (8107b20 <prvCheckTasksWaitingTermination+0x54>)
 8107af2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8107af4:	4b0b      	ldr	r3, [pc, #44]	@ (8107b24 <prvCheckTasksWaitingTermination+0x58>)
 8107af6:	681b      	ldr	r3, [r3, #0]
 8107af8:	3b01      	subs	r3, #1
 8107afa:	4a0a      	ldr	r2, [pc, #40]	@ (8107b24 <prvCheckTasksWaitingTermination+0x58>)
 8107afc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8107afe:	f7fe f91d 	bl	8105d3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8107b02:	6878      	ldr	r0, [r7, #4]
 8107b04:	f000 f810 	bl	8107b28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107b08:	4b06      	ldr	r3, [pc, #24]	@ (8107b24 <prvCheckTasksWaitingTermination+0x58>)
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	2b00      	cmp	r3, #0
 8107b0e:	d1e1      	bne.n	8107ad4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8107b10:	bf00      	nop
 8107b12:	bf00      	nop
 8107b14:	3708      	adds	r7, #8
 8107b16:	46bd      	mov	sp, r7
 8107b18:	bd80      	pop	{r7, pc}
 8107b1a:	bf00      	nop
 8107b1c:	10004a38 	.word	0x10004a38
 8107b20:	10004a64 	.word	0x10004a64
 8107b24:	10004a4c 	.word	0x10004a4c

08107b28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8107b28:	b580      	push	{r7, lr}
 8107b2a:	b084      	sub	sp, #16
 8107b2c:	af00      	add	r7, sp, #0
 8107b2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8107b30:	687b      	ldr	r3, [r7, #4]
 8107b32:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8107b36:	2b00      	cmp	r3, #0
 8107b38:	d108      	bne.n	8107b4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8107b3a:	687b      	ldr	r3, [r7, #4]
 8107b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107b3e:	4618      	mov	r0, r3
 8107b40:	f7fd fdc2 	bl	81056c8 <vPortFree>
				vPortFree( pxTCB );
 8107b44:	6878      	ldr	r0, [r7, #4]
 8107b46:	f7fd fdbf 	bl	81056c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8107b4a:	e019      	b.n	8107b80 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8107b4c:	687b      	ldr	r3, [r7, #4]
 8107b4e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8107b52:	2b01      	cmp	r3, #1
 8107b54:	d103      	bne.n	8107b5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8107b56:	6878      	ldr	r0, [r7, #4]
 8107b58:	f7fd fdb6 	bl	81056c8 <vPortFree>
	}
 8107b5c:	e010      	b.n	8107b80 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8107b5e:	687b      	ldr	r3, [r7, #4]
 8107b60:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8107b64:	2b02      	cmp	r3, #2
 8107b66:	d00b      	beq.n	8107b80 <prvDeleteTCB+0x58>
	__asm volatile
 8107b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107b6c:	f383 8811 	msr	BASEPRI, r3
 8107b70:	f3bf 8f6f 	isb	sy
 8107b74:	f3bf 8f4f 	dsb	sy
 8107b78:	60fb      	str	r3, [r7, #12]
}
 8107b7a:	bf00      	nop
 8107b7c:	bf00      	nop
 8107b7e:	e7fd      	b.n	8107b7c <prvDeleteTCB+0x54>
	}
 8107b80:	bf00      	nop
 8107b82:	3710      	adds	r7, #16
 8107b84:	46bd      	mov	sp, r7
 8107b86:	bd80      	pop	{r7, pc}

08107b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8107b88:	b480      	push	{r7}
 8107b8a:	b083      	sub	sp, #12
 8107b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8107bc0 <prvResetNextTaskUnblockTime+0x38>)
 8107b90:	681b      	ldr	r3, [r3, #0]
 8107b92:	681b      	ldr	r3, [r3, #0]
 8107b94:	2b00      	cmp	r3, #0
 8107b96:	d104      	bne.n	8107ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8107b98:	4b0a      	ldr	r3, [pc, #40]	@ (8107bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8107b9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8107b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8107ba0:	e008      	b.n	8107bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107ba2:	4b07      	ldr	r3, [pc, #28]	@ (8107bc0 <prvResetNextTaskUnblockTime+0x38>)
 8107ba4:	681b      	ldr	r3, [r3, #0]
 8107ba6:	68db      	ldr	r3, [r3, #12]
 8107ba8:	68db      	ldr	r3, [r3, #12]
 8107baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	685b      	ldr	r3, [r3, #4]
 8107bb0:	4a04      	ldr	r2, [pc, #16]	@ (8107bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8107bb2:	6013      	str	r3, [r2, #0]
}
 8107bb4:	bf00      	nop
 8107bb6:	370c      	adds	r7, #12
 8107bb8:	46bd      	mov	sp, r7
 8107bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bbe:	4770      	bx	lr
 8107bc0:	10004a1c 	.word	0x10004a1c
 8107bc4:	10004a84 	.word	0x10004a84

08107bc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8107bc8:	b480      	push	{r7}
 8107bca:	b083      	sub	sp, #12
 8107bcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8107bce:	4b0b      	ldr	r3, [pc, #44]	@ (8107bfc <xTaskGetSchedulerState+0x34>)
 8107bd0:	681b      	ldr	r3, [r3, #0]
 8107bd2:	2b00      	cmp	r3, #0
 8107bd4:	d102      	bne.n	8107bdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8107bd6:	2301      	movs	r3, #1
 8107bd8:	607b      	str	r3, [r7, #4]
 8107bda:	e008      	b.n	8107bee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107bdc:	4b08      	ldr	r3, [pc, #32]	@ (8107c00 <xTaskGetSchedulerState+0x38>)
 8107bde:	681b      	ldr	r3, [r3, #0]
 8107be0:	2b00      	cmp	r3, #0
 8107be2:	d102      	bne.n	8107bea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8107be4:	2302      	movs	r3, #2
 8107be6:	607b      	str	r3, [r7, #4]
 8107be8:	e001      	b.n	8107bee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8107bea:	2300      	movs	r3, #0
 8107bec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8107bee:	687b      	ldr	r3, [r7, #4]
	}
 8107bf0:	4618      	mov	r0, r3
 8107bf2:	370c      	adds	r7, #12
 8107bf4:	46bd      	mov	sp, r7
 8107bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bfa:	4770      	bx	lr
 8107bfc:	10004a70 	.word	0x10004a70
 8107c00:	10004a8c 	.word	0x10004a8c

08107c04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8107c04:	b580      	push	{r7, lr}
 8107c06:	b084      	sub	sp, #16
 8107c08:	af00      	add	r7, sp, #0
 8107c0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8107c10:	2300      	movs	r3, #0
 8107c12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	2b00      	cmp	r3, #0
 8107c18:	d051      	beq.n	8107cbe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8107c1a:	68bb      	ldr	r3, [r7, #8]
 8107c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8107cc8 <xTaskPriorityInherit+0xc4>)
 8107c20:	681b      	ldr	r3, [r3, #0]
 8107c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107c24:	429a      	cmp	r2, r3
 8107c26:	d241      	bcs.n	8107cac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8107c28:	68bb      	ldr	r3, [r7, #8]
 8107c2a:	699b      	ldr	r3, [r3, #24]
 8107c2c:	2b00      	cmp	r3, #0
 8107c2e:	db06      	blt.n	8107c3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107c30:	4b25      	ldr	r3, [pc, #148]	@ (8107cc8 <xTaskPriorityInherit+0xc4>)
 8107c32:	681b      	ldr	r3, [r3, #0]
 8107c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107c36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8107c3a:	68bb      	ldr	r3, [r7, #8]
 8107c3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8107c3e:	68bb      	ldr	r3, [r7, #8]
 8107c40:	6959      	ldr	r1, [r3, #20]
 8107c42:	68bb      	ldr	r3, [r7, #8]
 8107c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107c46:	4613      	mov	r3, r2
 8107c48:	009b      	lsls	r3, r3, #2
 8107c4a:	4413      	add	r3, r2
 8107c4c:	009b      	lsls	r3, r3, #2
 8107c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8107ccc <xTaskPriorityInherit+0xc8>)
 8107c50:	4413      	add	r3, r2
 8107c52:	4299      	cmp	r1, r3
 8107c54:	d122      	bne.n	8107c9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107c56:	68bb      	ldr	r3, [r7, #8]
 8107c58:	3304      	adds	r3, #4
 8107c5a:	4618      	mov	r0, r3
 8107c5c:	f7fd fede 	bl	8105a1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8107c60:	4b19      	ldr	r3, [pc, #100]	@ (8107cc8 <xTaskPriorityInherit+0xc4>)
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107c66:	68bb      	ldr	r3, [r7, #8]
 8107c68:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8107c6a:	68bb      	ldr	r3, [r7, #8]
 8107c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107c6e:	4b18      	ldr	r3, [pc, #96]	@ (8107cd0 <xTaskPriorityInherit+0xcc>)
 8107c70:	681b      	ldr	r3, [r3, #0]
 8107c72:	429a      	cmp	r2, r3
 8107c74:	d903      	bls.n	8107c7e <xTaskPriorityInherit+0x7a>
 8107c76:	68bb      	ldr	r3, [r7, #8]
 8107c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107c7a:	4a15      	ldr	r2, [pc, #84]	@ (8107cd0 <xTaskPriorityInherit+0xcc>)
 8107c7c:	6013      	str	r3, [r2, #0]
 8107c7e:	68bb      	ldr	r3, [r7, #8]
 8107c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107c82:	4613      	mov	r3, r2
 8107c84:	009b      	lsls	r3, r3, #2
 8107c86:	4413      	add	r3, r2
 8107c88:	009b      	lsls	r3, r3, #2
 8107c8a:	4a10      	ldr	r2, [pc, #64]	@ (8107ccc <xTaskPriorityInherit+0xc8>)
 8107c8c:	441a      	add	r2, r3
 8107c8e:	68bb      	ldr	r3, [r7, #8]
 8107c90:	3304      	adds	r3, #4
 8107c92:	4619      	mov	r1, r3
 8107c94:	4610      	mov	r0, r2
 8107c96:	f7fd fe64 	bl	8105962 <vListInsertEnd>
 8107c9a:	e004      	b.n	8107ca6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8107c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8107cc8 <xTaskPriorityInherit+0xc4>)
 8107c9e:	681b      	ldr	r3, [r3, #0]
 8107ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107ca2:	68bb      	ldr	r3, [r7, #8]
 8107ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8107ca6:	2301      	movs	r3, #1
 8107ca8:	60fb      	str	r3, [r7, #12]
 8107caa:	e008      	b.n	8107cbe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8107cac:	68bb      	ldr	r3, [r7, #8]
 8107cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8107cb0:	4b05      	ldr	r3, [pc, #20]	@ (8107cc8 <xTaskPriorityInherit+0xc4>)
 8107cb2:	681b      	ldr	r3, [r3, #0]
 8107cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107cb6:	429a      	cmp	r2, r3
 8107cb8:	d201      	bcs.n	8107cbe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8107cba:	2301      	movs	r3, #1
 8107cbc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8107cbe:	68fb      	ldr	r3, [r7, #12]
	}
 8107cc0:	4618      	mov	r0, r3
 8107cc2:	3710      	adds	r7, #16
 8107cc4:	46bd      	mov	sp, r7
 8107cc6:	bd80      	pop	{r7, pc}
 8107cc8:	10004590 	.word	0x10004590
 8107ccc:	10004594 	.word	0x10004594
 8107cd0:	10004a6c 	.word	0x10004a6c

08107cd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8107cd4:	b580      	push	{r7, lr}
 8107cd6:	b086      	sub	sp, #24
 8107cd8:	af00      	add	r7, sp, #0
 8107cda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8107cdc:	687b      	ldr	r3, [r7, #4]
 8107cde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8107ce0:	2300      	movs	r3, #0
 8107ce2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	2b00      	cmp	r3, #0
 8107ce8:	d058      	beq.n	8107d9c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8107cea:	4b2f      	ldr	r3, [pc, #188]	@ (8107da8 <xTaskPriorityDisinherit+0xd4>)
 8107cec:	681b      	ldr	r3, [r3, #0]
 8107cee:	693a      	ldr	r2, [r7, #16]
 8107cf0:	429a      	cmp	r2, r3
 8107cf2:	d00b      	beq.n	8107d0c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8107cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107cf8:	f383 8811 	msr	BASEPRI, r3
 8107cfc:	f3bf 8f6f 	isb	sy
 8107d00:	f3bf 8f4f 	dsb	sy
 8107d04:	60fb      	str	r3, [r7, #12]
}
 8107d06:	bf00      	nop
 8107d08:	bf00      	nop
 8107d0a:	e7fd      	b.n	8107d08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8107d0c:	693b      	ldr	r3, [r7, #16]
 8107d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107d10:	2b00      	cmp	r3, #0
 8107d12:	d10b      	bne.n	8107d2c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8107d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107d18:	f383 8811 	msr	BASEPRI, r3
 8107d1c:	f3bf 8f6f 	isb	sy
 8107d20:	f3bf 8f4f 	dsb	sy
 8107d24:	60bb      	str	r3, [r7, #8]
}
 8107d26:	bf00      	nop
 8107d28:	bf00      	nop
 8107d2a:	e7fd      	b.n	8107d28 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8107d2c:	693b      	ldr	r3, [r7, #16]
 8107d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107d30:	1e5a      	subs	r2, r3, #1
 8107d32:	693b      	ldr	r3, [r7, #16]
 8107d34:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8107d36:	693b      	ldr	r3, [r7, #16]
 8107d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107d3a:	693b      	ldr	r3, [r7, #16]
 8107d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107d3e:	429a      	cmp	r2, r3
 8107d40:	d02c      	beq.n	8107d9c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8107d42:	693b      	ldr	r3, [r7, #16]
 8107d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107d46:	2b00      	cmp	r3, #0
 8107d48:	d128      	bne.n	8107d9c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107d4a:	693b      	ldr	r3, [r7, #16]
 8107d4c:	3304      	adds	r3, #4
 8107d4e:	4618      	mov	r0, r3
 8107d50:	f7fd fe64 	bl	8105a1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8107d54:	693b      	ldr	r3, [r7, #16]
 8107d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8107d58:	693b      	ldr	r3, [r7, #16]
 8107d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107d5c:	693b      	ldr	r3, [r7, #16]
 8107d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8107d64:	693b      	ldr	r3, [r7, #16]
 8107d66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8107d68:	693b      	ldr	r3, [r7, #16]
 8107d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8107dac <xTaskPriorityDisinherit+0xd8>)
 8107d6e:	681b      	ldr	r3, [r3, #0]
 8107d70:	429a      	cmp	r2, r3
 8107d72:	d903      	bls.n	8107d7c <xTaskPriorityDisinherit+0xa8>
 8107d74:	693b      	ldr	r3, [r7, #16]
 8107d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d78:	4a0c      	ldr	r2, [pc, #48]	@ (8107dac <xTaskPriorityDisinherit+0xd8>)
 8107d7a:	6013      	str	r3, [r2, #0]
 8107d7c:	693b      	ldr	r3, [r7, #16]
 8107d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107d80:	4613      	mov	r3, r2
 8107d82:	009b      	lsls	r3, r3, #2
 8107d84:	4413      	add	r3, r2
 8107d86:	009b      	lsls	r3, r3, #2
 8107d88:	4a09      	ldr	r2, [pc, #36]	@ (8107db0 <xTaskPriorityDisinherit+0xdc>)
 8107d8a:	441a      	add	r2, r3
 8107d8c:	693b      	ldr	r3, [r7, #16]
 8107d8e:	3304      	adds	r3, #4
 8107d90:	4619      	mov	r1, r3
 8107d92:	4610      	mov	r0, r2
 8107d94:	f7fd fde5 	bl	8105962 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8107d98:	2301      	movs	r3, #1
 8107d9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8107d9c:	697b      	ldr	r3, [r7, #20]
	}
 8107d9e:	4618      	mov	r0, r3
 8107da0:	3718      	adds	r7, #24
 8107da2:	46bd      	mov	sp, r7
 8107da4:	bd80      	pop	{r7, pc}
 8107da6:	bf00      	nop
 8107da8:	10004590 	.word	0x10004590
 8107dac:	10004a6c 	.word	0x10004a6c
 8107db0:	10004594 	.word	0x10004594

08107db4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8107db4:	b580      	push	{r7, lr}
 8107db6:	b088      	sub	sp, #32
 8107db8:	af00      	add	r7, sp, #0
 8107dba:	6078      	str	r0, [r7, #4]
 8107dbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8107dc2:	2301      	movs	r3, #1
 8107dc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8107dc6:	687b      	ldr	r3, [r7, #4]
 8107dc8:	2b00      	cmp	r3, #0
 8107dca:	d06c      	beq.n	8107ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8107dcc:	69bb      	ldr	r3, [r7, #24]
 8107dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107dd0:	2b00      	cmp	r3, #0
 8107dd2:	d10b      	bne.n	8107dec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8107dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107dd8:	f383 8811 	msr	BASEPRI, r3
 8107ddc:	f3bf 8f6f 	isb	sy
 8107de0:	f3bf 8f4f 	dsb	sy
 8107de4:	60fb      	str	r3, [r7, #12]
}
 8107de6:	bf00      	nop
 8107de8:	bf00      	nop
 8107dea:	e7fd      	b.n	8107de8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8107dec:	69bb      	ldr	r3, [r7, #24]
 8107dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107df0:	683a      	ldr	r2, [r7, #0]
 8107df2:	429a      	cmp	r2, r3
 8107df4:	d902      	bls.n	8107dfc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8107df6:	683b      	ldr	r3, [r7, #0]
 8107df8:	61fb      	str	r3, [r7, #28]
 8107dfa:	e002      	b.n	8107e02 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8107dfc:	69bb      	ldr	r3, [r7, #24]
 8107dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107e00:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8107e02:	69bb      	ldr	r3, [r7, #24]
 8107e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e06:	69fa      	ldr	r2, [r7, #28]
 8107e08:	429a      	cmp	r2, r3
 8107e0a:	d04c      	beq.n	8107ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8107e0c:	69bb      	ldr	r3, [r7, #24]
 8107e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107e10:	697a      	ldr	r2, [r7, #20]
 8107e12:	429a      	cmp	r2, r3
 8107e14:	d147      	bne.n	8107ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8107e16:	4b26      	ldr	r3, [pc, #152]	@ (8107eb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8107e18:	681b      	ldr	r3, [r3, #0]
 8107e1a:	69ba      	ldr	r2, [r7, #24]
 8107e1c:	429a      	cmp	r2, r3
 8107e1e:	d10b      	bne.n	8107e38 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8107e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107e24:	f383 8811 	msr	BASEPRI, r3
 8107e28:	f3bf 8f6f 	isb	sy
 8107e2c:	f3bf 8f4f 	dsb	sy
 8107e30:	60bb      	str	r3, [r7, #8]
}
 8107e32:	bf00      	nop
 8107e34:	bf00      	nop
 8107e36:	e7fd      	b.n	8107e34 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8107e38:	69bb      	ldr	r3, [r7, #24]
 8107e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e3c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8107e3e:	69bb      	ldr	r3, [r7, #24]
 8107e40:	69fa      	ldr	r2, [r7, #28]
 8107e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8107e44:	69bb      	ldr	r3, [r7, #24]
 8107e46:	699b      	ldr	r3, [r3, #24]
 8107e48:	2b00      	cmp	r3, #0
 8107e4a:	db04      	blt.n	8107e56 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107e4c:	69fb      	ldr	r3, [r7, #28]
 8107e4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8107e52:	69bb      	ldr	r3, [r7, #24]
 8107e54:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8107e56:	69bb      	ldr	r3, [r7, #24]
 8107e58:	6959      	ldr	r1, [r3, #20]
 8107e5a:	693a      	ldr	r2, [r7, #16]
 8107e5c:	4613      	mov	r3, r2
 8107e5e:	009b      	lsls	r3, r3, #2
 8107e60:	4413      	add	r3, r2
 8107e62:	009b      	lsls	r3, r3, #2
 8107e64:	4a13      	ldr	r2, [pc, #76]	@ (8107eb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8107e66:	4413      	add	r3, r2
 8107e68:	4299      	cmp	r1, r3
 8107e6a:	d11c      	bne.n	8107ea6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107e6c:	69bb      	ldr	r3, [r7, #24]
 8107e6e:	3304      	adds	r3, #4
 8107e70:	4618      	mov	r0, r3
 8107e72:	f7fd fdd3 	bl	8105a1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8107e76:	69bb      	ldr	r3, [r7, #24]
 8107e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8107eb8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8107e7c:	681b      	ldr	r3, [r3, #0]
 8107e7e:	429a      	cmp	r2, r3
 8107e80:	d903      	bls.n	8107e8a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8107e82:	69bb      	ldr	r3, [r7, #24]
 8107e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107e86:	4a0c      	ldr	r2, [pc, #48]	@ (8107eb8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8107e88:	6013      	str	r3, [r2, #0]
 8107e8a:	69bb      	ldr	r3, [r7, #24]
 8107e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107e8e:	4613      	mov	r3, r2
 8107e90:	009b      	lsls	r3, r3, #2
 8107e92:	4413      	add	r3, r2
 8107e94:	009b      	lsls	r3, r3, #2
 8107e96:	4a07      	ldr	r2, [pc, #28]	@ (8107eb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8107e98:	441a      	add	r2, r3
 8107e9a:	69bb      	ldr	r3, [r7, #24]
 8107e9c:	3304      	adds	r3, #4
 8107e9e:	4619      	mov	r1, r3
 8107ea0:	4610      	mov	r0, r2
 8107ea2:	f7fd fd5e 	bl	8105962 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8107ea6:	bf00      	nop
 8107ea8:	3720      	adds	r7, #32
 8107eaa:	46bd      	mov	sp, r7
 8107eac:	bd80      	pop	{r7, pc}
 8107eae:	bf00      	nop
 8107eb0:	10004590 	.word	0x10004590
 8107eb4:	10004594 	.word	0x10004594
 8107eb8:	10004a6c 	.word	0x10004a6c

08107ebc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8107ebc:	b480      	push	{r7}
 8107ebe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8107ec0:	4b07      	ldr	r3, [pc, #28]	@ (8107ee0 <pvTaskIncrementMutexHeldCount+0x24>)
 8107ec2:	681b      	ldr	r3, [r3, #0]
 8107ec4:	2b00      	cmp	r3, #0
 8107ec6:	d004      	beq.n	8107ed2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8107ec8:	4b05      	ldr	r3, [pc, #20]	@ (8107ee0 <pvTaskIncrementMutexHeldCount+0x24>)
 8107eca:	681b      	ldr	r3, [r3, #0]
 8107ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8107ece:	3201      	adds	r2, #1
 8107ed0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8107ed2:	4b03      	ldr	r3, [pc, #12]	@ (8107ee0 <pvTaskIncrementMutexHeldCount+0x24>)
 8107ed4:	681b      	ldr	r3, [r3, #0]
	}
 8107ed6:	4618      	mov	r0, r3
 8107ed8:	46bd      	mov	sp, r7
 8107eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ede:	4770      	bx	lr
 8107ee0:	10004590 	.word	0x10004590

08107ee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8107ee4:	b580      	push	{r7, lr}
 8107ee6:	b084      	sub	sp, #16
 8107ee8:	af00      	add	r7, sp, #0
 8107eea:	6078      	str	r0, [r7, #4]
 8107eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8107eee:	4b21      	ldr	r3, [pc, #132]	@ (8107f74 <prvAddCurrentTaskToDelayedList+0x90>)
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107ef4:	4b20      	ldr	r3, [pc, #128]	@ (8107f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8107ef6:	681b      	ldr	r3, [r3, #0]
 8107ef8:	3304      	adds	r3, #4
 8107efa:	4618      	mov	r0, r3
 8107efc:	f7fd fd8e 	bl	8105a1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8107f06:	d10a      	bne.n	8107f1e <prvAddCurrentTaskToDelayedList+0x3a>
 8107f08:	683b      	ldr	r3, [r7, #0]
 8107f0a:	2b00      	cmp	r3, #0
 8107f0c:	d007      	beq.n	8107f1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8107f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8107f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8107f10:	681b      	ldr	r3, [r3, #0]
 8107f12:	3304      	adds	r3, #4
 8107f14:	4619      	mov	r1, r3
 8107f16:	4819      	ldr	r0, [pc, #100]	@ (8107f7c <prvAddCurrentTaskToDelayedList+0x98>)
 8107f18:	f7fd fd23 	bl	8105962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8107f1c:	e026      	b.n	8107f6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8107f1e:	68fa      	ldr	r2, [r7, #12]
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	4413      	add	r3, r2
 8107f24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8107f26:	4b14      	ldr	r3, [pc, #80]	@ (8107f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8107f28:	681b      	ldr	r3, [r3, #0]
 8107f2a:	68ba      	ldr	r2, [r7, #8]
 8107f2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8107f2e:	68ba      	ldr	r2, [r7, #8]
 8107f30:	68fb      	ldr	r3, [r7, #12]
 8107f32:	429a      	cmp	r2, r3
 8107f34:	d209      	bcs.n	8107f4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8107f36:	4b12      	ldr	r3, [pc, #72]	@ (8107f80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8107f38:	681a      	ldr	r2, [r3, #0]
 8107f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8107f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8107f3c:	681b      	ldr	r3, [r3, #0]
 8107f3e:	3304      	adds	r3, #4
 8107f40:	4619      	mov	r1, r3
 8107f42:	4610      	mov	r0, r2
 8107f44:	f7fd fd31 	bl	81059aa <vListInsert>
}
 8107f48:	e010      	b.n	8107f6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8107f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8107f84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8107f4c:	681a      	ldr	r2, [r3, #0]
 8107f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8107f78 <prvAddCurrentTaskToDelayedList+0x94>)
 8107f50:	681b      	ldr	r3, [r3, #0]
 8107f52:	3304      	adds	r3, #4
 8107f54:	4619      	mov	r1, r3
 8107f56:	4610      	mov	r0, r2
 8107f58:	f7fd fd27 	bl	81059aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8107f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8107f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8107f5e:	681b      	ldr	r3, [r3, #0]
 8107f60:	68ba      	ldr	r2, [r7, #8]
 8107f62:	429a      	cmp	r2, r3
 8107f64:	d202      	bcs.n	8107f6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8107f66:	4a08      	ldr	r2, [pc, #32]	@ (8107f88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8107f68:	68bb      	ldr	r3, [r7, #8]
 8107f6a:	6013      	str	r3, [r2, #0]
}
 8107f6c:	bf00      	nop
 8107f6e:	3710      	adds	r7, #16
 8107f70:	46bd      	mov	sp, r7
 8107f72:	bd80      	pop	{r7, pc}
 8107f74:	10004a68 	.word	0x10004a68
 8107f78:	10004590 	.word	0x10004590
 8107f7c:	10004a50 	.word	0x10004a50
 8107f80:	10004a20 	.word	0x10004a20
 8107f84:	10004a1c 	.word	0x10004a1c
 8107f88:	10004a84 	.word	0x10004a84

08107f8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8107f8c:	b580      	push	{r7, lr}
 8107f8e:	b08a      	sub	sp, #40	@ 0x28
 8107f90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8107f92:	2300      	movs	r3, #0
 8107f94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8107f96:	f000 fb13 	bl	81085c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8107f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8108010 <xTimerCreateTimerTask+0x84>)
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	2b00      	cmp	r3, #0
 8107fa0:	d021      	beq.n	8107fe6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8107fa2:	2300      	movs	r3, #0
 8107fa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8107fa6:	2300      	movs	r3, #0
 8107fa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8107faa:	1d3a      	adds	r2, r7, #4
 8107fac:	f107 0108 	add.w	r1, r7, #8
 8107fb0:	f107 030c 	add.w	r3, r7, #12
 8107fb4:	4618      	mov	r0, r3
 8107fb6:	f7fd fa9f 	bl	81054f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8107fba:	6879      	ldr	r1, [r7, #4]
 8107fbc:	68bb      	ldr	r3, [r7, #8]
 8107fbe:	68fa      	ldr	r2, [r7, #12]
 8107fc0:	9202      	str	r2, [sp, #8]
 8107fc2:	9301      	str	r3, [sp, #4]
 8107fc4:	2302      	movs	r3, #2
 8107fc6:	9300      	str	r3, [sp, #0]
 8107fc8:	2300      	movs	r3, #0
 8107fca:	460a      	mov	r2, r1
 8107fcc:	4911      	ldr	r1, [pc, #68]	@ (8108014 <xTimerCreateTimerTask+0x88>)
 8107fce:	4812      	ldr	r0, [pc, #72]	@ (8108018 <xTimerCreateTimerTask+0x8c>)
 8107fd0:	f7fe ffd0 	bl	8106f74 <xTaskCreateStatic>
 8107fd4:	4603      	mov	r3, r0
 8107fd6:	4a11      	ldr	r2, [pc, #68]	@ (810801c <xTimerCreateTimerTask+0x90>)
 8107fd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8107fda:	4b10      	ldr	r3, [pc, #64]	@ (810801c <xTimerCreateTimerTask+0x90>)
 8107fdc:	681b      	ldr	r3, [r3, #0]
 8107fde:	2b00      	cmp	r3, #0
 8107fe0:	d001      	beq.n	8107fe6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8107fe2:	2301      	movs	r3, #1
 8107fe4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8107fe6:	697b      	ldr	r3, [r7, #20]
 8107fe8:	2b00      	cmp	r3, #0
 8107fea:	d10b      	bne.n	8108004 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8107fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8107ff0:	f383 8811 	msr	BASEPRI, r3
 8107ff4:	f3bf 8f6f 	isb	sy
 8107ff8:	f3bf 8f4f 	dsb	sy
 8107ffc:	613b      	str	r3, [r7, #16]
}
 8107ffe:	bf00      	nop
 8108000:	bf00      	nop
 8108002:	e7fd      	b.n	8108000 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8108004:	697b      	ldr	r3, [r7, #20]
}
 8108006:	4618      	mov	r0, r3
 8108008:	3718      	adds	r7, #24
 810800a:	46bd      	mov	sp, r7
 810800c:	bd80      	pop	{r7, pc}
 810800e:	bf00      	nop
 8108010:	10004ac0 	.word	0x10004ac0
 8108014:	0810bfd0 	.word	0x0810bfd0
 8108018:	08108159 	.word	0x08108159
 810801c:	10004ac4 	.word	0x10004ac4

08108020 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8108020:	b580      	push	{r7, lr}
 8108022:	b08a      	sub	sp, #40	@ 0x28
 8108024:	af00      	add	r7, sp, #0
 8108026:	60f8      	str	r0, [r7, #12]
 8108028:	60b9      	str	r1, [r7, #8]
 810802a:	607a      	str	r2, [r7, #4]
 810802c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810802e:	2300      	movs	r3, #0
 8108030:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8108032:	68fb      	ldr	r3, [r7, #12]
 8108034:	2b00      	cmp	r3, #0
 8108036:	d10b      	bne.n	8108050 <xTimerGenericCommand+0x30>
	__asm volatile
 8108038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810803c:	f383 8811 	msr	BASEPRI, r3
 8108040:	f3bf 8f6f 	isb	sy
 8108044:	f3bf 8f4f 	dsb	sy
 8108048:	623b      	str	r3, [r7, #32]
}
 810804a:	bf00      	nop
 810804c:	bf00      	nop
 810804e:	e7fd      	b.n	810804c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8108050:	4b19      	ldr	r3, [pc, #100]	@ (81080b8 <xTimerGenericCommand+0x98>)
 8108052:	681b      	ldr	r3, [r3, #0]
 8108054:	2b00      	cmp	r3, #0
 8108056:	d02a      	beq.n	81080ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8108058:	68bb      	ldr	r3, [r7, #8]
 810805a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8108060:	68fb      	ldr	r3, [r7, #12]
 8108062:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8108064:	68bb      	ldr	r3, [r7, #8]
 8108066:	2b05      	cmp	r3, #5
 8108068:	dc18      	bgt.n	810809c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810806a:	f7ff fdad 	bl	8107bc8 <xTaskGetSchedulerState>
 810806e:	4603      	mov	r3, r0
 8108070:	2b02      	cmp	r3, #2
 8108072:	d109      	bne.n	8108088 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8108074:	4b10      	ldr	r3, [pc, #64]	@ (81080b8 <xTimerGenericCommand+0x98>)
 8108076:	6818      	ldr	r0, [r3, #0]
 8108078:	f107 0110 	add.w	r1, r7, #16
 810807c:	2300      	movs	r3, #0
 810807e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8108080:	f7fe f900 	bl	8106284 <xQueueGenericSend>
 8108084:	6278      	str	r0, [r7, #36]	@ 0x24
 8108086:	e012      	b.n	81080ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8108088:	4b0b      	ldr	r3, [pc, #44]	@ (81080b8 <xTimerGenericCommand+0x98>)
 810808a:	6818      	ldr	r0, [r3, #0]
 810808c:	f107 0110 	add.w	r1, r7, #16
 8108090:	2300      	movs	r3, #0
 8108092:	2200      	movs	r2, #0
 8108094:	f7fe f8f6 	bl	8106284 <xQueueGenericSend>
 8108098:	6278      	str	r0, [r7, #36]	@ 0x24
 810809a:	e008      	b.n	81080ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810809c:	4b06      	ldr	r3, [pc, #24]	@ (81080b8 <xTimerGenericCommand+0x98>)
 810809e:	6818      	ldr	r0, [r3, #0]
 81080a0:	f107 0110 	add.w	r1, r7, #16
 81080a4:	2300      	movs	r3, #0
 81080a6:	683a      	ldr	r2, [r7, #0]
 81080a8:	f7fe f9ee 	bl	8106488 <xQueueGenericSendFromISR>
 81080ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 81080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 81080b0:	4618      	mov	r0, r3
 81080b2:	3728      	adds	r7, #40	@ 0x28
 81080b4:	46bd      	mov	sp, r7
 81080b6:	bd80      	pop	{r7, pc}
 81080b8:	10004ac0 	.word	0x10004ac0

081080bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 81080bc:	b580      	push	{r7, lr}
 81080be:	b088      	sub	sp, #32
 81080c0:	af02      	add	r7, sp, #8
 81080c2:	6078      	str	r0, [r7, #4]
 81080c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81080c6:	4b23      	ldr	r3, [pc, #140]	@ (8108154 <prvProcessExpiredTimer+0x98>)
 81080c8:	681b      	ldr	r3, [r3, #0]
 81080ca:	68db      	ldr	r3, [r3, #12]
 81080cc:	68db      	ldr	r3, [r3, #12]
 81080ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81080d0:	697b      	ldr	r3, [r7, #20]
 81080d2:	3304      	adds	r3, #4
 81080d4:	4618      	mov	r0, r3
 81080d6:	f7fd fca1 	bl	8105a1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81080da:	697b      	ldr	r3, [r7, #20]
 81080dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81080e0:	f003 0304 	and.w	r3, r3, #4
 81080e4:	2b00      	cmp	r3, #0
 81080e6:	d023      	beq.n	8108130 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81080e8:	697b      	ldr	r3, [r7, #20]
 81080ea:	699a      	ldr	r2, [r3, #24]
 81080ec:	687b      	ldr	r3, [r7, #4]
 81080ee:	18d1      	adds	r1, r2, r3
 81080f0:	687b      	ldr	r3, [r7, #4]
 81080f2:	683a      	ldr	r2, [r7, #0]
 81080f4:	6978      	ldr	r0, [r7, #20]
 81080f6:	f000 f8d5 	bl	81082a4 <prvInsertTimerInActiveList>
 81080fa:	4603      	mov	r3, r0
 81080fc:	2b00      	cmp	r3, #0
 81080fe:	d020      	beq.n	8108142 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8108100:	2300      	movs	r3, #0
 8108102:	9300      	str	r3, [sp, #0]
 8108104:	2300      	movs	r3, #0
 8108106:	687a      	ldr	r2, [r7, #4]
 8108108:	2100      	movs	r1, #0
 810810a:	6978      	ldr	r0, [r7, #20]
 810810c:	f7ff ff88 	bl	8108020 <xTimerGenericCommand>
 8108110:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8108112:	693b      	ldr	r3, [r7, #16]
 8108114:	2b00      	cmp	r3, #0
 8108116:	d114      	bne.n	8108142 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8108118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810811c:	f383 8811 	msr	BASEPRI, r3
 8108120:	f3bf 8f6f 	isb	sy
 8108124:	f3bf 8f4f 	dsb	sy
 8108128:	60fb      	str	r3, [r7, #12]
}
 810812a:	bf00      	nop
 810812c:	bf00      	nop
 810812e:	e7fd      	b.n	810812c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108130:	697b      	ldr	r3, [r7, #20]
 8108132:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108136:	f023 0301 	bic.w	r3, r3, #1
 810813a:	b2da      	uxtb	r2, r3
 810813c:	697b      	ldr	r3, [r7, #20]
 810813e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8108142:	697b      	ldr	r3, [r7, #20]
 8108144:	6a1b      	ldr	r3, [r3, #32]
 8108146:	6978      	ldr	r0, [r7, #20]
 8108148:	4798      	blx	r3
}
 810814a:	bf00      	nop
 810814c:	3718      	adds	r7, #24
 810814e:	46bd      	mov	sp, r7
 8108150:	bd80      	pop	{r7, pc}
 8108152:	bf00      	nop
 8108154:	10004ab8 	.word	0x10004ab8

08108158 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8108158:	b580      	push	{r7, lr}
 810815a:	b084      	sub	sp, #16
 810815c:	af00      	add	r7, sp, #0
 810815e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8108160:	f107 0308 	add.w	r3, r7, #8
 8108164:	4618      	mov	r0, r3
 8108166:	f000 f859 	bl	810821c <prvGetNextExpireTime>
 810816a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810816c:	68bb      	ldr	r3, [r7, #8]
 810816e:	4619      	mov	r1, r3
 8108170:	68f8      	ldr	r0, [r7, #12]
 8108172:	f000 f805 	bl	8108180 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8108176:	f000 f8d7 	bl	8108328 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810817a:	bf00      	nop
 810817c:	e7f0      	b.n	8108160 <prvTimerTask+0x8>
	...

08108180 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8108180:	b580      	push	{r7, lr}
 8108182:	b084      	sub	sp, #16
 8108184:	af00      	add	r7, sp, #0
 8108186:	6078      	str	r0, [r7, #4]
 8108188:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810818a:	f7ff f937 	bl	81073fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810818e:	f107 0308 	add.w	r3, r7, #8
 8108192:	4618      	mov	r0, r3
 8108194:	f000 f866 	bl	8108264 <prvSampleTimeNow>
 8108198:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810819a:	68bb      	ldr	r3, [r7, #8]
 810819c:	2b00      	cmp	r3, #0
 810819e:	d130      	bne.n	8108202 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 81081a0:	683b      	ldr	r3, [r7, #0]
 81081a2:	2b00      	cmp	r3, #0
 81081a4:	d10a      	bne.n	81081bc <prvProcessTimerOrBlockTask+0x3c>
 81081a6:	687a      	ldr	r2, [r7, #4]
 81081a8:	68fb      	ldr	r3, [r7, #12]
 81081aa:	429a      	cmp	r2, r3
 81081ac:	d806      	bhi.n	81081bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 81081ae:	f7ff f933 	bl	8107418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 81081b2:	68f9      	ldr	r1, [r7, #12]
 81081b4:	6878      	ldr	r0, [r7, #4]
 81081b6:	f7ff ff81 	bl	81080bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 81081ba:	e024      	b.n	8108206 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 81081bc:	683b      	ldr	r3, [r7, #0]
 81081be:	2b00      	cmp	r3, #0
 81081c0:	d008      	beq.n	81081d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 81081c2:	4b13      	ldr	r3, [pc, #76]	@ (8108210 <prvProcessTimerOrBlockTask+0x90>)
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	681b      	ldr	r3, [r3, #0]
 81081c8:	2b00      	cmp	r3, #0
 81081ca:	d101      	bne.n	81081d0 <prvProcessTimerOrBlockTask+0x50>
 81081cc:	2301      	movs	r3, #1
 81081ce:	e000      	b.n	81081d2 <prvProcessTimerOrBlockTask+0x52>
 81081d0:	2300      	movs	r3, #0
 81081d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81081d4:	4b0f      	ldr	r3, [pc, #60]	@ (8108214 <prvProcessTimerOrBlockTask+0x94>)
 81081d6:	6818      	ldr	r0, [r3, #0]
 81081d8:	687a      	ldr	r2, [r7, #4]
 81081da:	68fb      	ldr	r3, [r7, #12]
 81081dc:	1ad3      	subs	r3, r2, r3
 81081de:	683a      	ldr	r2, [r7, #0]
 81081e0:	4619      	mov	r1, r3
 81081e2:	f7fe fe93 	bl	8106f0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81081e6:	f7ff f917 	bl	8107418 <xTaskResumeAll>
 81081ea:	4603      	mov	r3, r0
 81081ec:	2b00      	cmp	r3, #0
 81081ee:	d10a      	bne.n	8108206 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81081f0:	4b09      	ldr	r3, [pc, #36]	@ (8108218 <prvProcessTimerOrBlockTask+0x98>)
 81081f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 81081f6:	601a      	str	r2, [r3, #0]
 81081f8:	f3bf 8f4f 	dsb	sy
 81081fc:	f3bf 8f6f 	isb	sy
}
 8108200:	e001      	b.n	8108206 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8108202:	f7ff f909 	bl	8107418 <xTaskResumeAll>
}
 8108206:	bf00      	nop
 8108208:	3710      	adds	r7, #16
 810820a:	46bd      	mov	sp, r7
 810820c:	bd80      	pop	{r7, pc}
 810820e:	bf00      	nop
 8108210:	10004abc 	.word	0x10004abc
 8108214:	10004ac0 	.word	0x10004ac0
 8108218:	e000ed04 	.word	0xe000ed04

0810821c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810821c:	b480      	push	{r7}
 810821e:	b085      	sub	sp, #20
 8108220:	af00      	add	r7, sp, #0
 8108222:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8108224:	4b0e      	ldr	r3, [pc, #56]	@ (8108260 <prvGetNextExpireTime+0x44>)
 8108226:	681b      	ldr	r3, [r3, #0]
 8108228:	681b      	ldr	r3, [r3, #0]
 810822a:	2b00      	cmp	r3, #0
 810822c:	d101      	bne.n	8108232 <prvGetNextExpireTime+0x16>
 810822e:	2201      	movs	r2, #1
 8108230:	e000      	b.n	8108234 <prvGetNextExpireTime+0x18>
 8108232:	2200      	movs	r2, #0
 8108234:	687b      	ldr	r3, [r7, #4]
 8108236:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8108238:	687b      	ldr	r3, [r7, #4]
 810823a:	681b      	ldr	r3, [r3, #0]
 810823c:	2b00      	cmp	r3, #0
 810823e:	d105      	bne.n	810824c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8108240:	4b07      	ldr	r3, [pc, #28]	@ (8108260 <prvGetNextExpireTime+0x44>)
 8108242:	681b      	ldr	r3, [r3, #0]
 8108244:	68db      	ldr	r3, [r3, #12]
 8108246:	681b      	ldr	r3, [r3, #0]
 8108248:	60fb      	str	r3, [r7, #12]
 810824a:	e001      	b.n	8108250 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810824c:	2300      	movs	r3, #0
 810824e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8108250:	68fb      	ldr	r3, [r7, #12]
}
 8108252:	4618      	mov	r0, r3
 8108254:	3714      	adds	r7, #20
 8108256:	46bd      	mov	sp, r7
 8108258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810825c:	4770      	bx	lr
 810825e:	bf00      	nop
 8108260:	10004ab8 	.word	0x10004ab8

08108264 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8108264:	b580      	push	{r7, lr}
 8108266:	b084      	sub	sp, #16
 8108268:	af00      	add	r7, sp, #0
 810826a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810826c:	f7ff f972 	bl	8107554 <xTaskGetTickCount>
 8108270:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8108272:	4b0b      	ldr	r3, [pc, #44]	@ (81082a0 <prvSampleTimeNow+0x3c>)
 8108274:	681b      	ldr	r3, [r3, #0]
 8108276:	68fa      	ldr	r2, [r7, #12]
 8108278:	429a      	cmp	r2, r3
 810827a:	d205      	bcs.n	8108288 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810827c:	f000 f93a 	bl	81084f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8108280:	687b      	ldr	r3, [r7, #4]
 8108282:	2201      	movs	r2, #1
 8108284:	601a      	str	r2, [r3, #0]
 8108286:	e002      	b.n	810828e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8108288:	687b      	ldr	r3, [r7, #4]
 810828a:	2200      	movs	r2, #0
 810828c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810828e:	4a04      	ldr	r2, [pc, #16]	@ (81082a0 <prvSampleTimeNow+0x3c>)
 8108290:	68fb      	ldr	r3, [r7, #12]
 8108292:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8108294:	68fb      	ldr	r3, [r7, #12]
}
 8108296:	4618      	mov	r0, r3
 8108298:	3710      	adds	r7, #16
 810829a:	46bd      	mov	sp, r7
 810829c:	bd80      	pop	{r7, pc}
 810829e:	bf00      	nop
 81082a0:	10004ac8 	.word	0x10004ac8

081082a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 81082a4:	b580      	push	{r7, lr}
 81082a6:	b086      	sub	sp, #24
 81082a8:	af00      	add	r7, sp, #0
 81082aa:	60f8      	str	r0, [r7, #12]
 81082ac:	60b9      	str	r1, [r7, #8]
 81082ae:	607a      	str	r2, [r7, #4]
 81082b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 81082b2:	2300      	movs	r3, #0
 81082b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 81082b6:	68fb      	ldr	r3, [r7, #12]
 81082b8:	68ba      	ldr	r2, [r7, #8]
 81082ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81082bc:	68fb      	ldr	r3, [r7, #12]
 81082be:	68fa      	ldr	r2, [r7, #12]
 81082c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 81082c2:	68ba      	ldr	r2, [r7, #8]
 81082c4:	687b      	ldr	r3, [r7, #4]
 81082c6:	429a      	cmp	r2, r3
 81082c8:	d812      	bhi.n	81082f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81082ca:	687a      	ldr	r2, [r7, #4]
 81082cc:	683b      	ldr	r3, [r7, #0]
 81082ce:	1ad2      	subs	r2, r2, r3
 81082d0:	68fb      	ldr	r3, [r7, #12]
 81082d2:	699b      	ldr	r3, [r3, #24]
 81082d4:	429a      	cmp	r2, r3
 81082d6:	d302      	bcc.n	81082de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81082d8:	2301      	movs	r3, #1
 81082da:	617b      	str	r3, [r7, #20]
 81082dc:	e01b      	b.n	8108316 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81082de:	4b10      	ldr	r3, [pc, #64]	@ (8108320 <prvInsertTimerInActiveList+0x7c>)
 81082e0:	681a      	ldr	r2, [r3, #0]
 81082e2:	68fb      	ldr	r3, [r7, #12]
 81082e4:	3304      	adds	r3, #4
 81082e6:	4619      	mov	r1, r3
 81082e8:	4610      	mov	r0, r2
 81082ea:	f7fd fb5e 	bl	81059aa <vListInsert>
 81082ee:	e012      	b.n	8108316 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81082f0:	687a      	ldr	r2, [r7, #4]
 81082f2:	683b      	ldr	r3, [r7, #0]
 81082f4:	429a      	cmp	r2, r3
 81082f6:	d206      	bcs.n	8108306 <prvInsertTimerInActiveList+0x62>
 81082f8:	68ba      	ldr	r2, [r7, #8]
 81082fa:	683b      	ldr	r3, [r7, #0]
 81082fc:	429a      	cmp	r2, r3
 81082fe:	d302      	bcc.n	8108306 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8108300:	2301      	movs	r3, #1
 8108302:	617b      	str	r3, [r7, #20]
 8108304:	e007      	b.n	8108316 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8108306:	4b07      	ldr	r3, [pc, #28]	@ (8108324 <prvInsertTimerInActiveList+0x80>)
 8108308:	681a      	ldr	r2, [r3, #0]
 810830a:	68fb      	ldr	r3, [r7, #12]
 810830c:	3304      	adds	r3, #4
 810830e:	4619      	mov	r1, r3
 8108310:	4610      	mov	r0, r2
 8108312:	f7fd fb4a 	bl	81059aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8108316:	697b      	ldr	r3, [r7, #20]
}
 8108318:	4618      	mov	r0, r3
 810831a:	3718      	adds	r7, #24
 810831c:	46bd      	mov	sp, r7
 810831e:	bd80      	pop	{r7, pc}
 8108320:	10004abc 	.word	0x10004abc
 8108324:	10004ab8 	.word	0x10004ab8

08108328 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8108328:	b580      	push	{r7, lr}
 810832a:	b08e      	sub	sp, #56	@ 0x38
 810832c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810832e:	e0ce      	b.n	81084ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8108330:	687b      	ldr	r3, [r7, #4]
 8108332:	2b00      	cmp	r3, #0
 8108334:	da19      	bge.n	810836a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8108336:	1d3b      	adds	r3, r7, #4
 8108338:	3304      	adds	r3, #4
 810833a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810833c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810833e:	2b00      	cmp	r3, #0
 8108340:	d10b      	bne.n	810835a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8108342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108346:	f383 8811 	msr	BASEPRI, r3
 810834a:	f3bf 8f6f 	isb	sy
 810834e:	f3bf 8f4f 	dsb	sy
 8108352:	61fb      	str	r3, [r7, #28]
}
 8108354:	bf00      	nop
 8108356:	bf00      	nop
 8108358:	e7fd      	b.n	8108356 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108360:	6850      	ldr	r0, [r2, #4]
 8108362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108364:	6892      	ldr	r2, [r2, #8]
 8108366:	4611      	mov	r1, r2
 8108368:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810836a:	687b      	ldr	r3, [r7, #4]
 810836c:	2b00      	cmp	r3, #0
 810836e:	f2c0 80ae 	blt.w	81084ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8108372:	68fb      	ldr	r3, [r7, #12]
 8108374:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8108376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108378:	695b      	ldr	r3, [r3, #20]
 810837a:	2b00      	cmp	r3, #0
 810837c:	d004      	beq.n	8108388 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810837e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108380:	3304      	adds	r3, #4
 8108382:	4618      	mov	r0, r3
 8108384:	f7fd fb4a 	bl	8105a1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8108388:	463b      	mov	r3, r7
 810838a:	4618      	mov	r0, r3
 810838c:	f7ff ff6a 	bl	8108264 <prvSampleTimeNow>
 8108390:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	2b09      	cmp	r3, #9
 8108396:	f200 8097 	bhi.w	81084c8 <prvProcessReceivedCommands+0x1a0>
 810839a:	a201      	add	r2, pc, #4	@ (adr r2, 81083a0 <prvProcessReceivedCommands+0x78>)
 810839c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083a0:	081083c9 	.word	0x081083c9
 81083a4:	081083c9 	.word	0x081083c9
 81083a8:	081083c9 	.word	0x081083c9
 81083ac:	0810843f 	.word	0x0810843f
 81083b0:	08108453 	.word	0x08108453
 81083b4:	0810849f 	.word	0x0810849f
 81083b8:	081083c9 	.word	0x081083c9
 81083bc:	081083c9 	.word	0x081083c9
 81083c0:	0810843f 	.word	0x0810843f
 81083c4:	08108453 	.word	0x08108453
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81083ce:	f043 0301 	orr.w	r3, r3, #1
 81083d2:	b2da      	uxtb	r2, r3
 81083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81083da:	68ba      	ldr	r2, [r7, #8]
 81083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083de:	699b      	ldr	r3, [r3, #24]
 81083e0:	18d1      	adds	r1, r2, r3
 81083e2:	68bb      	ldr	r3, [r7, #8]
 81083e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81083e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81083e8:	f7ff ff5c 	bl	81082a4 <prvInsertTimerInActiveList>
 81083ec:	4603      	mov	r3, r0
 81083ee:	2b00      	cmp	r3, #0
 81083f0:	d06c      	beq.n	81084cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81083f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083f4:	6a1b      	ldr	r3, [r3, #32]
 81083f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81083f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81083fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81083fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108400:	f003 0304 	and.w	r3, r3, #4
 8108404:	2b00      	cmp	r3, #0
 8108406:	d061      	beq.n	81084cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8108408:	68ba      	ldr	r2, [r7, #8]
 810840a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810840c:	699b      	ldr	r3, [r3, #24]
 810840e:	441a      	add	r2, r3
 8108410:	2300      	movs	r3, #0
 8108412:	9300      	str	r3, [sp, #0]
 8108414:	2300      	movs	r3, #0
 8108416:	2100      	movs	r1, #0
 8108418:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810841a:	f7ff fe01 	bl	8108020 <xTimerGenericCommand>
 810841e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8108420:	6a3b      	ldr	r3, [r7, #32]
 8108422:	2b00      	cmp	r3, #0
 8108424:	d152      	bne.n	81084cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8108426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810842a:	f383 8811 	msr	BASEPRI, r3
 810842e:	f3bf 8f6f 	isb	sy
 8108432:	f3bf 8f4f 	dsb	sy
 8108436:	61bb      	str	r3, [r7, #24]
}
 8108438:	bf00      	nop
 810843a:	bf00      	nop
 810843c:	e7fd      	b.n	810843a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108444:	f023 0301 	bic.w	r3, r3, #1
 8108448:	b2da      	uxtb	r2, r3
 810844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810844c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8108450:	e03d      	b.n	81084ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8108452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108458:	f043 0301 	orr.w	r3, r3, #1
 810845c:	b2da      	uxtb	r2, r3
 810845e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108460:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8108464:	68ba      	ldr	r2, [r7, #8]
 8108466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108468:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810846c:	699b      	ldr	r3, [r3, #24]
 810846e:	2b00      	cmp	r3, #0
 8108470:	d10b      	bne.n	810848a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8108472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8108476:	f383 8811 	msr	BASEPRI, r3
 810847a:	f3bf 8f6f 	isb	sy
 810847e:	f3bf 8f4f 	dsb	sy
 8108482:	617b      	str	r3, [r7, #20]
}
 8108484:	bf00      	nop
 8108486:	bf00      	nop
 8108488:	e7fd      	b.n	8108486 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810848a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810848c:	699a      	ldr	r2, [r3, #24]
 810848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108490:	18d1      	adds	r1, r2, r3
 8108492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8108498:	f7ff ff04 	bl	81082a4 <prvInsertTimerInActiveList>
					break;
 810849c:	e017      	b.n	81084ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81084a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81084a4:	f003 0302 	and.w	r3, r3, #2
 81084a8:	2b00      	cmp	r3, #0
 81084aa:	d103      	bne.n	81084b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 81084ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 81084ae:	f7fd f90b 	bl	81056c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 81084b2:	e00c      	b.n	81084ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81084b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81084b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 81084ba:	f023 0301 	bic.w	r3, r3, #1
 81084be:	b2da      	uxtb	r2, r3
 81084c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81084c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 81084c6:	e002      	b.n	81084ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 81084c8:	bf00      	nop
 81084ca:	e000      	b.n	81084ce <prvProcessReceivedCommands+0x1a6>
					break;
 81084cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81084ce:	4b08      	ldr	r3, [pc, #32]	@ (81084f0 <prvProcessReceivedCommands+0x1c8>)
 81084d0:	681b      	ldr	r3, [r3, #0]
 81084d2:	1d39      	adds	r1, r7, #4
 81084d4:	2200      	movs	r2, #0
 81084d6:	4618      	mov	r0, r3
 81084d8:	f7fe f904 	bl	81066e4 <xQueueReceive>
 81084dc:	4603      	mov	r3, r0
 81084de:	2b00      	cmp	r3, #0
 81084e0:	f47f af26 	bne.w	8108330 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 81084e4:	bf00      	nop
 81084e6:	bf00      	nop
 81084e8:	3730      	adds	r7, #48	@ 0x30
 81084ea:	46bd      	mov	sp, r7
 81084ec:	bd80      	pop	{r7, pc}
 81084ee:	bf00      	nop
 81084f0:	10004ac0 	.word	0x10004ac0

081084f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 81084f4:	b580      	push	{r7, lr}
 81084f6:	b088      	sub	sp, #32
 81084f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 81084fa:	e049      	b.n	8108590 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81084fc:	4b2e      	ldr	r3, [pc, #184]	@ (81085b8 <prvSwitchTimerLists+0xc4>)
 81084fe:	681b      	ldr	r3, [r3, #0]
 8108500:	68db      	ldr	r3, [r3, #12]
 8108502:	681b      	ldr	r3, [r3, #0]
 8108504:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108506:	4b2c      	ldr	r3, [pc, #176]	@ (81085b8 <prvSwitchTimerLists+0xc4>)
 8108508:	681b      	ldr	r3, [r3, #0]
 810850a:	68db      	ldr	r3, [r3, #12]
 810850c:	68db      	ldr	r3, [r3, #12]
 810850e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108510:	68fb      	ldr	r3, [r7, #12]
 8108512:	3304      	adds	r3, #4
 8108514:	4618      	mov	r0, r3
 8108516:	f7fd fa81 	bl	8105a1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810851a:	68fb      	ldr	r3, [r7, #12]
 810851c:	6a1b      	ldr	r3, [r3, #32]
 810851e:	68f8      	ldr	r0, [r7, #12]
 8108520:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8108522:	68fb      	ldr	r3, [r7, #12]
 8108524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8108528:	f003 0304 	and.w	r3, r3, #4
 810852c:	2b00      	cmp	r3, #0
 810852e:	d02f      	beq.n	8108590 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8108530:	68fb      	ldr	r3, [r7, #12]
 8108532:	699b      	ldr	r3, [r3, #24]
 8108534:	693a      	ldr	r2, [r7, #16]
 8108536:	4413      	add	r3, r2
 8108538:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810853a:	68ba      	ldr	r2, [r7, #8]
 810853c:	693b      	ldr	r3, [r7, #16]
 810853e:	429a      	cmp	r2, r3
 8108540:	d90e      	bls.n	8108560 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8108542:	68fb      	ldr	r3, [r7, #12]
 8108544:	68ba      	ldr	r2, [r7, #8]
 8108546:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8108548:	68fb      	ldr	r3, [r7, #12]
 810854a:	68fa      	ldr	r2, [r7, #12]
 810854c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810854e:	4b1a      	ldr	r3, [pc, #104]	@ (81085b8 <prvSwitchTimerLists+0xc4>)
 8108550:	681a      	ldr	r2, [r3, #0]
 8108552:	68fb      	ldr	r3, [r7, #12]
 8108554:	3304      	adds	r3, #4
 8108556:	4619      	mov	r1, r3
 8108558:	4610      	mov	r0, r2
 810855a:	f7fd fa26 	bl	81059aa <vListInsert>
 810855e:	e017      	b.n	8108590 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8108560:	2300      	movs	r3, #0
 8108562:	9300      	str	r3, [sp, #0]
 8108564:	2300      	movs	r3, #0
 8108566:	693a      	ldr	r2, [r7, #16]
 8108568:	2100      	movs	r1, #0
 810856a:	68f8      	ldr	r0, [r7, #12]
 810856c:	f7ff fd58 	bl	8108020 <xTimerGenericCommand>
 8108570:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8108572:	687b      	ldr	r3, [r7, #4]
 8108574:	2b00      	cmp	r3, #0
 8108576:	d10b      	bne.n	8108590 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8108578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810857c:	f383 8811 	msr	BASEPRI, r3
 8108580:	f3bf 8f6f 	isb	sy
 8108584:	f3bf 8f4f 	dsb	sy
 8108588:	603b      	str	r3, [r7, #0]
}
 810858a:	bf00      	nop
 810858c:	bf00      	nop
 810858e:	e7fd      	b.n	810858c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8108590:	4b09      	ldr	r3, [pc, #36]	@ (81085b8 <prvSwitchTimerLists+0xc4>)
 8108592:	681b      	ldr	r3, [r3, #0]
 8108594:	681b      	ldr	r3, [r3, #0]
 8108596:	2b00      	cmp	r3, #0
 8108598:	d1b0      	bne.n	81084fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810859a:	4b07      	ldr	r3, [pc, #28]	@ (81085b8 <prvSwitchTimerLists+0xc4>)
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 81085a0:	4b06      	ldr	r3, [pc, #24]	@ (81085bc <prvSwitchTimerLists+0xc8>)
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	4a04      	ldr	r2, [pc, #16]	@ (81085b8 <prvSwitchTimerLists+0xc4>)
 81085a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 81085a8:	4a04      	ldr	r2, [pc, #16]	@ (81085bc <prvSwitchTimerLists+0xc8>)
 81085aa:	697b      	ldr	r3, [r7, #20]
 81085ac:	6013      	str	r3, [r2, #0]
}
 81085ae:	bf00      	nop
 81085b0:	3718      	adds	r7, #24
 81085b2:	46bd      	mov	sp, r7
 81085b4:	bd80      	pop	{r7, pc}
 81085b6:	bf00      	nop
 81085b8:	10004ab8 	.word	0x10004ab8
 81085bc:	10004abc 	.word	0x10004abc

081085c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81085c0:	b580      	push	{r7, lr}
 81085c2:	b082      	sub	sp, #8
 81085c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81085c6:	f7fd fb87 	bl	8105cd8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81085ca:	4b15      	ldr	r3, [pc, #84]	@ (8108620 <prvCheckForValidListAndQueue+0x60>)
 81085cc:	681b      	ldr	r3, [r3, #0]
 81085ce:	2b00      	cmp	r3, #0
 81085d0:	d120      	bne.n	8108614 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81085d2:	4814      	ldr	r0, [pc, #80]	@ (8108624 <prvCheckForValidListAndQueue+0x64>)
 81085d4:	f7fd f998 	bl	8105908 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81085d8:	4813      	ldr	r0, [pc, #76]	@ (8108628 <prvCheckForValidListAndQueue+0x68>)
 81085da:	f7fd f995 	bl	8105908 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81085de:	4b13      	ldr	r3, [pc, #76]	@ (810862c <prvCheckForValidListAndQueue+0x6c>)
 81085e0:	4a10      	ldr	r2, [pc, #64]	@ (8108624 <prvCheckForValidListAndQueue+0x64>)
 81085e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81085e4:	4b12      	ldr	r3, [pc, #72]	@ (8108630 <prvCheckForValidListAndQueue+0x70>)
 81085e6:	4a10      	ldr	r2, [pc, #64]	@ (8108628 <prvCheckForValidListAndQueue+0x68>)
 81085e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81085ea:	2300      	movs	r3, #0
 81085ec:	9300      	str	r3, [sp, #0]
 81085ee:	4b11      	ldr	r3, [pc, #68]	@ (8108634 <prvCheckForValidListAndQueue+0x74>)
 81085f0:	4a11      	ldr	r2, [pc, #68]	@ (8108638 <prvCheckForValidListAndQueue+0x78>)
 81085f2:	2110      	movs	r1, #16
 81085f4:	200a      	movs	r0, #10
 81085f6:	f7fd fcfb 	bl	8105ff0 <xQueueGenericCreateStatic>
 81085fa:	4603      	mov	r3, r0
 81085fc:	4a08      	ldr	r2, [pc, #32]	@ (8108620 <prvCheckForValidListAndQueue+0x60>)
 81085fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8108600:	4b07      	ldr	r3, [pc, #28]	@ (8108620 <prvCheckForValidListAndQueue+0x60>)
 8108602:	681b      	ldr	r3, [r3, #0]
 8108604:	2b00      	cmp	r3, #0
 8108606:	d005      	beq.n	8108614 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8108608:	4b05      	ldr	r3, [pc, #20]	@ (8108620 <prvCheckForValidListAndQueue+0x60>)
 810860a:	681b      	ldr	r3, [r3, #0]
 810860c:	490b      	ldr	r1, [pc, #44]	@ (810863c <prvCheckForValidListAndQueue+0x7c>)
 810860e:	4618      	mov	r0, r3
 8108610:	f7fe fc28 	bl	8106e64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8108614:	f7fd fb92 	bl	8105d3c <vPortExitCritical>
}
 8108618:	bf00      	nop
 810861a:	46bd      	mov	sp, r7
 810861c:	bd80      	pop	{r7, pc}
 810861e:	bf00      	nop
 8108620:	10004ac0 	.word	0x10004ac0
 8108624:	10004a90 	.word	0x10004a90
 8108628:	10004aa4 	.word	0x10004aa4
 810862c:	10004ab8 	.word	0x10004ab8
 8108630:	10004abc 	.word	0x10004abc
 8108634:	10004b6c 	.word	0x10004b6c
 8108638:	10004acc 	.word	0x10004acc
 810863c:	0810bfd8 	.word	0x0810bfd8

08108640 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8108640:	b480      	push	{r7}
 8108642:	b083      	sub	sp, #12
 8108644:	af00      	add	r7, sp, #0
 8108646:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8108648:	687b      	ldr	r3, [r7, #4]
 810864a:	687a      	ldr	r2, [r7, #4]
 810864c:	605a      	str	r2, [r3, #4]
 810864e:	687b      	ldr	r3, [r7, #4]
 8108650:	685a      	ldr	r2, [r3, #4]
 8108652:	687b      	ldr	r3, [r7, #4]
 8108654:	601a      	str	r2, [r3, #0]
}
 8108656:	bf00      	nop
 8108658:	370c      	adds	r7, #12
 810865a:	46bd      	mov	sp, r7
 810865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108660:	4770      	bx	lr

08108662 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8108662:	b480      	push	{r7}
 8108664:	b083      	sub	sp, #12
 8108666:	af00      	add	r7, sp, #0
 8108668:	6078      	str	r0, [r7, #4]
 810866a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 810866c:	687b      	ldr	r3, [r7, #4]
 810866e:	685a      	ldr	r2, [r3, #4]
 8108670:	683b      	ldr	r3, [r7, #0]
 8108672:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8108674:	683b      	ldr	r3, [r7, #0]
 8108676:	687a      	ldr	r2, [r7, #4]
 8108678:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810867a:	683b      	ldr	r3, [r7, #0]
 810867c:	681b      	ldr	r3, [r3, #0]
 810867e:	683a      	ldr	r2, [r7, #0]
 8108680:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8108682:	683b      	ldr	r3, [r7, #0]
 8108684:	685b      	ldr	r3, [r3, #4]
 8108686:	683a      	ldr	r2, [r7, #0]
 8108688:	601a      	str	r2, [r3, #0]
}
 810868a:	bf00      	nop
 810868c:	370c      	adds	r7, #12
 810868e:	46bd      	mov	sp, r7
 8108690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108694:	4770      	bx	lr

08108696 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8108696:	b580      	push	{r7, lr}
 8108698:	b082      	sub	sp, #8
 810869a:	af00      	add	r7, sp, #0
 810869c:	6078      	str	r0, [r7, #4]
 810869e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 81086a0:	6839      	ldr	r1, [r7, #0]
 81086a2:	6878      	ldr	r0, [r7, #4]
 81086a4:	f7ff ffdd 	bl	8108662 <metal_list_add_before>
}
 81086a8:	bf00      	nop
 81086aa:	3708      	adds	r7, #8
 81086ac:	46bd      	mov	sp, r7
 81086ae:	bd80      	pop	{r7, pc}

081086b0 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 81086b0:	b580      	push	{r7, lr}
 81086b2:	b082      	sub	sp, #8
 81086b4:	af00      	add	r7, sp, #0
 81086b6:	6078      	str	r0, [r7, #4]
 81086b8:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 81086ba:	6839      	ldr	r1, [r7, #0]
 81086bc:	6878      	ldr	r0, [r7, #4]
 81086be:	f001 fdbf 	bl	810a240 <metal_machine_cache_flush>
}
 81086c2:	bf00      	nop
 81086c4:	3708      	adds	r7, #8
 81086c6:	46bd      	mov	sp, r7
 81086c8:	bd80      	pop	{r7, pc}

081086ca <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 81086ca:	b580      	push	{r7, lr}
 81086cc:	b082      	sub	sp, #8
 81086ce:	af00      	add	r7, sp, #0
 81086d0:	6078      	str	r0, [r7, #4]
 81086d2:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 81086d4:	6839      	ldr	r1, [r7, #0]
 81086d6:	6878      	ldr	r0, [r7, #4]
 81086d8:	f001 fdbd 	bl	810a256 <metal_machine_cache_invalidate>
}
 81086dc:	bf00      	nop
 81086de:	3708      	adds	r7, #8
 81086e0:	46bd      	mov	sp, r7
 81086e2:	bd80      	pop	{r7, pc}

081086e4 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 81086e4:	b580      	push	{r7, lr}
 81086e6:	b082      	sub	sp, #8
 81086e8:	af00      	add	r7, sp, #0
 81086ea:	6078      	str	r0, [r7, #4]
 81086ec:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 81086ee:	6839      	ldr	r1, [r7, #0]
 81086f0:	6878      	ldr	r0, [r7, #4]
 81086f2:	f7ff ffdd 	bl	81086b0 <__metal_cache_flush>
}
 81086f6:	bf00      	nop
 81086f8:	3708      	adds	r7, #8
 81086fa:	46bd      	mov	sp, r7
 81086fc:	bd80      	pop	{r7, pc}

081086fe <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 81086fe:	b580      	push	{r7, lr}
 8108700:	b082      	sub	sp, #8
 8108702:	af00      	add	r7, sp, #0
 8108704:	6078      	str	r0, [r7, #4]
 8108706:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8108708:	6839      	ldr	r1, [r7, #0]
 810870a:	6878      	ldr	r0, [r7, #4]
 810870c:	f7ff ffdd 	bl	81086ca <__metal_cache_invalidate>
}
 8108710:	bf00      	nop
 8108712:	3708      	adds	r7, #8
 8108714:	46bd      	mov	sp, r7
 8108716:	bd80      	pop	{r7, pc}

08108718 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8108718:	b580      	push	{r7, lr}
 810871a:	b082      	sub	sp, #8
 810871c:	af00      	add	r7, sp, #0
 810871e:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8108720:	687b      	ldr	r3, [r7, #4]
 8108722:	2b00      	cmp	r3, #0
 8108724:	d008      	beq.n	8108738 <metal_bus_register+0x20>
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	681b      	ldr	r3, [r3, #0]
 810872a:	2b00      	cmp	r3, #0
 810872c:	d004      	beq.n	8108738 <metal_bus_register+0x20>
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	681b      	ldr	r3, [r3, #0]
 8108732:	781b      	ldrb	r3, [r3, #0]
 8108734:	2b00      	cmp	r3, #0
 8108736:	d102      	bne.n	810873e <metal_bus_register+0x26>
		return -EINVAL;
 8108738:	f06f 0315 	mvn.w	r3, #21
 810873c:	e026      	b.n	810878c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 810873e:	687b      	ldr	r3, [r7, #4]
 8108740:	681b      	ldr	r3, [r3, #0]
 8108742:	2100      	movs	r1, #0
 8108744:	4618      	mov	r0, r3
 8108746:	f000 f82b 	bl	81087a0 <metal_bus_find>
 810874a:	4603      	mov	r3, r0
 810874c:	2b00      	cmp	r3, #0
 810874e:	d102      	bne.n	8108756 <metal_bus_register+0x3e>
		return -EEXIST;
 8108750:	f06f 0310 	mvn.w	r3, #16
 8108754:	e01a      	b.n	810878c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8108756:	687b      	ldr	r3, [r7, #4]
 8108758:	331c      	adds	r3, #28
 810875a:	4618      	mov	r0, r3
 810875c:	f7ff ff70 	bl	8108640 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	3324      	adds	r3, #36	@ 0x24
 8108764:	4619      	mov	r1, r3
 8108766:	480b      	ldr	r0, [pc, #44]	@ (8108794 <metal_bus_register+0x7c>)
 8108768:	f7ff ff95 	bl	8108696 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 810876c:	4b0a      	ldr	r3, [pc, #40]	@ (8108798 <metal_bus_register+0x80>)
 810876e:	781b      	ldrb	r3, [r3, #0]
 8108770:	2b06      	cmp	r3, #6
 8108772:	d90a      	bls.n	810878a <metal_bus_register+0x72>
 8108774:	4b08      	ldr	r3, [pc, #32]	@ (8108798 <metal_bus_register+0x80>)
 8108776:	685b      	ldr	r3, [r3, #4]
 8108778:	2b00      	cmp	r3, #0
 810877a:	d006      	beq.n	810878a <metal_bus_register+0x72>
 810877c:	4b06      	ldr	r3, [pc, #24]	@ (8108798 <metal_bus_register+0x80>)
 810877e:	685b      	ldr	r3, [r3, #4]
 8108780:	687a      	ldr	r2, [r7, #4]
 8108782:	6812      	ldr	r2, [r2, #0]
 8108784:	4905      	ldr	r1, [pc, #20]	@ (810879c <metal_bus_register+0x84>)
 8108786:	2007      	movs	r0, #7
 8108788:	4798      	blx	r3
	return 0;
 810878a:	2300      	movs	r3, #0
}
 810878c:	4618      	mov	r0, r3
 810878e:	3708      	adds	r7, #8
 8108790:	46bd      	mov	sp, r7
 8108792:	bd80      	pop	{r7, pc}
 8108794:	10004bc4 	.word	0x10004bc4
 8108798:	10004bbc 	.word	0x10004bbc
 810879c:	0810bfe0 	.word	0x0810bfe0

081087a0 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 81087a0:	b580      	push	{r7, lr}
 81087a2:	b084      	sub	sp, #16
 81087a4:	af00      	add	r7, sp, #0
 81087a6:	6078      	str	r0, [r7, #4]
 81087a8:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 81087aa:	4b13      	ldr	r3, [pc, #76]	@ (81087f8 <metal_bus_find+0x58>)
 81087ac:	689b      	ldr	r3, [r3, #8]
 81087ae:	60fb      	str	r3, [r7, #12]
 81087b0:	e017      	b.n	81087e2 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 81087b2:	68fb      	ldr	r3, [r7, #12]
 81087b4:	3b24      	subs	r3, #36	@ 0x24
 81087b6:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 81087b8:	68bb      	ldr	r3, [r7, #8]
 81087ba:	681b      	ldr	r3, [r3, #0]
 81087bc:	6879      	ldr	r1, [r7, #4]
 81087be:	4618      	mov	r0, r3
 81087c0:	f7f7 fd96 	bl	81002f0 <strcmp>
 81087c4:	4603      	mov	r3, r0
 81087c6:	2b00      	cmp	r3, #0
 81087c8:	d107      	bne.n	81087da <metal_bus_find+0x3a>
			continue;
		if (result)
 81087ca:	683b      	ldr	r3, [r7, #0]
 81087cc:	2b00      	cmp	r3, #0
 81087ce:	d002      	beq.n	81087d6 <metal_bus_find+0x36>
			*result = bus;
 81087d0:	683b      	ldr	r3, [r7, #0]
 81087d2:	68ba      	ldr	r2, [r7, #8]
 81087d4:	601a      	str	r2, [r3, #0]
		return 0;
 81087d6:	2300      	movs	r3, #0
 81087d8:	e009      	b.n	81087ee <metal_bus_find+0x4e>
			continue;
 81087da:	bf00      	nop
	metal_list_for_each(&_metal.common.bus_list, node) {
 81087dc:	68fb      	ldr	r3, [r7, #12]
 81087de:	681b      	ldr	r3, [r3, #0]
 81087e0:	60fb      	str	r3, [r7, #12]
 81087e2:	68fb      	ldr	r3, [r7, #12]
 81087e4:	4a05      	ldr	r2, [pc, #20]	@ (81087fc <metal_bus_find+0x5c>)
 81087e6:	4293      	cmp	r3, r2
 81087e8:	d1e3      	bne.n	81087b2 <metal_bus_find+0x12>
	}
	return -ENOENT;
 81087ea:	f06f 0301 	mvn.w	r3, #1
}
 81087ee:	4618      	mov	r0, r3
 81087f0:	3710      	adds	r7, #16
 81087f2:	46bd      	mov	sp, r7
 81087f4:	bd80      	pop	{r7, pc}
 81087f6:	bf00      	nop
 81087f8:	10004bbc 	.word	0x10004bbc
 81087fc:	10004bc4 	.word	0x10004bc4

08108800 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8108800:	b580      	push	{r7, lr}
 8108802:	b086      	sub	sp, #24
 8108804:	af00      	add	r7, sp, #0
 8108806:	60f8      	str	r0, [r7, #12]
 8108808:	60b9      	str	r1, [r7, #8]
 810880a:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 810880c:	68fb      	ldr	r3, [r7, #12]
 810880e:	2b00      	cmp	r3, #0
 8108810:	d00d      	beq.n	810882e <metal_device_open+0x2e>
 8108812:	68fb      	ldr	r3, [r7, #12]
 8108814:	781b      	ldrb	r3, [r3, #0]
 8108816:	2b00      	cmp	r3, #0
 8108818:	d009      	beq.n	810882e <metal_device_open+0x2e>
 810881a:	68bb      	ldr	r3, [r7, #8]
 810881c:	2b00      	cmp	r3, #0
 810881e:	d006      	beq.n	810882e <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8108820:	68bb      	ldr	r3, [r7, #8]
 8108822:	781b      	ldrb	r3, [r3, #0]
 8108824:	2b00      	cmp	r3, #0
 8108826:	d002      	beq.n	810882e <metal_device_open+0x2e>
 8108828:	687b      	ldr	r3, [r7, #4]
 810882a:	2b00      	cmp	r3, #0
 810882c:	d102      	bne.n	8108834 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 810882e:	f06f 0315 	mvn.w	r3, #21
 8108832:	e01f      	b.n	8108874 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8108834:	f107 0310 	add.w	r3, r7, #16
 8108838:	4619      	mov	r1, r3
 810883a:	68f8      	ldr	r0, [r7, #12]
 810883c:	f7ff ffb0 	bl	81087a0 <metal_bus_find>
 8108840:	6178      	str	r0, [r7, #20]
	if (error)
 8108842:	697b      	ldr	r3, [r7, #20]
 8108844:	2b00      	cmp	r3, #0
 8108846:	d001      	beq.n	810884c <metal_device_open+0x4c>
		return error;
 8108848:	697b      	ldr	r3, [r7, #20]
 810884a:	e013      	b.n	8108874 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 810884c:	693b      	ldr	r3, [r7, #16]
 810884e:	689b      	ldr	r3, [r3, #8]
 8108850:	2b00      	cmp	r3, #0
 8108852:	d102      	bne.n	810885a <metal_device_open+0x5a>
		return -ENODEV;
 8108854:	f06f 0312 	mvn.w	r3, #18
 8108858:	e00c      	b.n	8108874 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 810885a:	693b      	ldr	r3, [r7, #16]
 810885c:	689b      	ldr	r3, [r3, #8]
 810885e:	6938      	ldr	r0, [r7, #16]
 8108860:	687a      	ldr	r2, [r7, #4]
 8108862:	68b9      	ldr	r1, [r7, #8]
 8108864:	4798      	blx	r3
 8108866:	6178      	str	r0, [r7, #20]
	if (error)
 8108868:	697b      	ldr	r3, [r7, #20]
 810886a:	2b00      	cmp	r3, #0
 810886c:	d001      	beq.n	8108872 <metal_device_open+0x72>
		return error;
 810886e:	697b      	ldr	r3, [r7, #20]
 8108870:	e000      	b.n	8108874 <metal_device_open+0x74>

	return 0;
 8108872:	2300      	movs	r3, #0
}
 8108874:	4618      	mov	r0, r3
 8108876:	3718      	adds	r7, #24
 8108878:	46bd      	mov	sp, r7
 810887a:	bd80      	pop	{r7, pc}

0810887c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 810887c:	b580      	push	{r7, lr}
 810887e:	b082      	sub	sp, #8
 8108880:	af00      	add	r7, sp, #0
 8108882:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	681b      	ldr	r3, [r3, #0]
 8108888:	2b00      	cmp	r3, #0
 810888a:	d008      	beq.n	810889e <metal_register_generic_device+0x22>
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	681b      	ldr	r3, [r3, #0]
 8108890:	781b      	ldrb	r3, [r3, #0]
 8108892:	2b00      	cmp	r3, #0
 8108894:	d003      	beq.n	810889e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8108896:	687b      	ldr	r3, [r7, #4]
 8108898:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 810889a:	2b02      	cmp	r3, #2
 810889c:	d902      	bls.n	81088a4 <metal_register_generic_device+0x28>
		return -EINVAL;
 810889e:	f06f 0315 	mvn.w	r3, #21
 81088a2:	e009      	b.n	81088b8 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	4a06      	ldr	r2, [pc, #24]	@ (81088c0 <metal_register_generic_device+0x44>)
 81088a8:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 81088aa:	687b      	ldr	r3, [r7, #4]
 81088ac:	336c      	adds	r3, #108	@ 0x6c
 81088ae:	4619      	mov	r1, r3
 81088b0:	4804      	ldr	r0, [pc, #16]	@ (81088c4 <metal_register_generic_device+0x48>)
 81088b2:	f7ff fef0 	bl	8108696 <metal_list_add_tail>
			    &device->node);
	return 0;
 81088b6:	2300      	movs	r3, #0
}
 81088b8:	4618      	mov	r0, r3
 81088ba:	3708      	adds	r7, #8
 81088bc:	46bd      	mov	sp, r7
 81088be:	bd80      	pop	{r7, pc}
 81088c0:	10000014 	.word	0x10000014
 81088c4:	10004bd4 	.word	0x10004bd4

081088c8 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 81088c8:	b580      	push	{r7, lr}
 81088ca:	b086      	sub	sp, #24
 81088cc:	af00      	add	r7, sp, #0
 81088ce:	60f8      	str	r0, [r7, #12]
 81088d0:	60b9      	str	r1, [r7, #8]
 81088d2:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 81088d4:	4b12      	ldr	r3, [pc, #72]	@ (8108920 <metal_generic_dev_open+0x58>)
 81088d6:	699b      	ldr	r3, [r3, #24]
 81088d8:	617b      	str	r3, [r7, #20]
 81088da:	e017      	b.n	810890c <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 81088dc:	697b      	ldr	r3, [r7, #20]
 81088de:	3b6c      	subs	r3, #108	@ 0x6c
 81088e0:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 81088e2:	693b      	ldr	r3, [r7, #16]
 81088e4:	681b      	ldr	r3, [r3, #0]
 81088e6:	68b9      	ldr	r1, [r7, #8]
 81088e8:	4618      	mov	r0, r3
 81088ea:	f7f7 fd01 	bl	81002f0 <strcmp>
 81088ee:	4603      	mov	r3, r0
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	d107      	bne.n	8108904 <metal_generic_dev_open+0x3c>
			continue;
		*device = dev;
 81088f4:	687b      	ldr	r3, [r7, #4]
 81088f6:	693a      	ldr	r2, [r7, #16]
 81088f8:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 81088fa:	6938      	ldr	r0, [r7, #16]
 81088fc:	f000 f890 	bl	8108a20 <metal_generic_dev_sys_open>
 8108900:	4603      	mov	r3, r0
 8108902:	e009      	b.n	8108918 <metal_generic_dev_open+0x50>
			continue;
 8108904:	bf00      	nop
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8108906:	697b      	ldr	r3, [r7, #20]
 8108908:	681b      	ldr	r3, [r3, #0]
 810890a:	617b      	str	r3, [r7, #20]
 810890c:	697b      	ldr	r3, [r7, #20]
 810890e:	4a05      	ldr	r2, [pc, #20]	@ (8108924 <metal_generic_dev_open+0x5c>)
 8108910:	4293      	cmp	r3, r2
 8108912:	d1e3      	bne.n	81088dc <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8108914:	f06f 0312 	mvn.w	r3, #18
}
 8108918:	4618      	mov	r0, r3
 810891a:	3718      	adds	r7, #24
 810891c:	46bd      	mov	sp, r7
 810891e:	bd80      	pop	{r7, pc}
 8108920:	10004bbc 	.word	0x10004bbc
 8108924:	10004bd4 	.word	0x10004bd4

08108928 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8108928:	b580      	push	{r7, lr}
 810892a:	b086      	sub	sp, #24
 810892c:	af00      	add	r7, sp, #0
 810892e:	60f8      	str	r0, [r7, #12]
 8108930:	60b9      	str	r1, [r7, #8]
 8108932:	607a      	str	r2, [r7, #4]
 8108934:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8108936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108938:	683b      	ldr	r3, [r7, #0]
 810893a:	429a      	cmp	r2, r3
 810893c:	d009      	beq.n	8108952 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 810893e:	6a3a      	ldr	r2, [r7, #32]
 8108940:	4613      	mov	r3, r2
 8108942:	005b      	lsls	r3, r3, #1
 8108944:	4413      	add	r3, r2
 8108946:	009b      	lsls	r3, r3, #2
 8108948:	461a      	mov	r2, r3
 810894a:	6839      	ldr	r1, [r7, #0]
 810894c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810894e:	f002 fba6 	bl	810b09e <memcpy>
	for (i = 0; i < nents_in; i++) {
 8108952:	2300      	movs	r3, #0
 8108954:	617b      	str	r3, [r7, #20]
 8108956:	e02f      	b.n	81089b8 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8108958:	687b      	ldr	r3, [r7, #4]
 810895a:	2b02      	cmp	r3, #2
 810895c:	d114      	bne.n	8108988 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 810895e:	697a      	ldr	r2, [r7, #20]
 8108960:	4613      	mov	r3, r2
 8108962:	005b      	lsls	r3, r3, #1
 8108964:	4413      	add	r3, r2
 8108966:	009b      	lsls	r3, r3, #2
 8108968:	461a      	mov	r2, r3
 810896a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810896c:	4413      	add	r3, r2
 810896e:	6818      	ldr	r0, [r3, #0]
 8108970:	697a      	ldr	r2, [r7, #20]
 8108972:	4613      	mov	r3, r2
 8108974:	005b      	lsls	r3, r3, #1
 8108976:	4413      	add	r3, r2
 8108978:	009b      	lsls	r3, r3, #2
 810897a:	461a      	mov	r2, r3
 810897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810897e:	4413      	add	r3, r2
 8108980:	689b      	ldr	r3, [r3, #8]
 8108982:	4619      	mov	r1, r3
 8108984:	f7ff feae 	bl	81086e4 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8108988:	697a      	ldr	r2, [r7, #20]
 810898a:	4613      	mov	r3, r2
 810898c:	005b      	lsls	r3, r3, #1
 810898e:	4413      	add	r3, r2
 8108990:	009b      	lsls	r3, r3, #2
 8108992:	461a      	mov	r2, r3
 8108994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108996:	4413      	add	r3, r2
 8108998:	6818      	ldr	r0, [r3, #0]
 810899a:	697a      	ldr	r2, [r7, #20]
 810899c:	4613      	mov	r3, r2
 810899e:	005b      	lsls	r3, r3, #1
 81089a0:	4413      	add	r3, r2
 81089a2:	009b      	lsls	r3, r3, #2
 81089a4:	461a      	mov	r2, r3
 81089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089a8:	4413      	add	r3, r2
 81089aa:	689b      	ldr	r3, [r3, #8]
 81089ac:	4619      	mov	r1, r3
 81089ae:	f7ff fea6 	bl	81086fe <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 81089b2:	697b      	ldr	r3, [r7, #20]
 81089b4:	3301      	adds	r3, #1
 81089b6:	617b      	str	r3, [r7, #20]
 81089b8:	697a      	ldr	r2, [r7, #20]
 81089ba:	6a3b      	ldr	r3, [r7, #32]
 81089bc:	429a      	cmp	r2, r3
 81089be:	dbcb      	blt.n	8108958 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 81089c0:	6a3b      	ldr	r3, [r7, #32]
}
 81089c2:	4618      	mov	r0, r3
 81089c4:	3718      	adds	r7, #24
 81089c6:	46bd      	mov	sp, r7
 81089c8:	bd80      	pop	{r7, pc}

081089ca <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 81089ca:	b580      	push	{r7, lr}
 81089cc:	b086      	sub	sp, #24
 81089ce:	af00      	add	r7, sp, #0
 81089d0:	60f8      	str	r0, [r7, #12]
 81089d2:	60b9      	str	r1, [r7, #8]
 81089d4:	607a      	str	r2, [r7, #4]
 81089d6:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 81089d8:	2300      	movs	r3, #0
 81089da:	617b      	str	r3, [r7, #20]
 81089dc:	e017      	b.n	8108a0e <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 81089de:	697a      	ldr	r2, [r7, #20]
 81089e0:	4613      	mov	r3, r2
 81089e2:	005b      	lsls	r3, r3, #1
 81089e4:	4413      	add	r3, r2
 81089e6:	009b      	lsls	r3, r3, #2
 81089e8:	461a      	mov	r2, r3
 81089ea:	683b      	ldr	r3, [r7, #0]
 81089ec:	4413      	add	r3, r2
 81089ee:	6818      	ldr	r0, [r3, #0]
 81089f0:	697a      	ldr	r2, [r7, #20]
 81089f2:	4613      	mov	r3, r2
 81089f4:	005b      	lsls	r3, r3, #1
 81089f6:	4413      	add	r3, r2
 81089f8:	009b      	lsls	r3, r3, #2
 81089fa:	461a      	mov	r2, r3
 81089fc:	683b      	ldr	r3, [r7, #0]
 81089fe:	4413      	add	r3, r2
 8108a00:	689b      	ldr	r3, [r3, #8]
 8108a02:	4619      	mov	r1, r3
 8108a04:	f7ff fe7b 	bl	81086fe <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8108a08:	697b      	ldr	r3, [r7, #20]
 8108a0a:	3301      	adds	r3, #1
 8108a0c:	617b      	str	r3, [r7, #20]
 8108a0e:	697a      	ldr	r2, [r7, #20]
 8108a10:	6a3b      	ldr	r3, [r7, #32]
 8108a12:	429a      	cmp	r2, r3
 8108a14:	dbe3      	blt.n	81089de <metal_generic_dev_dma_unmap+0x14>
	}
}
 8108a16:	bf00      	nop
 8108a18:	bf00      	nop
 8108a1a:	3718      	adds	r7, #24
 8108a1c:	46bd      	mov	sp, r7
 8108a1e:	bd80      	pop	{r7, pc}

08108a20 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8108a20:	b580      	push	{r7, lr}
 8108a22:	b084      	sub	sp, #16
 8108a24:	af00      	add	r7, sp, #0
 8108a26:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8108a28:	2300      	movs	r3, #0
 8108a2a:	60fb      	str	r3, [r7, #12]
 8108a2c:	e013      	b.n	8108a56 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8108a2e:	68fa      	ldr	r2, [r7, #12]
 8108a30:	4613      	mov	r3, r2
 8108a32:	005b      	lsls	r3, r3, #1
 8108a34:	4413      	add	r3, r2
 8108a36:	011b      	lsls	r3, r3, #4
 8108a38:	3308      	adds	r3, #8
 8108a3a:	687a      	ldr	r2, [r7, #4]
 8108a3c:	4413      	add	r3, r2
 8108a3e:	3304      	adds	r3, #4
 8108a40:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8108a42:	68bb      	ldr	r3, [r7, #8]
 8108a44:	689b      	ldr	r3, [r3, #8]
 8108a46:	2b00      	cmp	r3, #0
 8108a48:	d00b      	beq.n	8108a62 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8108a4a:	68b8      	ldr	r0, [r7, #8]
 8108a4c:	f000 f81e 	bl	8108a8c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8108a50:	68fb      	ldr	r3, [r7, #12]
 8108a52:	3301      	adds	r3, #1
 8108a54:	60fb      	str	r3, [r7, #12]
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	689b      	ldr	r3, [r3, #8]
 8108a5a:	68fa      	ldr	r2, [r7, #12]
 8108a5c:	429a      	cmp	r2, r3
 8108a5e:	d3e6      	bcc.n	8108a2e <metal_generic_dev_sys_open+0xe>
 8108a60:	e000      	b.n	8108a64 <metal_generic_dev_sys_open+0x44>
			break;
 8108a62:	bf00      	nop
	}

	return 0;
 8108a64:	2300      	movs	r3, #0
}
 8108a66:	4618      	mov	r0, r3
 8108a68:	3710      	adds	r7, #16
 8108a6a:	46bd      	mov	sp, r7
 8108a6c:	bd80      	pop	{r7, pc}
	...

08108a70 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8108a70:	b580      	push	{r7, lr}
 8108a72:	b082      	sub	sp, #8
 8108a74:	af00      	add	r7, sp, #0
 8108a76:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8108a78:	4803      	ldr	r0, [pc, #12]	@ (8108a88 <metal_sys_init+0x18>)
 8108a7a:	f7ff fe4d 	bl	8108718 <metal_bus_register>
	return 0;
 8108a7e:	2300      	movs	r3, #0
}
 8108a80:	4618      	mov	r0, r3
 8108a82:	3708      	adds	r7, #8
 8108a84:	46bd      	mov	sp, r7
 8108a86:	bd80      	pop	{r7, pc}
 8108a88:	10000014 	.word	0x10000014

08108a8c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8108a8c:	b580      	push	{r7, lr}
 8108a8e:	b086      	sub	sp, #24
 8108a90:	af00      	add	r7, sp, #0
 8108a92:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8108a94:	687b      	ldr	r3, [r7, #4]
 8108a96:	681b      	ldr	r3, [r3, #0]
 8108a98:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8108a9a:	687b      	ldr	r3, [r7, #4]
 8108a9c:	689b      	ldr	r3, [r3, #8]
 8108a9e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8108aa0:	693b      	ldr	r3, [r7, #16]
 8108aa2:	2b00      	cmp	r3, #0
 8108aa4:	d02c      	beq.n	8108b00 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	68db      	ldr	r3, [r3, #12]
 8108aaa:	693a      	ldr	r2, [r7, #16]
 8108aac:	fa22 f303 	lsr.w	r3, r2, r3
 8108ab0:	2b00      	cmp	r3, #0
 8108ab2:	d005      	beq.n	8108ac0 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	68db      	ldr	r3, [r3, #12]
 8108ab8:	2201      	movs	r2, #1
 8108aba:	fa02 f303 	lsl.w	r3, r2, r3
 8108abe:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8108ac0:	2300      	movs	r3, #0
 8108ac2:	617b      	str	r3, [r7, #20]
 8108ac4:	e013      	b.n	8108aee <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8108ac6:	687b      	ldr	r3, [r7, #4]
 8108ac8:	685a      	ldr	r2, [r3, #4]
 8108aca:	697b      	ldr	r3, [r7, #20]
 8108acc:	009b      	lsls	r3, r3, #2
 8108ace:	4413      	add	r3, r2
 8108ad0:	6819      	ldr	r1, [r3, #0]
 8108ad2:	687b      	ldr	r3, [r7, #4]
 8108ad4:	695b      	ldr	r3, [r3, #20]
 8108ad6:	693a      	ldr	r2, [r7, #16]
 8108ad8:	68f8      	ldr	r0, [r7, #12]
 8108ada:	f001 fbc7 	bl	810a26c <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8108ade:	693b      	ldr	r3, [r7, #16]
 8108ae0:	009b      	lsls	r3, r3, #2
 8108ae2:	68fa      	ldr	r2, [r7, #12]
 8108ae4:	4413      	add	r3, r2
 8108ae6:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8108ae8:	697b      	ldr	r3, [r7, #20]
 8108aea:	3301      	adds	r3, #1
 8108aec:	617b      	str	r3, [r7, #20]
 8108aee:	687b      	ldr	r3, [r7, #4]
 8108af0:	689a      	ldr	r2, [r3, #8]
 8108af2:	687b      	ldr	r3, [r7, #4]
 8108af4:	68db      	ldr	r3, [r3, #12]
 8108af6:	fa22 f303 	lsr.w	r3, r2, r3
 8108afa:	697a      	ldr	r2, [r7, #20]
 8108afc:	429a      	cmp	r2, r3
 8108afe:	d9e2      	bls.n	8108ac6 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8108b00:	bf00      	nop
 8108b02:	3718      	adds	r7, #24
 8108b04:	46bd      	mov	sp, r7
 8108b06:	bd80      	pop	{r7, pc}

08108b08 <metal_list_init>:
{
 8108b08:	b480      	push	{r7}
 8108b0a:	b083      	sub	sp, #12
 8108b0c:	af00      	add	r7, sp, #0
 8108b0e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	687a      	ldr	r2, [r7, #4]
 8108b14:	605a      	str	r2, [r3, #4]
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	685a      	ldr	r2, [r3, #4]
 8108b1a:	687b      	ldr	r3, [r7, #4]
 8108b1c:	601a      	str	r2, [r3, #0]
}
 8108b1e:	bf00      	nop
 8108b20:	370c      	adds	r7, #12
 8108b22:	46bd      	mov	sp, r7
 8108b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b28:	4770      	bx	lr
	...

08108b2c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8108b2c:	b580      	push	{r7, lr}
 8108b2e:	b084      	sub	sp, #16
 8108b30:	af00      	add	r7, sp, #0
 8108b32:	6078      	str	r0, [r7, #4]
	int error = 0;
 8108b34:	2300      	movs	r3, #0
 8108b36:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8108b38:	2220      	movs	r2, #32
 8108b3a:	2100      	movs	r1, #0
 8108b3c:	4810      	ldr	r0, [pc, #64]	@ (8108b80 <metal_init+0x54>)
 8108b3e:	f002 fa68 	bl	810b012 <memset>

	_metal.common.log_handler   = params->log_handler;
 8108b42:	687b      	ldr	r3, [r7, #4]
 8108b44:	681b      	ldr	r3, [r3, #0]
 8108b46:	4a0e      	ldr	r2, [pc, #56]	@ (8108b80 <metal_init+0x54>)
 8108b48:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	791a      	ldrb	r2, [r3, #4]
 8108b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8108b80 <metal_init+0x54>)
 8108b50:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8108b52:	480c      	ldr	r0, [pc, #48]	@ (8108b84 <metal_init+0x58>)
 8108b54:	f7ff ffd8 	bl	8108b08 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8108b58:	480b      	ldr	r0, [pc, #44]	@ (8108b88 <metal_init+0x5c>)
 8108b5a:	f7ff ffd5 	bl	8108b08 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8108b5e:	480b      	ldr	r0, [pc, #44]	@ (8108b8c <metal_init+0x60>)
 8108b60:	f7ff ffd2 	bl	8108b08 <metal_list_init>

	error = metal_sys_init(params);
 8108b64:	6878      	ldr	r0, [r7, #4]
 8108b66:	f7ff ff83 	bl	8108a70 <metal_sys_init>
 8108b6a:	60f8      	str	r0, [r7, #12]
	if (error)
 8108b6c:	68fb      	ldr	r3, [r7, #12]
 8108b6e:	2b00      	cmp	r3, #0
 8108b70:	d001      	beq.n	8108b76 <metal_init+0x4a>
		return error;
 8108b72:	68fb      	ldr	r3, [r7, #12]
 8108b74:	e000      	b.n	8108b78 <metal_init+0x4c>

	return error;
 8108b76:	68fb      	ldr	r3, [r7, #12]
}
 8108b78:	4618      	mov	r0, r3
 8108b7a:	3710      	adds	r7, #16
 8108b7c:	46bd      	mov	sp, r7
 8108b7e:	bd80      	pop	{r7, pc}
 8108b80:	10004bbc 	.word	0x10004bbc
 8108b84:	10004bc4 	.word	0x10004bc4
 8108b88:	10004bcc 	.word	0x10004bcc
 8108b8c:	10004bd4 	.word	0x10004bd4

08108b90 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8108b90:	b480      	push	{r7}
 8108b92:	b083      	sub	sp, #12
 8108b94:	af00      	add	r7, sp, #0
 8108b96:	6078      	str	r0, [r7, #4]
 8108b98:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108b9a:	687b      	ldr	r3, [r7, #4]
 8108b9c:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8108b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108ba2:	d009      	beq.n	8108bb8 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	689b      	ldr	r3, [r3, #8]
 8108ba8:	683a      	ldr	r2, [r7, #0]
 8108baa:	429a      	cmp	r2, r3
 8108bac:	d804      	bhi.n	8108bb8 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8108bb2:	683b      	ldr	r3, [r7, #0]
 8108bb4:	4413      	add	r3, r2
 8108bb6:	e000      	b.n	8108bba <metal_io_virt+0x2a>
 8108bb8:	2300      	movs	r3, #0
}
 8108bba:	4618      	mov	r0, r3
 8108bbc:	370c      	adds	r7, #12
 8108bbe:	46bd      	mov	sp, r7
 8108bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bc4:	4770      	bx	lr

08108bc6 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8108bc6:	b5b0      	push	{r4, r5, r7, lr}
 8108bc8:	b08a      	sub	sp, #40	@ 0x28
 8108bca:	af00      	add	r7, sp, #0
 8108bcc:	60f8      	str	r0, [r7, #12]
 8108bce:	60b9      	str	r1, [r7, #8]
 8108bd0:	607a      	str	r2, [r7, #4]
 8108bd2:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8108bd4:	f107 0310 	add.w	r3, r7, #16
 8108bd8:	2200      	movs	r2, #0
 8108bda:	601a      	str	r2, [r3, #0]
 8108bdc:	605a      	str	r2, [r3, #4]
 8108bde:	609a      	str	r2, [r3, #8]
 8108be0:	60da      	str	r2, [r3, #12]
 8108be2:	611a      	str	r2, [r3, #16]
 8108be4:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8108be6:	68fb      	ldr	r3, [r7, #12]
 8108be8:	68ba      	ldr	r2, [r7, #8]
 8108bea:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8108bec:	68fb      	ldr	r3, [r7, #12]
 8108bee:	687a      	ldr	r2, [r7, #4]
 8108bf0:	605a      	str	r2, [r3, #4]
	io->size = size;
 8108bf2:	68fb      	ldr	r3, [r7, #12]
 8108bf4:	683a      	ldr	r2, [r7, #0]
 8108bf6:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8108bf8:	68fb      	ldr	r3, [r7, #12]
 8108bfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8108bfc:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8108bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c00:	2b1f      	cmp	r3, #31
 8108c02:	d904      	bls.n	8108c0e <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8108c04:	68fb      	ldr	r3, [r7, #12]
 8108c06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8108c0a:	611a      	str	r2, [r3, #16]
 8108c0c:	e006      	b.n	8108c1c <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8108c0e:	2201      	movs	r2, #1
 8108c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108c12:	fa02 f303 	lsl.w	r3, r2, r3
 8108c16:	1e5a      	subs	r2, r3, #1
 8108c18:	68fb      	ldr	r3, [r7, #12]
 8108c1a:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8108c1c:	68fb      	ldr	r3, [r7, #12]
 8108c1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8108c20:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8108c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8108c24:	2b00      	cmp	r3, #0
 8108c26:	d00b      	beq.n	8108c40 <metal_io_init+0x7a>
 8108c28:	68fb      	ldr	r3, [r7, #12]
 8108c2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8108c2c:	f103 0418 	add.w	r4, r3, #24
 8108c30:	4615      	mov	r5, r2
 8108c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108c36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8108c3a:	e884 0003 	stmia.w	r4, {r0, r1}
 8108c3e:	e00a      	b.n	8108c56 <metal_io_init+0x90>
 8108c40:	68fb      	ldr	r3, [r7, #12]
 8108c42:	f103 0418 	add.w	r4, r3, #24
 8108c46:	f107 0510 	add.w	r5, r7, #16
 8108c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108c4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8108c52:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8108c56:	68f8      	ldr	r0, [r7, #12]
 8108c58:	f7ff ff18 	bl	8108a8c <metal_sys_io_mem_map>
}
 8108c5c:	bf00      	nop
 8108c5e:	3728      	adds	r7, #40	@ 0x28
 8108c60:	46bd      	mov	sp, r7
 8108c62:	bdb0      	pop	{r4, r5, r7, pc}

08108c64 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8108c64:	b590      	push	{r4, r7, lr}
 8108c66:	b08b      	sub	sp, #44	@ 0x2c
 8108c68:	af02      	add	r7, sp, #8
 8108c6a:	60f8      	str	r0, [r7, #12]
 8108c6c:	60b9      	str	r1, [r7, #8]
 8108c6e:	607a      	str	r2, [r7, #4]
 8108c70:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8108c72:	68b9      	ldr	r1, [r7, #8]
 8108c74:	68f8      	ldr	r0, [r7, #12]
 8108c76:	f7ff ff8b 	bl	8108b90 <metal_io_virt>
 8108c7a:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8108c7c:	687b      	ldr	r3, [r7, #4]
 8108c7e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8108c80:	68fb      	ldr	r3, [r7, #12]
 8108c82:	689b      	ldr	r3, [r3, #8]
 8108c84:	68ba      	ldr	r2, [r7, #8]
 8108c86:	429a      	cmp	r2, r3
 8108c88:	d902      	bls.n	8108c90 <metal_io_block_read+0x2c>
		return -ERANGE;
 8108c8a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8108c8e:	e05c      	b.n	8108d4a <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8108c90:	683a      	ldr	r2, [r7, #0]
 8108c92:	68bb      	ldr	r3, [r7, #8]
 8108c94:	441a      	add	r2, r3
 8108c96:	68fb      	ldr	r3, [r7, #12]
 8108c98:	689b      	ldr	r3, [r3, #8]
 8108c9a:	429a      	cmp	r2, r3
 8108c9c:	d904      	bls.n	8108ca8 <metal_io_block_read+0x44>
		len = io->size - offset;
 8108c9e:	68fb      	ldr	r3, [r7, #12]
 8108ca0:	689a      	ldr	r2, [r3, #8]
 8108ca2:	68bb      	ldr	r3, [r7, #8]
 8108ca4:	1ad3      	subs	r3, r2, r3
 8108ca6:	603b      	str	r3, [r7, #0]
	retlen = len;
 8108ca8:	683b      	ldr	r3, [r7, #0]
 8108caa:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8108cac:	68fb      	ldr	r3, [r7, #12]
 8108cae:	6a1b      	ldr	r3, [r3, #32]
 8108cb0:	2b00      	cmp	r3, #0
 8108cb2:	d00a      	beq.n	8108cca <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8108cb4:	68fb      	ldr	r3, [r7, #12]
 8108cb6:	6a1c      	ldr	r4, [r3, #32]
 8108cb8:	683b      	ldr	r3, [r7, #0]
 8108cba:	9300      	str	r3, [sp, #0]
 8108cbc:	2305      	movs	r3, #5
 8108cbe:	687a      	ldr	r2, [r7, #4]
 8108cc0:	68b9      	ldr	r1, [r7, #8]
 8108cc2:	68f8      	ldr	r0, [r7, #12]
 8108cc4:	47a0      	blx	r4
 8108cc6:	6178      	str	r0, [r7, #20]
 8108cc8:	e03e      	b.n	8108d48 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8108cca:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8108cce:	e00c      	b.n	8108cea <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8108cd0:	69fb      	ldr	r3, [r7, #28]
 8108cd2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8108cd4:	69bb      	ldr	r3, [r7, #24]
 8108cd6:	701a      	strb	r2, [r3, #0]
			dest++;
 8108cd8:	69bb      	ldr	r3, [r7, #24]
 8108cda:	3301      	adds	r3, #1
 8108cdc:	61bb      	str	r3, [r7, #24]
			ptr++;
 8108cde:	69fb      	ldr	r3, [r7, #28]
 8108ce0:	3301      	adds	r3, #1
 8108ce2:	61fb      	str	r3, [r7, #28]
			len--;
 8108ce4:	683b      	ldr	r3, [r7, #0]
 8108ce6:	3b01      	subs	r3, #1
 8108ce8:	603b      	str	r3, [r7, #0]
		while ( len && (
 8108cea:	683b      	ldr	r3, [r7, #0]
 8108cec:	2b00      	cmp	r3, #0
 8108cee:	d017      	beq.n	8108d20 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8108cf0:	69bb      	ldr	r3, [r7, #24]
 8108cf2:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8108cf6:	2b00      	cmp	r3, #0
 8108cf8:	d1ea      	bne.n	8108cd0 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8108cfa:	69fb      	ldr	r3, [r7, #28]
 8108cfc:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8108d00:	2b00      	cmp	r3, #0
 8108d02:	d1e5      	bne.n	8108cd0 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8108d04:	e00c      	b.n	8108d20 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8108d06:	69fb      	ldr	r3, [r7, #28]
 8108d08:	681a      	ldr	r2, [r3, #0]
 8108d0a:	69bb      	ldr	r3, [r7, #24]
 8108d0c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8108d0e:	69bb      	ldr	r3, [r7, #24]
 8108d10:	3304      	adds	r3, #4
 8108d12:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8108d14:	69fb      	ldr	r3, [r7, #28]
 8108d16:	3304      	adds	r3, #4
 8108d18:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8108d1a:	683b      	ldr	r3, [r7, #0]
 8108d1c:	3b04      	subs	r3, #4
 8108d1e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8108d20:	683b      	ldr	r3, [r7, #0]
 8108d22:	2b03      	cmp	r3, #3
 8108d24:	dcef      	bgt.n	8108d06 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8108d26:	e00c      	b.n	8108d42 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8108d28:	69fb      	ldr	r3, [r7, #28]
 8108d2a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8108d2c:	69bb      	ldr	r3, [r7, #24]
 8108d2e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8108d30:	69bb      	ldr	r3, [r7, #24]
 8108d32:	3301      	adds	r3, #1
 8108d34:	61bb      	str	r3, [r7, #24]
 8108d36:	69fb      	ldr	r3, [r7, #28]
 8108d38:	3301      	adds	r3, #1
 8108d3a:	61fb      	str	r3, [r7, #28]
 8108d3c:	683b      	ldr	r3, [r7, #0]
 8108d3e:	3b01      	subs	r3, #1
 8108d40:	603b      	str	r3, [r7, #0]
 8108d42:	683b      	ldr	r3, [r7, #0]
 8108d44:	2b00      	cmp	r3, #0
 8108d46:	d1ef      	bne.n	8108d28 <metal_io_block_read+0xc4>
	}
	return retlen;
 8108d48:	697b      	ldr	r3, [r7, #20]
}
 8108d4a:	4618      	mov	r0, r3
 8108d4c:	3724      	adds	r7, #36	@ 0x24
 8108d4e:	46bd      	mov	sp, r7
 8108d50:	bd90      	pop	{r4, r7, pc}

08108d52 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8108d52:	b590      	push	{r4, r7, lr}
 8108d54:	b08b      	sub	sp, #44	@ 0x2c
 8108d56:	af02      	add	r7, sp, #8
 8108d58:	60f8      	str	r0, [r7, #12]
 8108d5a:	60b9      	str	r1, [r7, #8]
 8108d5c:	607a      	str	r2, [r7, #4]
 8108d5e:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8108d60:	68b9      	ldr	r1, [r7, #8]
 8108d62:	68f8      	ldr	r0, [r7, #12]
 8108d64:	f7ff ff14 	bl	8108b90 <metal_io_virt>
 8108d68:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8108d6a:	687b      	ldr	r3, [r7, #4]
 8108d6c:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8108d6e:	68fb      	ldr	r3, [r7, #12]
 8108d70:	689b      	ldr	r3, [r3, #8]
 8108d72:	68ba      	ldr	r2, [r7, #8]
 8108d74:	429a      	cmp	r2, r3
 8108d76:	d902      	bls.n	8108d7e <metal_io_block_write+0x2c>
		return -ERANGE;
 8108d78:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8108d7c:	e05b      	b.n	8108e36 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8108d7e:	683a      	ldr	r2, [r7, #0]
 8108d80:	68bb      	ldr	r3, [r7, #8]
 8108d82:	441a      	add	r2, r3
 8108d84:	68fb      	ldr	r3, [r7, #12]
 8108d86:	689b      	ldr	r3, [r3, #8]
 8108d88:	429a      	cmp	r2, r3
 8108d8a:	d904      	bls.n	8108d96 <metal_io_block_write+0x44>
		len = io->size - offset;
 8108d8c:	68fb      	ldr	r3, [r7, #12]
 8108d8e:	689a      	ldr	r2, [r3, #8]
 8108d90:	68bb      	ldr	r3, [r7, #8]
 8108d92:	1ad3      	subs	r3, r2, r3
 8108d94:	603b      	str	r3, [r7, #0]
	retlen = len;
 8108d96:	683b      	ldr	r3, [r7, #0]
 8108d98:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8108d9a:	68fb      	ldr	r3, [r7, #12]
 8108d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108d9e:	2b00      	cmp	r3, #0
 8108da0:	d017      	beq.n	8108dd2 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8108da2:	68fb      	ldr	r3, [r7, #12]
 8108da4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8108da6:	683b      	ldr	r3, [r7, #0]
 8108da8:	9300      	str	r3, [sp, #0]
 8108daa:	2305      	movs	r3, #5
 8108dac:	687a      	ldr	r2, [r7, #4]
 8108dae:	68b9      	ldr	r1, [r7, #8]
 8108db0:	68f8      	ldr	r0, [r7, #12]
 8108db2:	47a0      	blx	r4
 8108db4:	6178      	str	r0, [r7, #20]
 8108db6:	e03d      	b.n	8108e34 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8108db8:	69bb      	ldr	r3, [r7, #24]
 8108dba:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8108dbc:	69fb      	ldr	r3, [r7, #28]
 8108dbe:	701a      	strb	r2, [r3, #0]
			ptr++;
 8108dc0:	69fb      	ldr	r3, [r7, #28]
 8108dc2:	3301      	adds	r3, #1
 8108dc4:	61fb      	str	r3, [r7, #28]
			source++;
 8108dc6:	69bb      	ldr	r3, [r7, #24]
 8108dc8:	3301      	adds	r3, #1
 8108dca:	61bb      	str	r3, [r7, #24]
			len--;
 8108dcc:	683b      	ldr	r3, [r7, #0]
 8108dce:	3b01      	subs	r3, #1
 8108dd0:	603b      	str	r3, [r7, #0]
		while ( len && (
 8108dd2:	683b      	ldr	r3, [r7, #0]
 8108dd4:	2b00      	cmp	r3, #0
 8108dd6:	d017      	beq.n	8108e08 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8108dd8:	69fb      	ldr	r3, [r7, #28]
 8108dda:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8108dde:	2b00      	cmp	r3, #0
 8108de0:	d1ea      	bne.n	8108db8 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8108de2:	69bb      	ldr	r3, [r7, #24]
 8108de4:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8108de8:	2b00      	cmp	r3, #0
 8108dea:	d1e5      	bne.n	8108db8 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8108dec:	e00c      	b.n	8108e08 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8108dee:	69bb      	ldr	r3, [r7, #24]
 8108df0:	681a      	ldr	r2, [r3, #0]
 8108df2:	69fb      	ldr	r3, [r7, #28]
 8108df4:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8108df6:	69fb      	ldr	r3, [r7, #28]
 8108df8:	3304      	adds	r3, #4
 8108dfa:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8108dfc:	69bb      	ldr	r3, [r7, #24]
 8108dfe:	3304      	adds	r3, #4
 8108e00:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8108e02:	683b      	ldr	r3, [r7, #0]
 8108e04:	3b04      	subs	r3, #4
 8108e06:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8108e08:	683b      	ldr	r3, [r7, #0]
 8108e0a:	2b03      	cmp	r3, #3
 8108e0c:	dcef      	bgt.n	8108dee <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8108e0e:	e00c      	b.n	8108e2a <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8108e10:	69bb      	ldr	r3, [r7, #24]
 8108e12:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8108e14:	69fb      	ldr	r3, [r7, #28]
 8108e16:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8108e18:	69fb      	ldr	r3, [r7, #28]
 8108e1a:	3301      	adds	r3, #1
 8108e1c:	61fb      	str	r3, [r7, #28]
 8108e1e:	69bb      	ldr	r3, [r7, #24]
 8108e20:	3301      	adds	r3, #1
 8108e22:	61bb      	str	r3, [r7, #24]
 8108e24:	683b      	ldr	r3, [r7, #0]
 8108e26:	3b01      	subs	r3, #1
 8108e28:	603b      	str	r3, [r7, #0]
 8108e2a:	683b      	ldr	r3, [r7, #0]
 8108e2c:	2b00      	cmp	r3, #0
 8108e2e:	d1ef      	bne.n	8108e10 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8108e30:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8108e34:	697b      	ldr	r3, [r7, #20]
}
 8108e36:	4618      	mov	r0, r3
 8108e38:	3724      	adds	r7, #36	@ 0x24
 8108e3a:	46bd      	mov	sp, r7
 8108e3c:	bd90      	pop	{r4, r7, pc}

08108e3e <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8108e3e:	b40e      	push	{r1, r2, r3}
 8108e40:	b480      	push	{r7}
 8108e42:	b082      	sub	sp, #8
 8108e44:	af00      	add	r7, sp, #0
 8108e46:	4603      	mov	r3, r0
 8108e48:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8108e4a:	bf00      	nop
 8108e4c:	3708      	adds	r7, #8
 8108e4e:	46bd      	mov	sp, r7
 8108e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e54:	b003      	add	sp, #12
 8108e56:	4770      	bx	lr

08108e58 <metal_io_virt>:
{
 8108e58:	b480      	push	{r7}
 8108e5a:	b083      	sub	sp, #12
 8108e5c:	af00      	add	r7, sp, #0
 8108e5e:	6078      	str	r0, [r7, #4]
 8108e60:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8108e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8108e6a:	d009      	beq.n	8108e80 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	689b      	ldr	r3, [r3, #8]
 8108e70:	683a      	ldr	r2, [r7, #0]
 8108e72:	429a      	cmp	r2, r3
 8108e74:	d804      	bhi.n	8108e80 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8108e7a:	683b      	ldr	r3, [r7, #0]
 8108e7c:	4413      	add	r3, r2
 8108e7e:	e000      	b.n	8108e82 <metal_io_virt+0x2a>
 8108e80:	2300      	movs	r3, #0
}
 8108e82:	4618      	mov	r0, r3
 8108e84:	370c      	adds	r7, #12
 8108e86:	46bd      	mov	sp, r7
 8108e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e8c:	4770      	bx	lr

08108e8e <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8108e8e:	b480      	push	{r7}
 8108e90:	b085      	sub	sp, #20
 8108e92:	af00      	add	r7, sp, #0
 8108e94:	6078      	str	r0, [r7, #4]
 8108e96:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8108e98:	687b      	ldr	r3, [r7, #4]
 8108e9a:	681b      	ldr	r3, [r3, #0]
 8108e9c:	683a      	ldr	r2, [r7, #0]
 8108e9e:	1ad3      	subs	r3, r2, r3
 8108ea0:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8108ea2:	687b      	ldr	r3, [r7, #4]
 8108ea4:	689b      	ldr	r3, [r3, #8]
 8108ea6:	68fa      	ldr	r2, [r7, #12]
 8108ea8:	429a      	cmp	r2, r3
 8108eaa:	d201      	bcs.n	8108eb0 <metal_io_virt_to_offset+0x22>
 8108eac:	68fb      	ldr	r3, [r7, #12]
 8108eae:	e001      	b.n	8108eb4 <metal_io_virt_to_offset+0x26>
 8108eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8108eb4:	4618      	mov	r0, r3
 8108eb6:	3714      	adds	r7, #20
 8108eb8:	46bd      	mov	sp, r7
 8108eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ebe:	4770      	bx	lr

08108ec0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8108ec0:	b5b0      	push	{r4, r5, r7, lr}
 8108ec2:	b08c      	sub	sp, #48	@ 0x30
 8108ec4:	af00      	add	r7, sp, #0
 8108ec6:	60f8      	str	r0, [r7, #12]
 8108ec8:	60b9      	str	r1, [r7, #8]
 8108eca:	603b      	str	r3, [r7, #0]
 8108ecc:	4613      	mov	r3, r2
 8108ece:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8108ed0:	68b9      	ldr	r1, [r7, #8]
 8108ed2:	68f8      	ldr	r0, [r7, #12]
 8108ed4:	f7ff ffc0 	bl	8108e58 <metal_io_virt>
 8108ed8:	62f8      	str	r0, [r7, #44]	@ 0x2c

	if (io->ops.read)
 8108eda:	68fb      	ldr	r3, [r7, #12]
 8108edc:	699b      	ldr	r3, [r3, #24]
 8108ede:	2b00      	cmp	r3, #0
 8108ee0:	d009      	beq.n	8108ef6 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8108ee2:	68fb      	ldr	r3, [r7, #12]
 8108ee4:	699c      	ldr	r4, [r3, #24]
 8108ee6:	79fa      	ldrb	r2, [r7, #7]
 8108ee8:	683b      	ldr	r3, [r7, #0]
 8108eea:	68b9      	ldr	r1, [r7, #8]
 8108eec:	68f8      	ldr	r0, [r7, #12]
 8108eee:	47a0      	blx	r4
 8108ef0:	4604      	mov	r4, r0
 8108ef2:	460d      	mov	r5, r1
 8108ef4:	e059      	b.n	8108faa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8108ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108ef8:	2b00      	cmp	r3, #0
 8108efa:	d012      	beq.n	8108f22 <metal_io_read+0x62>
 8108efc:	683b      	ldr	r3, [r7, #0]
 8108efe:	2b01      	cmp	r3, #1
 8108f00:	d10f      	bne.n	8108f22 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8108f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8108f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8108f08:	f3bf 8f5b 	dmb	ish
 8108f0c:	781b      	ldrb	r3, [r3, #0]
 8108f0e:	f3bf 8f5b 	dmb	ish
 8108f12:	b2db      	uxtb	r3, r3
 8108f14:	76fb      	strb	r3, [r7, #27]
 8108f16:	7efb      	ldrb	r3, [r7, #27]
 8108f18:	b2db      	uxtb	r3, r3
 8108f1a:	2200      	movs	r2, #0
 8108f1c:	461c      	mov	r4, r3
 8108f1e:	4615      	mov	r5, r2
 8108f20:	e043      	b.n	8108faa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8108f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f24:	2b00      	cmp	r3, #0
 8108f26:	d012      	beq.n	8108f4e <metal_io_read+0x8e>
 8108f28:	683b      	ldr	r3, [r7, #0]
 8108f2a:	2b02      	cmp	r3, #2
 8108f2c:	d10f      	bne.n	8108f4e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8108f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8108f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f34:	f3bf 8f5b 	dmb	ish
 8108f38:	881b      	ldrh	r3, [r3, #0]
 8108f3a:	f3bf 8f5b 	dmb	ish
 8108f3e:	b29b      	uxth	r3, r3
 8108f40:	833b      	strh	r3, [r7, #24]
 8108f42:	8b3b      	ldrh	r3, [r7, #24]
 8108f44:	b29b      	uxth	r3, r3
 8108f46:	2200      	movs	r2, #0
 8108f48:	461c      	mov	r4, r3
 8108f4a:	4615      	mov	r5, r2
 8108f4c:	e02d      	b.n	8108faa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8108f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f50:	2b00      	cmp	r3, #0
 8108f52:	d010      	beq.n	8108f76 <metal_io_read+0xb6>
 8108f54:	683b      	ldr	r3, [r7, #0]
 8108f56:	2b04      	cmp	r3, #4
 8108f58:	d10d      	bne.n	8108f76 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8108f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f5c:	623b      	str	r3, [r7, #32]
 8108f5e:	6a3b      	ldr	r3, [r7, #32]
 8108f60:	f3bf 8f5b 	dmb	ish
 8108f64:	681b      	ldr	r3, [r3, #0]
 8108f66:	f3bf 8f5b 	dmb	ish
 8108f6a:	617b      	str	r3, [r7, #20]
 8108f6c:	697b      	ldr	r3, [r7, #20]
 8108f6e:	2200      	movs	r2, #0
 8108f70:	461c      	mov	r4, r3
 8108f72:	4615      	mov	r5, r2
 8108f74:	e019      	b.n	8108faa <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8108f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f78:	2b00      	cmp	r3, #0
 8108f7a:	d010      	beq.n	8108f9e <metal_io_read+0xde>
 8108f7c:	683b      	ldr	r3, [r7, #0]
 8108f7e:	2b04      	cmp	r3, #4
 8108f80:	d10d      	bne.n	8108f9e <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8108f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8108f84:	61fb      	str	r3, [r7, #28]
 8108f86:	69fb      	ldr	r3, [r7, #28]
 8108f88:	f3bf 8f5b 	dmb	ish
 8108f8c:	681b      	ldr	r3, [r3, #0]
 8108f8e:	f3bf 8f5b 	dmb	ish
 8108f92:	613b      	str	r3, [r7, #16]
 8108f94:	693b      	ldr	r3, [r7, #16]
 8108f96:	2200      	movs	r2, #0
 8108f98:	461c      	mov	r4, r3
 8108f9a:	4615      	mov	r5, r2
 8108f9c:	e005      	b.n	8108faa <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8108f9e:	4b06      	ldr	r3, [pc, #24]	@ (8108fb8 <metal_io_read+0xf8>)
 8108fa0:	4a06      	ldr	r2, [pc, #24]	@ (8108fbc <metal_io_read+0xfc>)
 8108fa2:	21f0      	movs	r1, #240	@ 0xf0
 8108fa4:	4806      	ldr	r0, [pc, #24]	@ (8108fc0 <metal_io_read+0x100>)
 8108fa6:	f001 fe3f 	bl	810ac28 <__assert_func>
	return 0; /* quiet compiler */
}
 8108faa:	4622      	mov	r2, r4
 8108fac:	462b      	mov	r3, r5
 8108fae:	4610      	mov	r0, r2
 8108fb0:	4619      	mov	r1, r3
 8108fb2:	3730      	adds	r7, #48	@ 0x30
 8108fb4:	46bd      	mov	sp, r7
 8108fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8108fb8:	0810c0a0 	.word	0x0810c0a0
 8108fbc:	0810c298 	.word	0x0810c298
 8108fc0:	0810c0a4 	.word	0x0810c0a4

08108fc4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8108fc4:	b580      	push	{r7, lr}
 8108fc6:	b082      	sub	sp, #8
 8108fc8:	af00      	add	r7, sp, #0
 8108fca:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8108fcc:	6878      	ldr	r0, [r7, #4]
 8108fce:	f001 fe49 	bl	810ac64 <malloc>
 8108fd2:	4603      	mov	r3, r0
}
 8108fd4:	4618      	mov	r0, r3
 8108fd6:	3708      	adds	r7, #8
 8108fd8:	46bd      	mov	sp, r7
 8108fda:	bd80      	pop	{r7, pc}

08108fdc <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8108fdc:	b580      	push	{r7, lr}
 8108fde:	b082      	sub	sp, #8
 8108fe0:	af00      	add	r7, sp, #0
 8108fe2:	6078      	str	r0, [r7, #4]
	free(ptr);
 8108fe4:	6878      	ldr	r0, [r7, #4]
 8108fe6:	f001 fe45 	bl	810ac74 <free>
}
 8108fea:	bf00      	nop
 8108fec:	3708      	adds	r7, #8
 8108fee:	46bd      	mov	sp, r7
 8108ff0:	bd80      	pop	{r7, pc}

08108ff2 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8108ff2:	b580      	push	{r7, lr}
 8108ff4:	b084      	sub	sp, #16
 8108ff6:	af00      	add	r7, sp, #0
 8108ff8:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8108ffa:	687b      	ldr	r3, [r7, #4]
 8108ffc:	3307      	adds	r3, #7
 8108ffe:	00db      	lsls	r3, r3, #3
 8109000:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8109002:	68f8      	ldr	r0, [r7, #12]
 8109004:	f7ff ffde 	bl	8108fc4 <metal_allocate_memory>
 8109008:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 810900a:	68bb      	ldr	r3, [r7, #8]
 810900c:	2b00      	cmp	r3, #0
 810900e:	d004      	beq.n	810901a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8109010:	68fa      	ldr	r2, [r7, #12]
 8109012:	2100      	movs	r1, #0
 8109014:	68b8      	ldr	r0, [r7, #8]
 8109016:	f001 fffc 	bl	810b012 <memset>
	}

	return vqs;
 810901a:	68bb      	ldr	r3, [r7, #8]
}
 810901c:	4618      	mov	r0, r3
 810901e:	3710      	adds	r7, #16
 8109020:	46bd      	mov	sp, r7
 8109022:	bd80      	pop	{r7, pc}

08109024 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8109024:	b580      	push	{r7, lr}
 8109026:	b086      	sub	sp, #24
 8109028:	af00      	add	r7, sp, #0
 810902a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 810902c:	687b      	ldr	r3, [r7, #4]
 810902e:	891b      	ldrh	r3, [r3, #8]
 8109030:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8109032:	687b      	ldr	r3, [r7, #4]
 8109034:	681b      	ldr	r3, [r3, #0]
 8109036:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8109038:	693b      	ldr	r3, [r7, #16]
 810903a:	3b18      	subs	r3, #24
 810903c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 810903e:	693b      	ldr	r3, [r7, #16]
 8109040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109042:	697a      	ldr	r2, [r7, #20]
 8109044:	429a      	cmp	r2, r3
 8109046:	d905      	bls.n	8109054 <rproc_virtio_virtqueue_notify+0x30>
 8109048:	4b0d      	ldr	r3, [pc, #52]	@ (8109080 <rproc_virtio_virtqueue_notify+0x5c>)
 810904a:	4a0e      	ldr	r2, [pc, #56]	@ (8109084 <rproc_virtio_virtqueue_notify+0x60>)
 810904c:	2133      	movs	r1, #51	@ 0x33
 810904e:	480e      	ldr	r0, [pc, #56]	@ (8109088 <rproc_virtio_virtqueue_notify+0x64>)
 8109050:	f001 fdea 	bl	810ac28 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8109054:	693b      	ldr	r3, [r7, #16]
 8109056:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8109058:	697a      	ldr	r2, [r7, #20]
 810905a:	4613      	mov	r3, r2
 810905c:	005b      	lsls	r3, r3, #1
 810905e:	4413      	add	r3, r2
 8109060:	00db      	lsls	r3, r3, #3
 8109062:	440b      	add	r3, r1
 8109064:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8109066:	68fb      	ldr	r3, [r7, #12]
 8109068:	691b      	ldr	r3, [r3, #16]
 810906a:	68fa      	ldr	r2, [r7, #12]
 810906c:	6810      	ldr	r0, [r2, #0]
 810906e:	68ba      	ldr	r2, [r7, #8]
 8109070:	6912      	ldr	r2, [r2, #16]
 8109072:	4611      	mov	r1, r2
 8109074:	4798      	blx	r3
}
 8109076:	bf00      	nop
 8109078:	3718      	adds	r7, #24
 810907a:	46bd      	mov	sp, r7
 810907c:	bd80      	pop	{r7, pc}
 810907e:	bf00      	nop
 8109080:	0810c0ec 	.word	0x0810c0ec
 8109084:	0810c278 	.word	0x0810c278
 8109088:	0810c108 	.word	0x0810c108

0810908c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 810908c:	b580      	push	{r7, lr}
 810908e:	b086      	sub	sp, #24
 8109090:	af00      	add	r7, sp, #0
 8109092:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8109094:	687b      	ldr	r3, [r7, #4]
 8109096:	3b18      	subs	r3, #24
 8109098:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810909a:	697b      	ldr	r3, [r7, #20]
 810909c:	689b      	ldr	r3, [r3, #8]
 810909e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81090a0:	697b      	ldr	r3, [r7, #20]
 81090a2:	68db      	ldr	r3, [r3, #12]
 81090a4:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 81090a6:	693b      	ldr	r3, [r7, #16]
 81090a8:	3318      	adds	r3, #24
 81090aa:	4619      	mov	r1, r3
 81090ac:	68f8      	ldr	r0, [r7, #12]
 81090ae:	f7ff feee 	bl	8108e8e <metal_io_virt_to_offset>
 81090b2:	4601      	mov	r1, r0
 81090b4:	2301      	movs	r3, #1
 81090b6:	2205      	movs	r2, #5
 81090b8:	68f8      	ldr	r0, [r7, #12]
 81090ba:	f7ff ff01 	bl	8108ec0 <metal_io_read>
 81090be:	4602      	mov	r2, r0
 81090c0:	460b      	mov	r3, r1
 81090c2:	4613      	mov	r3, r2
 81090c4:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 81090c6:	7afb      	ldrb	r3, [r7, #11]
}
 81090c8:	4618      	mov	r0, r3
 81090ca:	3718      	adds	r7, #24
 81090cc:	46bd      	mov	sp, r7
 81090ce:	bd80      	pop	{r7, pc}

081090d0 <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 81090d0:	b580      	push	{r7, lr}
 81090d2:	b086      	sub	sp, #24
 81090d4:	af00      	add	r7, sp, #0
 81090d6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	3b18      	subs	r3, #24
 81090dc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81090de:	697b      	ldr	r3, [r7, #20]
 81090e0:	689b      	ldr	r3, [r3, #8]
 81090e2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81090e4:	697b      	ldr	r3, [r7, #20]
 81090e6:	68db      	ldr	r3, [r3, #12]
 81090e8:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 81090ea:	693b      	ldr	r3, [r7, #16]
 81090ec:	330c      	adds	r3, #12
 81090ee:	4619      	mov	r1, r3
 81090f0:	68f8      	ldr	r0, [r7, #12]
 81090f2:	f7ff fecc 	bl	8108e8e <metal_io_virt_to_offset>
 81090f6:	4601      	mov	r1, r0
 81090f8:	2304      	movs	r3, #4
 81090fa:	2205      	movs	r2, #5
 81090fc:	68f8      	ldr	r0, [r7, #12]
 81090fe:	f7ff fedf 	bl	8108ec0 <metal_io_read>
 8109102:	4602      	mov	r2, r0
 8109104:	460b      	mov	r3, r1
 8109106:	4613      	mov	r3, r2
 8109108:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 810910a:	68bb      	ldr	r3, [r7, #8]
}
 810910c:	4618      	mov	r0, r3
 810910e:	3718      	adds	r7, #24
 8109110:	46bd      	mov	sp, r7
 8109112:	bd80      	pop	{r7, pc}

08109114 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8109114:	b480      	push	{r7}
 8109116:	b083      	sub	sp, #12
 8109118:	af00      	add	r7, sp, #0
 810911a:	6078      	str	r0, [r7, #4]
 810911c:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 810911e:	2300      	movs	r3, #0
}
 8109120:	4618      	mov	r0, r3
 8109122:	370c      	adds	r7, #12
 8109124:	46bd      	mov	sp, r7
 8109126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810912a:	4770      	bx	lr

0810912c <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 810912c:	b480      	push	{r7}
 810912e:	b085      	sub	sp, #20
 8109130:	af00      	add	r7, sp, #0
 8109132:	60f8      	str	r0, [r7, #12]
 8109134:	60b9      	str	r1, [r7, #8]
 8109136:	607a      	str	r2, [r7, #4]
 8109138:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 810913a:	bf00      	nop
 810913c:	3714      	adds	r7, #20
 810913e:	46bd      	mov	sp, r7
 8109140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109144:	4770      	bx	lr
	...

08109148 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8109148:	b580      	push	{r7, lr}
 810914a:	b08e      	sub	sp, #56	@ 0x38
 810914c:	af00      	add	r7, sp, #0
 810914e:	60f8      	str	r0, [r7, #12]
 8109150:	60b9      	str	r1, [r7, #8]
 8109152:	607a      	str	r2, [r7, #4]
 8109154:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 810915a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810915c:	7e5b      	ldrb	r3, [r3, #25]
 810915e:	62bb      	str	r3, [r7, #40]	@ 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8109160:	2050      	movs	r0, #80	@ 0x50
 8109162:	f7ff ff2f 	bl	8108fc4 <metal_allocate_memory>
 8109166:	6278      	str	r0, [r7, #36]	@ 0x24
	if (!rpvdev)
 8109168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810916a:	2b00      	cmp	r3, #0
 810916c:	d101      	bne.n	8109172 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 810916e:	2300      	movs	r3, #0
 8109170:	e092      	b.n	8109298 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8109172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109174:	4613      	mov	r3, r2
 8109176:	005b      	lsls	r3, r3, #1
 8109178:	4413      	add	r3, r2
 810917a:	00db      	lsls	r3, r3, #3
 810917c:	4618      	mov	r0, r3
 810917e:	f7ff ff21 	bl	8108fc4 <metal_allocate_memory>
 8109182:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8109184:	6a3b      	ldr	r3, [r7, #32]
 8109186:	2b00      	cmp	r3, #0
 8109188:	f000 8081 	beq.w	810928e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 810918c:	2250      	movs	r2, #80	@ 0x50
 810918e:	2100      	movs	r1, #0
 8109190:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8109192:	f001 ff3e 	bl	810b012 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8109196:	2218      	movs	r2, #24
 8109198:	2100      	movs	r1, #0
 810919a:	6a38      	ldr	r0, [r7, #32]
 810919c:	f001 ff39 	bl	810b012 <memset>
	vdev = &rpvdev->vdev;
 81091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81091a2:	3318      	adds	r3, #24
 81091a4:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 81091a6:	2300      	movs	r3, #0
 81091a8:	637b      	str	r3, [r7, #52]	@ 0x34
 81091aa:	e025      	b.n	81091f8 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 81091ac:	2300      	movs	r3, #0
 81091ae:	633b      	str	r3, [r7, #48]	@ 0x30

		vring_rsc = &vdev_rsc->vring[i];
 81091b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81091b2:	4613      	mov	r3, r2
 81091b4:	009b      	lsls	r3, r3, #2
 81091b6:	4413      	add	r3, r2
 81091b8:	009b      	lsls	r3, r3, #2
 81091ba:	3318      	adds	r3, #24
 81091bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81091be:	4413      	add	r3, r2
 81091c0:	3304      	adds	r3, #4
 81091c2:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 81091c4:	68fb      	ldr	r3, [r7, #12]
 81091c6:	2b00      	cmp	r3, #0
 81091c8:	d102      	bne.n	81091d0 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 81091ca:	69bb      	ldr	r3, [r7, #24]
 81091cc:	689b      	ldr	r3, [r3, #8]
 81091ce:	633b      	str	r3, [r7, #48]	@ 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 81091d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 81091d2:	f7ff ff0e 	bl	8108ff2 <virtqueue_allocate>
 81091d6:	6178      	str	r0, [r7, #20]
		if (!vq)
 81091d8:	697b      	ldr	r3, [r7, #20]
 81091da:	2b00      	cmp	r3, #0
 81091dc:	d031      	beq.n	8109242 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 81091de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81091e0:	4613      	mov	r3, r2
 81091e2:	005b      	lsls	r3, r3, #1
 81091e4:	4413      	add	r3, r2
 81091e6:	00db      	lsls	r3, r3, #3
 81091e8:	461a      	mov	r2, r3
 81091ea:	6a3b      	ldr	r3, [r7, #32]
 81091ec:	4413      	add	r3, r2
 81091ee:	697a      	ldr	r2, [r7, #20]
 81091f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 81091f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81091f4:	3301      	adds	r3, #1
 81091f6:	637b      	str	r3, [r7, #52]	@ 0x34
 81091f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 81091fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81091fc:	429a      	cmp	r2, r3
 81091fe:	d3d5      	bcc.n	81091ac <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8109200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8109204:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8109206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109208:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810920a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 810920c:	69fb      	ldr	r3, [r7, #28]
 810920e:	6a3a      	ldr	r2, [r7, #32]
 8109210:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8109212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109216:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8109218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810921a:	683a      	ldr	r2, [r7, #0]
 810921c:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 810921e:	69fb      	ldr	r3, [r7, #28]
 8109220:	68ba      	ldr	r2, [r7, #8]
 8109222:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8109224:	69fb      	ldr	r3, [r7, #28]
 8109226:	68fa      	ldr	r2, [r7, #12]
 8109228:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 810922a:	69fb      	ldr	r3, [r7, #28]
 810922c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810922e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8109230:	69fb      	ldr	r3, [r7, #28]
 8109232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8109234:	629a      	str	r2, [r3, #40]	@ 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8109236:	69fb      	ldr	r3, [r7, #28]
 8109238:	4a19      	ldr	r2, [pc, #100]	@ (81092a0 <rproc_virtio_create_vdev+0x158>)
 810923a:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 810923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810923e:	3318      	adds	r3, #24
 8109240:	e02a      	b.n	8109298 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8109242:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8109244:	2300      	movs	r3, #0
 8109246:	637b      	str	r3, [r7, #52]	@ 0x34
 8109248:	e019      	b.n	810927e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 810924a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810924c:	4613      	mov	r3, r2
 810924e:	005b      	lsls	r3, r3, #1
 8109250:	4413      	add	r3, r2
 8109252:	00db      	lsls	r3, r3, #3
 8109254:	461a      	mov	r2, r3
 8109256:	6a3b      	ldr	r3, [r7, #32]
 8109258:	4413      	add	r3, r2
 810925a:	681b      	ldr	r3, [r3, #0]
 810925c:	2b00      	cmp	r3, #0
 810925e:	d00b      	beq.n	8109278 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8109260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8109262:	4613      	mov	r3, r2
 8109264:	005b      	lsls	r3, r3, #1
 8109266:	4413      	add	r3, r2
 8109268:	00db      	lsls	r3, r3, #3
 810926a:	461a      	mov	r2, r3
 810926c:	6a3b      	ldr	r3, [r7, #32]
 810926e:	4413      	add	r3, r2
 8109270:	681b      	ldr	r3, [r3, #0]
 8109272:	4618      	mov	r0, r3
 8109274:	f7ff feb2 	bl	8108fdc <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8109278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810927a:	3301      	adds	r3, #1
 810927c:	637b      	str	r3, [r7, #52]	@ 0x34
 810927e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8109280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109282:	429a      	cmp	r2, r3
 8109284:	d3e1      	bcc.n	810924a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8109286:	6a38      	ldr	r0, [r7, #32]
 8109288:	f7ff fea8 	bl	8108fdc <metal_free_memory>
 810928c:	e000      	b.n	8109290 <rproc_virtio_create_vdev+0x148>
		goto err0;
 810928e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8109290:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8109292:	f7ff fea3 	bl	8108fdc <metal_free_memory>
	return NULL;
 8109296:	2300      	movs	r3, #0
}
 8109298:	4618      	mov	r0, r3
 810929a:	3738      	adds	r7, #56	@ 0x38
 810929c:	46bd      	mov	sp, r7
 810929e:	bd80      	pop	{r7, pc}
 81092a0:	0810c254 	.word	0x0810c254

081092a4 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 81092a4:	b480      	push	{r7}
 81092a6:	b087      	sub	sp, #28
 81092a8:	af00      	add	r7, sp, #0
 81092aa:	60f8      	str	r0, [r7, #12]
 81092ac:	60b9      	str	r1, [r7, #8]
 81092ae:	607a      	str	r2, [r7, #4]
 81092b0:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 81092b2:	68fb      	ldr	r3, [r7, #12]
 81092b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81092b6:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 81092b8:	68ba      	ldr	r2, [r7, #8]
 81092ba:	697b      	ldr	r3, [r7, #20]
 81092bc:	429a      	cmp	r2, r3
 81092be:	d302      	bcc.n	81092c6 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 81092c0:	f06f 0301 	mvn.w	r3, #1
 81092c4:	e019      	b.n	81092fa <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 81092c6:	68fb      	ldr	r3, [r7, #12]
 81092c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 81092ca:	68ba      	ldr	r2, [r7, #8]
 81092cc:	4613      	mov	r3, r2
 81092ce:	005b      	lsls	r3, r3, #1
 81092d0:	4413      	add	r3, r2
 81092d2:	00db      	lsls	r3, r3, #3
 81092d4:	440b      	add	r3, r1
 81092d6:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 81092d8:	693b      	ldr	r3, [r7, #16]
 81092da:	6a3a      	ldr	r2, [r7, #32]
 81092dc:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 81092de:	693b      	ldr	r3, [r7, #16]
 81092e0:	687a      	ldr	r2, [r7, #4]
 81092e2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 81092e4:	693b      	ldr	r3, [r7, #16]
 81092e6:	683a      	ldr	r2, [r7, #0]
 81092e8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 81092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81092ec:	b29a      	uxth	r2, r3
 81092ee:	693b      	ldr	r3, [r7, #16]
 81092f0:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 81092f2:	693b      	ldr	r3, [r7, #16]
 81092f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81092f6:	609a      	str	r2, [r3, #8]

	return 0;
 81092f8:	2300      	movs	r3, #0
}
 81092fa:	4618      	mov	r0, r3
 81092fc:	371c      	adds	r7, #28
 81092fe:	46bd      	mov	sp, r7
 8109300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109304:	4770      	bx	lr

08109306 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8109306:	b580      	push	{r7, lr}
 8109308:	b086      	sub	sp, #24
 810930a:	af00      	add	r7, sp, #0
 810930c:	6078      	str	r0, [r7, #4]
 810930e:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	2b00      	cmp	r3, #0
 8109314:	d102      	bne.n	810931c <rproc_virtio_notified+0x16>
		return -EINVAL;
 8109316:	f06f 0315 	mvn.w	r3, #21
 810931a:	e02c      	b.n	8109376 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	681b      	ldr	r3, [r3, #0]
 8109320:	683a      	ldr	r2, [r7, #0]
 8109322:	429a      	cmp	r2, r3
 8109324:	d101      	bne.n	810932a <rproc_virtio_notified+0x24>
		return 0;
 8109326:	2300      	movs	r3, #0
 8109328:	e025      	b.n	8109376 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 810932a:	687b      	ldr	r3, [r7, #4]
 810932c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810932e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8109330:	2300      	movs	r3, #0
 8109332:	617b      	str	r3, [r7, #20]
 8109334:	e01a      	b.n	810936c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8109336:	687b      	ldr	r3, [r7, #4]
 8109338:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810933a:	697a      	ldr	r2, [r7, #20]
 810933c:	4613      	mov	r3, r2
 810933e:	005b      	lsls	r3, r3, #1
 8109340:	4413      	add	r3, r2
 8109342:	00db      	lsls	r3, r3, #3
 8109344:	440b      	add	r3, r1
 8109346:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8109348:	68fb      	ldr	r3, [r7, #12]
 810934a:	691b      	ldr	r3, [r3, #16]
 810934c:	683a      	ldr	r2, [r7, #0]
 810934e:	429a      	cmp	r2, r3
 8109350:	d003      	beq.n	810935a <rproc_virtio_notified+0x54>
 8109352:	683b      	ldr	r3, [r7, #0]
 8109354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109358:	d105      	bne.n	8109366 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 810935a:	68fb      	ldr	r3, [r7, #12]
 810935c:	681b      	ldr	r3, [r3, #0]
 810935e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8109360:	68b8      	ldr	r0, [r7, #8]
 8109362:	f001 fa1b 	bl	810a79c <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8109366:	697b      	ldr	r3, [r7, #20]
 8109368:	3301      	adds	r3, #1
 810936a:	617b      	str	r3, [r7, #20]
 810936c:	697a      	ldr	r2, [r7, #20]
 810936e:	693b      	ldr	r3, [r7, #16]
 8109370:	429a      	cmp	r2, r3
 8109372:	d3e0      	bcc.n	8109336 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8109374:	2300      	movs	r3, #0
}
 8109376:	4618      	mov	r0, r3
 8109378:	3718      	adds	r7, #24
 810937a:	46bd      	mov	sp, r7
 810937c:	bd80      	pop	{r7, pc}

0810937e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 810937e:	b580      	push	{r7, lr}
 8109380:	b084      	sub	sp, #16
 8109382:	af00      	add	r7, sp, #0
 8109384:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8109386:	687b      	ldr	r3, [r7, #4]
 8109388:	699b      	ldr	r3, [r3, #24]
 810938a:	2b00      	cmp	r3, #0
 810938c:	d00a      	beq.n	81093a4 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 810938e:	6878      	ldr	r0, [r7, #4]
 8109390:	f7ff fe7c 	bl	810908c <rproc_virtio_get_status>
 8109394:	4603      	mov	r3, r0
 8109396:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8109398:	7bfb      	ldrb	r3, [r7, #15]
 810939a:	f003 0304 	and.w	r3, r3, #4
 810939e:	2b00      	cmp	r3, #0
 81093a0:	d102      	bne.n	81093a8 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 81093a2:	e7f4      	b.n	810938e <rproc_virtio_wait_remote_ready+0x10>
		return;
 81093a4:	bf00      	nop
 81093a6:	e000      	b.n	81093aa <rproc_virtio_wait_remote_ready+0x2c>
			return;
 81093a8:	bf00      	nop
	}
}
 81093aa:	3710      	adds	r7, #16
 81093ac:	46bd      	mov	sp, r7
 81093ae:	bd80      	pop	{r7, pc}

081093b0 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 81093b0:	b480      	push	{r7}
 81093b2:	b083      	sub	sp, #12
 81093b4:	af00      	add	r7, sp, #0
 81093b6:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 81093b8:	bf00      	nop
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	2201      	movs	r2, #1
 81093be:	4611      	mov	r1, r2
 81093c0:	f3bf 8f5b 	dmb	ish
 81093c4:	e8d3 2f4f 	ldrexb	r2, [r3]
 81093c8:	e8c3 1f40 	strexb	r0, r1, [r3]
 81093cc:	2800      	cmp	r0, #0
 81093ce:	d1f9      	bne.n	81093c4 <__metal_mutex_acquire+0x14>
 81093d0:	f3bf 8f5b 	dmb	ish
 81093d4:	b2d3      	uxtb	r3, r2
 81093d6:	2b00      	cmp	r3, #0
 81093d8:	d1ef      	bne.n	81093ba <__metal_mutex_acquire+0xa>
		;
	}
}
 81093da:	bf00      	nop
 81093dc:	bf00      	nop
 81093de:	370c      	adds	r7, #12
 81093e0:	46bd      	mov	sp, r7
 81093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093e6:	4770      	bx	lr

081093e8 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 81093e8:	b480      	push	{r7}
 81093ea:	b083      	sub	sp, #12
 81093ec:	af00      	add	r7, sp, #0
 81093ee:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 81093f0:	687b      	ldr	r3, [r7, #4]
 81093f2:	f3bf 8f5b 	dmb	ish
 81093f6:	2200      	movs	r2, #0
 81093f8:	701a      	strb	r2, [r3, #0]
 81093fa:	f3bf 8f5b 	dmb	ish
}
 81093fe:	bf00      	nop
 8109400:	370c      	adds	r7, #12
 8109402:	46bd      	mov	sp, r7
 8109404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109408:	4770      	bx	lr

0810940a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 810940a:	b580      	push	{r7, lr}
 810940c:	b082      	sub	sp, #8
 810940e:	af00      	add	r7, sp, #0
 8109410:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8109412:	6878      	ldr	r0, [r7, #4]
 8109414:	f7ff ffcc 	bl	81093b0 <__metal_mutex_acquire>
}
 8109418:	bf00      	nop
 810941a:	3708      	adds	r7, #8
 810941c:	46bd      	mov	sp, r7
 810941e:	bd80      	pop	{r7, pc}

08109420 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8109420:	b580      	push	{r7, lr}
 8109422:	b082      	sub	sp, #8
 8109424:	af00      	add	r7, sp, #0
 8109426:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8109428:	6878      	ldr	r0, [r7, #4]
 810942a:	f7ff ffdd 	bl	81093e8 <__metal_mutex_release>
}
 810942e:	bf00      	nop
 8109430:	3708      	adds	r7, #8
 8109432:	46bd      	mov	sp, r7
 8109434:	bd80      	pop	{r7, pc}

08109436 <metal_list_add_before>:
{
 8109436:	b480      	push	{r7}
 8109438:	b083      	sub	sp, #12
 810943a:	af00      	add	r7, sp, #0
 810943c:	6078      	str	r0, [r7, #4]
 810943e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8109440:	687b      	ldr	r3, [r7, #4]
 8109442:	685a      	ldr	r2, [r3, #4]
 8109444:	683b      	ldr	r3, [r7, #0]
 8109446:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8109448:	683b      	ldr	r3, [r7, #0]
 810944a:	687a      	ldr	r2, [r7, #4]
 810944c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810944e:	683b      	ldr	r3, [r7, #0]
 8109450:	681b      	ldr	r3, [r3, #0]
 8109452:	683a      	ldr	r2, [r7, #0]
 8109454:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8109456:	683b      	ldr	r3, [r7, #0]
 8109458:	685b      	ldr	r3, [r3, #4]
 810945a:	683a      	ldr	r2, [r7, #0]
 810945c:	601a      	str	r2, [r3, #0]
}
 810945e:	bf00      	nop
 8109460:	370c      	adds	r7, #12
 8109462:	46bd      	mov	sp, r7
 8109464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109468:	4770      	bx	lr

0810946a <metal_list_add_tail>:
{
 810946a:	b580      	push	{r7, lr}
 810946c:	b082      	sub	sp, #8
 810946e:	af00      	add	r7, sp, #0
 8109470:	6078      	str	r0, [r7, #4]
 8109472:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8109474:	6839      	ldr	r1, [r7, #0]
 8109476:	6878      	ldr	r0, [r7, #4]
 8109478:	f7ff ffdd 	bl	8109436 <metal_list_add_before>
}
 810947c:	bf00      	nop
 810947e:	3708      	adds	r7, #8
 8109480:	46bd      	mov	sp, r7
 8109482:	bd80      	pop	{r7, pc}

08109484 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8109484:	b480      	push	{r7}
 8109486:	b083      	sub	sp, #12
 8109488:	af00      	add	r7, sp, #0
 810948a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 810948c:	687b      	ldr	r3, [r7, #4]
 810948e:	681b      	ldr	r3, [r3, #0]
 8109490:	687a      	ldr	r2, [r7, #4]
 8109492:	6852      	ldr	r2, [r2, #4]
 8109494:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8109496:	687b      	ldr	r3, [r7, #4]
 8109498:	685b      	ldr	r3, [r3, #4]
 810949a:	687a      	ldr	r2, [r7, #4]
 810949c:	6812      	ldr	r2, [r2, #0]
 810949e:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 81094a0:	687b      	ldr	r3, [r7, #4]
 81094a2:	687a      	ldr	r2, [r7, #4]
 81094a4:	605a      	str	r2, [r3, #4]
 81094a6:	687b      	ldr	r3, [r7, #4]
 81094a8:	685a      	ldr	r2, [r3, #4]
 81094aa:	687b      	ldr	r3, [r7, #4]
 81094ac:	601a      	str	r2, [r3, #0]
}
 81094ae:	bf00      	nop
 81094b0:	370c      	adds	r7, #12
 81094b2:	46bd      	mov	sp, r7
 81094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094b8:	4770      	bx	lr

081094ba <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 81094ba:	b480      	push	{r7}
 81094bc:	b083      	sub	sp, #12
 81094be:	af00      	add	r7, sp, #0
 81094c0:	6078      	str	r0, [r7, #4]
 81094c2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81094c4:	683b      	ldr	r3, [r7, #0]
 81094c6:	095b      	lsrs	r3, r3, #5
 81094c8:	009a      	lsls	r2, r3, #2
 81094ca:	6879      	ldr	r1, [r7, #4]
 81094cc:	440a      	add	r2, r1
 81094ce:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81094d0:	683a      	ldr	r2, [r7, #0]
 81094d2:	f002 021f 	and.w	r2, r2, #31
 81094d6:	2001      	movs	r0, #1
 81094d8:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 81094dc:	009b      	lsls	r3, r3, #2
 81094de:	6878      	ldr	r0, [r7, #4]
 81094e0:	4403      	add	r3, r0
 81094e2:	430a      	orrs	r2, r1
 81094e4:	601a      	str	r2, [r3, #0]
}
 81094e6:	bf00      	nop
 81094e8:	370c      	adds	r7, #12
 81094ea:	46bd      	mov	sp, r7
 81094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094f0:	4770      	bx	lr

081094f2 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 81094f2:	b480      	push	{r7}
 81094f4:	b083      	sub	sp, #12
 81094f6:	af00      	add	r7, sp, #0
 81094f8:	6078      	str	r0, [r7, #4]
 81094fa:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 81094fc:	683b      	ldr	r3, [r7, #0]
 81094fe:	095b      	lsrs	r3, r3, #5
 8109500:	009b      	lsls	r3, r3, #2
 8109502:	687a      	ldr	r2, [r7, #4]
 8109504:	4413      	add	r3, r2
 8109506:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8109508:	683b      	ldr	r3, [r7, #0]
 810950a:	f003 031f 	and.w	r3, r3, #31
 810950e:	2101      	movs	r1, #1
 8109510:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8109514:	4013      	ands	r3, r2
}
 8109516:	4618      	mov	r0, r3
 8109518:	370c      	adds	r7, #12
 810951a:	46bd      	mov	sp, r7
 810951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109520:	4770      	bx	lr

08109522 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8109522:	b480      	push	{r7}
 8109524:	b083      	sub	sp, #12
 8109526:	af00      	add	r7, sp, #0
 8109528:	6078      	str	r0, [r7, #4]
 810952a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 810952c:	683b      	ldr	r3, [r7, #0]
 810952e:	095b      	lsrs	r3, r3, #5
 8109530:	009a      	lsls	r2, r3, #2
 8109532:	6879      	ldr	r1, [r7, #4]
 8109534:	440a      	add	r2, r1
 8109536:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8109538:	683a      	ldr	r2, [r7, #0]
 810953a:	f002 021f 	and.w	r2, r2, #31
 810953e:	2001      	movs	r0, #1
 8109540:	fa00 f202 	lsl.w	r2, r0, r2
 8109544:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8109546:	009b      	lsls	r3, r3, #2
 8109548:	6878      	ldr	r0, [r7, #4]
 810954a:	4403      	add	r3, r0
 810954c:	400a      	ands	r2, r1
 810954e:	601a      	str	r2, [r3, #0]
}
 8109550:	bf00      	nop
 8109552:	370c      	adds	r7, #12
 8109554:	46bd      	mov	sp, r7
 8109556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810955a:	4770      	bx	lr

0810955c <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 810955c:	b580      	push	{r7, lr}
 810955e:	b082      	sub	sp, #8
 8109560:	af00      	add	r7, sp, #0
 8109562:	6078      	str	r0, [r7, #4]
 8109564:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8109566:	6839      	ldr	r1, [r7, #0]
 8109568:	6878      	ldr	r0, [r7, #4]
 810956a:	f7ff ffc2 	bl	81094f2 <metal_bitmap_is_bit_set>
 810956e:	4603      	mov	r3, r0
 8109570:	2b00      	cmp	r3, #0
 8109572:	bf0c      	ite	eq
 8109574:	2301      	moveq	r3, #1
 8109576:	2300      	movne	r3, #0
 8109578:	b2db      	uxtb	r3, r3
}
 810957a:	4618      	mov	r0, r3
 810957c:	3708      	adds	r7, #8
 810957e:	46bd      	mov	sp, r7
 8109580:	bd80      	pop	{r7, pc}

08109582 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8109582:	b580      	push	{r7, lr}
 8109584:	b086      	sub	sp, #24
 8109586:	af00      	add	r7, sp, #0
 8109588:	60f8      	str	r0, [r7, #12]
 810958a:	60b9      	str	r1, [r7, #8]
 810958c:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 810958e:	68bb      	ldr	r3, [r7, #8]
 8109590:	617b      	str	r3, [r7, #20]
 8109592:	e002      	b.n	810959a <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8109594:	697b      	ldr	r3, [r7, #20]
 8109596:	3301      	adds	r3, #1
 8109598:	617b      	str	r3, [r7, #20]
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 810959a:	697a      	ldr	r2, [r7, #20]
 810959c:	687b      	ldr	r3, [r7, #4]
 810959e:	429a      	cmp	r2, r3
 81095a0:	d207      	bcs.n	81095b2 <metal_bitmap_next_clear_bit+0x30>
 81095a2:	697b      	ldr	r3, [r7, #20]
 81095a4:	4619      	mov	r1, r3
 81095a6:	68f8      	ldr	r0, [r7, #12]
 81095a8:	f7ff ffd8 	bl	810955c <metal_bitmap_is_bit_clear>
 81095ac:	4603      	mov	r3, r0
 81095ae:	2b00      	cmp	r3, #0
 81095b0:	d0f0      	beq.n	8109594 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 81095b2:	697b      	ldr	r3, [r7, #20]
}
 81095b4:	4618      	mov	r0, r3
 81095b6:	3718      	adds	r7, #24
 81095b8:	46bd      	mov	sp, r7
 81095ba:	bd80      	pop	{r7, pc}

081095bc <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 81095bc:	b580      	push	{r7, lr}
 81095be:	b084      	sub	sp, #16
 81095c0:	af00      	add	r7, sp, #0
 81095c2:	60f8      	str	r0, [r7, #12]
 81095c4:	60b9      	str	r1, [r7, #8]
 81095c6:	607a      	str	r2, [r7, #4]
 81095c8:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81095ca:	68fb      	ldr	r3, [r7, #12]
 81095cc:	2220      	movs	r2, #32
 81095ce:	68b9      	ldr	r1, [r7, #8]
 81095d0:	4618      	mov	r0, r3
 81095d2:	f001 fd0b 	bl	810afec <strncpy>
	ept->addr = src;
 81095d6:	68fb      	ldr	r3, [r7, #12]
 81095d8:	687a      	ldr	r2, [r7, #4]
 81095da:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 81095dc:	68fb      	ldr	r3, [r7, #12]
 81095de:	683a      	ldr	r2, [r7, #0]
 81095e0:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 81095e2:	68fb      	ldr	r3, [r7, #12]
 81095e4:	69ba      	ldr	r2, [r7, #24]
 81095e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81095e8:	68fb      	ldr	r3, [r7, #12]
 81095ea:	69fa      	ldr	r2, [r7, #28]
 81095ec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 81095ee:	bf00      	nop
 81095f0:	3710      	adds	r7, #16
 81095f2:	46bd      	mov	sp, r7
 81095f4:	bd80      	pop	{r7, pc}

081095f6 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 81095f6:	b580      	push	{r7, lr}
 81095f8:	b084      	sub	sp, #16
 81095fa:	af00      	add	r7, sp, #0
 81095fc:	6078      	str	r0, [r7, #4]
 81095fe:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8109600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8109604:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8109606:	683b      	ldr	r3, [r7, #0]
 8109608:	461a      	mov	r2, r3
 810960a:	2100      	movs	r1, #0
 810960c:	6878      	ldr	r0, [r7, #4]
 810960e:	f7ff ffb8 	bl	8109582 <metal_bitmap_next_clear_bit>
 8109612:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8109614:	683b      	ldr	r3, [r7, #0]
 8109616:	68ba      	ldr	r2, [r7, #8]
 8109618:	429a      	cmp	r2, r3
 810961a:	d206      	bcs.n	810962a <rpmsg_get_address+0x34>
		addr = nextbit;
 810961c:	68bb      	ldr	r3, [r7, #8]
 810961e:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8109620:	68bb      	ldr	r3, [r7, #8]
 8109622:	4619      	mov	r1, r3
 8109624:	6878      	ldr	r0, [r7, #4]
 8109626:	f7ff ff48 	bl	81094ba <metal_bitmap_set_bit>
	}

	return addr;
 810962a:	68fb      	ldr	r3, [r7, #12]
}
 810962c:	4618      	mov	r0, r3
 810962e:	3710      	adds	r7, #16
 8109630:	46bd      	mov	sp, r7
 8109632:	bd80      	pop	{r7, pc}

08109634 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8109634:	b580      	push	{r7, lr}
 8109636:	b084      	sub	sp, #16
 8109638:	af00      	add	r7, sp, #0
 810963a:	60f8      	str	r0, [r7, #12]
 810963c:	60b9      	str	r1, [r7, #8]
 810963e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8109640:	687a      	ldr	r2, [r7, #4]
 8109642:	68bb      	ldr	r3, [r7, #8]
 8109644:	429a      	cmp	r2, r3
 8109646:	da03      	bge.n	8109650 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8109648:	6879      	ldr	r1, [r7, #4]
 810964a:	68f8      	ldr	r0, [r7, #12]
 810964c:	f7ff ff69 	bl	8109522 <metal_bitmap_clear_bit>
}
 8109650:	bf00      	nop
 8109652:	3710      	adds	r7, #16
 8109654:	46bd      	mov	sp, r7
 8109656:	bd80      	pop	{r7, pc}

08109658 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8109658:	b580      	push	{r7, lr}
 810965a:	b084      	sub	sp, #16
 810965c:	af00      	add	r7, sp, #0
 810965e:	60f8      	str	r0, [r7, #12]
 8109660:	60b9      	str	r1, [r7, #8]
 8109662:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8109664:	687a      	ldr	r2, [r7, #4]
 8109666:	68bb      	ldr	r3, [r7, #8]
 8109668:	429a      	cmp	r2, r3
 810966a:	da05      	bge.n	8109678 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 810966c:	6879      	ldr	r1, [r7, #4]
 810966e:	68f8      	ldr	r0, [r7, #12]
 8109670:	f7ff ff3f 	bl	81094f2 <metal_bitmap_is_bit_set>
 8109674:	4603      	mov	r3, r0
 8109676:	e000      	b.n	810967a <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8109678:	4b02      	ldr	r3, [pc, #8]	@ (8109684 <rpmsg_is_address_set+0x2c>)
}
 810967a:	4618      	mov	r0, r3
 810967c:	3710      	adds	r7, #16
 810967e:	46bd      	mov	sp, r7
 8109680:	bd80      	pop	{r7, pc}
 8109682:	bf00      	nop
 8109684:	fffff82d 	.word	0xfffff82d

08109688 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8109688:	b580      	push	{r7, lr}
 810968a:	b084      	sub	sp, #16
 810968c:	af00      	add	r7, sp, #0
 810968e:	60f8      	str	r0, [r7, #12]
 8109690:	60b9      	str	r1, [r7, #8]
 8109692:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8109694:	687a      	ldr	r2, [r7, #4]
 8109696:	68bb      	ldr	r3, [r7, #8]
 8109698:	429a      	cmp	r2, r3
 810969a:	da05      	bge.n	81096a8 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 810969c:	6879      	ldr	r1, [r7, #4]
 810969e:	68f8      	ldr	r0, [r7, #12]
 81096a0:	f7ff ff0b 	bl	81094ba <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 81096a4:	2300      	movs	r3, #0
 81096a6:	e000      	b.n	81096aa <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 81096a8:	4b02      	ldr	r3, [pc, #8]	@ (81096b4 <rpmsg_set_address+0x2c>)
	}
}
 81096aa:	4618      	mov	r0, r3
 81096ac:	3710      	adds	r7, #16
 81096ae:	46bd      	mov	sp, r7
 81096b0:	bd80      	pop	{r7, pc}
 81096b2:	bf00      	nop
 81096b4:	fffff82d 	.word	0xfffff82d

081096b8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 81096b8:	b590      	push	{r4, r7, lr}
 81096ba:	b089      	sub	sp, #36	@ 0x24
 81096bc:	af02      	add	r7, sp, #8
 81096be:	60f8      	str	r0, [r7, #12]
 81096c0:	60b9      	str	r1, [r7, #8]
 81096c2:	607a      	str	r2, [r7, #4]
 81096c4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 81096c6:	68fb      	ldr	r3, [r7, #12]
 81096c8:	2b00      	cmp	r3, #0
 81096ca:	d00a      	beq.n	81096e2 <rpmsg_send_offchannel_raw+0x2a>
 81096cc:	68fb      	ldr	r3, [r7, #12]
 81096ce:	6a1b      	ldr	r3, [r3, #32]
 81096d0:	2b00      	cmp	r3, #0
 81096d2:	d006      	beq.n	81096e2 <rpmsg_send_offchannel_raw+0x2a>
 81096d4:	683b      	ldr	r3, [r7, #0]
 81096d6:	2b00      	cmp	r3, #0
 81096d8:	d003      	beq.n	81096e2 <rpmsg_send_offchannel_raw+0x2a>
 81096da:	687b      	ldr	r3, [r7, #4]
 81096dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81096e0:	d101      	bne.n	81096e6 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 81096e2:	4b0d      	ldr	r3, [pc, #52]	@ (8109718 <rpmsg_send_offchannel_raw+0x60>)
 81096e4:	e014      	b.n	8109710 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 81096e6:	68fb      	ldr	r3, [r7, #12]
 81096e8:	6a1b      	ldr	r3, [r3, #32]
 81096ea:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 81096ec:	697b      	ldr	r3, [r7, #20]
 81096ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81096f0:	2b00      	cmp	r3, #0
 81096f2:	d00c      	beq.n	810970e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 81096f4:	697b      	ldr	r3, [r7, #20]
 81096f6:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 81096f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81096fa:	9301      	str	r3, [sp, #4]
 81096fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81096fe:	9300      	str	r3, [sp, #0]
 8109700:	683b      	ldr	r3, [r7, #0]
 8109702:	687a      	ldr	r2, [r7, #4]
 8109704:	68b9      	ldr	r1, [r7, #8]
 8109706:	6978      	ldr	r0, [r7, #20]
 8109708:	47a0      	blx	r4
 810970a:	4603      	mov	r3, r0
 810970c:	e000      	b.n	8109710 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 810970e:	4b02      	ldr	r3, [pc, #8]	@ (8109718 <rpmsg_send_offchannel_raw+0x60>)
}
 8109710:	4618      	mov	r0, r3
 8109712:	371c      	adds	r7, #28
 8109714:	46bd      	mov	sp, r7
 8109716:	bd90      	pop	{r4, r7, pc}
 8109718:	fffff82d 	.word	0xfffff82d

0810971c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 810971c:	b580      	push	{r7, lr}
 810971e:	b090      	sub	sp, #64	@ 0x40
 8109720:	af02      	add	r7, sp, #8
 8109722:	6078      	str	r0, [r7, #4]
 8109724:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8109726:	683b      	ldr	r3, [r7, #0]
 8109728:	633b      	str	r3, [r7, #48]	@ 0x30
	ns_msg.addr = ept->addr;
 810972a:	687b      	ldr	r3, [r7, #4]
 810972c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810972e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8109730:	6879      	ldr	r1, [r7, #4]
 8109732:	f107 030c 	add.w	r3, r7, #12
 8109736:	2220      	movs	r2, #32
 8109738:	4618      	mov	r0, r3
 810973a:	f001 fc57 	bl	810afec <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 810973e:	687b      	ldr	r3, [r7, #4]
 8109740:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8109742:	f107 030c 	add.w	r3, r7, #12
 8109746:	2201      	movs	r2, #1
 8109748:	9201      	str	r2, [sp, #4]
 810974a:	2228      	movs	r2, #40	@ 0x28
 810974c:	9200      	str	r2, [sp, #0]
 810974e:	2235      	movs	r2, #53	@ 0x35
 8109750:	6878      	ldr	r0, [r7, #4]
 8109752:	f7ff ffb1 	bl	81096b8 <rpmsg_send_offchannel_raw>
 8109756:	6378      	str	r0, [r7, #52]	@ 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8109758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810975a:	2b00      	cmp	r3, #0
 810975c:	da01      	bge.n	8109762 <rpmsg_send_ns_message+0x46>
		return ret;
 810975e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109760:	e000      	b.n	8109764 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8109762:	2300      	movs	r3, #0
}
 8109764:	4618      	mov	r0, r3
 8109766:	3738      	adds	r7, #56	@ 0x38
 8109768:	46bd      	mov	sp, r7
 810976a:	bd80      	pop	{r7, pc}

0810976c <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 810976c:	b580      	push	{r7, lr}
 810976e:	b088      	sub	sp, #32
 8109770:	af00      	add	r7, sp, #0
 8109772:	60f8      	str	r0, [r7, #12]
 8109774:	60b9      	str	r1, [r7, #8]
 8109776:	607a      	str	r2, [r7, #4]
 8109778:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 810977a:	68fb      	ldr	r3, [r7, #12]
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	61fb      	str	r3, [r7, #28]
 8109780:	e04b      	b.n	810981a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8109782:	2300      	movs	r3, #0
 8109784:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8109786:	69fb      	ldr	r3, [r7, #28]
 8109788:	3b34      	subs	r3, #52	@ 0x34
 810978a:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109792:	d006      	beq.n	81097a2 <rpmsg_get_endpoint+0x36>
 8109794:	697b      	ldr	r3, [r7, #20]
 8109796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109798:	687a      	ldr	r2, [r7, #4]
 810979a:	429a      	cmp	r2, r3
 810979c:	d101      	bne.n	81097a2 <rpmsg_get_endpoint+0x36>
			return ept;
 810979e:	697b      	ldr	r3, [r7, #20]
 81097a0:	e040      	b.n	8109824 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 81097a2:	697b      	ldr	r3, [r7, #20]
 81097a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81097a6:	687a      	ldr	r2, [r7, #4]
 81097a8:	429a      	cmp	r2, r3
 81097aa:	d106      	bne.n	81097ba <rpmsg_get_endpoint+0x4e>
 81097ac:	697b      	ldr	r3, [r7, #20]
 81097ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81097b0:	683a      	ldr	r2, [r7, #0]
 81097b2:	429a      	cmp	r2, r3
 81097b4:	d101      	bne.n	81097ba <rpmsg_get_endpoint+0x4e>
			return ept;
 81097b6:	697b      	ldr	r3, [r7, #20]
 81097b8:	e034      	b.n	8109824 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 81097ba:	68bb      	ldr	r3, [r7, #8]
 81097bc:	2b00      	cmp	r3, #0
 81097be:	d00c      	beq.n	81097da <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 81097c0:	697b      	ldr	r3, [r7, #20]
 81097c2:	2220      	movs	r2, #32
 81097c4:	68b9      	ldr	r1, [r7, #8]
 81097c6:	4618      	mov	r0, r3
 81097c8:	f001 fbfe 	bl	810afc8 <strncmp>
 81097cc:	4603      	mov	r3, r0
 81097ce:	2b00      	cmp	r3, #0
 81097d0:	bf0c      	ite	eq
 81097d2:	2301      	moveq	r3, #1
 81097d4:	2300      	movne	r3, #0
 81097d6:	b2db      	uxtb	r3, r3
 81097d8:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 81097da:	68bb      	ldr	r3, [r7, #8]
 81097dc:	2b00      	cmp	r3, #0
 81097de:	d018      	beq.n	8109812 <rpmsg_get_endpoint+0xa6>
 81097e0:	69bb      	ldr	r3, [r7, #24]
 81097e2:	2b00      	cmp	r3, #0
 81097e4:	d015      	beq.n	8109812 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 81097e6:	683b      	ldr	r3, [r7, #0]
 81097e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81097ec:	d006      	beq.n	81097fc <rpmsg_get_endpoint+0x90>
 81097ee:	697b      	ldr	r3, [r7, #20]
 81097f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81097f2:	683a      	ldr	r2, [r7, #0]
 81097f4:	429a      	cmp	r2, r3
 81097f6:	d101      	bne.n	81097fc <rpmsg_get_endpoint+0x90>
			return ept;
 81097f8:	697b      	ldr	r3, [r7, #20]
 81097fa:	e013      	b.n	8109824 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 81097fc:	687b      	ldr	r3, [r7, #4]
 81097fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109802:	d107      	bne.n	8109814 <rpmsg_get_endpoint+0xa8>
 8109804:	697b      	ldr	r3, [r7, #20]
 8109806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810980c:	d102      	bne.n	8109814 <rpmsg_get_endpoint+0xa8>
			return ept;
 810980e:	697b      	ldr	r3, [r7, #20]
 8109810:	e008      	b.n	8109824 <rpmsg_get_endpoint+0xb8>
			continue;
 8109812:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8109814:	69fb      	ldr	r3, [r7, #28]
 8109816:	681b      	ldr	r3, [r3, #0]
 8109818:	61fb      	str	r3, [r7, #28]
 810981a:	68fb      	ldr	r3, [r7, #12]
 810981c:	69fa      	ldr	r2, [r7, #28]
 810981e:	429a      	cmp	r2, r3
 8109820:	d1af      	bne.n	8109782 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8109822:	2300      	movs	r3, #0
}
 8109824:	4618      	mov	r0, r3
 8109826:	3720      	adds	r7, #32
 8109828:	46bd      	mov	sp, r7
 810982a:	bd80      	pop	{r7, pc}

0810982c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 810982c:	b580      	push	{r7, lr}
 810982e:	b084      	sub	sp, #16
 8109830:	af00      	add	r7, sp, #0
 8109832:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8109834:	687b      	ldr	r3, [r7, #4]
 8109836:	2b00      	cmp	r3, #0
 8109838:	d016      	beq.n	8109868 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 810983a:	687b      	ldr	r3, [r7, #4]
 810983c:	6a1b      	ldr	r3, [r3, #32]
 810983e:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8109840:	687b      	ldr	r3, [r7, #4]
 8109842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109844:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109848:	d008      	beq.n	810985c <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 810984a:	68fb      	ldr	r3, [r7, #12]
 810984c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
				      ept->addr);
 8109850:	687b      	ldr	r3, [r7, #4]
 8109852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8109854:	461a      	mov	r2, r3
 8109856:	2180      	movs	r1, #128	@ 0x80
 8109858:	f7ff feec 	bl	8109634 <rpmsg_release_address>
	metal_list_del(&ept->node);
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	3334      	adds	r3, #52	@ 0x34
 8109860:	4618      	mov	r0, r3
 8109862:	f7ff fe0f 	bl	8109484 <metal_list_del>
 8109866:	e000      	b.n	810986a <rpmsg_unregister_endpoint+0x3e>
		return;
 8109868:	bf00      	nop
}
 810986a:	3710      	adds	r7, #16
 810986c:	46bd      	mov	sp, r7
 810986e:	bd80      	pop	{r7, pc}

08109870 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8109870:	b580      	push	{r7, lr}
 8109872:	b082      	sub	sp, #8
 8109874:	af00      	add	r7, sp, #0
 8109876:	6078      	str	r0, [r7, #4]
 8109878:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 810987a:	683b      	ldr	r3, [r7, #0]
 810987c:	687a      	ldr	r2, [r7, #4]
 810987e:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8109880:	687a      	ldr	r2, [r7, #4]
 8109882:	683b      	ldr	r3, [r7, #0]
 8109884:	3334      	adds	r3, #52	@ 0x34
 8109886:	4619      	mov	r1, r3
 8109888:	4610      	mov	r0, r2
 810988a:	f7ff fdee 	bl	810946a <metal_list_add_tail>
	return RPMSG_SUCCESS;
 810988e:	2300      	movs	r3, #0
}
 8109890:	4618      	mov	r0, r3
 8109892:	3708      	adds	r7, #8
 8109894:	46bd      	mov	sp, r7
 8109896:	bd80      	pop	{r7, pc}

08109898 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8109898:	b580      	push	{r7, lr}
 810989a:	b088      	sub	sp, #32
 810989c:	af02      	add	r7, sp, #8
 810989e:	60f8      	str	r0, [r7, #12]
 81098a0:	60b9      	str	r1, [r7, #8]
 81098a2:	607a      	str	r2, [r7, #4]
 81098a4:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 81098a6:	683b      	ldr	r3, [r7, #0]
 81098a8:	613b      	str	r3, [r7, #16]

	if (!ept)
 81098aa:	68fb      	ldr	r3, [r7, #12]
 81098ac:	2b00      	cmp	r3, #0
 81098ae:	d101      	bne.n	81098b4 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 81098b0:	4b37      	ldr	r3, [pc, #220]	@ (8109990 <rpmsg_create_ept+0xf8>)
 81098b2:	e068      	b.n	8109986 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 81098b4:	68bb      	ldr	r3, [r7, #8]
 81098b6:	3358      	adds	r3, #88	@ 0x58
 81098b8:	4618      	mov	r0, r3
 81098ba:	f7ff fda6 	bl	810940a <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 81098be:	683b      	ldr	r3, [r7, #0]
 81098c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81098c4:	d018      	beq.n	81098f8 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 81098c6:	68bb      	ldr	r3, [r7, #8]
 81098c8:	3348      	adds	r3, #72	@ 0x48
 81098ca:	683a      	ldr	r2, [r7, #0]
 81098cc:	2180      	movs	r1, #128	@ 0x80
 81098ce:	4618      	mov	r0, r3
 81098d0:	f7ff fec2 	bl	8109658 <rpmsg_is_address_set>
 81098d4:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 81098d6:	697b      	ldr	r3, [r7, #20]
 81098d8:	2b00      	cmp	r3, #0
 81098da:	d107      	bne.n	81098ec <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 81098dc:	68bb      	ldr	r3, [r7, #8]
 81098de:	3348      	adds	r3, #72	@ 0x48
 81098e0:	683a      	ldr	r2, [r7, #0]
 81098e2:	2180      	movs	r1, #128	@ 0x80
 81098e4:	4618      	mov	r0, r3
 81098e6:	f7ff fecf 	bl	8109688 <rpmsg_set_address>
 81098ea:	e00c      	b.n	8109906 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 81098ec:	697b      	ldr	r3, [r7, #20]
 81098ee:	2b00      	cmp	r3, #0
 81098f0:	dd40      	ble.n	8109974 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 81098f2:	2300      	movs	r3, #0
 81098f4:	617b      	str	r3, [r7, #20]
			goto ret_status;
 81098f6:	e040      	b.n	810997a <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 81098f8:	68bb      	ldr	r3, [r7, #8]
 81098fa:	3348      	adds	r3, #72	@ 0x48
 81098fc:	2180      	movs	r1, #128	@ 0x80
 81098fe:	4618      	mov	r0, r3
 8109900:	f7ff fe79 	bl	81095f6 <rpmsg_get_address>
 8109904:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8109906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109908:	9301      	str	r3, [sp, #4]
 810990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810990c:	9300      	str	r3, [sp, #0]
 810990e:	6a3b      	ldr	r3, [r7, #32]
 8109910:	693a      	ldr	r2, [r7, #16]
 8109912:	6879      	ldr	r1, [r7, #4]
 8109914:	68f8      	ldr	r0, [r7, #12]
 8109916:	f7ff fe51 	bl	81095bc <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 810991a:	68f9      	ldr	r1, [r7, #12]
 810991c:	68b8      	ldr	r0, [r7, #8]
 810991e:	f7ff ffa7 	bl	8109870 <rpmsg_register_endpoint>
 8109922:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8109924:	697b      	ldr	r3, [r7, #20]
 8109926:	2b00      	cmp	r3, #0
 8109928:	da06      	bge.n	8109938 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 810992a:	68bb      	ldr	r3, [r7, #8]
 810992c:	3348      	adds	r3, #72	@ 0x48
 810992e:	693a      	ldr	r2, [r7, #16]
 8109930:	2180      	movs	r1, #128	@ 0x80
 8109932:	4618      	mov	r0, r3
 8109934:	f7ff fe7e 	bl	8109634 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8109938:	697b      	ldr	r3, [r7, #20]
 810993a:	2b00      	cmp	r3, #0
 810993c:	d11c      	bne.n	8109978 <rpmsg_create_ept+0xe0>
 810993e:	68fb      	ldr	r3, [r7, #12]
 8109940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109946:	d117      	bne.n	8109978 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8109948:	68bb      	ldr	r3, [r7, #8]
 810994a:	3358      	adds	r3, #88	@ 0x58
 810994c:	4618      	mov	r0, r3
 810994e:	f7ff fd67 	bl	8109420 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8109952:	2100      	movs	r1, #0
 8109954:	68f8      	ldr	r0, [r7, #12]
 8109956:	f7ff fee1 	bl	810971c <rpmsg_send_ns_message>
 810995a:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 810995c:	68bb      	ldr	r3, [r7, #8]
 810995e:	3358      	adds	r3, #88	@ 0x58
 8109960:	4618      	mov	r0, r3
 8109962:	f7ff fd52 	bl	810940a <metal_mutex_acquire>
		if (status)
 8109966:	697b      	ldr	r3, [r7, #20]
 8109968:	2b00      	cmp	r3, #0
 810996a:	d005      	beq.n	8109978 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 810996c:	68f8      	ldr	r0, [r7, #12]
 810996e:	f7ff ff5d 	bl	810982c <rpmsg_unregister_endpoint>
 8109972:	e002      	b.n	810997a <rpmsg_create_ept+0xe2>
			goto ret_status;
 8109974:	bf00      	nop
 8109976:	e000      	b.n	810997a <rpmsg_create_ept+0xe2>
	}

ret_status:
 8109978:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 810997a:	68bb      	ldr	r3, [r7, #8]
 810997c:	3358      	adds	r3, #88	@ 0x58
 810997e:	4618      	mov	r0, r3
 8109980:	f7ff fd4e 	bl	8109420 <metal_mutex_release>
	return status;
 8109984:	697b      	ldr	r3, [r7, #20]
}
 8109986:	4618      	mov	r0, r3
 8109988:	3718      	adds	r7, #24
 810998a:	46bd      	mov	sp, r7
 810998c:	bd80      	pop	{r7, pc}
 810998e:	bf00      	nop
 8109990:	fffff82d 	.word	0xfffff82d

08109994 <__metal_cache_invalidate>:
{
 8109994:	b580      	push	{r7, lr}
 8109996:	b082      	sub	sp, #8
 8109998:	af00      	add	r7, sp, #0
 810999a:	6078      	str	r0, [r7, #4]
 810999c:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 810999e:	6839      	ldr	r1, [r7, #0]
 81099a0:	6878      	ldr	r0, [r7, #4]
 81099a2:	f000 fc58 	bl	810a256 <metal_machine_cache_invalidate>
}
 81099a6:	bf00      	nop
 81099a8:	3708      	adds	r7, #8
 81099aa:	46bd      	mov	sp, r7
 81099ac:	bd80      	pop	{r7, pc}

081099ae <metal_cache_invalidate>:
{
 81099ae:	b580      	push	{r7, lr}
 81099b0:	b082      	sub	sp, #8
 81099b2:	af00      	add	r7, sp, #0
 81099b4:	6078      	str	r0, [r7, #4]
 81099b6:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 81099b8:	6839      	ldr	r1, [r7, #0]
 81099ba:	6878      	ldr	r0, [r7, #4]
 81099bc:	f7ff ffea 	bl	8109994 <__metal_cache_invalidate>
}
 81099c0:	bf00      	nop
 81099c2:	3708      	adds	r7, #8
 81099c4:	46bd      	mov	sp, r7
 81099c6:	bd80      	pop	{r7, pc}

081099c8 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 81099c8:	b480      	push	{r7}
 81099ca:	b083      	sub	sp, #12
 81099cc:	af00      	add	r7, sp, #0
 81099ce:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 81099d0:	2300      	movs	r3, #0
}
 81099d2:	4618      	mov	r0, r3
 81099d4:	370c      	adds	r7, #12
 81099d6:	46bd      	mov	sp, r7
 81099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099dc:	4770      	bx	lr

081099de <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 81099de:	b580      	push	{r7, lr}
 81099e0:	b082      	sub	sp, #8
 81099e2:	af00      	add	r7, sp, #0
 81099e4:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 81099e6:	6878      	ldr	r0, [r7, #4]
 81099e8:	f7ff ffee 	bl	81099c8 <__metal_sleep_usec>
 81099ec:	4603      	mov	r3, r0
}
 81099ee:	4618      	mov	r0, r3
 81099f0:	3708      	adds	r7, #8
 81099f2:	46bd      	mov	sp, r7
 81099f4:	bd80      	pop	{r7, pc}

081099f6 <metal_list_init>:
{
 81099f6:	b480      	push	{r7}
 81099f8:	b083      	sub	sp, #12
 81099fa:	af00      	add	r7, sp, #0
 81099fc:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81099fe:	687b      	ldr	r3, [r7, #4]
 8109a00:	687a      	ldr	r2, [r7, #4]
 8109a02:	605a      	str	r2, [r3, #4]
 8109a04:	687b      	ldr	r3, [r7, #4]
 8109a06:	685a      	ldr	r2, [r3, #4]
 8109a08:	687b      	ldr	r3, [r7, #4]
 8109a0a:	601a      	str	r2, [r3, #0]
}
 8109a0c:	bf00      	nop
 8109a0e:	370c      	adds	r7, #12
 8109a10:	46bd      	mov	sp, r7
 8109a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a16:	4770      	bx	lr

08109a18 <metal_io_virt_to_offset>:
{
 8109a18:	b480      	push	{r7}
 8109a1a:	b085      	sub	sp, #20
 8109a1c:	af00      	add	r7, sp, #0
 8109a1e:	6078      	str	r0, [r7, #4]
 8109a20:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8109a22:	687b      	ldr	r3, [r7, #4]
 8109a24:	681b      	ldr	r3, [r3, #0]
 8109a26:	683a      	ldr	r2, [r7, #0]
 8109a28:	1ad3      	subs	r3, r2, r3
 8109a2a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8109a2c:	687b      	ldr	r3, [r7, #4]
 8109a2e:	689b      	ldr	r3, [r3, #8]
 8109a30:	68fa      	ldr	r2, [r7, #12]
 8109a32:	429a      	cmp	r2, r3
 8109a34:	d201      	bcs.n	8109a3a <metal_io_virt_to_offset+0x22>
 8109a36:	68fb      	ldr	r3, [r7, #12]
 8109a38:	e001      	b.n	8109a3e <metal_io_virt_to_offset+0x26>
 8109a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8109a3e:	4618      	mov	r0, r3
 8109a40:	3714      	adds	r7, #20
 8109a42:	46bd      	mov	sp, r7
 8109a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a48:	4770      	bx	lr

08109a4a <__metal_mutex_init>:
{
 8109a4a:	b480      	push	{r7}
 8109a4c:	b085      	sub	sp, #20
 8109a4e:	af00      	add	r7, sp, #0
 8109a50:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8109a52:	687b      	ldr	r3, [r7, #4]
 8109a54:	60fb      	str	r3, [r7, #12]
 8109a56:	2300      	movs	r3, #0
 8109a58:	60bb      	str	r3, [r7, #8]
 8109a5a:	68bb      	ldr	r3, [r7, #8]
 8109a5c:	461a      	mov	r2, r3
 8109a5e:	68fb      	ldr	r3, [r7, #12]
 8109a60:	f3bf 8f5b 	dmb	ish
 8109a64:	601a      	str	r2, [r3, #0]
 8109a66:	f3bf 8f5b 	dmb	ish
}
 8109a6a:	bf00      	nop
 8109a6c:	3714      	adds	r7, #20
 8109a6e:	46bd      	mov	sp, r7
 8109a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a74:	4770      	bx	lr

08109a76 <__metal_mutex_acquire>:
{
 8109a76:	b480      	push	{r7}
 8109a78:	b083      	sub	sp, #12
 8109a7a:	af00      	add	r7, sp, #0
 8109a7c:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8109a7e:	bf00      	nop
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	2201      	movs	r2, #1
 8109a84:	4611      	mov	r1, r2
 8109a86:	f3bf 8f5b 	dmb	ish
 8109a8a:	e8d3 2f4f 	ldrexb	r2, [r3]
 8109a8e:	e8c3 1f40 	strexb	r0, r1, [r3]
 8109a92:	2800      	cmp	r0, #0
 8109a94:	d1f9      	bne.n	8109a8a <__metal_mutex_acquire+0x14>
 8109a96:	f3bf 8f5b 	dmb	ish
 8109a9a:	b2d3      	uxtb	r3, r2
 8109a9c:	2b00      	cmp	r3, #0
 8109a9e:	d1ef      	bne.n	8109a80 <__metal_mutex_acquire+0xa>
}
 8109aa0:	bf00      	nop
 8109aa2:	bf00      	nop
 8109aa4:	370c      	adds	r7, #12
 8109aa6:	46bd      	mov	sp, r7
 8109aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109aac:	4770      	bx	lr

08109aae <__metal_mutex_release>:
{
 8109aae:	b480      	push	{r7}
 8109ab0:	b083      	sub	sp, #12
 8109ab2:	af00      	add	r7, sp, #0
 8109ab4:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8109ab6:	687b      	ldr	r3, [r7, #4]
 8109ab8:	f3bf 8f5b 	dmb	ish
 8109abc:	2200      	movs	r2, #0
 8109abe:	701a      	strb	r2, [r3, #0]
 8109ac0:	f3bf 8f5b 	dmb	ish
}
 8109ac4:	bf00      	nop
 8109ac6:	370c      	adds	r7, #12
 8109ac8:	46bd      	mov	sp, r7
 8109aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ace:	4770      	bx	lr

08109ad0 <metal_mutex_init>:
{
 8109ad0:	b580      	push	{r7, lr}
 8109ad2:	b082      	sub	sp, #8
 8109ad4:	af00      	add	r7, sp, #0
 8109ad6:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8109ad8:	6878      	ldr	r0, [r7, #4]
 8109ada:	f7ff ffb6 	bl	8109a4a <__metal_mutex_init>
}
 8109ade:	bf00      	nop
 8109ae0:	3708      	adds	r7, #8
 8109ae2:	46bd      	mov	sp, r7
 8109ae4:	bd80      	pop	{r7, pc}

08109ae6 <metal_mutex_acquire>:
{
 8109ae6:	b580      	push	{r7, lr}
 8109ae8:	b082      	sub	sp, #8
 8109aea:	af00      	add	r7, sp, #0
 8109aec:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8109aee:	6878      	ldr	r0, [r7, #4]
 8109af0:	f7ff ffc1 	bl	8109a76 <__metal_mutex_acquire>
}
 8109af4:	bf00      	nop
 8109af6:	3708      	adds	r7, #8
 8109af8:	46bd      	mov	sp, r7
 8109afa:	bd80      	pop	{r7, pc}

08109afc <metal_mutex_release>:
{
 8109afc:	b580      	push	{r7, lr}
 8109afe:	b082      	sub	sp, #8
 8109b00:	af00      	add	r7, sp, #0
 8109b02:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8109b04:	6878      	ldr	r0, [r7, #4]
 8109b06:	f7ff ffd2 	bl	8109aae <__metal_mutex_release>
}
 8109b0a:	bf00      	nop
 8109b0c:	3708      	adds	r7, #8
 8109b0e:	46bd      	mov	sp, r7
 8109b10:	bd80      	pop	{r7, pc}

08109b12 <rpmsg_init_ept>:
{
 8109b12:	b580      	push	{r7, lr}
 8109b14:	b084      	sub	sp, #16
 8109b16:	af00      	add	r7, sp, #0
 8109b18:	60f8      	str	r0, [r7, #12]
 8109b1a:	60b9      	str	r1, [r7, #8]
 8109b1c:	607a      	str	r2, [r7, #4]
 8109b1e:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8109b20:	68fb      	ldr	r3, [r7, #12]
 8109b22:	2220      	movs	r2, #32
 8109b24:	68b9      	ldr	r1, [r7, #8]
 8109b26:	4618      	mov	r0, r3
 8109b28:	f001 fa60 	bl	810afec <strncpy>
	ept->addr = src;
 8109b2c:	68fb      	ldr	r3, [r7, #12]
 8109b2e:	687a      	ldr	r2, [r7, #4]
 8109b30:	625a      	str	r2, [r3, #36]	@ 0x24
	ept->dest_addr = dest;
 8109b32:	68fb      	ldr	r3, [r7, #12]
 8109b34:	683a      	ldr	r2, [r7, #0]
 8109b36:	629a      	str	r2, [r3, #40]	@ 0x28
	ept->cb = cb;
 8109b38:	68fb      	ldr	r3, [r7, #12]
 8109b3a:	69ba      	ldr	r2, [r7, #24]
 8109b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8109b3e:	68fb      	ldr	r3, [r7, #12]
 8109b40:	69fa      	ldr	r2, [r7, #28]
 8109b42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8109b44:	bf00      	nop
 8109b46:	3710      	adds	r7, #16
 8109b48:	46bd      	mov	sp, r7
 8109b4a:	bd80      	pop	{r7, pc}

08109b4c <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8109b4c:	b480      	push	{r7}
 8109b4e:	b083      	sub	sp, #12
 8109b50:	af00      	add	r7, sp, #0
 8109b52:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8109b54:	687b      	ldr	r3, [r7, #4]
 8109b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109b58:	699b      	ldr	r3, [r3, #24]
}
 8109b5a:	4618      	mov	r0, r3
 8109b5c:	370c      	adds	r7, #12
 8109b5e:	46bd      	mov	sp, r7
 8109b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b64:	4770      	bx	lr

08109b66 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8109b66:	b580      	push	{r7, lr}
 8109b68:	b082      	sub	sp, #8
 8109b6a:	af00      	add	r7, sp, #0
 8109b6c:	6078      	str	r0, [r7, #4]
 8109b6e:	460b      	mov	r3, r1
 8109b70:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109b76:	6a1b      	ldr	r3, [r3, #32]
 8109b78:	685b      	ldr	r3, [r3, #4]
 8109b7a:	687a      	ldr	r2, [r7, #4]
 8109b7c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109b7e:	78f9      	ldrb	r1, [r7, #3]
 8109b80:	4610      	mov	r0, r2
 8109b82:	4798      	blx	r3
}
 8109b84:	bf00      	nop
 8109b86:	3708      	adds	r7, #8
 8109b88:	46bd      	mov	sp, r7
 8109b8a:	bd80      	pop	{r7, pc}

08109b8c <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8109b8c:	b580      	push	{r7, lr}
 8109b8e:	b082      	sub	sp, #8
 8109b90:	af00      	add	r7, sp, #0
 8109b92:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8109b94:	687b      	ldr	r3, [r7, #4]
 8109b96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109b98:	6a1b      	ldr	r3, [r3, #32]
 8109b9a:	681b      	ldr	r3, [r3, #0]
 8109b9c:	687a      	ldr	r2, [r7, #4]
 8109b9e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109ba0:	4610      	mov	r0, r2
 8109ba2:	4798      	blx	r3
 8109ba4:	4603      	mov	r3, r0
}
 8109ba6:	4618      	mov	r0, r3
 8109ba8:	3708      	adds	r7, #8
 8109baa:	46bd      	mov	sp, r7
 8109bac:	bd80      	pop	{r7, pc}

08109bae <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8109bae:	b580      	push	{r7, lr}
 8109bb0:	b082      	sub	sp, #8
 8109bb2:	af00      	add	r7, sp, #0
 8109bb4:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8109bb6:	687b      	ldr	r3, [r7, #4]
 8109bb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109bba:	6a1b      	ldr	r3, [r3, #32]
 8109bbc:	689b      	ldr	r3, [r3, #8]
 8109bbe:	687a      	ldr	r2, [r7, #4]
 8109bc0:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109bc2:	4610      	mov	r0, r2
 8109bc4:	4798      	blx	r3
 8109bc6:	4603      	mov	r3, r0
}
 8109bc8:	4618      	mov	r0, r3
 8109bca:	3708      	adds	r7, #8
 8109bcc:	46bd      	mov	sp, r7
 8109bce:	bd80      	pop	{r7, pc}

08109bd0 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8109bd0:	b580      	push	{r7, lr}
 8109bd2:	b086      	sub	sp, #24
 8109bd4:	af02      	add	r7, sp, #8
 8109bd6:	60f8      	str	r0, [r7, #12]
 8109bd8:	60b9      	str	r1, [r7, #8]
 8109bda:	607a      	str	r2, [r7, #4]
 8109bdc:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8109bde:	68fb      	ldr	r3, [r7, #12]
 8109be0:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8109be2:	68b9      	ldr	r1, [r7, #8]
 8109be4:	69bb      	ldr	r3, [r7, #24]
 8109be6:	9300      	str	r3, [sp, #0]
 8109be8:	683b      	ldr	r3, [r7, #0]
 8109bea:	687a      	ldr	r2, [r7, #4]
 8109bec:	f000 fb4c 	bl	810a288 <virtio_create_virtqueues>
 8109bf0:	4603      	mov	r3, r0
					callbacks);
}
 8109bf2:	4618      	mov	r0, r3
 8109bf4:	3710      	adds	r7, #16
 8109bf6:	46bd      	mov	sp, r7
 8109bf8:	bd80      	pop	{r7, pc}

08109bfa <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8109bfa:	b580      	push	{r7, lr}
 8109bfc:	b082      	sub	sp, #8
 8109bfe:	af00      	add	r7, sp, #0
 8109c00:	6078      	str	r0, [r7, #4]
 8109c02:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8109c04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8109c08:	683a      	ldr	r2, [r7, #0]
 8109c0a:	2100      	movs	r1, #0
 8109c0c:	6878      	ldr	r0, [r7, #4]
 8109c0e:	f7ff fdad 	bl	810976c <rpmsg_get_endpoint>
 8109c12:	4603      	mov	r3, r0
}
 8109c14:	4618      	mov	r0, r3
 8109c16:	3708      	adds	r7, #8
 8109c18:	46bd      	mov	sp, r7
 8109c1a:	bd80      	pop	{r7, pc}

08109c1c <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8109c1c:	b480      	push	{r7}
 8109c1e:	b085      	sub	sp, #20
 8109c20:	af00      	add	r7, sp, #0
 8109c22:	60f8      	str	r0, [r7, #12]
 8109c24:	60b9      	str	r1, [r7, #8]
 8109c26:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8109c28:	68fb      	ldr	r3, [r7, #12]
 8109c2a:	2b00      	cmp	r3, #0
 8109c2c:	d01d      	beq.n	8109c6a <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8109c2e:	68fb      	ldr	r3, [r7, #12]
 8109c30:	68ba      	ldr	r2, [r7, #8]
 8109c32:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8109c34:	687b      	ldr	r3, [r7, #4]
 8109c36:	f003 0303 	and.w	r3, r3, #3
 8109c3a:	2b00      	cmp	r3, #0
 8109c3c:	d004      	beq.n	8109c48 <rpmsg_virtio_init_shm_pool+0x2c>
 8109c3e:	687b      	ldr	r3, [r7, #4]
 8109c40:	f023 0303 	bic.w	r3, r3, #3
 8109c44:	3304      	adds	r3, #4
 8109c46:	e000      	b.n	8109c4a <rpmsg_virtio_init_shm_pool+0x2e>
 8109c48:	687b      	ldr	r3, [r7, #4]
 8109c4a:	68fa      	ldr	r2, [r7, #12]
 8109c4c:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8109c4e:	687b      	ldr	r3, [r7, #4]
 8109c50:	f003 0303 	and.w	r3, r3, #3
 8109c54:	2b00      	cmp	r3, #0
 8109c56:	d004      	beq.n	8109c62 <rpmsg_virtio_init_shm_pool+0x46>
 8109c58:	687b      	ldr	r3, [r7, #4]
 8109c5a:	f023 0303 	bic.w	r3, r3, #3
 8109c5e:	3304      	adds	r3, #4
 8109c60:	e000      	b.n	8109c64 <rpmsg_virtio_init_shm_pool+0x48>
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	68fa      	ldr	r2, [r7, #12]
 8109c66:	6053      	str	r3, [r2, #4]
 8109c68:	e000      	b.n	8109c6c <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8109c6a:	bf00      	nop
}
 8109c6c:	3714      	adds	r7, #20
 8109c6e:	46bd      	mov	sp, r7
 8109c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c74:	4770      	bx	lr

08109c76 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8109c76:	b580      	push	{r7, lr}
 8109c78:	b086      	sub	sp, #24
 8109c7a:	af00      	add	r7, sp, #0
 8109c7c:	60f8      	str	r0, [r7, #12]
 8109c7e:	60b9      	str	r1, [r7, #8]
 8109c80:	607a      	str	r2, [r7, #4]
 8109c82:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109c84:	68f8      	ldr	r0, [r7, #12]
 8109c86:	f7ff ff61 	bl	8109b4c <rpmsg_virtio_get_role>
 8109c8a:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109c8c:	697b      	ldr	r3, [r7, #20]
 8109c8e:	2b01      	cmp	r3, #1
 8109c90:	d106      	bne.n	8109ca0 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8109c92:	68fb      	ldr	r3, [r7, #12]
 8109c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109c96:	8879      	ldrh	r1, [r7, #2]
 8109c98:	687a      	ldr	r2, [r7, #4]
 8109c9a:	4618      	mov	r0, r3
 8109c9c:	f000 fc9e 	bl	810a5dc <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8109ca0:	bf00      	nop
 8109ca2:	3718      	adds	r7, #24
 8109ca4:	46bd      	mov	sp, r7
 8109ca6:	bd80      	pop	{r7, pc}

08109ca8 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8109ca8:	b580      	push	{r7, lr}
 8109caa:	b086      	sub	sp, #24
 8109cac:	af00      	add	r7, sp, #0
 8109cae:	60f8      	str	r0, [r7, #12]
 8109cb0:	60b9      	str	r1, [r7, #8]
 8109cb2:	607a      	str	r2, [r7, #4]
 8109cb4:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109cb6:	68f8      	ldr	r0, [r7, #12]
 8109cb8:	f7ff ff48 	bl	8109b4c <rpmsg_virtio_get_role>
 8109cbc:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109cbe:	697b      	ldr	r3, [r7, #20]
 8109cc0:	2b01      	cmp	r3, #1
 8109cc2:	d108      	bne.n	8109cd6 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8109cc4:	68fb      	ldr	r3, [r7, #12]
 8109cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109cc8:	8879      	ldrh	r1, [r7, #2]
 8109cca:	687a      	ldr	r2, [r7, #4]
 8109ccc:	4618      	mov	r0, r3
 8109cce:	f000 fc85 	bl	810a5dc <virtqueue_add_consumed_buffer>
 8109cd2:	4603      	mov	r3, r0
 8109cd4:	e000      	b.n	8109cd8 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8109cd6:	2300      	movs	r3, #0
}
 8109cd8:	4618      	mov	r0, r3
 8109cda:	3718      	adds	r7, #24
 8109cdc:	46bd      	mov	sp, r7
 8109cde:	bd80      	pop	{r7, pc}

08109ce0 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8109ce0:	b580      	push	{r7, lr}
 8109ce2:	b086      	sub	sp, #24
 8109ce4:	af00      	add	r7, sp, #0
 8109ce6:	60f8      	str	r0, [r7, #12]
 8109ce8:	60b9      	str	r1, [r7, #8]
 8109cea:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109cec:	68f8      	ldr	r0, [r7, #12]
 8109cee:	f7ff ff2d 	bl	8109b4c <rpmsg_virtio_get_role>
 8109cf2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8109cf4:	2300      	movs	r3, #0
 8109cf6:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109cf8:	693b      	ldr	r3, [r7, #16]
 8109cfa:	2b01      	cmp	r3, #1
 8109cfc:	d107      	bne.n	8109d0e <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 8109cfe:	68fb      	ldr	r3, [r7, #12]
 8109d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109d02:	68ba      	ldr	r2, [r7, #8]
 8109d04:	6879      	ldr	r1, [r7, #4]
 8109d06:	4618      	mov	r0, r3
 8109d08:	f000 fc22 	bl	810a550 <virtqueue_get_available_buffer>
 8109d0c:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8109d0e:	697b      	ldr	r3, [r7, #20]
}
 8109d10:	4618      	mov	r0, r3
 8109d12:	3718      	adds	r7, #24
 8109d14:	46bd      	mov	sp, r7
 8109d16:	bd80      	pop	{r7, pc}

08109d18 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8109d18:	b580      	push	{r7, lr}
 8109d1a:	b086      	sub	sp, #24
 8109d1c:	af00      	add	r7, sp, #0
 8109d1e:	60f8      	str	r0, [r7, #12]
 8109d20:	60b9      	str	r1, [r7, #8]
 8109d22:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109d24:	68f8      	ldr	r0, [r7, #12]
 8109d26:	f7ff ff11 	bl	8109b4c <rpmsg_virtio_get_role>
 8109d2a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8109d2c:	2300      	movs	r3, #0
 8109d2e:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109d30:	693b      	ldr	r3, [r7, #16]
 8109d32:	2b01      	cmp	r3, #1
 8109d34:	d107      	bne.n	8109d46 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8109d36:	68fb      	ldr	r3, [r7, #12]
 8109d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109d3a:	68ba      	ldr	r2, [r7, #8]
 8109d3c:	6879      	ldr	r1, [r7, #4]
 8109d3e:	4618      	mov	r0, r3
 8109d40:	f000 fc06 	bl	810a550 <virtqueue_get_available_buffer>
 8109d44:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8109d46:	697b      	ldr	r3, [r7, #20]
 8109d48:	2b00      	cmp	r3, #0
 8109d4a:	d005      	beq.n	8109d58 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8109d4c:	68bb      	ldr	r3, [r7, #8]
 8109d4e:	681b      	ldr	r3, [r3, #0]
 8109d50:	4619      	mov	r1, r3
 8109d52:	6978      	ldr	r0, [r7, #20]
 8109d54:	f7ff fe2b 	bl	81099ae <metal_cache_invalidate>
	}

	return data;
 8109d58:	697b      	ldr	r3, [r7, #20]
}
 8109d5a:	4618      	mov	r0, r3
 8109d5c:	3718      	adds	r7, #24
 8109d5e:	46bd      	mov	sp, r7
 8109d60:	bd80      	pop	{r7, pc}

08109d62 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8109d62:	b580      	push	{r7, lr}
 8109d64:	b084      	sub	sp, #16
 8109d66:	af00      	add	r7, sp, #0
 8109d68:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 8109d6a:	6878      	ldr	r0, [r7, #4]
 8109d6c:	f7ff ff0e 	bl	8109b8c <rpmsg_virtio_get_status>
 8109d70:	4603      	mov	r3, r0
 8109d72:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8109d74:	7bfb      	ldrb	r3, [r7, #15]
 8109d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109d7a:	2b00      	cmp	r3, #0
 8109d7c:	d004      	beq.n	8109d88 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8109d7e:	2100      	movs	r1, #0
 8109d80:	6878      	ldr	r0, [r7, #4]
 8109d82:	f7ff fef0 	bl	8109b66 <rpmsg_virtio_set_status>
 8109d86:	e7f0      	b.n	8109d6a <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8109d88:	7bfb      	ldrb	r3, [r7, #15]
 8109d8a:	f003 0304 	and.w	r3, r3, #4
 8109d8e:	2b00      	cmp	r3, #0
 8109d90:	d0eb      	beq.n	8109d6a <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8109d92:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8109d94:	4618      	mov	r0, r3
 8109d96:	3710      	adds	r7, #16
 8109d98:	46bd      	mov	sp, r7
 8109d9a:	bd80      	pop	{r7, pc}

08109d9c <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8109d9c:	b580      	push	{r7, lr}
 8109d9e:	b084      	sub	sp, #16
 8109da0:	af00      	add	r7, sp, #0
 8109da2:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109da4:	6878      	ldr	r0, [r7, #4]
 8109da6:	f7ff fed1 	bl	8109b4c <rpmsg_virtio_get_role>
 8109daa:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8109dac:	2300      	movs	r3, #0
 8109dae:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109db0:	68bb      	ldr	r3, [r7, #8]
 8109db2:	2b01      	cmp	r3, #1
 8109db4:	d107      	bne.n	8109dc6 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8109db6:	687b      	ldr	r3, [r7, #4]
 8109db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109dba:	4618      	mov	r0, r3
 8109dbc:	f000 fc88 	bl	810a6d0 <virtqueue_get_desc_size>
 8109dc0:	4603      	mov	r3, r0
 8109dc2:	3b10      	subs	r3, #16
		length =
 8109dc4:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8109dc6:	68fb      	ldr	r3, [r7, #12]
}
 8109dc8:	4618      	mov	r0, r3
 8109dca:	3710      	adds	r7, #16
 8109dcc:	46bd      	mov	sp, r7
 8109dce:	bd80      	pop	{r7, pc}

08109dd0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8109dd0:	b580      	push	{r7, lr}
 8109dd2:	b090      	sub	sp, #64	@ 0x40
 8109dd4:	af00      	add	r7, sp, #0
 8109dd6:	60f8      	str	r0, [r7, #12]
 8109dd8:	60b9      	str	r1, [r7, #8]
 8109dda:	607a      	str	r2, [r7, #4]
 8109ddc:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8109dde:	2300      	movs	r3, #0
 8109de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	unsigned short idx;
	int tick_count = 0;
 8109de2:	2300      	movs	r3, #0
 8109de4:	63bb      	str	r3, [r7, #56]	@ 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8109de6:	68fb      	ldr	r3, [r7, #12]
 8109de8:	637b      	str	r3, [r7, #52]	@ 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8109dea:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8109dec:	f7ff fece 	bl	8109b8c <rpmsg_virtio_get_status>
 8109df0:	4603      	mov	r3, r0
 8109df2:	633b      	str	r3, [r7, #48]	@ 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8109df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109df6:	f003 0304 	and.w	r3, r3, #4
 8109dfa:	2b00      	cmp	r3, #0
 8109dfc:	d101      	bne.n	8109e02 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8109dfe:	4b46      	ldr	r3, [pc, #280]	@ (8109f18 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8109e00:	e086      	b.n	8109f10 <rpmsg_virtio_send_offchannel_raw+0x140>
	}

	if (wait)
 8109e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109e04:	2b00      	cmp	r3, #0
 8109e06:	d003      	beq.n	8109e10 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8109e08:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8109e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8109e0e:	e001      	b.n	8109e14 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8109e10:	2300      	movs	r3, #0
 8109e12:	63bb      	str	r3, [r7, #56]	@ 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8109e14:	68fb      	ldr	r3, [r7, #12]
 8109e16:	3358      	adds	r3, #88	@ 0x58
 8109e18:	4618      	mov	r0, r3
 8109e1a:	f7ff fe64 	bl	8109ae6 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8109e1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8109e20:	f7ff ffbc 	bl	8109d9c <_rpmsg_virtio_get_buffer_size>
 8109e24:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (size <= avail_size)
 8109e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8109e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109e2a:	429a      	cmp	r2, r3
 8109e2c:	dc08      	bgt.n	8109e40 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8109e2e:	f107 0216 	add.w	r2, r7, #22
 8109e32:	f107 0310 	add.w	r3, r7, #16
 8109e36:	4619      	mov	r1, r3
 8109e38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8109e3a:	f7ff ff51 	bl	8109ce0 <rpmsg_virtio_get_tx_buffer>
 8109e3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8109e40:	68fb      	ldr	r3, [r7, #12]
 8109e42:	3358      	adds	r3, #88	@ 0x58
 8109e44:	4618      	mov	r0, r3
 8109e46:	f7ff fe59 	bl	8109afc <metal_mutex_release>
		if (buffer || !tick_count)
 8109e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109e4c:	2b00      	cmp	r3, #0
 8109e4e:	d10e      	bne.n	8109e6e <rpmsg_virtio_send_offchannel_raw+0x9e>
 8109e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e52:	2b00      	cmp	r3, #0
 8109e54:	d00b      	beq.n	8109e6e <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8109e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109e58:	2b00      	cmp	r3, #0
 8109e5a:	d001      	beq.n	8109e60 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8109e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8109f1c <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8109e5e:	e057      	b.n	8109f10 <rpmsg_virtio_send_offchannel_raw+0x140>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8109e60:	200a      	movs	r0, #10
 8109e62:	f7ff fdbc 	bl	81099de <metal_sleep_usec>
		tick_count--;
 8109e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109e68:	3b01      	subs	r3, #1
 8109e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
 8109e6c:	e7d2      	b.n	8109e14 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8109e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109e70:	2b00      	cmp	r3, #0
 8109e72:	d101      	bne.n	8109e78 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8109e74:	4b2a      	ldr	r3, [pc, #168]	@ (8109f20 <rpmsg_virtio_send_offchannel_raw+0x150>)
 8109e76:	e04b      	b.n	8109f10 <rpmsg_virtio_send_offchannel_raw+0x140>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8109e78:	687b      	ldr	r3, [r7, #4]
 8109e7a:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8109e7c:	68bb      	ldr	r3, [r7, #8]
 8109e7e:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8109e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109e82:	b29b      	uxth	r3, r3
 8109e84:	84bb      	strh	r3, [r7, #36]	@ 0x24
	rp_hdr.reserved = 0;
 8109e86:	2300      	movs	r3, #0
 8109e88:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8109e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8109e90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109e92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109e94:	f7ff fdc0 	bl	8109a18 <metal_io_virt_to_offset>
 8109e98:	4601      	mov	r1, r0
 8109e9a:	f107 0218 	add.w	r2, r7, #24
 8109e9e:	2310      	movs	r3, #16
 8109ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109ea2:	f7fe ff56 	bl	8108d52 <metal_io_block_write>
 8109ea6:	6338      	str	r0, [r7, #48]	@ 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8109ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109eaa:	2b10      	cmp	r3, #16
 8109eac:	d001      	beq.n	8109eb2 <rpmsg_virtio_send_offchannel_raw+0xe2>
 8109eae:	bf00      	nop
 8109eb0:	e7fd      	b.n	8109eae <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8109eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109eb4:	3310      	adds	r3, #16
 8109eb6:	4619      	mov	r1, r3
 8109eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109eba:	f7ff fdad 	bl	8109a18 <metal_io_virt_to_offset>
 8109ebe:	4601      	mov	r1, r0
 8109ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109ec2:	683a      	ldr	r2, [r7, #0]
 8109ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8109ec6:	f7fe ff44 	bl	8108d52 <metal_io_block_write>
 8109eca:	6338      	str	r0, [r7, #48]	@ 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8109ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8109ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109ed0:	429a      	cmp	r2, r3
 8109ed2:	d001      	beq.n	8109ed8 <rpmsg_virtio_send_offchannel_raw+0x108>
 8109ed4:	bf00      	nop
 8109ed6:	e7fd      	b.n	8109ed4 <rpmsg_virtio_send_offchannel_raw+0x104>
	metal_mutex_acquire(&rdev->lock);
 8109ed8:	68fb      	ldr	r3, [r7, #12]
 8109eda:	3358      	adds	r3, #88	@ 0x58
 8109edc:	4618      	mov	r0, r3
 8109ede:	f7ff fe02 	bl	8109ae6 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8109ee2:	693a      	ldr	r2, [r7, #16]
 8109ee4:	8afb      	ldrh	r3, [r7, #22]
 8109ee6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109ee8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8109eea:	f7ff fedd 	bl	8109ca8 <rpmsg_virtio_enqueue_buffer>
 8109eee:	6338      	str	r0, [r7, #48]	@ 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8109ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109ef2:	2b00      	cmp	r3, #0
 8109ef4:	d001      	beq.n	8109efa <rpmsg_virtio_send_offchannel_raw+0x12a>
 8109ef6:	bf00      	nop
 8109ef8:	e7fd      	b.n	8109ef6 <rpmsg_virtio_send_offchannel_raw+0x126>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8109efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109efe:	4618      	mov	r0, r3
 8109f00:	f000 fbd0 	bl	810a6a4 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8109f04:	68fb      	ldr	r3, [r7, #12]
 8109f06:	3358      	adds	r3, #88	@ 0x58
 8109f08:	4618      	mov	r0, r3
 8109f0a:	f7ff fdf7 	bl	8109afc <metal_mutex_release>

	return size;
 8109f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8109f10:	4618      	mov	r0, r3
 8109f12:	3740      	adds	r7, #64	@ 0x40
 8109f14:	46bd      	mov	sp, r7
 8109f16:	bd80      	pop	{r7, pc}
 8109f18:	fffff82c 	.word	0xfffff82c
 8109f1c:	fffff82b 	.word	0xfffff82b
 8109f20:	fffff82e 	.word	0xfffff82e

08109f24 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8109f24:	b480      	push	{r7}
 8109f26:	b083      	sub	sp, #12
 8109f28:	af00      	add	r7, sp, #0
 8109f2a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8109f2c:	bf00      	nop
 8109f2e:	370c      	adds	r7, #12
 8109f30:	46bd      	mov	sp, r7
 8109f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f36:	4770      	bx	lr

08109f38 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8109f38:	b590      	push	{r4, r7, lr}
 8109f3a:	b08d      	sub	sp, #52	@ 0x34
 8109f3c:	af02      	add	r7, sp, #8
 8109f3e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8109f40:	687b      	ldr	r3, [r7, #4]
 8109f42:	681b      	ldr	r3, [r3, #0]
 8109f44:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8109f46:	6a3b      	ldr	r3, [r7, #32]
 8109f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8109f4a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8109f4c:	69fb      	ldr	r3, [r7, #28]
 8109f4e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8109f50:	69bb      	ldr	r3, [r7, #24]
 8109f52:	3358      	adds	r3, #88	@ 0x58
 8109f54:	4618      	mov	r0, r3
 8109f56:	f7ff fdc6 	bl	8109ae6 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8109f5a:	f107 020a 	add.w	r2, r7, #10
 8109f5e:	f107 030c 	add.w	r3, r7, #12
 8109f62:	4619      	mov	r1, r3
 8109f64:	69f8      	ldr	r0, [r7, #28]
 8109f66:	f7ff fed7 	bl	8109d18 <rpmsg_virtio_get_rx_buffer>
 8109f6a:	6278      	str	r0, [r7, #36]	@ 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8109f6c:	69bb      	ldr	r3, [r7, #24]
 8109f6e:	3358      	adds	r3, #88	@ 0x58
 8109f70:	4618      	mov	r0, r3
 8109f72:	f7ff fdc3 	bl	8109afc <metal_mutex_release>

	while (rp_hdr) {
 8109f76:	e04d      	b.n	810a014 <rpmsg_virtio_rx_callback+0xdc>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8109f78:	69bb      	ldr	r3, [r7, #24]
 8109f7a:	3358      	adds	r3, #88	@ 0x58
 8109f7c:	4618      	mov	r0, r3
 8109f7e:	f7ff fdb2 	bl	8109ae6 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8109f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109f84:	685b      	ldr	r3, [r3, #4]
 8109f86:	4619      	mov	r1, r3
 8109f88:	69b8      	ldr	r0, [r7, #24]
 8109f8a:	f7ff fe36 	bl	8109bfa <rpmsg_get_ept_from_addr>
 8109f8e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8109f90:	69bb      	ldr	r3, [r7, #24]
 8109f92:	3358      	adds	r3, #88	@ 0x58
 8109f94:	4618      	mov	r0, r3
 8109f96:	f7ff fdb1 	bl	8109afc <metal_mutex_release>

		if (!ept)
 8109f9a:	697b      	ldr	r3, [r7, #20]
 8109f9c:	2b00      	cmp	r3, #0
 8109f9e:	d03d      	beq.n	810a01c <rpmsg_virtio_rx_callback+0xe4>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8109fa0:	697b      	ldr	r3, [r7, #20]
 8109fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8109fa8:	d103      	bne.n	8109fb2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8109faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109fac:	681a      	ldr	r2, [r3, #0]
 8109fae:	697b      	ldr	r3, [r7, #20]
 8109fb0:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8109fb2:	697b      	ldr	r3, [r7, #20]
 8109fb4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8109fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109fb8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8109fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109fbe:	899b      	ldrh	r3, [r3, #12]
 8109fc0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8109fc2:	4618      	mov	r0, r3
 8109fc4:	697b      	ldr	r3, [r7, #20]
 8109fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8109fc8:	697b      	ldr	r3, [r7, #20]
 8109fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8109fcc:	9300      	str	r3, [sp, #0]
 8109fce:	4613      	mov	r3, r2
 8109fd0:	4602      	mov	r2, r0
 8109fd2:	6978      	ldr	r0, [r7, #20]
 8109fd4:	47a0      	blx	r4
 8109fd6:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8109fd8:	693b      	ldr	r3, [r7, #16]
 8109fda:	2b00      	cmp	r3, #0
 8109fdc:	d001      	beq.n	8109fe2 <rpmsg_virtio_rx_callback+0xaa>
 8109fde:	bf00      	nop
 8109fe0:	e7fd      	b.n	8109fde <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8109fe2:	69bb      	ldr	r3, [r7, #24]
 8109fe4:	3358      	adds	r3, #88	@ 0x58
 8109fe6:	4618      	mov	r0, r3
 8109fe8:	f7ff fd7d 	bl	8109ae6 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8109fec:	68fa      	ldr	r2, [r7, #12]
 8109fee:	897b      	ldrh	r3, [r7, #10]
 8109ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8109ff2:	69f8      	ldr	r0, [r7, #28]
 8109ff4:	f7ff fe3f 	bl	8109c76 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8109ff8:	f107 020a 	add.w	r2, r7, #10
 8109ffc:	f107 030c 	add.w	r3, r7, #12
 810a000:	4619      	mov	r1, r3
 810a002:	69f8      	ldr	r0, [r7, #28]
 810a004:	f7ff fe88 	bl	8109d18 <rpmsg_virtio_get_rx_buffer>
 810a008:	6278      	str	r0, [r7, #36]	@ 0x24
		metal_mutex_release(&rdev->lock);
 810a00a:	69bb      	ldr	r3, [r7, #24]
 810a00c:	3358      	adds	r3, #88	@ 0x58
 810a00e:	4618      	mov	r0, r3
 810a010:	f7ff fd74 	bl	8109afc <metal_mutex_release>
	while (rp_hdr) {
 810a014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a016:	2b00      	cmp	r3, #0
 810a018:	d1ae      	bne.n	8109f78 <rpmsg_virtio_rx_callback+0x40>
 810a01a:	e000      	b.n	810a01e <rpmsg_virtio_rx_callback+0xe6>
			return;
 810a01c:	bf00      	nop
	}
}
 810a01e:	372c      	adds	r7, #44	@ 0x2c
 810a020:	46bd      	mov	sp, r7
 810a022:	bd90      	pop	{r4, r7, pc}

0810a024 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 810a024:	b580      	push	{r7, lr}
 810a026:	b092      	sub	sp, #72	@ 0x48
 810a028:	af00      	add	r7, sp, #0
 810a02a:	60f8      	str	r0, [r7, #12]
 810a02c:	60b9      	str	r1, [r7, #8]
 810a02e:	607a      	str	r2, [r7, #4]
 810a030:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 810a032:	68fb      	ldr	r3, [r7, #12]
 810a034:	6a1b      	ldr	r3, [r3, #32]
 810a036:	647b      	str	r3, [r7, #68]	@ 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 810a038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a03a:	643b      	str	r3, [r7, #64]	@ 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 810a03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810a03e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810a040:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 810a042:	68bb      	ldr	r3, [r7, #8]
 810a044:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (len != sizeof(*ns_msg))
 810a046:	687b      	ldr	r3, [r7, #4]
 810a048:	2b28      	cmp	r3, #40	@ 0x28
 810a04a:	d001      	beq.n	810a050 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 810a04c:	2300      	movs	r3, #0
 810a04e:	e057      	b.n	810a100 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 810a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
	metal_io_block_read(io,
 810a052:	4619      	mov	r1, r3
 810a054:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810a056:	f7ff fcdf 	bl	8109a18 <metal_io_virt_to_offset>
 810a05a:	4601      	mov	r1, r0
 810a05c:	f107 0210 	add.w	r2, r7, #16
 810a060:	2320      	movs	r3, #32
 810a062:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 810a064:	f7fe fdfe 	bl	8108c64 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 810a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a06a:	6a1b      	ldr	r3, [r3, #32]
 810a06c:	637b      	str	r3, [r7, #52]	@ 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 810a06e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a070:	3358      	adds	r3, #88	@ 0x58
 810a072:	4618      	mov	r0, r3
 810a074:	f7ff fd37 	bl	8109ae6 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 810a078:	f107 0110 	add.w	r1, r7, #16
 810a07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a07e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810a082:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810a084:	f7ff fb72 	bl	810976c <rpmsg_get_endpoint>
 810a088:	6338      	str	r0, [r7, #48]	@ 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 810a08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a08e:	f003 0301 	and.w	r3, r3, #1
 810a092:	2b00      	cmp	r3, #0
 810a094:	d017      	beq.n	810a0c6 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 810a096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a098:	2b00      	cmp	r3, #0
 810a09a:	d003      	beq.n	810a0a4 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 810a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a09e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810a0a2:	629a      	str	r2, [r3, #40]	@ 0x28
		metal_mutex_release(&rdev->lock);
 810a0a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a0a6:	3358      	adds	r3, #88	@ 0x58
 810a0a8:	4618      	mov	r0, r3
 810a0aa:	f7ff fd27 	bl	8109afc <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 810a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0b0:	2b00      	cmp	r3, #0
 810a0b2:	d024      	beq.n	810a0fe <rpmsg_virtio_ns_callback+0xda>
 810a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a0b8:	2b00      	cmp	r3, #0
 810a0ba:	d020      	beq.n	810a0fe <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 810a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810a0c0:	68f8      	ldr	r0, [r7, #12]
 810a0c2:	4798      	blx	r3
 810a0c4:	e01b      	b.n	810a0fe <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 810a0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0c8:	2b00      	cmp	r3, #0
 810a0ca:	d110      	bne.n	810a0ee <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 810a0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a0ce:	3358      	adds	r3, #88	@ 0x58
 810a0d0:	4618      	mov	r0, r3
 810a0d2:	f7ff fd13 	bl	8109afc <metal_mutex_release>
			if (rdev->ns_bind_cb)
 810a0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a0d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a0da:	2b00      	cmp	r3, #0
 810a0dc:	d00f      	beq.n	810a0fe <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 810a0de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a0e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a0e2:	f107 0110 	add.w	r1, r7, #16
 810a0e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a0e8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 810a0ea:	4798      	blx	r3
 810a0ec:	e007      	b.n	810a0fe <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 810a0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a0f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a0f2:	629a      	str	r2, [r3, #40]	@ 0x28
			metal_mutex_release(&rdev->lock);
 810a0f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810a0f6:	3358      	adds	r3, #88	@ 0x58
 810a0f8:	4618      	mov	r0, r3
 810a0fa:	f7ff fcff 	bl	8109afc <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 810a0fe:	2300      	movs	r3, #0
}
 810a100:	4618      	mov	r0, r3
 810a102:	3748      	adds	r7, #72	@ 0x48
 810a104:	46bd      	mov	sp, r7
 810a106:	bd80      	pop	{r7, pc}

0810a108 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 810a108:	b580      	push	{r7, lr}
 810a10a:	b090      	sub	sp, #64	@ 0x40
 810a10c:	af02      	add	r7, sp, #8
 810a10e:	60f8      	str	r0, [r7, #12]
 810a110:	60b9      	str	r1, [r7, #8]
 810a112:	607a      	str	r2, [r7, #4]
 810a114:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 810a116:	68fb      	ldr	r3, [r7, #12]
 810a118:	633b      	str	r3, [r7, #48]	@ 0x30
	memset(rdev, 0, sizeof(*rdev));
 810a11a:	2264      	movs	r2, #100	@ 0x64
 810a11c:	2100      	movs	r1, #0
 810a11e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a120:	f000 ff77 	bl	810b012 <memset>
	metal_mutex_init(&rdev->lock);
 810a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a126:	3358      	adds	r3, #88	@ 0x58
 810a128:	4618      	mov	r0, r3
 810a12a:	f7ff fcd1 	bl	8109ad0 <metal_mutex_init>
	rvdev->vdev = vdev;
 810a12e:	68fb      	ldr	r3, [r7, #12]
 810a130:	68ba      	ldr	r2, [r7, #8]
 810a132:	665a      	str	r2, [r3, #100]	@ 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 810a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a136:	687a      	ldr	r2, [r7, #4]
 810a138:	65da      	str	r2, [r3, #92]	@ 0x5c
	vdev->priv = rvdev;
 810a13a:	68bb      	ldr	r3, [r7, #8]
 810a13c:	68fa      	ldr	r2, [r7, #12]
 810a13e:	625a      	str	r2, [r3, #36]	@ 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 810a140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a142:	4a38      	ldr	r2, [pc, #224]	@ (810a224 <rpmsg_init_vdev+0x11c>)
 810a144:	661a      	str	r2, [r3, #96]	@ 0x60
	role = rpmsg_virtio_get_role(rvdev);
 810a146:	68f8      	ldr	r0, [r7, #12]
 810a148:	f7ff fd00 	bl	8109b4c <rpmsg_virtio_get_role>
 810a14c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 810a14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a150:	2b01      	cmp	r3, #1
 810a152:	d112      	bne.n	810a17a <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 810a154:	4b34      	ldr	r3, [pc, #208]	@ (810a228 <rpmsg_init_vdev+0x120>)
 810a156:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 810a158:	4b34      	ldr	r3, [pc, #208]	@ (810a22c <rpmsg_init_vdev+0x124>)
 810a15a:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 810a15c:	4b34      	ldr	r3, [pc, #208]	@ (810a230 <rpmsg_init_vdev+0x128>)
 810a15e:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 810a160:	4b34      	ldr	r3, [pc, #208]	@ (810a234 <rpmsg_init_vdev+0x12c>)
 810a162:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 810a164:	68bb      	ldr	r3, [r7, #8]
 810a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a168:	3318      	adds	r3, #24
 810a16a:	681a      	ldr	r2, [r3, #0]
 810a16c:	68fb      	ldr	r3, [r7, #12]
 810a16e:	669a      	str	r2, [r3, #104]	@ 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 810a170:	68bb      	ldr	r3, [r7, #8]
 810a172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a174:	681a      	ldr	r2, [r3, #0]
 810a176:	68fb      	ldr	r3, [r7, #12]
 810a178:	66da      	str	r2, [r3, #108]	@ 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 810a17a:	68fb      	ldr	r3, [r7, #12]
 810a17c:	683a      	ldr	r2, [r7, #0]
 810a17e:	671a      	str	r2, [r3, #112]	@ 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810a180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810a182:	2b01      	cmp	r3, #1
 810a184:	d102      	bne.n	810a18c <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 810a186:	68f8      	ldr	r0, [r7, #12]
 810a188:	f7ff fdeb 	bl	8109d62 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 810a18c:	f107 0218 	add.w	r2, r7, #24
 810a190:	f107 0310 	add.w	r3, r7, #16
 810a194:	9300      	str	r3, [sp, #0]
 810a196:	4613      	mov	r3, r2
 810a198:	2202      	movs	r2, #2
 810a19a:	2100      	movs	r1, #0
 810a19c:	68f8      	ldr	r0, [r7, #12]
 810a19e:	f7ff fd17 	bl	8109bd0 <rpmsg_virtio_create_virtqueues>
 810a1a2:	62b8      	str	r0, [r7, #40]	@ 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 810a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a1a6:	2b00      	cmp	r3, #0
 810a1a8:	d001      	beq.n	810a1ae <rpmsg_init_vdev+0xa6>
		return status;
 810a1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a1ac:	e035      	b.n	810a21a <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 810a1ae:	2300      	movs	r3, #0
 810a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 810a1b2:	e00f      	b.n	810a1d4 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 810a1b4:	68bb      	ldr	r3, [r7, #8]
 810a1b6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810a1b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810a1ba:	4613      	mov	r3, r2
 810a1bc:	005b      	lsls	r3, r3, #1
 810a1be:	4413      	add	r3, r2
 810a1c0:	00db      	lsls	r3, r3, #3
 810a1c2:	440b      	add	r3, r1
 810a1c4:	681b      	ldr	r3, [r3, #0]
 810a1c6:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 810a1c8:	6a3b      	ldr	r3, [r7, #32]
 810a1ca:	683a      	ldr	r2, [r7, #0]
 810a1cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 810a1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a1d0:	3301      	adds	r3, #1
 810a1d2:	637b      	str	r3, [r7, #52]	@ 0x34
 810a1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a1d6:	2b01      	cmp	r3, #1
 810a1d8:	d9ec      	bls.n	810a1b4 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 810a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1dc:	4618      	mov	r0, r3
 810a1de:	f7ff fc0a 	bl	81099f6 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 810a1e2:	68f8      	ldr	r0, [r7, #12]
 810a1e4:	f7ff fce3 	bl	8109bae <rpmsg_virtio_get_features>
 810a1e8:	6278      	str	r0, [r7, #36]	@ 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 810a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a1ec:	f003 0301 	and.w	r3, r3, #1
 810a1f0:	2b00      	cmp	r3, #0
 810a1f2:	d011      	beq.n	810a218 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 810a1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a1f6:	f103 0008 	add.w	r0, r3, #8
 810a1fa:	2300      	movs	r3, #0
 810a1fc:	9301      	str	r3, [sp, #4]
 810a1fe:	4b0e      	ldr	r3, [pc, #56]	@ (810a238 <rpmsg_init_vdev+0x130>)
 810a200:	9300      	str	r3, [sp, #0]
 810a202:	2335      	movs	r3, #53	@ 0x35
 810a204:	2235      	movs	r2, #53	@ 0x35
 810a206:	490d      	ldr	r1, [pc, #52]	@ (810a23c <rpmsg_init_vdev+0x134>)
 810a208:	f7ff fc83 	bl	8109b12 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 810a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810a20e:	3308      	adds	r3, #8
 810a210:	4619      	mov	r1, r3
 810a212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810a214:	f7ff fb2c 	bl	8109870 <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 810a218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 810a21a:	4618      	mov	r0, r3
 810a21c:	3738      	adds	r7, #56	@ 0x38
 810a21e:	46bd      	mov	sp, r7
 810a220:	bd80      	pop	{r7, pc}
 810a222:	bf00      	nop
 810a224:	08109dd1 	.word	0x08109dd1
 810a228:	0810c190 	.word	0x0810c190
 810a22c:	0810c198 	.word	0x0810c198
 810a230:	08109f25 	.word	0x08109f25
 810a234:	08109f39 	.word	0x08109f39
 810a238:	0810a025 	.word	0x0810a025
 810a23c:	0810c1a0 	.word	0x0810c1a0

0810a240 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 810a240:	b480      	push	{r7}
 810a242:	b083      	sub	sp, #12
 810a244:	af00      	add	r7, sp, #0
 810a246:	6078      	str	r0, [r7, #4]
 810a248:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 810a24a:	bf00      	nop
 810a24c:	370c      	adds	r7, #12
 810a24e:	46bd      	mov	sp, r7
 810a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a254:	4770      	bx	lr

0810a256 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 810a256:	b480      	push	{r7}
 810a258:	b083      	sub	sp, #12
 810a25a:	af00      	add	r7, sp, #0
 810a25c:	6078      	str	r0, [r7, #4]
 810a25e:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 810a260:	bf00      	nop
 810a262:	370c      	adds	r7, #12
 810a264:	46bd      	mov	sp, r7
 810a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a26a:	4770      	bx	lr

0810a26c <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 810a26c:	b480      	push	{r7}
 810a26e:	b085      	sub	sp, #20
 810a270:	af00      	add	r7, sp, #0
 810a272:	60f8      	str	r0, [r7, #12]
 810a274:	60b9      	str	r1, [r7, #8]
 810a276:	607a      	str	r2, [r7, #4]
 810a278:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 810a27a:	68fb      	ldr	r3, [r7, #12]
}
 810a27c:	4618      	mov	r0, r3
 810a27e:	3714      	adds	r7, #20
 810a280:	46bd      	mov	sp, r7
 810a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a286:	4770      	bx	lr

0810a288 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 810a288:	b590      	push	{r4, r7, lr}
 810a28a:	b08f      	sub	sp, #60	@ 0x3c
 810a28c:	af04      	add	r7, sp, #16
 810a28e:	60f8      	str	r0, [r7, #12]
 810a290:	60b9      	str	r1, [r7, #8]
 810a292:	607a      	str	r2, [r7, #4]
 810a294:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 810a296:	68fb      	ldr	r3, [r7, #12]
 810a298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a29a:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 810a29c:	687a      	ldr	r2, [r7, #4]
 810a29e:	6a3b      	ldr	r3, [r7, #32]
 810a2a0:	429a      	cmp	r2, r3
 810a2a2:	d902      	bls.n	810a2aa <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 810a2a4:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 810a2a8:	e036      	b.n	810a318 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 810a2aa:	2300      	movs	r3, #0
 810a2ac:	627b      	str	r3, [r7, #36]	@ 0x24
 810a2ae:	e02e      	b.n	810a30e <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 810a2b0:	68fb      	ldr	r3, [r7, #12]
 810a2b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 810a2b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810a2b6:	4613      	mov	r3, r2
 810a2b8:	005b      	lsls	r3, r3, #1
 810a2ba:	4413      	add	r3, r2
 810a2bc:	00db      	lsls	r3, r3, #3
 810a2be:	440b      	add	r3, r1
 810a2c0:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 810a2c2:	69fb      	ldr	r3, [r7, #28]
 810a2c4:	3304      	adds	r3, #4
 810a2c6:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a2ca:	b298      	uxth	r0, r3
 810a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a2ce:	009b      	lsls	r3, r3, #2
 810a2d0:	683a      	ldr	r2, [r7, #0]
 810a2d2:	4413      	add	r3, r2
 810a2d4:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810a2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a2d8:	009b      	lsls	r3, r3, #2
 810a2da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810a2dc:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810a2de:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810a2e0:	68fa      	ldr	r2, [r7, #12]
 810a2e2:	6a12      	ldr	r2, [r2, #32]
 810a2e4:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810a2e6:	69f9      	ldr	r1, [r7, #28]
 810a2e8:	6809      	ldr	r1, [r1, #0]
 810a2ea:	9102      	str	r1, [sp, #8]
 810a2ec:	9201      	str	r2, [sp, #4]
 810a2ee:	9300      	str	r3, [sp, #0]
 810a2f0:	69bb      	ldr	r3, [r7, #24]
 810a2f2:	4622      	mov	r2, r4
 810a2f4:	4601      	mov	r1, r0
 810a2f6:	68f8      	ldr	r0, [r7, #12]
 810a2f8:	f000 f8f6 	bl	810a4e8 <virtqueue_create>
 810a2fc:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 810a2fe:	697b      	ldr	r3, [r7, #20]
 810a300:	2b00      	cmp	r3, #0
 810a302:	d001      	beq.n	810a308 <virtio_create_virtqueues+0x80>
			return ret;
 810a304:	697b      	ldr	r3, [r7, #20]
 810a306:	e007      	b.n	810a318 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 810a308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a30a:	3301      	adds	r3, #1
 810a30c:	627b      	str	r3, [r7, #36]	@ 0x24
 810a30e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810a310:	687b      	ldr	r3, [r7, #4]
 810a312:	429a      	cmp	r2, r3
 810a314:	d3cc      	bcc.n	810a2b0 <virtio_create_virtqueues+0x28>
	}
	return 0;
 810a316:	2300      	movs	r3, #0
}
 810a318:	4618      	mov	r0, r3
 810a31a:	372c      	adds	r7, #44	@ 0x2c
 810a31c:	46bd      	mov	sp, r7
 810a31e:	bd90      	pop	{r4, r7, pc}

0810a320 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 810a320:	b480      	push	{r7}
 810a322:	b085      	sub	sp, #20
 810a324:	af00      	add	r7, sp, #0
 810a326:	60f8      	str	r0, [r7, #12]
 810a328:	60b9      	str	r1, [r7, #8]
 810a32a:	607a      	str	r2, [r7, #4]
 810a32c:	603b      	str	r3, [r7, #0]
	vr->num = num;
 810a32e:	68fb      	ldr	r3, [r7, #12]
 810a330:	68ba      	ldr	r2, [r7, #8]
 810a332:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 810a334:	68fb      	ldr	r3, [r7, #12]
 810a336:	687a      	ldr	r2, [r7, #4]
 810a338:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 810a33a:	68bb      	ldr	r3, [r7, #8]
 810a33c:	011b      	lsls	r3, r3, #4
 810a33e:	687a      	ldr	r2, [r7, #4]
 810a340:	441a      	add	r2, r3
 810a342:	68fb      	ldr	r3, [r7, #12]
 810a344:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 810a346:	68fb      	ldr	r3, [r7, #12]
 810a348:	689a      	ldr	r2, [r3, #8]
 810a34a:	68bb      	ldr	r3, [r7, #8]
 810a34c:	005b      	lsls	r3, r3, #1
 810a34e:	4413      	add	r3, r2
 810a350:	3304      	adds	r3, #4
 810a352:	461a      	mov	r2, r3
 810a354:	683b      	ldr	r3, [r7, #0]
 810a356:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 810a358:	1c5a      	adds	r2, r3, #1
 810a35a:	683b      	ldr	r3, [r7, #0]
 810a35c:	425b      	negs	r3, r3
 810a35e:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 810a360:	461a      	mov	r2, r3
 810a362:	68fb      	ldr	r3, [r7, #12]
 810a364:	60da      	str	r2, [r3, #12]
}
 810a366:	bf00      	nop
 810a368:	3714      	adds	r7, #20
 810a36a:	46bd      	mov	sp, r7
 810a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a370:	4770      	bx	lr

0810a372 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 810a372:	b480      	push	{r7}
 810a374:	b083      	sub	sp, #12
 810a376:	af00      	add	r7, sp, #0
 810a378:	4603      	mov	r3, r0
 810a37a:	80fb      	strh	r3, [r7, #6]
 810a37c:	460b      	mov	r3, r1
 810a37e:	80bb      	strh	r3, [r7, #4]
 810a380:	4613      	mov	r3, r2
 810a382:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 810a384:	88ba      	ldrh	r2, [r7, #4]
 810a386:	88fb      	ldrh	r3, [r7, #6]
 810a388:	1ad3      	subs	r3, r2, r3
 810a38a:	b29b      	uxth	r3, r3
 810a38c:	3b01      	subs	r3, #1
 810a38e:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 810a390:	88b9      	ldrh	r1, [r7, #4]
 810a392:	887b      	ldrh	r3, [r7, #2]
 810a394:	1acb      	subs	r3, r1, r3
 810a396:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 810a398:	429a      	cmp	r2, r3
 810a39a:	bf34      	ite	cc
 810a39c:	2301      	movcc	r3, #1
 810a39e:	2300      	movcs	r3, #0
 810a3a0:	b2db      	uxtb	r3, r3
}
 810a3a2:	4618      	mov	r0, r3
 810a3a4:	370c      	adds	r7, #12
 810a3a6:	46bd      	mov	sp, r7
 810a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3ac:	4770      	bx	lr

0810a3ae <metal_io_virt>:
{
 810a3ae:	b480      	push	{r7}
 810a3b0:	b083      	sub	sp, #12
 810a3b2:	af00      	add	r7, sp, #0
 810a3b4:	6078      	str	r0, [r7, #4]
 810a3b6:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810a3b8:	687b      	ldr	r3, [r7, #4]
 810a3ba:	681b      	ldr	r3, [r3, #0]
		: NULL);
 810a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810a3c0:	d009      	beq.n	810a3d6 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 810a3c2:	687b      	ldr	r3, [r7, #4]
 810a3c4:	689b      	ldr	r3, [r3, #8]
 810a3c6:	683a      	ldr	r2, [r7, #0]
 810a3c8:	429a      	cmp	r2, r3
 810a3ca:	d804      	bhi.n	810a3d6 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810a3cc:	687b      	ldr	r3, [r7, #4]
 810a3ce:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810a3d0:	683b      	ldr	r3, [r7, #0]
 810a3d2:	4413      	add	r3, r2
 810a3d4:	e000      	b.n	810a3d8 <metal_io_virt+0x2a>
 810a3d6:	2300      	movs	r3, #0
}
 810a3d8:	4618      	mov	r0, r3
 810a3da:	370c      	adds	r7, #12
 810a3dc:	46bd      	mov	sp, r7
 810a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3e2:	4770      	bx	lr

0810a3e4 <metal_io_phys>:
{
 810a3e4:	b480      	push	{r7}
 810a3e6:	b085      	sub	sp, #20
 810a3e8:	af00      	add	r7, sp, #0
 810a3ea:	6078      	str	r0, [r7, #4]
 810a3ec:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 810a3ee:	687b      	ldr	r3, [r7, #4]
 810a3f0:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 810a3f2:	2b1f      	cmp	r3, #31
 810a3f4:	d805      	bhi.n	810a402 <metal_io_phys+0x1e>
 810a3f6:	687b      	ldr	r3, [r7, #4]
 810a3f8:	68db      	ldr	r3, [r3, #12]
 810a3fa:	683a      	ldr	r2, [r7, #0]
 810a3fc:	fa22 f303 	lsr.w	r3, r2, r3
 810a400:	e000      	b.n	810a404 <metal_io_phys+0x20>
 810a402:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 810a404:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 810a406:	687b      	ldr	r3, [r7, #4]
 810a408:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 810a40a:	2b00      	cmp	r3, #0
 810a40c:	d010      	beq.n	810a430 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 810a40e:	687b      	ldr	r3, [r7, #4]
 810a410:	689b      	ldr	r3, [r3, #8]
 810a412:	683a      	ldr	r2, [r7, #0]
 810a414:	429a      	cmp	r2, r3
 810a416:	d80b      	bhi.n	810a430 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 810a418:	687b      	ldr	r3, [r7, #4]
 810a41a:	685a      	ldr	r2, [r3, #4]
 810a41c:	68fb      	ldr	r3, [r7, #12]
 810a41e:	009b      	lsls	r3, r3, #2
 810a420:	4413      	add	r3, r2
 810a422:	681a      	ldr	r2, [r3, #0]
 810a424:	687b      	ldr	r3, [r7, #4]
 810a426:	6919      	ldr	r1, [r3, #16]
 810a428:	683b      	ldr	r3, [r7, #0]
 810a42a:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 810a42c:	4413      	add	r3, r2
 810a42e:	e001      	b.n	810a434 <metal_io_phys+0x50>
 810a430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 810a434:	4618      	mov	r0, r3
 810a436:	3714      	adds	r7, #20
 810a438:	46bd      	mov	sp, r7
 810a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a43e:	4770      	bx	lr

0810a440 <metal_io_phys_to_offset>:
{
 810a440:	b580      	push	{r7, lr}
 810a442:	b084      	sub	sp, #16
 810a444:	af00      	add	r7, sp, #0
 810a446:	6078      	str	r0, [r7, #4]
 810a448:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 810a44a:	687b      	ldr	r3, [r7, #4]
 810a44c:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 810a44e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810a452:	d105      	bne.n	810a460 <metal_io_phys_to_offset+0x20>
 810a454:	687b      	ldr	r3, [r7, #4]
 810a456:	685b      	ldr	r3, [r3, #4]
 810a458:	681b      	ldr	r3, [r3, #0]
 810a45a:	683a      	ldr	r2, [r7, #0]
 810a45c:	1ad3      	subs	r3, r2, r3
 810a45e:	e003      	b.n	810a468 <metal_io_phys_to_offset+0x28>
 810a460:	687b      	ldr	r3, [r7, #4]
 810a462:	691a      	ldr	r2, [r3, #16]
 810a464:	683b      	ldr	r3, [r7, #0]
 810a466:	4013      	ands	r3, r2
	unsigned long offset =
 810a468:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 810a46a:	68f9      	ldr	r1, [r7, #12]
 810a46c:	6878      	ldr	r0, [r7, #4]
 810a46e:	f7ff ffb9 	bl	810a3e4 <metal_io_phys>
 810a472:	4602      	mov	r2, r0
 810a474:	683b      	ldr	r3, [r7, #0]
 810a476:	4293      	cmp	r3, r2
 810a478:	d101      	bne.n	810a47e <metal_io_phys_to_offset+0x3e>
			return offset;
 810a47a:	68fb      	ldr	r3, [r7, #12]
 810a47c:	e00c      	b.n	810a498 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 810a47e:	687b      	ldr	r3, [r7, #4]
 810a480:	691a      	ldr	r2, [r3, #16]
 810a482:	68fb      	ldr	r3, [r7, #12]
 810a484:	4413      	add	r3, r2
 810a486:	3301      	adds	r3, #1
 810a488:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 810a48a:	687b      	ldr	r3, [r7, #4]
 810a48c:	689b      	ldr	r3, [r3, #8]
 810a48e:	68fa      	ldr	r2, [r7, #12]
 810a490:	429a      	cmp	r2, r3
 810a492:	d3ea      	bcc.n	810a46a <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 810a494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 810a498:	4618      	mov	r0, r3
 810a49a:	3710      	adds	r7, #16
 810a49c:	46bd      	mov	sp, r7
 810a49e:	bd80      	pop	{r7, pc}

0810a4a0 <metal_io_phys_to_virt>:
{
 810a4a0:	b580      	push	{r7, lr}
 810a4a2:	b082      	sub	sp, #8
 810a4a4:	af00      	add	r7, sp, #0
 810a4a6:	6078      	str	r0, [r7, #4]
 810a4a8:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 810a4aa:	6839      	ldr	r1, [r7, #0]
 810a4ac:	6878      	ldr	r0, [r7, #4]
 810a4ae:	f7ff ffc7 	bl	810a440 <metal_io_phys_to_offset>
 810a4b2:	4603      	mov	r3, r0
 810a4b4:	4619      	mov	r1, r3
 810a4b6:	6878      	ldr	r0, [r7, #4]
 810a4b8:	f7ff ff79 	bl	810a3ae <metal_io_virt>
 810a4bc:	4603      	mov	r3, r0
}
 810a4be:	4618      	mov	r0, r3
 810a4c0:	3708      	adds	r7, #8
 810a4c2:	46bd      	mov	sp, r7
 810a4c4:	bd80      	pop	{r7, pc}

0810a4c6 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 810a4c6:	b580      	push	{r7, lr}
 810a4c8:	b084      	sub	sp, #16
 810a4ca:	af00      	add	r7, sp, #0
 810a4cc:	6078      	str	r0, [r7, #4]
 810a4ce:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 810a4d0:	687b      	ldr	r3, [r7, #4]
 810a4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a4d4:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 810a4d6:	6839      	ldr	r1, [r7, #0]
 810a4d8:	68f8      	ldr	r0, [r7, #12]
 810a4da:	f7ff ffe1 	bl	810a4a0 <metal_io_phys_to_virt>
 810a4de:	4603      	mov	r3, r0
}
 810a4e0:	4618      	mov	r0, r3
 810a4e2:	3710      	adds	r7, #16
 810a4e4:	46bd      	mov	sp, r7
 810a4e6:	bd80      	pop	{r7, pc}

0810a4e8 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 810a4e8:	b580      	push	{r7, lr}
 810a4ea:	b086      	sub	sp, #24
 810a4ec:	af00      	add	r7, sp, #0
 810a4ee:	60f8      	str	r0, [r7, #12]
 810a4f0:	607a      	str	r2, [r7, #4]
 810a4f2:	603b      	str	r3, [r7, #0]
 810a4f4:	460b      	mov	r3, r1
 810a4f6:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 810a4f8:	2300      	movs	r3, #0
 810a4fa:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 810a4fc:	697b      	ldr	r3, [r7, #20]
 810a4fe:	2b00      	cmp	r3, #0
 810a500:	d121      	bne.n	810a546 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 810a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a504:	68fa      	ldr	r2, [r7, #12]
 810a506:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 810a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a50a:	687a      	ldr	r2, [r7, #4]
 810a50c:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 810a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a510:	897a      	ldrh	r2, [r7, #10]
 810a512:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 810a514:	683b      	ldr	r3, [r7, #0]
 810a516:	891a      	ldrh	r2, [r3, #8]
 810a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a51a:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 810a51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a51e:	895a      	ldrh	r2, [r3, #10]
 810a520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a522:	851a      	strh	r2, [r3, #40]	@ 0x28
		vq->callback = callback;
 810a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a526:	6a3a      	ldr	r2, [r7, #32]
 810a528:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 810a52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a52c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810a52e:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 810a530:	683b      	ldr	r3, [r7, #0]
 810a532:	6819      	ldr	r1, [r3, #0]
 810a534:	683b      	ldr	r3, [r7, #0]
 810a536:	685b      	ldr	r3, [r3, #4]
 810a538:	461a      	mov	r2, r3
 810a53a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a53c:	f000 f8fb 	bl	810a736 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 810a540:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810a542:	f000 f885 	bl	810a650 <virtqueue_disable_cb>
	}

	return (status);
 810a546:	697b      	ldr	r3, [r7, #20]
}
 810a548:	4618      	mov	r0, r3
 810a54a:	3718      	adds	r7, #24
 810a54c:	46bd      	mov	sp, r7
 810a54e:	bd80      	pop	{r7, pc}

0810a550 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 810a550:	b580      	push	{r7, lr}
 810a552:	b086      	sub	sp, #24
 810a554:	af00      	add	r7, sp, #0
 810a556:	60f8      	str	r0, [r7, #12]
 810a558:	60b9      	str	r1, [r7, #8]
 810a55a:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 810a55c:	2300      	movs	r3, #0
 810a55e:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 810a560:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 810a564:	68fb      	ldr	r3, [r7, #12]
 810a566:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 810a568:	68fb      	ldr	r3, [r7, #12]
 810a56a:	6a1b      	ldr	r3, [r3, #32]
 810a56c:	885b      	ldrh	r3, [r3, #2]
 810a56e:	429a      	cmp	r2, r3
 810a570:	d101      	bne.n	810a576 <virtqueue_get_available_buffer+0x26>
		return NULL;
 810a572:	2300      	movs	r3, #0
 810a574:	e02e      	b.n	810a5d4 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 810a576:	68fb      	ldr	r3, [r7, #12]
 810a578:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 810a57a:	1c5a      	adds	r2, r3, #1
 810a57c:	b291      	uxth	r1, r2
 810a57e:	68fa      	ldr	r2, [r7, #12]
 810a580:	8691      	strh	r1, [r2, #52]	@ 0x34
 810a582:	b21a      	sxth	r2, r3
 810a584:	68fb      	ldr	r3, [r7, #12]
 810a586:	895b      	ldrh	r3, [r3, #10]
 810a588:	3b01      	subs	r3, #1
 810a58a:	b29b      	uxth	r3, r3
 810a58c:	b21b      	sxth	r3, r3
 810a58e:	4013      	ands	r3, r2
 810a590:	b21b      	sxth	r3, r3
 810a592:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 810a594:	68fb      	ldr	r3, [r7, #12]
 810a596:	6a1a      	ldr	r2, [r3, #32]
 810a598:	8afb      	ldrh	r3, [r7, #22]
 810a59a:	005b      	lsls	r3, r3, #1
 810a59c:	4413      	add	r3, r2
 810a59e:	889a      	ldrh	r2, [r3, #4]
 810a5a0:	68bb      	ldr	r3, [r7, #8]
 810a5a2:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 810a5a4:	68fb      	ldr	r3, [r7, #12]
 810a5a6:	69da      	ldr	r2, [r3, #28]
 810a5a8:	68bb      	ldr	r3, [r7, #8]
 810a5aa:	881b      	ldrh	r3, [r3, #0]
 810a5ac:	011b      	lsls	r3, r3, #4
 810a5ae:	4413      	add	r3, r2
 810a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a5b4:	4613      	mov	r3, r2
 810a5b6:	4619      	mov	r1, r3
 810a5b8:	68f8      	ldr	r0, [r7, #12]
 810a5ba:	f7ff ff84 	bl	810a4c6 <virtqueue_phys_to_virt>
 810a5be:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 810a5c0:	68fb      	ldr	r3, [r7, #12]
 810a5c2:	69da      	ldr	r2, [r3, #28]
 810a5c4:	68bb      	ldr	r3, [r7, #8]
 810a5c6:	881b      	ldrh	r3, [r3, #0]
 810a5c8:	011b      	lsls	r3, r3, #4
 810a5ca:	4413      	add	r3, r2
 810a5cc:	689a      	ldr	r2, [r3, #8]
 810a5ce:	687b      	ldr	r3, [r7, #4]
 810a5d0:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 810a5d2:	693b      	ldr	r3, [r7, #16]
}
 810a5d4:	4618      	mov	r0, r3
 810a5d6:	3718      	adds	r7, #24
 810a5d8:	46bd      	mov	sp, r7
 810a5da:	bd80      	pop	{r7, pc}

0810a5dc <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 810a5dc:	b480      	push	{r7}
 810a5de:	b087      	sub	sp, #28
 810a5e0:	af00      	add	r7, sp, #0
 810a5e2:	60f8      	str	r0, [r7, #12]
 810a5e4:	460b      	mov	r3, r1
 810a5e6:	607a      	str	r2, [r7, #4]
 810a5e8:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 810a5ea:	2300      	movs	r3, #0
 810a5ec:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 810a5ee:	68fb      	ldr	r3, [r7, #12]
 810a5f0:	895b      	ldrh	r3, [r3, #10]
 810a5f2:	897a      	ldrh	r2, [r7, #10]
 810a5f4:	429a      	cmp	r2, r3
 810a5f6:	d901      	bls.n	810a5fc <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 810a5f8:	4b14      	ldr	r3, [pc, #80]	@ (810a64c <virtqueue_add_consumed_buffer+0x70>)
 810a5fa:	e021      	b.n	810a640 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 810a5fc:	68fb      	ldr	r3, [r7, #12]
 810a5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a600:	885b      	ldrh	r3, [r3, #2]
 810a602:	b21a      	sxth	r2, r3
 810a604:	68fb      	ldr	r3, [r7, #12]
 810a606:	895b      	ldrh	r3, [r3, #10]
 810a608:	3b01      	subs	r3, #1
 810a60a:	b29b      	uxth	r3, r3
 810a60c:	b21b      	sxth	r3, r3
 810a60e:	4013      	ands	r3, r2
 810a610:	b21b      	sxth	r3, r3
 810a612:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 810a614:	68fb      	ldr	r3, [r7, #12]
 810a616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a618:	8a7b      	ldrh	r3, [r7, #18]
 810a61a:	00db      	lsls	r3, r3, #3
 810a61c:	4413      	add	r3, r2
 810a61e:	3304      	adds	r3, #4
 810a620:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 810a622:	897a      	ldrh	r2, [r7, #10]
 810a624:	697b      	ldr	r3, [r7, #20]
 810a626:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 810a628:	697b      	ldr	r3, [r7, #20]
 810a62a:	687a      	ldr	r2, [r7, #4]
 810a62c:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 810a62e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 810a632:	68fb      	ldr	r3, [r7, #12]
 810a634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a636:	885a      	ldrh	r2, [r3, #2]
 810a638:	3201      	adds	r2, #1
 810a63a:	b292      	uxth	r2, r2
 810a63c:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 810a63e:	2300      	movs	r3, #0
}
 810a640:	4618      	mov	r0, r3
 810a642:	371c      	adds	r7, #28
 810a644:	46bd      	mov	sp, r7
 810a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a64a:	4770      	bx	lr
 810a64c:	fffff441 	.word	0xfffff441

0810a650 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 810a650:	b480      	push	{r7}
 810a652:	b083      	sub	sp, #12
 810a654:	af00      	add	r7, sp, #0
 810a656:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 810a658:	687b      	ldr	r3, [r7, #4]
 810a65a:	68db      	ldr	r3, [r3, #12]
 810a65c:	f003 0302 	and.w	r3, r3, #2
 810a660:	2b00      	cmp	r3, #0
 810a662:	d010      	beq.n	810a686 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 810a664:	687b      	ldr	r3, [r7, #4]
 810a666:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 810a668:	687b      	ldr	r3, [r7, #4]
 810a66a:	895b      	ldrh	r3, [r3, #10]
 810a66c:	1ad3      	subs	r3, r2, r3
 810a66e:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 810a670:	687b      	ldr	r3, [r7, #4]
 810a672:	6a1a      	ldr	r2, [r3, #32]
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 810a678:	3901      	subs	r1, #1
 810a67a:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 810a67c:	005b      	lsls	r3, r3, #1
 810a67e:	4413      	add	r3, r2
 810a680:	460a      	mov	r2, r1
 810a682:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 810a684:	e008      	b.n	810a698 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 810a686:	687b      	ldr	r3, [r7, #4]
 810a688:	6a1b      	ldr	r3, [r3, #32]
 810a68a:	881a      	ldrh	r2, [r3, #0]
 810a68c:	687b      	ldr	r3, [r7, #4]
 810a68e:	6a1b      	ldr	r3, [r3, #32]
 810a690:	f042 0201 	orr.w	r2, r2, #1
 810a694:	b292      	uxth	r2, r2
 810a696:	801a      	strh	r2, [r3, #0]
}
 810a698:	bf00      	nop
 810a69a:	370c      	adds	r7, #12
 810a69c:	46bd      	mov	sp, r7
 810a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6a2:	4770      	bx	lr

0810a6a4 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 810a6a4:	b580      	push	{r7, lr}
 810a6a6:	b082      	sub	sp, #8
 810a6a8:	af00      	add	r7, sp, #0
 810a6aa:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 810a6ac:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 810a6b0:	6878      	ldr	r0, [r7, #4]
 810a6b2:	f000 f885 	bl	810a7c0 <vq_ring_must_notify_host>
 810a6b6:	4603      	mov	r3, r0
 810a6b8:	2b00      	cmp	r3, #0
 810a6ba:	d002      	beq.n	810a6c2 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 810a6bc:	6878      	ldr	r0, [r7, #4]
 810a6be:	f000 f8b5 	bl	810a82c <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 810a6c2:	687b      	ldr	r3, [r7, #4]
 810a6c4:	2200      	movs	r2, #0
 810a6c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

	VQUEUE_IDLE(vq);
}
 810a6c8:	bf00      	nop
 810a6ca:	3708      	adds	r7, #8
 810a6cc:	46bd      	mov	sp, r7
 810a6ce:	bd80      	pop	{r7, pc}

0810a6d0 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 810a6d0:	b480      	push	{r7}
 810a6d2:	b085      	sub	sp, #20
 810a6d4:	af00      	add	r7, sp, #0
 810a6d6:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 810a6d8:	2300      	movs	r3, #0
 810a6da:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 810a6dc:	2300      	movs	r3, #0
 810a6de:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 810a6e0:	2300      	movs	r3, #0
 810a6e2:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 810a6e4:	687b      	ldr	r3, [r7, #4]
 810a6e6:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 810a6e8:	687b      	ldr	r3, [r7, #4]
 810a6ea:	6a1b      	ldr	r3, [r3, #32]
 810a6ec:	885b      	ldrh	r3, [r3, #2]
 810a6ee:	429a      	cmp	r2, r3
 810a6f0:	d101      	bne.n	810a6f6 <virtqueue_get_desc_size+0x26>
		return 0;
 810a6f2:	2300      	movs	r3, #0
 810a6f4:	e019      	b.n	810a72a <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 810a6f6:	687b      	ldr	r3, [r7, #4]
 810a6f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 810a6fa:	b21a      	sxth	r2, r3
 810a6fc:	687b      	ldr	r3, [r7, #4]
 810a6fe:	895b      	ldrh	r3, [r3, #10]
 810a700:	3b01      	subs	r3, #1
 810a702:	b29b      	uxth	r3, r3
 810a704:	b21b      	sxth	r3, r3
 810a706:	4013      	ands	r3, r2
 810a708:	b21b      	sxth	r3, r3
 810a70a:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 810a70c:	687b      	ldr	r3, [r7, #4]
 810a70e:	6a1a      	ldr	r2, [r3, #32]
 810a710:	89fb      	ldrh	r3, [r7, #14]
 810a712:	005b      	lsls	r3, r3, #1
 810a714:	4413      	add	r3, r2
 810a716:	889b      	ldrh	r3, [r3, #4]
 810a718:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 810a71a:	687b      	ldr	r3, [r7, #4]
 810a71c:	69da      	ldr	r2, [r3, #28]
 810a71e:	89bb      	ldrh	r3, [r7, #12]
 810a720:	011b      	lsls	r3, r3, #4
 810a722:	4413      	add	r3, r2
 810a724:	689b      	ldr	r3, [r3, #8]
 810a726:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 810a728:	68bb      	ldr	r3, [r7, #8]
}
 810a72a:	4618      	mov	r0, r3
 810a72c:	3714      	adds	r7, #20
 810a72e:	46bd      	mov	sp, r7
 810a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a734:	4770      	bx	lr

0810a736 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 810a736:	b580      	push	{r7, lr}
 810a738:	b088      	sub	sp, #32
 810a73a:	af00      	add	r7, sp, #0
 810a73c:	60f8      	str	r0, [r7, #12]
 810a73e:	60b9      	str	r1, [r7, #8]
 810a740:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 810a742:	68fb      	ldr	r3, [r7, #12]
 810a744:	895b      	ldrh	r3, [r3, #10]
 810a746:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 810a748:	68fb      	ldr	r3, [r7, #12]
 810a74a:	3318      	adds	r3, #24
 810a74c:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 810a74e:	69b9      	ldr	r1, [r7, #24]
 810a750:	687b      	ldr	r3, [r7, #4]
 810a752:	68ba      	ldr	r2, [r7, #8]
 810a754:	6978      	ldr	r0, [r7, #20]
 810a756:	f7ff fde3 	bl	810a320 <vring_init>

	for (i = 0; i < size - 1; i++)
 810a75a:	2300      	movs	r3, #0
 810a75c:	61fb      	str	r3, [r7, #28]
 810a75e:	e00c      	b.n	810a77a <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 810a760:	69fb      	ldr	r3, [r7, #28]
 810a762:	b29a      	uxth	r2, r3
 810a764:	697b      	ldr	r3, [r7, #20]
 810a766:	6859      	ldr	r1, [r3, #4]
 810a768:	69fb      	ldr	r3, [r7, #28]
 810a76a:	011b      	lsls	r3, r3, #4
 810a76c:	440b      	add	r3, r1
 810a76e:	3201      	adds	r2, #1
 810a770:	b292      	uxth	r2, r2
 810a772:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 810a774:	69fb      	ldr	r3, [r7, #28]
 810a776:	3301      	adds	r3, #1
 810a778:	61fb      	str	r3, [r7, #28]
 810a77a:	69bb      	ldr	r3, [r7, #24]
 810a77c:	3b01      	subs	r3, #1
 810a77e:	69fa      	ldr	r2, [r7, #28]
 810a780:	429a      	cmp	r2, r3
 810a782:	dbed      	blt.n	810a760 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 810a784:	697b      	ldr	r3, [r7, #20]
 810a786:	685a      	ldr	r2, [r3, #4]
 810a788:	69fb      	ldr	r3, [r7, #28]
 810a78a:	011b      	lsls	r3, r3, #4
 810a78c:	4413      	add	r3, r2
 810a78e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 810a792:	81da      	strh	r2, [r3, #14]
}
 810a794:	bf00      	nop
 810a796:	3720      	adds	r7, #32
 810a798:	46bd      	mov	sp, r7
 810a79a:	bd80      	pop	{r7, pc}

0810a79c <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 810a79c:	b580      	push	{r7, lr}
 810a79e:	b082      	sub	sp, #8
 810a7a0:	af00      	add	r7, sp, #0
 810a7a2:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 810a7a4:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 810a7a8:	687b      	ldr	r3, [r7, #4]
 810a7aa:	691b      	ldr	r3, [r3, #16]
 810a7ac:	2b00      	cmp	r3, #0
 810a7ae:	d003      	beq.n	810a7b8 <virtqueue_notification+0x1c>
		vq->callback(vq);
 810a7b0:	687b      	ldr	r3, [r7, #4]
 810a7b2:	691b      	ldr	r3, [r3, #16]
 810a7b4:	6878      	ldr	r0, [r7, #4]
 810a7b6:	4798      	blx	r3
}
 810a7b8:	bf00      	nop
 810a7ba:	3708      	adds	r7, #8
 810a7bc:	46bd      	mov	sp, r7
 810a7be:	bd80      	pop	{r7, pc}

0810a7c0 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 810a7c0:	b580      	push	{r7, lr}
 810a7c2:	b084      	sub	sp, #16
 810a7c4:	af00      	add	r7, sp, #0
 810a7c6:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 810a7c8:	687b      	ldr	r3, [r7, #4]
 810a7ca:	68db      	ldr	r3, [r3, #12]
 810a7cc:	f003 0302 	and.w	r3, r3, #2
 810a7d0:	2b00      	cmp	r3, #0
 810a7d2:	d01d      	beq.n	810a810 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 810a7d4:	687b      	ldr	r3, [r7, #4]
 810a7d6:	6a1b      	ldr	r3, [r3, #32]
 810a7d8:	885b      	ldrh	r3, [r3, #2]
 810a7da:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 810a7dc:	687b      	ldr	r3, [r7, #4]
 810a7de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810a7e0:	89fa      	ldrh	r2, [r7, #14]
 810a7e2:	1ad3      	subs	r3, r2, r3
 810a7e4:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a7ea:	687b      	ldr	r3, [r7, #4]
 810a7ec:	699b      	ldr	r3, [r3, #24]
 810a7ee:	00db      	lsls	r3, r3, #3
 810a7f0:	4413      	add	r3, r2
 810a7f2:	685b      	ldr	r3, [r3, #4]
 810a7f4:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 810a7f6:	89ba      	ldrh	r2, [r7, #12]
 810a7f8:	89f9      	ldrh	r1, [r7, #14]
 810a7fa:	897b      	ldrh	r3, [r7, #10]
 810a7fc:	4618      	mov	r0, r3
 810a7fe:	f7ff fdb8 	bl	810a372 <vring_need_event>
 810a802:	4603      	mov	r3, r0
 810a804:	2b00      	cmp	r3, #0
 810a806:	bf14      	ite	ne
 810a808:	2301      	movne	r3, #1
 810a80a:	2300      	moveq	r3, #0
 810a80c:	b2db      	uxtb	r3, r3
 810a80e:	e009      	b.n	810a824 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 810a810:	687b      	ldr	r3, [r7, #4]
 810a812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a814:	881b      	ldrh	r3, [r3, #0]
 810a816:	f003 0301 	and.w	r3, r3, #1
 810a81a:	2b00      	cmp	r3, #0
 810a81c:	bf0c      	ite	eq
 810a81e:	2301      	moveq	r3, #1
 810a820:	2300      	movne	r3, #0
 810a822:	b2db      	uxtb	r3, r3
}
 810a824:	4618      	mov	r0, r3
 810a826:	3710      	adds	r7, #16
 810a828:	46bd      	mov	sp, r7
 810a82a:	bd80      	pop	{r7, pc}

0810a82c <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 810a82c:	b580      	push	{r7, lr}
 810a82e:	b082      	sub	sp, #8
 810a830:	af00      	add	r7, sp, #0
 810a832:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 810a834:	687b      	ldr	r3, [r7, #4]
 810a836:	695b      	ldr	r3, [r3, #20]
 810a838:	2b00      	cmp	r3, #0
 810a83a:	d003      	beq.n	810a844 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	695b      	ldr	r3, [r3, #20]
 810a840:	6878      	ldr	r0, [r7, #4]
 810a842:	4798      	blx	r3
}
 810a844:	bf00      	nop
 810a846:	3708      	adds	r7, #8
 810a848:	46bd      	mov	sp, r7
 810a84a:	bd80      	pop	{r7, pc}

0810a84c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 810a84c:	b580      	push	{r7, lr}
 810a84e:	b082      	sub	sp, #8
 810a850:	af00      	add	r7, sp, #0
 810a852:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 810a854:	4b04      	ldr	r3, [pc, #16]	@ (810a868 <HAL_HSEM_FreeCallback+0x1c>)
 810a856:	2201      	movs	r2, #1
 810a858:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810a85a:	2001      	movs	r0, #1
 810a85c:	f7f6 fea8 	bl	81015b0 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 810a860:	bf00      	nop
 810a862:	3708      	adds	r7, #8
 810a864:	46bd      	mov	sp, r7
 810a866:	bd80      	pop	{r7, pc}
 810a868:	10004bdc 	.word	0x10004bdc

0810a86c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 810a86c:	b580      	push	{r7, lr}
 810a86e:	b082      	sub	sp, #8
 810a870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 810a872:	4b0b      	ldr	r3, [pc, #44]	@ (810a8a0 <MAILBOX_Init+0x34>)
 810a874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810a878:	4a09      	ldr	r2, [pc, #36]	@ (810a8a0 <MAILBOX_Init+0x34>)
 810a87a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810a87e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810a882:	4b07      	ldr	r3, [pc, #28]	@ (810a8a0 <MAILBOX_Init+0x34>)
 810a884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810a888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810a88c:	607b      	str	r3, [r7, #4]
 810a88e:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810a890:	2001      	movs	r0, #1
 810a892:	f7f6 fe8d 	bl	81015b0 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 810a896:	2300      	movs	r3, #0
}
 810a898:	4618      	mov	r0, r3
 810a89a:	3708      	adds	r7, #8
 810a89c:	46bd      	mov	sp, r7
 810a89e:	bd80      	pop	{r7, pc}
 810a8a0:	58024400 	.word	0x58024400

0810a8a4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 810a8a4:	b580      	push	{r7, lr}
 810a8a6:	b082      	sub	sp, #8
 810a8a8:	af00      	add	r7, sp, #0
 810a8aa:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 810a8ac:	4b09      	ldr	r3, [pc, #36]	@ (810a8d4 <MAILBOX_Poll+0x30>)
 810a8ae:	681b      	ldr	r3, [r3, #0]
 810a8b0:	2b01      	cmp	r3, #1
 810a8b2:	d108      	bne.n	810a8c6 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 810a8b4:	2101      	movs	r1, #1
 810a8b6:	6878      	ldr	r0, [r7, #4]
 810a8b8:	f7fe fd25 	bl	8109306 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 810a8bc:	4b05      	ldr	r3, [pc, #20]	@ (810a8d4 <MAILBOX_Poll+0x30>)
 810a8be:	2200      	movs	r2, #0
 810a8c0:	601a      	str	r2, [r3, #0]
    return 0;
 810a8c2:	2300      	movs	r3, #0
 810a8c4:	e001      	b.n	810a8ca <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 810a8c6:	f06f 030a 	mvn.w	r3, #10
}
 810a8ca:	4618      	mov	r0, r3
 810a8cc:	3708      	adds	r7, #8
 810a8ce:	46bd      	mov	sp, r7
 810a8d0:	bd80      	pop	{r7, pc}
 810a8d2:	bf00      	nop
 810a8d4:	10004bdc 	.word	0x10004bdc

0810a8d8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 810a8d8:	b580      	push	{r7, lr}
 810a8da:	b082      	sub	sp, #8
 810a8dc:	af00      	add	r7, sp, #0
 810a8de:	6078      	str	r0, [r7, #4]
 810a8e0:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 810a8e2:	2001      	movs	r0, #1
 810a8e4:	f7f6 fe36 	bl	8101554 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 810a8e8:	2100      	movs	r1, #0
 810a8ea:	2001      	movs	r0, #1
 810a8ec:	f7f6 fe4c 	bl	8101588 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 810a8f0:	2300      	movs	r3, #0
}
 810a8f2:	4618      	mov	r0, r3
 810a8f4:	3708      	adds	r7, #8
 810a8f6:	46bd      	mov	sp, r7
 810a8f8:	bd80      	pop	{r7, pc}

0810a8fa <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 810a8fa:	b480      	push	{r7}
 810a8fc:	b083      	sub	sp, #12
 810a8fe:	af00      	add	r7, sp, #0
 810a900:	6078      	str	r0, [r7, #4]
 810a902:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 810a904:	687b      	ldr	r3, [r7, #4]
 810a906:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 810a908:	683a      	ldr	r2, [r7, #0]
 810a90a:	429a      	cmp	r2, r3
 810a90c:	d209      	bcs.n	810a922 <metal_device_io_region+0x28>
 810a90e:	683a      	ldr	r2, [r7, #0]
 810a910:	4613      	mov	r3, r2
 810a912:	005b      	lsls	r3, r3, #1
 810a914:	4413      	add	r3, r2
 810a916:	011b      	lsls	r3, r3, #4
 810a918:	3308      	adds	r3, #8
 810a91a:	687a      	ldr	r2, [r7, #4]
 810a91c:	4413      	add	r3, r2
 810a91e:	3304      	adds	r3, #4
 810a920:	e000      	b.n	810a924 <metal_device_io_region+0x2a>
 810a922:	2300      	movs	r3, #0
}
 810a924:	4618      	mov	r0, r3
 810a926:	370c      	adds	r7, #12
 810a928:	46bd      	mov	sp, r7
 810a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a92e:	4770      	bx	lr

0810a930 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 810a930:	b590      	push	{r4, r7, lr}
 810a932:	b08d      	sub	sp, #52	@ 0x34
 810a934:	af04      	add	r7, sp, #16
 810a936:	6078      	str	r0, [r7, #4]
  int status = 0;
 810a938:	2300      	movs	r3, #0
 810a93a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 810a93c:	2300      	movs	r3, #0
 810a93e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 810a940:	4a41      	ldr	r2, [pc, #260]	@ (810aa48 <OPENAMP_shmem_init+0x118>)
 810a942:	f107 0310 	add.w	r3, r7, #16
 810a946:	e892 0003 	ldmia.w	r2, {r0, r1}
 810a94a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 810a94e:	2300      	movs	r3, #0
 810a950:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 810a952:	2300      	movs	r3, #0
 810a954:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 810a956:	f107 0310 	add.w	r3, r7, #16
 810a95a:	4618      	mov	r0, r3
 810a95c:	f7fe f8e6 	bl	8108b2c <metal_init>

  status = metal_register_generic_device(&shm_device);
 810a960:	483a      	ldr	r0, [pc, #232]	@ (810aa4c <OPENAMP_shmem_init+0x11c>)
 810a962:	f7fd ff8b 	bl	810887c <metal_register_generic_device>
 810a966:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810a968:	69fb      	ldr	r3, [r7, #28]
 810a96a:	2b00      	cmp	r3, #0
 810a96c:	d001      	beq.n	810a972 <OPENAMP_shmem_init+0x42>
    return status;
 810a96e:	69fb      	ldr	r3, [r7, #28]
 810a970:	e066      	b.n	810aa40 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 810a972:	f107 0318 	add.w	r3, r7, #24
 810a976:	461a      	mov	r2, r3
 810a978:	4935      	ldr	r1, [pc, #212]	@ (810aa50 <OPENAMP_shmem_init+0x120>)
 810a97a:	4836      	ldr	r0, [pc, #216]	@ (810aa54 <OPENAMP_shmem_init+0x124>)
 810a97c:	f7fd ff40 	bl	8108800 <metal_device_open>
 810a980:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810a982:	69fb      	ldr	r3, [r7, #28]
 810a984:	2b00      	cmp	r3, #0
 810a986:	d001      	beq.n	810a98c <OPENAMP_shmem_init+0x5c>
    return status;
 810a988:	69fb      	ldr	r3, [r7, #28]
 810a98a:	e059      	b.n	810aa40 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 810a98c:	4a32      	ldr	r2, [pc, #200]	@ (810aa58 <OPENAMP_shmem_init+0x128>)
 810a98e:	4b33      	ldr	r3, [pc, #204]	@ (810aa5c <OPENAMP_shmem_init+0x12c>)
 810a990:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810a992:	69bb      	ldr	r3, [r7, #24]
 810a994:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 810a998:	4a31      	ldr	r2, [pc, #196]	@ (810aa60 <OPENAMP_shmem_init+0x130>)
 810a99a:	4b2f      	ldr	r3, [pc, #188]	@ (810aa58 <OPENAMP_shmem_init+0x128>)
 810a99c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810a99e:	461a      	mov	r2, r3
 810a9a0:	2300      	movs	r3, #0
 810a9a2:	9302      	str	r3, [sp, #8]
 810a9a4:	2300      	movs	r3, #0
 810a9a6:	9301      	str	r3, [sp, #4]
 810a9a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a9ac:	9300      	str	r3, [sp, #0]
 810a9ae:	4613      	mov	r3, r2
 810a9b0:	4a2a      	ldr	r2, [pc, #168]	@ (810aa5c <OPENAMP_shmem_init+0x12c>)
 810a9b2:	4929      	ldr	r1, [pc, #164]	@ (810aa58 <OPENAMP_shmem_init+0x128>)
 810a9b4:	f7fe f907 	bl	8108bc6 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 810a9b8:	69bb      	ldr	r3, [r7, #24]
 810a9ba:	2100      	movs	r1, #0
 810a9bc:	4618      	mov	r0, r3
 810a9be:	f7ff ff9c 	bl	810a8fa <metal_device_io_region>
 810a9c2:	4603      	mov	r3, r0
 810a9c4:	4a27      	ldr	r2, [pc, #156]	@ (810aa64 <OPENAMP_shmem_init+0x134>)
 810a9c6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 810a9c8:	4b26      	ldr	r3, [pc, #152]	@ (810aa64 <OPENAMP_shmem_init+0x134>)
 810a9ca:	681b      	ldr	r3, [r3, #0]
 810a9cc:	2b00      	cmp	r3, #0
 810a9ce:	d102      	bne.n	810a9d6 <OPENAMP_shmem_init+0xa6>
    return -1;
 810a9d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a9d4:	e034      	b.n	810aa40 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 810a9d6:	f107 0208 	add.w	r2, r7, #8
 810a9da:	f107 030c 	add.w	r3, r7, #12
 810a9de:	4619      	mov	r1, r3
 810a9e0:	6878      	ldr	r0, [r7, #4]
 810a9e2:	f000 f905 	bl	810abf0 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 810a9e6:	68fb      	ldr	r3, [r7, #12]
 810a9e8:	4a1f      	ldr	r2, [pc, #124]	@ (810aa68 <OPENAMP_shmem_init+0x138>)
 810a9ea:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 810a9ec:	4b1e      	ldr	r3, [pc, #120]	@ (810aa68 <OPENAMP_shmem_init+0x138>)
 810a9ee:	681b      	ldr	r3, [r3, #0]
 810a9f0:	2b00      	cmp	r3, #0
 810a9f2:	d102      	bne.n	810a9fa <OPENAMP_shmem_init+0xca>
  {
    return -1;
 810a9f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810a9f8:	e022      	b.n	810aa40 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 810a9fa:	69bb      	ldr	r3, [r7, #24]
 810a9fc:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 810aa00:	4b19      	ldr	r3, [pc, #100]	@ (810aa68 <OPENAMP_shmem_init+0x138>)
 810aa02:	6819      	ldr	r1, [r3, #0]
 810aa04:	4b18      	ldr	r3, [pc, #96]	@ (810aa68 <OPENAMP_shmem_init+0x138>)
 810aa06:	681a      	ldr	r2, [r3, #0]
 810aa08:	68bb      	ldr	r3, [r7, #8]
 810aa0a:	461c      	mov	r4, r3
 810aa0c:	2300      	movs	r3, #0
 810aa0e:	9302      	str	r3, [sp, #8]
 810aa10:	2300      	movs	r3, #0
 810aa12:	9301      	str	r3, [sp, #4]
 810aa14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810aa18:	9300      	str	r3, [sp, #0]
 810aa1a:	4623      	mov	r3, r4
 810aa1c:	f7fe f8d3 	bl	8108bc6 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 810aa20:	69bb      	ldr	r3, [r7, #24]
 810aa22:	2101      	movs	r1, #1
 810aa24:	4618      	mov	r0, r3
 810aa26:	f7ff ff68 	bl	810a8fa <metal_device_io_region>
 810aa2a:	4603      	mov	r3, r0
 810aa2c:	4a0f      	ldr	r2, [pc, #60]	@ (810aa6c <OPENAMP_shmem_init+0x13c>)
 810aa2e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 810aa30:	4b0e      	ldr	r3, [pc, #56]	@ (810aa6c <OPENAMP_shmem_init+0x13c>)
 810aa32:	681b      	ldr	r3, [r3, #0]
 810aa34:	2b00      	cmp	r3, #0
 810aa36:	d102      	bne.n	810aa3e <OPENAMP_shmem_init+0x10e>
    return -1;
 810aa38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810aa3c:	e000      	b.n	810aa40 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 810aa3e:	2300      	movs	r3, #0
}
 810aa40:	4618      	mov	r0, r3
 810aa42:	3724      	adds	r7, #36	@ 0x24
 810aa44:	46bd      	mov	sp, r7
 810aa46:	bd90      	pop	{r4, r7, pc}
 810aa48:	0810c1b8 	.word	0x0810c1b8
 810aa4c:	10000040 	.word	0x10000040
 810aa50:	0810c1a4 	.word	0x0810c1a4
 810aa54:	0810c1b0 	.word	0x0810c1b0
 810aa58:	38000400 	.word	0x38000400
 810aa5c:	10004c70 	.word	0x10004c70
 810aa60:	38010000 	.word	0x38010000
 810aa64:	10004be0 	.word	0x10004be0
 810aa68:	10004be8 	.word	0x10004be8
 810aa6c:	10004be4 	.word	0x10004be4

0810aa70 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 810aa70:	b590      	push	{r4, r7, lr}
 810aa72:	b08b      	sub	sp, #44	@ 0x2c
 810aa74:	af04      	add	r7, sp, #16
 810aa76:	6078      	str	r0, [r7, #4]
 810aa78:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 810aa7a:	2300      	movs	r3, #0
 810aa7c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 810aa7e:	2300      	movs	r3, #0
 810aa80:	613b      	str	r3, [r7, #16]
  int status = 0;
 810aa82:	2300      	movs	r3, #0
 810aa84:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810aa86:	f7ff fef1 	bl	810a86c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 810aa8a:	6878      	ldr	r0, [r7, #4]
 810aa8c:	f7ff ff50 	bl	810a930 <OPENAMP_shmem_init>
 810aa90:	60f8      	str	r0, [r7, #12]
  if(status)
 810aa92:	68fb      	ldr	r3, [r7, #12]
 810aa94:	2b00      	cmp	r3, #0
 810aa96:	d001      	beq.n	810aa9c <MX_OPENAMP_Init+0x2c>
  {
    return status;
 810aa98:	68fb      	ldr	r3, [r7, #12]
 810aa9a:	e06a      	b.n	810ab72 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 810aa9c:	6878      	ldr	r0, [r7, #4]
 810aa9e:	4b37      	ldr	r3, [pc, #220]	@ (810ab7c <MX_OPENAMP_Init+0x10c>)
 810aaa0:	681b      	ldr	r3, [r3, #0]
 810aaa2:	f103 0218 	add.w	r2, r3, #24
 810aaa6:	4b36      	ldr	r3, [pc, #216]	@ (810ab80 <MX_OPENAMP_Init+0x110>)
 810aaa8:	681b      	ldr	r3, [r3, #0]
 810aaaa:	2100      	movs	r1, #0
 810aaac:	9102      	str	r1, [sp, #8]
 810aaae:	4935      	ldr	r1, [pc, #212]	@ (810ab84 <MX_OPENAMP_Init+0x114>)
 810aab0:	9101      	str	r1, [sp, #4]
 810aab2:	2100      	movs	r1, #0
 810aab4:	9100      	str	r1, [sp, #0]
 810aab6:	21ff      	movs	r1, #255	@ 0xff
 810aab8:	f7fe fb46 	bl	8109148 <rproc_virtio_create_vdev>
 810aabc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 810aabe:	693b      	ldr	r3, [r7, #16]
 810aac0:	2b00      	cmp	r3, #0
 810aac2:	d102      	bne.n	810aaca <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 810aac4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810aac8:	e053      	b.n	810ab72 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 810aaca:	6938      	ldr	r0, [r7, #16]
 810aacc:	f7fe fc57 	bl	810937e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 810aad0:	4b2a      	ldr	r3, [pc, #168]	@ (810ab7c <MX_OPENAMP_Init+0x10c>)
 810aad2:	681b      	ldr	r3, [r3, #0]
 810aad4:	3334      	adds	r3, #52	@ 0x34
 810aad6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810aad8:	697b      	ldr	r3, [r7, #20]
 810aada:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810aadc:	697b      	ldr	r3, [r7, #20]
 810aade:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810aae0:	461c      	mov	r4, r3
 810aae2:	4b29      	ldr	r3, [pc, #164]	@ (810ab88 <MX_OPENAMP_Init+0x118>)
 810aae4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810aae6:	697a      	ldr	r2, [r7, #20]
 810aae8:	6892      	ldr	r2, [r2, #8]
 810aaea:	6979      	ldr	r1, [r7, #20]
 810aaec:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810aaee:	9102      	str	r1, [sp, #8]
 810aaf0:	9201      	str	r2, [sp, #4]
 810aaf2:	9300      	str	r3, [sp, #0]
 810aaf4:	4623      	mov	r3, r4
 810aaf6:	4602      	mov	r2, r0
 810aaf8:	2100      	movs	r1, #0
 810aafa:	6938      	ldr	r0, [r7, #16]
 810aafc:	f7fe fbd2 	bl	81092a4 <rproc_virtio_init_vring>
 810ab00:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810ab02:	68fb      	ldr	r3, [r7, #12]
 810ab04:	2b00      	cmp	r3, #0
 810ab06:	d001      	beq.n	810ab0c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 810ab08:	68fb      	ldr	r3, [r7, #12]
 810ab0a:	e032      	b.n	810ab72 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 810ab0c:	4b1b      	ldr	r3, [pc, #108]	@ (810ab7c <MX_OPENAMP_Init+0x10c>)
 810ab0e:	681b      	ldr	r3, [r3, #0]
 810ab10:	3348      	adds	r3, #72	@ 0x48
 810ab12:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810ab14:	697b      	ldr	r3, [r7, #20]
 810ab16:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810ab18:	697b      	ldr	r3, [r7, #20]
 810ab1a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810ab1c:	461c      	mov	r4, r3
 810ab1e:	4b1a      	ldr	r3, [pc, #104]	@ (810ab88 <MX_OPENAMP_Init+0x118>)
 810ab20:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810ab22:	697a      	ldr	r2, [r7, #20]
 810ab24:	6892      	ldr	r2, [r2, #8]
 810ab26:	6979      	ldr	r1, [r7, #20]
 810ab28:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810ab2a:	9102      	str	r1, [sp, #8]
 810ab2c:	9201      	str	r2, [sp, #4]
 810ab2e:	9300      	str	r3, [sp, #0]
 810ab30:	4623      	mov	r3, r4
 810ab32:	4602      	mov	r2, r0
 810ab34:	2101      	movs	r1, #1
 810ab36:	6938      	ldr	r0, [r7, #16]
 810ab38:	f7fe fbb4 	bl	81092a4 <rproc_virtio_init_vring>
 810ab3c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810ab3e:	68fb      	ldr	r3, [r7, #12]
 810ab40:	2b00      	cmp	r3, #0
 810ab42:	d001      	beq.n	810ab48 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 810ab44:	68fb      	ldr	r3, [r7, #12]
 810ab46:	e014      	b.n	810ab72 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810ab48:	4b10      	ldr	r3, [pc, #64]	@ (810ab8c <MX_OPENAMP_Init+0x11c>)
 810ab4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ab4e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 810ab50:	4a0f      	ldr	r2, [pc, #60]	@ (810ab90 <MX_OPENAMP_Init+0x120>)
 810ab52:	4b0e      	ldr	r3, [pc, #56]	@ (810ab8c <MX_OPENAMP_Init+0x11c>)
 810ab54:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810ab56:	461a      	mov	r2, r3
 810ab58:	480e      	ldr	r0, [pc, #56]	@ (810ab94 <MX_OPENAMP_Init+0x124>)
 810ab5a:	f7ff f85f 	bl	8109c1c <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 810ab5e:	4b0a      	ldr	r3, [pc, #40]	@ (810ab88 <MX_OPENAMP_Init+0x118>)
 810ab60:	681b      	ldr	r3, [r3, #0]
 810ab62:	4a0c      	ldr	r2, [pc, #48]	@ (810ab94 <MX_OPENAMP_Init+0x124>)
 810ab64:	9200      	str	r2, [sp, #0]
 810ab66:	683a      	ldr	r2, [r7, #0]
 810ab68:	6939      	ldr	r1, [r7, #16]
 810ab6a:	480b      	ldr	r0, [pc, #44]	@ (810ab98 <MX_OPENAMP_Init+0x128>)
 810ab6c:	f7ff facc 	bl	810a108 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 810ab70:	2300      	movs	r3, #0
}
 810ab72:	4618      	mov	r0, r3
 810ab74:	371c      	adds	r7, #28
 810ab76:	46bd      	mov	sp, r7
 810ab78:	bd90      	pop	{r4, r7, pc}
 810ab7a:	bf00      	nop
 810ab7c:	10004be8 	.word	0x10004be8
 810ab80:	10004be4 	.word	0x10004be4
 810ab84:	0810a8d9 	.word	0x0810a8d9
 810ab88:	10004be0 	.word	0x10004be0
 810ab8c:	38000400 	.word	0x38000400
 810ab90:	38010000 	.word	0x38010000
 810ab94:	10004bec 	.word	0x10004bec
 810ab98:	10004bf8 	.word	0x10004bf8

0810ab9c <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 810ab9c:	b580      	push	{r7, lr}
 810ab9e:	b08a      	sub	sp, #40	@ 0x28
 810aba0:	af04      	add	r7, sp, #16
 810aba2:	60f8      	str	r0, [r7, #12]
 810aba4:	60b9      	str	r1, [r7, #8]
 810aba6:	607a      	str	r2, [r7, #4]
 810aba8:	603b      	str	r3, [r7, #0]
  int ret = 0;
 810abaa:	2300      	movs	r3, #0
 810abac:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 810abae:	6a3b      	ldr	r3, [r7, #32]
 810abb0:	9302      	str	r3, [sp, #8]
 810abb2:	683b      	ldr	r3, [r7, #0]
 810abb4:	9301      	str	r3, [sp, #4]
 810abb6:	687b      	ldr	r3, [r7, #4]
 810abb8:	9300      	str	r3, [sp, #0]
 810abba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810abbe:	68ba      	ldr	r2, [r7, #8]
 810abc0:	4904      	ldr	r1, [pc, #16]	@ (810abd4 <OPENAMP_create_endpoint+0x38>)
 810abc2:	68f8      	ldr	r0, [r7, #12]
 810abc4:	f7fe fe68 	bl	8109898 <rpmsg_create_ept>
 810abc8:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 810abca:	697b      	ldr	r3, [r7, #20]
}
 810abcc:	4618      	mov	r0, r3
 810abce:	3718      	adds	r7, #24
 810abd0:	46bd      	mov	sp, r7
 810abd2:	bd80      	pop	{r7, pc}
 810abd4:	10004bf8 	.word	0x10004bf8

0810abd8 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 810abd8:	b580      	push	{r7, lr}
 810abda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 810abdc:	4b03      	ldr	r3, [pc, #12]	@ (810abec <OPENAMP_check_for_message+0x14>)
 810abde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810abe0:	4618      	mov	r0, r3
 810abe2:	f7ff fe5f 	bl	810a8a4 <MAILBOX_Poll>
}
 810abe6:	bf00      	nop
 810abe8:	bd80      	pop	{r7, pc}
 810abea:	bf00      	nop
 810abec:	10004bf8 	.word	0x10004bf8

0810abf0 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 810abf0:	b480      	push	{r7}
 810abf2:	b085      	sub	sp, #20
 810abf4:	af00      	add	r7, sp, #0
 810abf6:	60f8      	str	r0, [r7, #12]
 810abf8:	60b9      	str	r1, [r7, #8]
 810abfa:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 810abfc:	bf00      	nop
 810abfe:	4b08      	ldr	r3, [pc, #32]	@ (810ac20 <resource_table_init+0x30>)
 810ac00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810ac02:	4a08      	ldr	r2, [pc, #32]	@ (810ac24 <resource_table_init+0x34>)
 810ac04:	4293      	cmp	r3, r2
 810ac06:	d1fa      	bne.n	810abfe <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	228c      	movs	r2, #140	@ 0x8c
 810ac0c:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 810ac0e:	68bb      	ldr	r3, [r7, #8]
 810ac10:	4a03      	ldr	r2, [pc, #12]	@ (810ac20 <resource_table_init+0x30>)
 810ac12:	601a      	str	r2, [r3, #0]
}
 810ac14:	bf00      	nop
 810ac16:	3714      	adds	r7, #20
 810ac18:	46bd      	mov	sp, r7
 810ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac1e:	4770      	bx	lr
 810ac20:	38000000 	.word	0x38000000
 810ac24:	38000400 	.word	0x38000400

0810ac28 <__assert_func>:
 810ac28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ac2a:	4614      	mov	r4, r2
 810ac2c:	461a      	mov	r2, r3
 810ac2e:	4b09      	ldr	r3, [pc, #36]	@ (810ac54 <__assert_func+0x2c>)
 810ac30:	681b      	ldr	r3, [r3, #0]
 810ac32:	4605      	mov	r5, r0
 810ac34:	68d8      	ldr	r0, [r3, #12]
 810ac36:	b954      	cbnz	r4, 810ac4e <__assert_func+0x26>
 810ac38:	4b07      	ldr	r3, [pc, #28]	@ (810ac58 <__assert_func+0x30>)
 810ac3a:	461c      	mov	r4, r3
 810ac3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ac40:	9100      	str	r1, [sp, #0]
 810ac42:	462b      	mov	r3, r5
 810ac44:	4905      	ldr	r1, [pc, #20]	@ (810ac5c <__assert_func+0x34>)
 810ac46:	f000 f98f 	bl	810af68 <fiprintf>
 810ac4a:	f000 fa36 	bl	810b0ba <abort>
 810ac4e:	4b04      	ldr	r3, [pc, #16]	@ (810ac60 <__assert_func+0x38>)
 810ac50:	e7f4      	b.n	810ac3c <__assert_func+0x14>
 810ac52:	bf00      	nop
 810ac54:	100000c8 	.word	0x100000c8
 810ac58:	0810c2e1 	.word	0x0810c2e1
 810ac5c:	0810c2b3 	.word	0x0810c2b3
 810ac60:	0810c2a6 	.word	0x0810c2a6

0810ac64 <malloc>:
 810ac64:	4b02      	ldr	r3, [pc, #8]	@ (810ac70 <malloc+0xc>)
 810ac66:	4601      	mov	r1, r0
 810ac68:	6818      	ldr	r0, [r3, #0]
 810ac6a:	f000 b82d 	b.w	810acc8 <_malloc_r>
 810ac6e:	bf00      	nop
 810ac70:	100000c8 	.word	0x100000c8

0810ac74 <free>:
 810ac74:	4b02      	ldr	r3, [pc, #8]	@ (810ac80 <free+0xc>)
 810ac76:	4601      	mov	r1, r0
 810ac78:	6818      	ldr	r0, [r3, #0]
 810ac7a:	f000 ba25 	b.w	810b0c8 <_free_r>
 810ac7e:	bf00      	nop
 810ac80:	100000c8 	.word	0x100000c8

0810ac84 <sbrk_aligned>:
 810ac84:	b570      	push	{r4, r5, r6, lr}
 810ac86:	4e0f      	ldr	r6, [pc, #60]	@ (810acc4 <sbrk_aligned+0x40>)
 810ac88:	460c      	mov	r4, r1
 810ac8a:	6831      	ldr	r1, [r6, #0]
 810ac8c:	4605      	mov	r5, r0
 810ac8e:	b911      	cbnz	r1, 810ac96 <sbrk_aligned+0x12>
 810ac90:	f000 f9c8 	bl	810b024 <_sbrk_r>
 810ac94:	6030      	str	r0, [r6, #0]
 810ac96:	4621      	mov	r1, r4
 810ac98:	4628      	mov	r0, r5
 810ac9a:	f000 f9c3 	bl	810b024 <_sbrk_r>
 810ac9e:	1c43      	adds	r3, r0, #1
 810aca0:	d103      	bne.n	810acaa <sbrk_aligned+0x26>
 810aca2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 810aca6:	4620      	mov	r0, r4
 810aca8:	bd70      	pop	{r4, r5, r6, pc}
 810acaa:	1cc4      	adds	r4, r0, #3
 810acac:	f024 0403 	bic.w	r4, r4, #3
 810acb0:	42a0      	cmp	r0, r4
 810acb2:	d0f8      	beq.n	810aca6 <sbrk_aligned+0x22>
 810acb4:	1a21      	subs	r1, r4, r0
 810acb6:	4628      	mov	r0, r5
 810acb8:	f000 f9b4 	bl	810b024 <_sbrk_r>
 810acbc:	3001      	adds	r0, #1
 810acbe:	d1f2      	bne.n	810aca6 <sbrk_aligned+0x22>
 810acc0:	e7ef      	b.n	810aca2 <sbrk_aligned+0x1e>
 810acc2:	bf00      	nop
 810acc4:	10004c74 	.word	0x10004c74

0810acc8 <_malloc_r>:
 810acc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810accc:	1ccd      	adds	r5, r1, #3
 810acce:	f025 0503 	bic.w	r5, r5, #3
 810acd2:	3508      	adds	r5, #8
 810acd4:	2d0c      	cmp	r5, #12
 810acd6:	bf38      	it	cc
 810acd8:	250c      	movcc	r5, #12
 810acda:	2d00      	cmp	r5, #0
 810acdc:	4606      	mov	r6, r0
 810acde:	db01      	blt.n	810ace4 <_malloc_r+0x1c>
 810ace0:	42a9      	cmp	r1, r5
 810ace2:	d904      	bls.n	810acee <_malloc_r+0x26>
 810ace4:	230c      	movs	r3, #12
 810ace6:	6033      	str	r3, [r6, #0]
 810ace8:	2000      	movs	r0, #0
 810acea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810acee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810adc4 <_malloc_r+0xfc>
 810acf2:	f000 f869 	bl	810adc8 <__malloc_lock>
 810acf6:	f8d8 3000 	ldr.w	r3, [r8]
 810acfa:	461c      	mov	r4, r3
 810acfc:	bb44      	cbnz	r4, 810ad50 <_malloc_r+0x88>
 810acfe:	4629      	mov	r1, r5
 810ad00:	4630      	mov	r0, r6
 810ad02:	f7ff ffbf 	bl	810ac84 <sbrk_aligned>
 810ad06:	1c43      	adds	r3, r0, #1
 810ad08:	4604      	mov	r4, r0
 810ad0a:	d158      	bne.n	810adbe <_malloc_r+0xf6>
 810ad0c:	f8d8 4000 	ldr.w	r4, [r8]
 810ad10:	4627      	mov	r7, r4
 810ad12:	2f00      	cmp	r7, #0
 810ad14:	d143      	bne.n	810ad9e <_malloc_r+0xd6>
 810ad16:	2c00      	cmp	r4, #0
 810ad18:	d04b      	beq.n	810adb2 <_malloc_r+0xea>
 810ad1a:	6823      	ldr	r3, [r4, #0]
 810ad1c:	4639      	mov	r1, r7
 810ad1e:	4630      	mov	r0, r6
 810ad20:	eb04 0903 	add.w	r9, r4, r3
 810ad24:	f000 f97e 	bl	810b024 <_sbrk_r>
 810ad28:	4581      	cmp	r9, r0
 810ad2a:	d142      	bne.n	810adb2 <_malloc_r+0xea>
 810ad2c:	6821      	ldr	r1, [r4, #0]
 810ad2e:	1a6d      	subs	r5, r5, r1
 810ad30:	4629      	mov	r1, r5
 810ad32:	4630      	mov	r0, r6
 810ad34:	f7ff ffa6 	bl	810ac84 <sbrk_aligned>
 810ad38:	3001      	adds	r0, #1
 810ad3a:	d03a      	beq.n	810adb2 <_malloc_r+0xea>
 810ad3c:	6823      	ldr	r3, [r4, #0]
 810ad3e:	442b      	add	r3, r5
 810ad40:	6023      	str	r3, [r4, #0]
 810ad42:	f8d8 3000 	ldr.w	r3, [r8]
 810ad46:	685a      	ldr	r2, [r3, #4]
 810ad48:	bb62      	cbnz	r2, 810ada4 <_malloc_r+0xdc>
 810ad4a:	f8c8 7000 	str.w	r7, [r8]
 810ad4e:	e00f      	b.n	810ad70 <_malloc_r+0xa8>
 810ad50:	6822      	ldr	r2, [r4, #0]
 810ad52:	1b52      	subs	r2, r2, r5
 810ad54:	d420      	bmi.n	810ad98 <_malloc_r+0xd0>
 810ad56:	2a0b      	cmp	r2, #11
 810ad58:	d917      	bls.n	810ad8a <_malloc_r+0xc2>
 810ad5a:	1961      	adds	r1, r4, r5
 810ad5c:	42a3      	cmp	r3, r4
 810ad5e:	6025      	str	r5, [r4, #0]
 810ad60:	bf18      	it	ne
 810ad62:	6059      	strne	r1, [r3, #4]
 810ad64:	6863      	ldr	r3, [r4, #4]
 810ad66:	bf08      	it	eq
 810ad68:	f8c8 1000 	streq.w	r1, [r8]
 810ad6c:	5162      	str	r2, [r4, r5]
 810ad6e:	604b      	str	r3, [r1, #4]
 810ad70:	4630      	mov	r0, r6
 810ad72:	f000 f82f 	bl	810add4 <__malloc_unlock>
 810ad76:	f104 000b 	add.w	r0, r4, #11
 810ad7a:	1d23      	adds	r3, r4, #4
 810ad7c:	f020 0007 	bic.w	r0, r0, #7
 810ad80:	1ac2      	subs	r2, r0, r3
 810ad82:	bf1c      	itt	ne
 810ad84:	1a1b      	subne	r3, r3, r0
 810ad86:	50a3      	strne	r3, [r4, r2]
 810ad88:	e7af      	b.n	810acea <_malloc_r+0x22>
 810ad8a:	6862      	ldr	r2, [r4, #4]
 810ad8c:	42a3      	cmp	r3, r4
 810ad8e:	bf0c      	ite	eq
 810ad90:	f8c8 2000 	streq.w	r2, [r8]
 810ad94:	605a      	strne	r2, [r3, #4]
 810ad96:	e7eb      	b.n	810ad70 <_malloc_r+0xa8>
 810ad98:	4623      	mov	r3, r4
 810ad9a:	6864      	ldr	r4, [r4, #4]
 810ad9c:	e7ae      	b.n	810acfc <_malloc_r+0x34>
 810ad9e:	463c      	mov	r4, r7
 810ada0:	687f      	ldr	r7, [r7, #4]
 810ada2:	e7b6      	b.n	810ad12 <_malloc_r+0x4a>
 810ada4:	461a      	mov	r2, r3
 810ada6:	685b      	ldr	r3, [r3, #4]
 810ada8:	42a3      	cmp	r3, r4
 810adaa:	d1fb      	bne.n	810ada4 <_malloc_r+0xdc>
 810adac:	2300      	movs	r3, #0
 810adae:	6053      	str	r3, [r2, #4]
 810adb0:	e7de      	b.n	810ad70 <_malloc_r+0xa8>
 810adb2:	230c      	movs	r3, #12
 810adb4:	6033      	str	r3, [r6, #0]
 810adb6:	4630      	mov	r0, r6
 810adb8:	f000 f80c 	bl	810add4 <__malloc_unlock>
 810adbc:	e794      	b.n	810ace8 <_malloc_r+0x20>
 810adbe:	6005      	str	r5, [r0, #0]
 810adc0:	e7d6      	b.n	810ad70 <_malloc_r+0xa8>
 810adc2:	bf00      	nop
 810adc4:	10004c78 	.word	0x10004c78

0810adc8 <__malloc_lock>:
 810adc8:	4801      	ldr	r0, [pc, #4]	@ (810add0 <__malloc_lock+0x8>)
 810adca:	f000 b966 	b.w	810b09a <__retarget_lock_acquire_recursive>
 810adce:	bf00      	nop
 810add0:	10004db8 	.word	0x10004db8

0810add4 <__malloc_unlock>:
 810add4:	4801      	ldr	r0, [pc, #4]	@ (810addc <__malloc_unlock+0x8>)
 810add6:	f000 b961 	b.w	810b09c <__retarget_lock_release_recursive>
 810adda:	bf00      	nop
 810addc:	10004db8 	.word	0x10004db8

0810ade0 <siprintf>:
 810ade0:	b40e      	push	{r1, r2, r3}
 810ade2:	b500      	push	{lr}
 810ade4:	b09c      	sub	sp, #112	@ 0x70
 810ade6:	ab1d      	add	r3, sp, #116	@ 0x74
 810ade8:	9002      	str	r0, [sp, #8]
 810adea:	9006      	str	r0, [sp, #24]
 810adec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810adf0:	4809      	ldr	r0, [pc, #36]	@ (810ae18 <siprintf+0x38>)
 810adf2:	9107      	str	r1, [sp, #28]
 810adf4:	9104      	str	r1, [sp, #16]
 810adf6:	4909      	ldr	r1, [pc, #36]	@ (810ae1c <siprintf+0x3c>)
 810adf8:	f853 2b04 	ldr.w	r2, [r3], #4
 810adfc:	9105      	str	r1, [sp, #20]
 810adfe:	6800      	ldr	r0, [r0, #0]
 810ae00:	9301      	str	r3, [sp, #4]
 810ae02:	a902      	add	r1, sp, #8
 810ae04:	f000 fa06 	bl	810b214 <_svfiprintf_r>
 810ae08:	9b02      	ldr	r3, [sp, #8]
 810ae0a:	2200      	movs	r2, #0
 810ae0c:	701a      	strb	r2, [r3, #0]
 810ae0e:	b01c      	add	sp, #112	@ 0x70
 810ae10:	f85d eb04 	ldr.w	lr, [sp], #4
 810ae14:	b003      	add	sp, #12
 810ae16:	4770      	bx	lr
 810ae18:	100000c8 	.word	0x100000c8
 810ae1c:	ffff0208 	.word	0xffff0208

0810ae20 <std>:
 810ae20:	2300      	movs	r3, #0
 810ae22:	b510      	push	{r4, lr}
 810ae24:	4604      	mov	r4, r0
 810ae26:	e9c0 3300 	strd	r3, r3, [r0]
 810ae2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810ae2e:	6083      	str	r3, [r0, #8]
 810ae30:	8181      	strh	r1, [r0, #12]
 810ae32:	6643      	str	r3, [r0, #100]	@ 0x64
 810ae34:	81c2      	strh	r2, [r0, #14]
 810ae36:	6183      	str	r3, [r0, #24]
 810ae38:	4619      	mov	r1, r3
 810ae3a:	2208      	movs	r2, #8
 810ae3c:	305c      	adds	r0, #92	@ 0x5c
 810ae3e:	f000 f8e8 	bl	810b012 <memset>
 810ae42:	4b0d      	ldr	r3, [pc, #52]	@ (810ae78 <std+0x58>)
 810ae44:	6263      	str	r3, [r4, #36]	@ 0x24
 810ae46:	4b0d      	ldr	r3, [pc, #52]	@ (810ae7c <std+0x5c>)
 810ae48:	62a3      	str	r3, [r4, #40]	@ 0x28
 810ae4a:	4b0d      	ldr	r3, [pc, #52]	@ (810ae80 <std+0x60>)
 810ae4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810ae4e:	4b0d      	ldr	r3, [pc, #52]	@ (810ae84 <std+0x64>)
 810ae50:	6323      	str	r3, [r4, #48]	@ 0x30
 810ae52:	4b0d      	ldr	r3, [pc, #52]	@ (810ae88 <std+0x68>)
 810ae54:	6224      	str	r4, [r4, #32]
 810ae56:	429c      	cmp	r4, r3
 810ae58:	d006      	beq.n	810ae68 <std+0x48>
 810ae5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810ae5e:	4294      	cmp	r4, r2
 810ae60:	d002      	beq.n	810ae68 <std+0x48>
 810ae62:	33d0      	adds	r3, #208	@ 0xd0
 810ae64:	429c      	cmp	r4, r3
 810ae66:	d105      	bne.n	810ae74 <std+0x54>
 810ae68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810ae6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810ae70:	f000 b912 	b.w	810b098 <__retarget_lock_init_recursive>
 810ae74:	bd10      	pop	{r4, pc}
 810ae76:	bf00      	nop
 810ae78:	0810bb05 	.word	0x0810bb05
 810ae7c:	0810bb27 	.word	0x0810bb27
 810ae80:	0810bb5f 	.word	0x0810bb5f
 810ae84:	0810bb83 	.word	0x0810bb83
 810ae88:	10004c7c 	.word	0x10004c7c

0810ae8c <stdio_exit_handler>:
 810ae8c:	4a02      	ldr	r2, [pc, #8]	@ (810ae98 <stdio_exit_handler+0xc>)
 810ae8e:	4903      	ldr	r1, [pc, #12]	@ (810ae9c <stdio_exit_handler+0x10>)
 810ae90:	4803      	ldr	r0, [pc, #12]	@ (810aea0 <stdio_exit_handler+0x14>)
 810ae92:	f000 b87b 	b.w	810af8c <_fwalk_sglue>
 810ae96:	bf00      	nop
 810ae98:	100000bc 	.word	0x100000bc
 810ae9c:	0810bab5 	.word	0x0810bab5
 810aea0:	100000cc 	.word	0x100000cc

0810aea4 <cleanup_stdio>:
 810aea4:	6841      	ldr	r1, [r0, #4]
 810aea6:	4b0c      	ldr	r3, [pc, #48]	@ (810aed8 <cleanup_stdio+0x34>)
 810aea8:	4299      	cmp	r1, r3
 810aeaa:	b510      	push	{r4, lr}
 810aeac:	4604      	mov	r4, r0
 810aeae:	d001      	beq.n	810aeb4 <cleanup_stdio+0x10>
 810aeb0:	f000 fe00 	bl	810bab4 <_fflush_r>
 810aeb4:	68a1      	ldr	r1, [r4, #8]
 810aeb6:	4b09      	ldr	r3, [pc, #36]	@ (810aedc <cleanup_stdio+0x38>)
 810aeb8:	4299      	cmp	r1, r3
 810aeba:	d002      	beq.n	810aec2 <cleanup_stdio+0x1e>
 810aebc:	4620      	mov	r0, r4
 810aebe:	f000 fdf9 	bl	810bab4 <_fflush_r>
 810aec2:	68e1      	ldr	r1, [r4, #12]
 810aec4:	4b06      	ldr	r3, [pc, #24]	@ (810aee0 <cleanup_stdio+0x3c>)
 810aec6:	4299      	cmp	r1, r3
 810aec8:	d004      	beq.n	810aed4 <cleanup_stdio+0x30>
 810aeca:	4620      	mov	r0, r4
 810aecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aed0:	f000 bdf0 	b.w	810bab4 <_fflush_r>
 810aed4:	bd10      	pop	{r4, pc}
 810aed6:	bf00      	nop
 810aed8:	10004c7c 	.word	0x10004c7c
 810aedc:	10004ce4 	.word	0x10004ce4
 810aee0:	10004d4c 	.word	0x10004d4c

0810aee4 <global_stdio_init.part.0>:
 810aee4:	b510      	push	{r4, lr}
 810aee6:	4b0b      	ldr	r3, [pc, #44]	@ (810af14 <global_stdio_init.part.0+0x30>)
 810aee8:	4c0b      	ldr	r4, [pc, #44]	@ (810af18 <global_stdio_init.part.0+0x34>)
 810aeea:	4a0c      	ldr	r2, [pc, #48]	@ (810af1c <global_stdio_init.part.0+0x38>)
 810aeec:	601a      	str	r2, [r3, #0]
 810aeee:	4620      	mov	r0, r4
 810aef0:	2200      	movs	r2, #0
 810aef2:	2104      	movs	r1, #4
 810aef4:	f7ff ff94 	bl	810ae20 <std>
 810aef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 810aefc:	2201      	movs	r2, #1
 810aefe:	2109      	movs	r1, #9
 810af00:	f7ff ff8e 	bl	810ae20 <std>
 810af04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810af08:	2202      	movs	r2, #2
 810af0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810af0e:	2112      	movs	r1, #18
 810af10:	f7ff bf86 	b.w	810ae20 <std>
 810af14:	10004db4 	.word	0x10004db4
 810af18:	10004c7c 	.word	0x10004c7c
 810af1c:	0810ae8d 	.word	0x0810ae8d

0810af20 <__sfp_lock_acquire>:
 810af20:	4801      	ldr	r0, [pc, #4]	@ (810af28 <__sfp_lock_acquire+0x8>)
 810af22:	f000 b8ba 	b.w	810b09a <__retarget_lock_acquire_recursive>
 810af26:	bf00      	nop
 810af28:	10004db9 	.word	0x10004db9

0810af2c <__sfp_lock_release>:
 810af2c:	4801      	ldr	r0, [pc, #4]	@ (810af34 <__sfp_lock_release+0x8>)
 810af2e:	f000 b8b5 	b.w	810b09c <__retarget_lock_release_recursive>
 810af32:	bf00      	nop
 810af34:	10004db9 	.word	0x10004db9

0810af38 <__sinit>:
 810af38:	b510      	push	{r4, lr}
 810af3a:	4604      	mov	r4, r0
 810af3c:	f7ff fff0 	bl	810af20 <__sfp_lock_acquire>
 810af40:	6a23      	ldr	r3, [r4, #32]
 810af42:	b11b      	cbz	r3, 810af4c <__sinit+0x14>
 810af44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810af48:	f7ff bff0 	b.w	810af2c <__sfp_lock_release>
 810af4c:	4b04      	ldr	r3, [pc, #16]	@ (810af60 <__sinit+0x28>)
 810af4e:	6223      	str	r3, [r4, #32]
 810af50:	4b04      	ldr	r3, [pc, #16]	@ (810af64 <__sinit+0x2c>)
 810af52:	681b      	ldr	r3, [r3, #0]
 810af54:	2b00      	cmp	r3, #0
 810af56:	d1f5      	bne.n	810af44 <__sinit+0xc>
 810af58:	f7ff ffc4 	bl	810aee4 <global_stdio_init.part.0>
 810af5c:	e7f2      	b.n	810af44 <__sinit+0xc>
 810af5e:	bf00      	nop
 810af60:	0810aea5 	.word	0x0810aea5
 810af64:	10004db4 	.word	0x10004db4

0810af68 <fiprintf>:
 810af68:	b40e      	push	{r1, r2, r3}
 810af6a:	b503      	push	{r0, r1, lr}
 810af6c:	4601      	mov	r1, r0
 810af6e:	ab03      	add	r3, sp, #12
 810af70:	4805      	ldr	r0, [pc, #20]	@ (810af88 <fiprintf+0x20>)
 810af72:	f853 2b04 	ldr.w	r2, [r3], #4
 810af76:	6800      	ldr	r0, [r0, #0]
 810af78:	9301      	str	r3, [sp, #4]
 810af7a:	f000 fa71 	bl	810b460 <_vfiprintf_r>
 810af7e:	b002      	add	sp, #8
 810af80:	f85d eb04 	ldr.w	lr, [sp], #4
 810af84:	b003      	add	sp, #12
 810af86:	4770      	bx	lr
 810af88:	100000c8 	.word	0x100000c8

0810af8c <_fwalk_sglue>:
 810af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810af90:	4607      	mov	r7, r0
 810af92:	4688      	mov	r8, r1
 810af94:	4614      	mov	r4, r2
 810af96:	2600      	movs	r6, #0
 810af98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810af9c:	f1b9 0901 	subs.w	r9, r9, #1
 810afa0:	d505      	bpl.n	810afae <_fwalk_sglue+0x22>
 810afa2:	6824      	ldr	r4, [r4, #0]
 810afa4:	2c00      	cmp	r4, #0
 810afa6:	d1f7      	bne.n	810af98 <_fwalk_sglue+0xc>
 810afa8:	4630      	mov	r0, r6
 810afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810afae:	89ab      	ldrh	r3, [r5, #12]
 810afb0:	2b01      	cmp	r3, #1
 810afb2:	d907      	bls.n	810afc4 <_fwalk_sglue+0x38>
 810afb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810afb8:	3301      	adds	r3, #1
 810afba:	d003      	beq.n	810afc4 <_fwalk_sglue+0x38>
 810afbc:	4629      	mov	r1, r5
 810afbe:	4638      	mov	r0, r7
 810afc0:	47c0      	blx	r8
 810afc2:	4306      	orrs	r6, r0
 810afc4:	3568      	adds	r5, #104	@ 0x68
 810afc6:	e7e9      	b.n	810af9c <_fwalk_sglue+0x10>

0810afc8 <strncmp>:
 810afc8:	b510      	push	{r4, lr}
 810afca:	b16a      	cbz	r2, 810afe8 <strncmp+0x20>
 810afcc:	3901      	subs	r1, #1
 810afce:	1884      	adds	r4, r0, r2
 810afd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810afd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810afd8:	429a      	cmp	r2, r3
 810afda:	d103      	bne.n	810afe4 <strncmp+0x1c>
 810afdc:	42a0      	cmp	r0, r4
 810afde:	d001      	beq.n	810afe4 <strncmp+0x1c>
 810afe0:	2a00      	cmp	r2, #0
 810afe2:	d1f5      	bne.n	810afd0 <strncmp+0x8>
 810afe4:	1ad0      	subs	r0, r2, r3
 810afe6:	bd10      	pop	{r4, pc}
 810afe8:	4610      	mov	r0, r2
 810afea:	e7fc      	b.n	810afe6 <strncmp+0x1e>

0810afec <strncpy>:
 810afec:	b510      	push	{r4, lr}
 810afee:	3901      	subs	r1, #1
 810aff0:	4603      	mov	r3, r0
 810aff2:	b132      	cbz	r2, 810b002 <strncpy+0x16>
 810aff4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810aff8:	f803 4b01 	strb.w	r4, [r3], #1
 810affc:	3a01      	subs	r2, #1
 810affe:	2c00      	cmp	r4, #0
 810b000:	d1f7      	bne.n	810aff2 <strncpy+0x6>
 810b002:	441a      	add	r2, r3
 810b004:	2100      	movs	r1, #0
 810b006:	4293      	cmp	r3, r2
 810b008:	d100      	bne.n	810b00c <strncpy+0x20>
 810b00a:	bd10      	pop	{r4, pc}
 810b00c:	f803 1b01 	strb.w	r1, [r3], #1
 810b010:	e7f9      	b.n	810b006 <strncpy+0x1a>

0810b012 <memset>:
 810b012:	4402      	add	r2, r0
 810b014:	4603      	mov	r3, r0
 810b016:	4293      	cmp	r3, r2
 810b018:	d100      	bne.n	810b01c <memset+0xa>
 810b01a:	4770      	bx	lr
 810b01c:	f803 1b01 	strb.w	r1, [r3], #1
 810b020:	e7f9      	b.n	810b016 <memset+0x4>
	...

0810b024 <_sbrk_r>:
 810b024:	b538      	push	{r3, r4, r5, lr}
 810b026:	4d06      	ldr	r5, [pc, #24]	@ (810b040 <_sbrk_r+0x1c>)
 810b028:	2300      	movs	r3, #0
 810b02a:	4604      	mov	r4, r0
 810b02c:	4608      	mov	r0, r1
 810b02e:	602b      	str	r3, [r5, #0]
 810b030:	f7f5 feda 	bl	8100de8 <_sbrk>
 810b034:	1c43      	adds	r3, r0, #1
 810b036:	d102      	bne.n	810b03e <_sbrk_r+0x1a>
 810b038:	682b      	ldr	r3, [r5, #0]
 810b03a:	b103      	cbz	r3, 810b03e <_sbrk_r+0x1a>
 810b03c:	6023      	str	r3, [r4, #0]
 810b03e:	bd38      	pop	{r3, r4, r5, pc}
 810b040:	10004dbc 	.word	0x10004dbc

0810b044 <__errno>:
 810b044:	4b01      	ldr	r3, [pc, #4]	@ (810b04c <__errno+0x8>)
 810b046:	6818      	ldr	r0, [r3, #0]
 810b048:	4770      	bx	lr
 810b04a:	bf00      	nop
 810b04c:	100000c8 	.word	0x100000c8

0810b050 <__libc_init_array>:
 810b050:	b570      	push	{r4, r5, r6, lr}
 810b052:	4d0d      	ldr	r5, [pc, #52]	@ (810b088 <__libc_init_array+0x38>)
 810b054:	4c0d      	ldr	r4, [pc, #52]	@ (810b08c <__libc_init_array+0x3c>)
 810b056:	1b64      	subs	r4, r4, r5
 810b058:	10a4      	asrs	r4, r4, #2
 810b05a:	2600      	movs	r6, #0
 810b05c:	42a6      	cmp	r6, r4
 810b05e:	d109      	bne.n	810b074 <__libc_init_array+0x24>
 810b060:	4d0b      	ldr	r5, [pc, #44]	@ (810b090 <__libc_init_array+0x40>)
 810b062:	4c0c      	ldr	r4, [pc, #48]	@ (810b094 <__libc_init_array+0x44>)
 810b064:	f000 ff84 	bl	810bf70 <_init>
 810b068:	1b64      	subs	r4, r4, r5
 810b06a:	10a4      	asrs	r4, r4, #2
 810b06c:	2600      	movs	r6, #0
 810b06e:	42a6      	cmp	r6, r4
 810b070:	d105      	bne.n	810b07e <__libc_init_array+0x2e>
 810b072:	bd70      	pop	{r4, r5, r6, pc}
 810b074:	f855 3b04 	ldr.w	r3, [r5], #4
 810b078:	4798      	blx	r3
 810b07a:	3601      	adds	r6, #1
 810b07c:	e7ee      	b.n	810b05c <__libc_init_array+0xc>
 810b07e:	f855 3b04 	ldr.w	r3, [r5], #4
 810b082:	4798      	blx	r3
 810b084:	3601      	adds	r6, #1
 810b086:	e7f2      	b.n	810b06e <__libc_init_array+0x1e>
 810b088:	0810c320 	.word	0x0810c320
 810b08c:	0810c320 	.word	0x0810c320
 810b090:	0810c320 	.word	0x0810c320
 810b094:	0810c324 	.word	0x0810c324

0810b098 <__retarget_lock_init_recursive>:
 810b098:	4770      	bx	lr

0810b09a <__retarget_lock_acquire_recursive>:
 810b09a:	4770      	bx	lr

0810b09c <__retarget_lock_release_recursive>:
 810b09c:	4770      	bx	lr

0810b09e <memcpy>:
 810b09e:	440a      	add	r2, r1
 810b0a0:	4291      	cmp	r1, r2
 810b0a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 810b0a6:	d100      	bne.n	810b0aa <memcpy+0xc>
 810b0a8:	4770      	bx	lr
 810b0aa:	b510      	push	{r4, lr}
 810b0ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b0b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b0b4:	4291      	cmp	r1, r2
 810b0b6:	d1f9      	bne.n	810b0ac <memcpy+0xe>
 810b0b8:	bd10      	pop	{r4, pc}

0810b0ba <abort>:
 810b0ba:	b508      	push	{r3, lr}
 810b0bc:	2006      	movs	r0, #6
 810b0be:	f000 ff0f 	bl	810bee0 <raise>
 810b0c2:	2001      	movs	r0, #1
 810b0c4:	f7f5 fe18 	bl	8100cf8 <_exit>

0810b0c8 <_free_r>:
 810b0c8:	b538      	push	{r3, r4, r5, lr}
 810b0ca:	4605      	mov	r5, r0
 810b0cc:	2900      	cmp	r1, #0
 810b0ce:	d041      	beq.n	810b154 <_free_r+0x8c>
 810b0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b0d4:	1f0c      	subs	r4, r1, #4
 810b0d6:	2b00      	cmp	r3, #0
 810b0d8:	bfb8      	it	lt
 810b0da:	18e4      	addlt	r4, r4, r3
 810b0dc:	f7ff fe74 	bl	810adc8 <__malloc_lock>
 810b0e0:	4a1d      	ldr	r2, [pc, #116]	@ (810b158 <_free_r+0x90>)
 810b0e2:	6813      	ldr	r3, [r2, #0]
 810b0e4:	b933      	cbnz	r3, 810b0f4 <_free_r+0x2c>
 810b0e6:	6063      	str	r3, [r4, #4]
 810b0e8:	6014      	str	r4, [r2, #0]
 810b0ea:	4628      	mov	r0, r5
 810b0ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b0f0:	f7ff be70 	b.w	810add4 <__malloc_unlock>
 810b0f4:	42a3      	cmp	r3, r4
 810b0f6:	d908      	bls.n	810b10a <_free_r+0x42>
 810b0f8:	6820      	ldr	r0, [r4, #0]
 810b0fa:	1821      	adds	r1, r4, r0
 810b0fc:	428b      	cmp	r3, r1
 810b0fe:	bf01      	itttt	eq
 810b100:	6819      	ldreq	r1, [r3, #0]
 810b102:	685b      	ldreq	r3, [r3, #4]
 810b104:	1809      	addeq	r1, r1, r0
 810b106:	6021      	streq	r1, [r4, #0]
 810b108:	e7ed      	b.n	810b0e6 <_free_r+0x1e>
 810b10a:	461a      	mov	r2, r3
 810b10c:	685b      	ldr	r3, [r3, #4]
 810b10e:	b10b      	cbz	r3, 810b114 <_free_r+0x4c>
 810b110:	42a3      	cmp	r3, r4
 810b112:	d9fa      	bls.n	810b10a <_free_r+0x42>
 810b114:	6811      	ldr	r1, [r2, #0]
 810b116:	1850      	adds	r0, r2, r1
 810b118:	42a0      	cmp	r0, r4
 810b11a:	d10b      	bne.n	810b134 <_free_r+0x6c>
 810b11c:	6820      	ldr	r0, [r4, #0]
 810b11e:	4401      	add	r1, r0
 810b120:	1850      	adds	r0, r2, r1
 810b122:	4283      	cmp	r3, r0
 810b124:	6011      	str	r1, [r2, #0]
 810b126:	d1e0      	bne.n	810b0ea <_free_r+0x22>
 810b128:	6818      	ldr	r0, [r3, #0]
 810b12a:	685b      	ldr	r3, [r3, #4]
 810b12c:	6053      	str	r3, [r2, #4]
 810b12e:	4408      	add	r0, r1
 810b130:	6010      	str	r0, [r2, #0]
 810b132:	e7da      	b.n	810b0ea <_free_r+0x22>
 810b134:	d902      	bls.n	810b13c <_free_r+0x74>
 810b136:	230c      	movs	r3, #12
 810b138:	602b      	str	r3, [r5, #0]
 810b13a:	e7d6      	b.n	810b0ea <_free_r+0x22>
 810b13c:	6820      	ldr	r0, [r4, #0]
 810b13e:	1821      	adds	r1, r4, r0
 810b140:	428b      	cmp	r3, r1
 810b142:	bf04      	itt	eq
 810b144:	6819      	ldreq	r1, [r3, #0]
 810b146:	685b      	ldreq	r3, [r3, #4]
 810b148:	6063      	str	r3, [r4, #4]
 810b14a:	bf04      	itt	eq
 810b14c:	1809      	addeq	r1, r1, r0
 810b14e:	6021      	streq	r1, [r4, #0]
 810b150:	6054      	str	r4, [r2, #4]
 810b152:	e7ca      	b.n	810b0ea <_free_r+0x22>
 810b154:	bd38      	pop	{r3, r4, r5, pc}
 810b156:	bf00      	nop
 810b158:	10004c78 	.word	0x10004c78

0810b15c <__ssputs_r>:
 810b15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b160:	688e      	ldr	r6, [r1, #8]
 810b162:	461f      	mov	r7, r3
 810b164:	42be      	cmp	r6, r7
 810b166:	680b      	ldr	r3, [r1, #0]
 810b168:	4682      	mov	sl, r0
 810b16a:	460c      	mov	r4, r1
 810b16c:	4690      	mov	r8, r2
 810b16e:	d82d      	bhi.n	810b1cc <__ssputs_r+0x70>
 810b170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810b174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810b178:	d026      	beq.n	810b1c8 <__ssputs_r+0x6c>
 810b17a:	6965      	ldr	r5, [r4, #20]
 810b17c:	6909      	ldr	r1, [r1, #16]
 810b17e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b182:	eba3 0901 	sub.w	r9, r3, r1
 810b186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b18a:	1c7b      	adds	r3, r7, #1
 810b18c:	444b      	add	r3, r9
 810b18e:	106d      	asrs	r5, r5, #1
 810b190:	429d      	cmp	r5, r3
 810b192:	bf38      	it	cc
 810b194:	461d      	movcc	r5, r3
 810b196:	0553      	lsls	r3, r2, #21
 810b198:	d527      	bpl.n	810b1ea <__ssputs_r+0x8e>
 810b19a:	4629      	mov	r1, r5
 810b19c:	f7ff fd94 	bl	810acc8 <_malloc_r>
 810b1a0:	4606      	mov	r6, r0
 810b1a2:	b360      	cbz	r0, 810b1fe <__ssputs_r+0xa2>
 810b1a4:	6921      	ldr	r1, [r4, #16]
 810b1a6:	464a      	mov	r2, r9
 810b1a8:	f7ff ff79 	bl	810b09e <memcpy>
 810b1ac:	89a3      	ldrh	r3, [r4, #12]
 810b1ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810b1b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810b1b6:	81a3      	strh	r3, [r4, #12]
 810b1b8:	6126      	str	r6, [r4, #16]
 810b1ba:	6165      	str	r5, [r4, #20]
 810b1bc:	444e      	add	r6, r9
 810b1be:	eba5 0509 	sub.w	r5, r5, r9
 810b1c2:	6026      	str	r6, [r4, #0]
 810b1c4:	60a5      	str	r5, [r4, #8]
 810b1c6:	463e      	mov	r6, r7
 810b1c8:	42be      	cmp	r6, r7
 810b1ca:	d900      	bls.n	810b1ce <__ssputs_r+0x72>
 810b1cc:	463e      	mov	r6, r7
 810b1ce:	6820      	ldr	r0, [r4, #0]
 810b1d0:	4632      	mov	r2, r6
 810b1d2:	4641      	mov	r1, r8
 810b1d4:	f000 fdfe 	bl	810bdd4 <memmove>
 810b1d8:	68a3      	ldr	r3, [r4, #8]
 810b1da:	1b9b      	subs	r3, r3, r6
 810b1dc:	60a3      	str	r3, [r4, #8]
 810b1de:	6823      	ldr	r3, [r4, #0]
 810b1e0:	4433      	add	r3, r6
 810b1e2:	6023      	str	r3, [r4, #0]
 810b1e4:	2000      	movs	r0, #0
 810b1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b1ea:	462a      	mov	r2, r5
 810b1ec:	f000 fccd 	bl	810bb8a <_realloc_r>
 810b1f0:	4606      	mov	r6, r0
 810b1f2:	2800      	cmp	r0, #0
 810b1f4:	d1e0      	bne.n	810b1b8 <__ssputs_r+0x5c>
 810b1f6:	6921      	ldr	r1, [r4, #16]
 810b1f8:	4650      	mov	r0, sl
 810b1fa:	f7ff ff65 	bl	810b0c8 <_free_r>
 810b1fe:	230c      	movs	r3, #12
 810b200:	f8ca 3000 	str.w	r3, [sl]
 810b204:	89a3      	ldrh	r3, [r4, #12]
 810b206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b20a:	81a3      	strh	r3, [r4, #12]
 810b20c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b210:	e7e9      	b.n	810b1e6 <__ssputs_r+0x8a>
	...

0810b214 <_svfiprintf_r>:
 810b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b218:	4698      	mov	r8, r3
 810b21a:	898b      	ldrh	r3, [r1, #12]
 810b21c:	061b      	lsls	r3, r3, #24
 810b21e:	b09d      	sub	sp, #116	@ 0x74
 810b220:	4607      	mov	r7, r0
 810b222:	460d      	mov	r5, r1
 810b224:	4614      	mov	r4, r2
 810b226:	d510      	bpl.n	810b24a <_svfiprintf_r+0x36>
 810b228:	690b      	ldr	r3, [r1, #16]
 810b22a:	b973      	cbnz	r3, 810b24a <_svfiprintf_r+0x36>
 810b22c:	2140      	movs	r1, #64	@ 0x40
 810b22e:	f7ff fd4b 	bl	810acc8 <_malloc_r>
 810b232:	6028      	str	r0, [r5, #0]
 810b234:	6128      	str	r0, [r5, #16]
 810b236:	b930      	cbnz	r0, 810b246 <_svfiprintf_r+0x32>
 810b238:	230c      	movs	r3, #12
 810b23a:	603b      	str	r3, [r7, #0]
 810b23c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b240:	b01d      	add	sp, #116	@ 0x74
 810b242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b246:	2340      	movs	r3, #64	@ 0x40
 810b248:	616b      	str	r3, [r5, #20]
 810b24a:	2300      	movs	r3, #0
 810b24c:	9309      	str	r3, [sp, #36]	@ 0x24
 810b24e:	2320      	movs	r3, #32
 810b250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810b254:	f8cd 800c 	str.w	r8, [sp, #12]
 810b258:	2330      	movs	r3, #48	@ 0x30
 810b25a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810b3f8 <_svfiprintf_r+0x1e4>
 810b25e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810b262:	f04f 0901 	mov.w	r9, #1
 810b266:	4623      	mov	r3, r4
 810b268:	469a      	mov	sl, r3
 810b26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b26e:	b10a      	cbz	r2, 810b274 <_svfiprintf_r+0x60>
 810b270:	2a25      	cmp	r2, #37	@ 0x25
 810b272:	d1f9      	bne.n	810b268 <_svfiprintf_r+0x54>
 810b274:	ebba 0b04 	subs.w	fp, sl, r4
 810b278:	d00b      	beq.n	810b292 <_svfiprintf_r+0x7e>
 810b27a:	465b      	mov	r3, fp
 810b27c:	4622      	mov	r2, r4
 810b27e:	4629      	mov	r1, r5
 810b280:	4638      	mov	r0, r7
 810b282:	f7ff ff6b 	bl	810b15c <__ssputs_r>
 810b286:	3001      	adds	r0, #1
 810b288:	f000 80a7 	beq.w	810b3da <_svfiprintf_r+0x1c6>
 810b28c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b28e:	445a      	add	r2, fp
 810b290:	9209      	str	r2, [sp, #36]	@ 0x24
 810b292:	f89a 3000 	ldrb.w	r3, [sl]
 810b296:	2b00      	cmp	r3, #0
 810b298:	f000 809f 	beq.w	810b3da <_svfiprintf_r+0x1c6>
 810b29c:	2300      	movs	r3, #0
 810b29e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810b2a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b2a6:	f10a 0a01 	add.w	sl, sl, #1
 810b2aa:	9304      	str	r3, [sp, #16]
 810b2ac:	9307      	str	r3, [sp, #28]
 810b2ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810b2b2:	931a      	str	r3, [sp, #104]	@ 0x68
 810b2b4:	4654      	mov	r4, sl
 810b2b6:	2205      	movs	r2, #5
 810b2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b2bc:	484e      	ldr	r0, [pc, #312]	@ (810b3f8 <_svfiprintf_r+0x1e4>)
 810b2be:	f7f5 f827 	bl	8100310 <memchr>
 810b2c2:	9a04      	ldr	r2, [sp, #16]
 810b2c4:	b9d8      	cbnz	r0, 810b2fe <_svfiprintf_r+0xea>
 810b2c6:	06d0      	lsls	r0, r2, #27
 810b2c8:	bf44      	itt	mi
 810b2ca:	2320      	movmi	r3, #32
 810b2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b2d0:	0711      	lsls	r1, r2, #28
 810b2d2:	bf44      	itt	mi
 810b2d4:	232b      	movmi	r3, #43	@ 0x2b
 810b2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b2da:	f89a 3000 	ldrb.w	r3, [sl]
 810b2de:	2b2a      	cmp	r3, #42	@ 0x2a
 810b2e0:	d015      	beq.n	810b30e <_svfiprintf_r+0xfa>
 810b2e2:	9a07      	ldr	r2, [sp, #28]
 810b2e4:	4654      	mov	r4, sl
 810b2e6:	2000      	movs	r0, #0
 810b2e8:	f04f 0c0a 	mov.w	ip, #10
 810b2ec:	4621      	mov	r1, r4
 810b2ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b2f2:	3b30      	subs	r3, #48	@ 0x30
 810b2f4:	2b09      	cmp	r3, #9
 810b2f6:	d94b      	bls.n	810b390 <_svfiprintf_r+0x17c>
 810b2f8:	b1b0      	cbz	r0, 810b328 <_svfiprintf_r+0x114>
 810b2fa:	9207      	str	r2, [sp, #28]
 810b2fc:	e014      	b.n	810b328 <_svfiprintf_r+0x114>
 810b2fe:	eba0 0308 	sub.w	r3, r0, r8
 810b302:	fa09 f303 	lsl.w	r3, r9, r3
 810b306:	4313      	orrs	r3, r2
 810b308:	9304      	str	r3, [sp, #16]
 810b30a:	46a2      	mov	sl, r4
 810b30c:	e7d2      	b.n	810b2b4 <_svfiprintf_r+0xa0>
 810b30e:	9b03      	ldr	r3, [sp, #12]
 810b310:	1d19      	adds	r1, r3, #4
 810b312:	681b      	ldr	r3, [r3, #0]
 810b314:	9103      	str	r1, [sp, #12]
 810b316:	2b00      	cmp	r3, #0
 810b318:	bfbb      	ittet	lt
 810b31a:	425b      	neglt	r3, r3
 810b31c:	f042 0202 	orrlt.w	r2, r2, #2
 810b320:	9307      	strge	r3, [sp, #28]
 810b322:	9307      	strlt	r3, [sp, #28]
 810b324:	bfb8      	it	lt
 810b326:	9204      	strlt	r2, [sp, #16]
 810b328:	7823      	ldrb	r3, [r4, #0]
 810b32a:	2b2e      	cmp	r3, #46	@ 0x2e
 810b32c:	d10a      	bne.n	810b344 <_svfiprintf_r+0x130>
 810b32e:	7863      	ldrb	r3, [r4, #1]
 810b330:	2b2a      	cmp	r3, #42	@ 0x2a
 810b332:	d132      	bne.n	810b39a <_svfiprintf_r+0x186>
 810b334:	9b03      	ldr	r3, [sp, #12]
 810b336:	1d1a      	adds	r2, r3, #4
 810b338:	681b      	ldr	r3, [r3, #0]
 810b33a:	9203      	str	r2, [sp, #12]
 810b33c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810b340:	3402      	adds	r4, #2
 810b342:	9305      	str	r3, [sp, #20]
 810b344:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810b408 <_svfiprintf_r+0x1f4>
 810b348:	7821      	ldrb	r1, [r4, #0]
 810b34a:	2203      	movs	r2, #3
 810b34c:	4650      	mov	r0, sl
 810b34e:	f7f4 ffdf 	bl	8100310 <memchr>
 810b352:	b138      	cbz	r0, 810b364 <_svfiprintf_r+0x150>
 810b354:	9b04      	ldr	r3, [sp, #16]
 810b356:	eba0 000a 	sub.w	r0, r0, sl
 810b35a:	2240      	movs	r2, #64	@ 0x40
 810b35c:	4082      	lsls	r2, r0
 810b35e:	4313      	orrs	r3, r2
 810b360:	3401      	adds	r4, #1
 810b362:	9304      	str	r3, [sp, #16]
 810b364:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b368:	4824      	ldr	r0, [pc, #144]	@ (810b3fc <_svfiprintf_r+0x1e8>)
 810b36a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810b36e:	2206      	movs	r2, #6
 810b370:	f7f4 ffce 	bl	8100310 <memchr>
 810b374:	2800      	cmp	r0, #0
 810b376:	d036      	beq.n	810b3e6 <_svfiprintf_r+0x1d2>
 810b378:	4b21      	ldr	r3, [pc, #132]	@ (810b400 <_svfiprintf_r+0x1ec>)
 810b37a:	bb1b      	cbnz	r3, 810b3c4 <_svfiprintf_r+0x1b0>
 810b37c:	9b03      	ldr	r3, [sp, #12]
 810b37e:	3307      	adds	r3, #7
 810b380:	f023 0307 	bic.w	r3, r3, #7
 810b384:	3308      	adds	r3, #8
 810b386:	9303      	str	r3, [sp, #12]
 810b388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b38a:	4433      	add	r3, r6
 810b38c:	9309      	str	r3, [sp, #36]	@ 0x24
 810b38e:	e76a      	b.n	810b266 <_svfiprintf_r+0x52>
 810b390:	fb0c 3202 	mla	r2, ip, r2, r3
 810b394:	460c      	mov	r4, r1
 810b396:	2001      	movs	r0, #1
 810b398:	e7a8      	b.n	810b2ec <_svfiprintf_r+0xd8>
 810b39a:	2300      	movs	r3, #0
 810b39c:	3401      	adds	r4, #1
 810b39e:	9305      	str	r3, [sp, #20]
 810b3a0:	4619      	mov	r1, r3
 810b3a2:	f04f 0c0a 	mov.w	ip, #10
 810b3a6:	4620      	mov	r0, r4
 810b3a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b3ac:	3a30      	subs	r2, #48	@ 0x30
 810b3ae:	2a09      	cmp	r2, #9
 810b3b0:	d903      	bls.n	810b3ba <_svfiprintf_r+0x1a6>
 810b3b2:	2b00      	cmp	r3, #0
 810b3b4:	d0c6      	beq.n	810b344 <_svfiprintf_r+0x130>
 810b3b6:	9105      	str	r1, [sp, #20]
 810b3b8:	e7c4      	b.n	810b344 <_svfiprintf_r+0x130>
 810b3ba:	fb0c 2101 	mla	r1, ip, r1, r2
 810b3be:	4604      	mov	r4, r0
 810b3c0:	2301      	movs	r3, #1
 810b3c2:	e7f0      	b.n	810b3a6 <_svfiprintf_r+0x192>
 810b3c4:	ab03      	add	r3, sp, #12
 810b3c6:	9300      	str	r3, [sp, #0]
 810b3c8:	462a      	mov	r2, r5
 810b3ca:	4b0e      	ldr	r3, [pc, #56]	@ (810b404 <_svfiprintf_r+0x1f0>)
 810b3cc:	a904      	add	r1, sp, #16
 810b3ce:	4638      	mov	r0, r7
 810b3d0:	f3af 8000 	nop.w
 810b3d4:	1c42      	adds	r2, r0, #1
 810b3d6:	4606      	mov	r6, r0
 810b3d8:	d1d6      	bne.n	810b388 <_svfiprintf_r+0x174>
 810b3da:	89ab      	ldrh	r3, [r5, #12]
 810b3dc:	065b      	lsls	r3, r3, #25
 810b3de:	f53f af2d 	bmi.w	810b23c <_svfiprintf_r+0x28>
 810b3e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810b3e4:	e72c      	b.n	810b240 <_svfiprintf_r+0x2c>
 810b3e6:	ab03      	add	r3, sp, #12
 810b3e8:	9300      	str	r3, [sp, #0]
 810b3ea:	462a      	mov	r2, r5
 810b3ec:	4b05      	ldr	r3, [pc, #20]	@ (810b404 <_svfiprintf_r+0x1f0>)
 810b3ee:	a904      	add	r1, sp, #16
 810b3f0:	4638      	mov	r0, r7
 810b3f2:	f000 f9bb 	bl	810b76c <_printf_i>
 810b3f6:	e7ed      	b.n	810b3d4 <_svfiprintf_r+0x1c0>
 810b3f8:	0810c2e2 	.word	0x0810c2e2
 810b3fc:	0810c2ec 	.word	0x0810c2ec
 810b400:	00000000 	.word	0x00000000
 810b404:	0810b15d 	.word	0x0810b15d
 810b408:	0810c2e8 	.word	0x0810c2e8

0810b40c <__sfputc_r>:
 810b40c:	6893      	ldr	r3, [r2, #8]
 810b40e:	3b01      	subs	r3, #1
 810b410:	2b00      	cmp	r3, #0
 810b412:	b410      	push	{r4}
 810b414:	6093      	str	r3, [r2, #8]
 810b416:	da08      	bge.n	810b42a <__sfputc_r+0x1e>
 810b418:	6994      	ldr	r4, [r2, #24]
 810b41a:	42a3      	cmp	r3, r4
 810b41c:	db01      	blt.n	810b422 <__sfputc_r+0x16>
 810b41e:	290a      	cmp	r1, #10
 810b420:	d103      	bne.n	810b42a <__sfputc_r+0x1e>
 810b422:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b426:	f000 bbde 	b.w	810bbe6 <__swbuf_r>
 810b42a:	6813      	ldr	r3, [r2, #0]
 810b42c:	1c58      	adds	r0, r3, #1
 810b42e:	6010      	str	r0, [r2, #0]
 810b430:	7019      	strb	r1, [r3, #0]
 810b432:	4608      	mov	r0, r1
 810b434:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b438:	4770      	bx	lr

0810b43a <__sfputs_r>:
 810b43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b43c:	4606      	mov	r6, r0
 810b43e:	460f      	mov	r7, r1
 810b440:	4614      	mov	r4, r2
 810b442:	18d5      	adds	r5, r2, r3
 810b444:	42ac      	cmp	r4, r5
 810b446:	d101      	bne.n	810b44c <__sfputs_r+0x12>
 810b448:	2000      	movs	r0, #0
 810b44a:	e007      	b.n	810b45c <__sfputs_r+0x22>
 810b44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b450:	463a      	mov	r2, r7
 810b452:	4630      	mov	r0, r6
 810b454:	f7ff ffda 	bl	810b40c <__sfputc_r>
 810b458:	1c43      	adds	r3, r0, #1
 810b45a:	d1f3      	bne.n	810b444 <__sfputs_r+0xa>
 810b45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810b460 <_vfiprintf_r>:
 810b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b464:	460d      	mov	r5, r1
 810b466:	b09d      	sub	sp, #116	@ 0x74
 810b468:	4614      	mov	r4, r2
 810b46a:	4698      	mov	r8, r3
 810b46c:	4606      	mov	r6, r0
 810b46e:	b118      	cbz	r0, 810b478 <_vfiprintf_r+0x18>
 810b470:	6a03      	ldr	r3, [r0, #32]
 810b472:	b90b      	cbnz	r3, 810b478 <_vfiprintf_r+0x18>
 810b474:	f7ff fd60 	bl	810af38 <__sinit>
 810b478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810b47a:	07d9      	lsls	r1, r3, #31
 810b47c:	d405      	bmi.n	810b48a <_vfiprintf_r+0x2a>
 810b47e:	89ab      	ldrh	r3, [r5, #12]
 810b480:	059a      	lsls	r2, r3, #22
 810b482:	d402      	bmi.n	810b48a <_vfiprintf_r+0x2a>
 810b484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810b486:	f7ff fe08 	bl	810b09a <__retarget_lock_acquire_recursive>
 810b48a:	89ab      	ldrh	r3, [r5, #12]
 810b48c:	071b      	lsls	r3, r3, #28
 810b48e:	d501      	bpl.n	810b494 <_vfiprintf_r+0x34>
 810b490:	692b      	ldr	r3, [r5, #16]
 810b492:	b99b      	cbnz	r3, 810b4bc <_vfiprintf_r+0x5c>
 810b494:	4629      	mov	r1, r5
 810b496:	4630      	mov	r0, r6
 810b498:	f000 fbe4 	bl	810bc64 <__swsetup_r>
 810b49c:	b170      	cbz	r0, 810b4bc <_vfiprintf_r+0x5c>
 810b49e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810b4a0:	07dc      	lsls	r4, r3, #31
 810b4a2:	d504      	bpl.n	810b4ae <_vfiprintf_r+0x4e>
 810b4a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b4a8:	b01d      	add	sp, #116	@ 0x74
 810b4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b4ae:	89ab      	ldrh	r3, [r5, #12]
 810b4b0:	0598      	lsls	r0, r3, #22
 810b4b2:	d4f7      	bmi.n	810b4a4 <_vfiprintf_r+0x44>
 810b4b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810b4b6:	f7ff fdf1 	bl	810b09c <__retarget_lock_release_recursive>
 810b4ba:	e7f3      	b.n	810b4a4 <_vfiprintf_r+0x44>
 810b4bc:	2300      	movs	r3, #0
 810b4be:	9309      	str	r3, [sp, #36]	@ 0x24
 810b4c0:	2320      	movs	r3, #32
 810b4c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810b4c6:	f8cd 800c 	str.w	r8, [sp, #12]
 810b4ca:	2330      	movs	r3, #48	@ 0x30
 810b4cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 810b67c <_vfiprintf_r+0x21c>
 810b4d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810b4d4:	f04f 0901 	mov.w	r9, #1
 810b4d8:	4623      	mov	r3, r4
 810b4da:	469a      	mov	sl, r3
 810b4dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b4e0:	b10a      	cbz	r2, 810b4e6 <_vfiprintf_r+0x86>
 810b4e2:	2a25      	cmp	r2, #37	@ 0x25
 810b4e4:	d1f9      	bne.n	810b4da <_vfiprintf_r+0x7a>
 810b4e6:	ebba 0b04 	subs.w	fp, sl, r4
 810b4ea:	d00b      	beq.n	810b504 <_vfiprintf_r+0xa4>
 810b4ec:	465b      	mov	r3, fp
 810b4ee:	4622      	mov	r2, r4
 810b4f0:	4629      	mov	r1, r5
 810b4f2:	4630      	mov	r0, r6
 810b4f4:	f7ff ffa1 	bl	810b43a <__sfputs_r>
 810b4f8:	3001      	adds	r0, #1
 810b4fa:	f000 80a7 	beq.w	810b64c <_vfiprintf_r+0x1ec>
 810b4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810b500:	445a      	add	r2, fp
 810b502:	9209      	str	r2, [sp, #36]	@ 0x24
 810b504:	f89a 3000 	ldrb.w	r3, [sl]
 810b508:	2b00      	cmp	r3, #0
 810b50a:	f000 809f 	beq.w	810b64c <_vfiprintf_r+0x1ec>
 810b50e:	2300      	movs	r3, #0
 810b510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810b514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b518:	f10a 0a01 	add.w	sl, sl, #1
 810b51c:	9304      	str	r3, [sp, #16]
 810b51e:	9307      	str	r3, [sp, #28]
 810b520:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810b524:	931a      	str	r3, [sp, #104]	@ 0x68
 810b526:	4654      	mov	r4, sl
 810b528:	2205      	movs	r2, #5
 810b52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b52e:	4853      	ldr	r0, [pc, #332]	@ (810b67c <_vfiprintf_r+0x21c>)
 810b530:	f7f4 feee 	bl	8100310 <memchr>
 810b534:	9a04      	ldr	r2, [sp, #16]
 810b536:	b9d8      	cbnz	r0, 810b570 <_vfiprintf_r+0x110>
 810b538:	06d1      	lsls	r1, r2, #27
 810b53a:	bf44      	itt	mi
 810b53c:	2320      	movmi	r3, #32
 810b53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b542:	0713      	lsls	r3, r2, #28
 810b544:	bf44      	itt	mi
 810b546:	232b      	movmi	r3, #43	@ 0x2b
 810b548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810b54c:	f89a 3000 	ldrb.w	r3, [sl]
 810b550:	2b2a      	cmp	r3, #42	@ 0x2a
 810b552:	d015      	beq.n	810b580 <_vfiprintf_r+0x120>
 810b554:	9a07      	ldr	r2, [sp, #28]
 810b556:	4654      	mov	r4, sl
 810b558:	2000      	movs	r0, #0
 810b55a:	f04f 0c0a 	mov.w	ip, #10
 810b55e:	4621      	mov	r1, r4
 810b560:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b564:	3b30      	subs	r3, #48	@ 0x30
 810b566:	2b09      	cmp	r3, #9
 810b568:	d94b      	bls.n	810b602 <_vfiprintf_r+0x1a2>
 810b56a:	b1b0      	cbz	r0, 810b59a <_vfiprintf_r+0x13a>
 810b56c:	9207      	str	r2, [sp, #28]
 810b56e:	e014      	b.n	810b59a <_vfiprintf_r+0x13a>
 810b570:	eba0 0308 	sub.w	r3, r0, r8
 810b574:	fa09 f303 	lsl.w	r3, r9, r3
 810b578:	4313      	orrs	r3, r2
 810b57a:	9304      	str	r3, [sp, #16]
 810b57c:	46a2      	mov	sl, r4
 810b57e:	e7d2      	b.n	810b526 <_vfiprintf_r+0xc6>
 810b580:	9b03      	ldr	r3, [sp, #12]
 810b582:	1d19      	adds	r1, r3, #4
 810b584:	681b      	ldr	r3, [r3, #0]
 810b586:	9103      	str	r1, [sp, #12]
 810b588:	2b00      	cmp	r3, #0
 810b58a:	bfbb      	ittet	lt
 810b58c:	425b      	neglt	r3, r3
 810b58e:	f042 0202 	orrlt.w	r2, r2, #2
 810b592:	9307      	strge	r3, [sp, #28]
 810b594:	9307      	strlt	r3, [sp, #28]
 810b596:	bfb8      	it	lt
 810b598:	9204      	strlt	r2, [sp, #16]
 810b59a:	7823      	ldrb	r3, [r4, #0]
 810b59c:	2b2e      	cmp	r3, #46	@ 0x2e
 810b59e:	d10a      	bne.n	810b5b6 <_vfiprintf_r+0x156>
 810b5a0:	7863      	ldrb	r3, [r4, #1]
 810b5a2:	2b2a      	cmp	r3, #42	@ 0x2a
 810b5a4:	d132      	bne.n	810b60c <_vfiprintf_r+0x1ac>
 810b5a6:	9b03      	ldr	r3, [sp, #12]
 810b5a8:	1d1a      	adds	r2, r3, #4
 810b5aa:	681b      	ldr	r3, [r3, #0]
 810b5ac:	9203      	str	r2, [sp, #12]
 810b5ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810b5b2:	3402      	adds	r4, #2
 810b5b4:	9305      	str	r3, [sp, #20]
 810b5b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 810b68c <_vfiprintf_r+0x22c>
 810b5ba:	7821      	ldrb	r1, [r4, #0]
 810b5bc:	2203      	movs	r2, #3
 810b5be:	4650      	mov	r0, sl
 810b5c0:	f7f4 fea6 	bl	8100310 <memchr>
 810b5c4:	b138      	cbz	r0, 810b5d6 <_vfiprintf_r+0x176>
 810b5c6:	9b04      	ldr	r3, [sp, #16]
 810b5c8:	eba0 000a 	sub.w	r0, r0, sl
 810b5cc:	2240      	movs	r2, #64	@ 0x40
 810b5ce:	4082      	lsls	r2, r0
 810b5d0:	4313      	orrs	r3, r2
 810b5d2:	3401      	adds	r4, #1
 810b5d4:	9304      	str	r3, [sp, #16]
 810b5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b5da:	4829      	ldr	r0, [pc, #164]	@ (810b680 <_vfiprintf_r+0x220>)
 810b5dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810b5e0:	2206      	movs	r2, #6
 810b5e2:	f7f4 fe95 	bl	8100310 <memchr>
 810b5e6:	2800      	cmp	r0, #0
 810b5e8:	d03f      	beq.n	810b66a <_vfiprintf_r+0x20a>
 810b5ea:	4b26      	ldr	r3, [pc, #152]	@ (810b684 <_vfiprintf_r+0x224>)
 810b5ec:	bb1b      	cbnz	r3, 810b636 <_vfiprintf_r+0x1d6>
 810b5ee:	9b03      	ldr	r3, [sp, #12]
 810b5f0:	3307      	adds	r3, #7
 810b5f2:	f023 0307 	bic.w	r3, r3, #7
 810b5f6:	3308      	adds	r3, #8
 810b5f8:	9303      	str	r3, [sp, #12]
 810b5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810b5fc:	443b      	add	r3, r7
 810b5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 810b600:	e76a      	b.n	810b4d8 <_vfiprintf_r+0x78>
 810b602:	fb0c 3202 	mla	r2, ip, r2, r3
 810b606:	460c      	mov	r4, r1
 810b608:	2001      	movs	r0, #1
 810b60a:	e7a8      	b.n	810b55e <_vfiprintf_r+0xfe>
 810b60c:	2300      	movs	r3, #0
 810b60e:	3401      	adds	r4, #1
 810b610:	9305      	str	r3, [sp, #20]
 810b612:	4619      	mov	r1, r3
 810b614:	f04f 0c0a 	mov.w	ip, #10
 810b618:	4620      	mov	r0, r4
 810b61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b61e:	3a30      	subs	r2, #48	@ 0x30
 810b620:	2a09      	cmp	r2, #9
 810b622:	d903      	bls.n	810b62c <_vfiprintf_r+0x1cc>
 810b624:	2b00      	cmp	r3, #0
 810b626:	d0c6      	beq.n	810b5b6 <_vfiprintf_r+0x156>
 810b628:	9105      	str	r1, [sp, #20]
 810b62a:	e7c4      	b.n	810b5b6 <_vfiprintf_r+0x156>
 810b62c:	fb0c 2101 	mla	r1, ip, r1, r2
 810b630:	4604      	mov	r4, r0
 810b632:	2301      	movs	r3, #1
 810b634:	e7f0      	b.n	810b618 <_vfiprintf_r+0x1b8>
 810b636:	ab03      	add	r3, sp, #12
 810b638:	9300      	str	r3, [sp, #0]
 810b63a:	462a      	mov	r2, r5
 810b63c:	4b12      	ldr	r3, [pc, #72]	@ (810b688 <_vfiprintf_r+0x228>)
 810b63e:	a904      	add	r1, sp, #16
 810b640:	4630      	mov	r0, r6
 810b642:	f3af 8000 	nop.w
 810b646:	4607      	mov	r7, r0
 810b648:	1c78      	adds	r0, r7, #1
 810b64a:	d1d6      	bne.n	810b5fa <_vfiprintf_r+0x19a>
 810b64c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810b64e:	07d9      	lsls	r1, r3, #31
 810b650:	d405      	bmi.n	810b65e <_vfiprintf_r+0x1fe>
 810b652:	89ab      	ldrh	r3, [r5, #12]
 810b654:	059a      	lsls	r2, r3, #22
 810b656:	d402      	bmi.n	810b65e <_vfiprintf_r+0x1fe>
 810b658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 810b65a:	f7ff fd1f 	bl	810b09c <__retarget_lock_release_recursive>
 810b65e:	89ab      	ldrh	r3, [r5, #12]
 810b660:	065b      	lsls	r3, r3, #25
 810b662:	f53f af1f 	bmi.w	810b4a4 <_vfiprintf_r+0x44>
 810b666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810b668:	e71e      	b.n	810b4a8 <_vfiprintf_r+0x48>
 810b66a:	ab03      	add	r3, sp, #12
 810b66c:	9300      	str	r3, [sp, #0]
 810b66e:	462a      	mov	r2, r5
 810b670:	4b05      	ldr	r3, [pc, #20]	@ (810b688 <_vfiprintf_r+0x228>)
 810b672:	a904      	add	r1, sp, #16
 810b674:	4630      	mov	r0, r6
 810b676:	f000 f879 	bl	810b76c <_printf_i>
 810b67a:	e7e4      	b.n	810b646 <_vfiprintf_r+0x1e6>
 810b67c:	0810c2e2 	.word	0x0810c2e2
 810b680:	0810c2ec 	.word	0x0810c2ec
 810b684:	00000000 	.word	0x00000000
 810b688:	0810b43b 	.word	0x0810b43b
 810b68c:	0810c2e8 	.word	0x0810c2e8

0810b690 <_printf_common>:
 810b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b694:	4616      	mov	r6, r2
 810b696:	4698      	mov	r8, r3
 810b698:	688a      	ldr	r2, [r1, #8]
 810b69a:	690b      	ldr	r3, [r1, #16]
 810b69c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810b6a0:	4293      	cmp	r3, r2
 810b6a2:	bfb8      	it	lt
 810b6a4:	4613      	movlt	r3, r2
 810b6a6:	6033      	str	r3, [r6, #0]
 810b6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810b6ac:	4607      	mov	r7, r0
 810b6ae:	460c      	mov	r4, r1
 810b6b0:	b10a      	cbz	r2, 810b6b6 <_printf_common+0x26>
 810b6b2:	3301      	adds	r3, #1
 810b6b4:	6033      	str	r3, [r6, #0]
 810b6b6:	6823      	ldr	r3, [r4, #0]
 810b6b8:	0699      	lsls	r1, r3, #26
 810b6ba:	bf42      	ittt	mi
 810b6bc:	6833      	ldrmi	r3, [r6, #0]
 810b6be:	3302      	addmi	r3, #2
 810b6c0:	6033      	strmi	r3, [r6, #0]
 810b6c2:	6825      	ldr	r5, [r4, #0]
 810b6c4:	f015 0506 	ands.w	r5, r5, #6
 810b6c8:	d106      	bne.n	810b6d8 <_printf_common+0x48>
 810b6ca:	f104 0a19 	add.w	sl, r4, #25
 810b6ce:	68e3      	ldr	r3, [r4, #12]
 810b6d0:	6832      	ldr	r2, [r6, #0]
 810b6d2:	1a9b      	subs	r3, r3, r2
 810b6d4:	42ab      	cmp	r3, r5
 810b6d6:	dc26      	bgt.n	810b726 <_printf_common+0x96>
 810b6d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810b6dc:	6822      	ldr	r2, [r4, #0]
 810b6de:	3b00      	subs	r3, #0
 810b6e0:	bf18      	it	ne
 810b6e2:	2301      	movne	r3, #1
 810b6e4:	0692      	lsls	r2, r2, #26
 810b6e6:	d42b      	bmi.n	810b740 <_printf_common+0xb0>
 810b6e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810b6ec:	4641      	mov	r1, r8
 810b6ee:	4638      	mov	r0, r7
 810b6f0:	47c8      	blx	r9
 810b6f2:	3001      	adds	r0, #1
 810b6f4:	d01e      	beq.n	810b734 <_printf_common+0xa4>
 810b6f6:	6823      	ldr	r3, [r4, #0]
 810b6f8:	6922      	ldr	r2, [r4, #16]
 810b6fa:	f003 0306 	and.w	r3, r3, #6
 810b6fe:	2b04      	cmp	r3, #4
 810b700:	bf02      	ittt	eq
 810b702:	68e5      	ldreq	r5, [r4, #12]
 810b704:	6833      	ldreq	r3, [r6, #0]
 810b706:	1aed      	subeq	r5, r5, r3
 810b708:	68a3      	ldr	r3, [r4, #8]
 810b70a:	bf0c      	ite	eq
 810b70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810b710:	2500      	movne	r5, #0
 810b712:	4293      	cmp	r3, r2
 810b714:	bfc4      	itt	gt
 810b716:	1a9b      	subgt	r3, r3, r2
 810b718:	18ed      	addgt	r5, r5, r3
 810b71a:	2600      	movs	r6, #0
 810b71c:	341a      	adds	r4, #26
 810b71e:	42b5      	cmp	r5, r6
 810b720:	d11a      	bne.n	810b758 <_printf_common+0xc8>
 810b722:	2000      	movs	r0, #0
 810b724:	e008      	b.n	810b738 <_printf_common+0xa8>
 810b726:	2301      	movs	r3, #1
 810b728:	4652      	mov	r2, sl
 810b72a:	4641      	mov	r1, r8
 810b72c:	4638      	mov	r0, r7
 810b72e:	47c8      	blx	r9
 810b730:	3001      	adds	r0, #1
 810b732:	d103      	bne.n	810b73c <_printf_common+0xac>
 810b734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b73c:	3501      	adds	r5, #1
 810b73e:	e7c6      	b.n	810b6ce <_printf_common+0x3e>
 810b740:	18e1      	adds	r1, r4, r3
 810b742:	1c5a      	adds	r2, r3, #1
 810b744:	2030      	movs	r0, #48	@ 0x30
 810b746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810b74a:	4422      	add	r2, r4
 810b74c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810b750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810b754:	3302      	adds	r3, #2
 810b756:	e7c7      	b.n	810b6e8 <_printf_common+0x58>
 810b758:	2301      	movs	r3, #1
 810b75a:	4622      	mov	r2, r4
 810b75c:	4641      	mov	r1, r8
 810b75e:	4638      	mov	r0, r7
 810b760:	47c8      	blx	r9
 810b762:	3001      	adds	r0, #1
 810b764:	d0e6      	beq.n	810b734 <_printf_common+0xa4>
 810b766:	3601      	adds	r6, #1
 810b768:	e7d9      	b.n	810b71e <_printf_common+0x8e>
	...

0810b76c <_printf_i>:
 810b76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b770:	7e0f      	ldrb	r7, [r1, #24]
 810b772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810b774:	2f78      	cmp	r7, #120	@ 0x78
 810b776:	4691      	mov	r9, r2
 810b778:	4680      	mov	r8, r0
 810b77a:	460c      	mov	r4, r1
 810b77c:	469a      	mov	sl, r3
 810b77e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810b782:	d807      	bhi.n	810b794 <_printf_i+0x28>
 810b784:	2f62      	cmp	r7, #98	@ 0x62
 810b786:	d80a      	bhi.n	810b79e <_printf_i+0x32>
 810b788:	2f00      	cmp	r7, #0
 810b78a:	f000 80d2 	beq.w	810b932 <_printf_i+0x1c6>
 810b78e:	2f58      	cmp	r7, #88	@ 0x58
 810b790:	f000 80b9 	beq.w	810b906 <_printf_i+0x19a>
 810b794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810b798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810b79c:	e03a      	b.n	810b814 <_printf_i+0xa8>
 810b79e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810b7a2:	2b15      	cmp	r3, #21
 810b7a4:	d8f6      	bhi.n	810b794 <_printf_i+0x28>
 810b7a6:	a101      	add	r1, pc, #4	@ (adr r1, 810b7ac <_printf_i+0x40>)
 810b7a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810b7ac:	0810b805 	.word	0x0810b805
 810b7b0:	0810b819 	.word	0x0810b819
 810b7b4:	0810b795 	.word	0x0810b795
 810b7b8:	0810b795 	.word	0x0810b795
 810b7bc:	0810b795 	.word	0x0810b795
 810b7c0:	0810b795 	.word	0x0810b795
 810b7c4:	0810b819 	.word	0x0810b819
 810b7c8:	0810b795 	.word	0x0810b795
 810b7cc:	0810b795 	.word	0x0810b795
 810b7d0:	0810b795 	.word	0x0810b795
 810b7d4:	0810b795 	.word	0x0810b795
 810b7d8:	0810b919 	.word	0x0810b919
 810b7dc:	0810b843 	.word	0x0810b843
 810b7e0:	0810b8d3 	.word	0x0810b8d3
 810b7e4:	0810b795 	.word	0x0810b795
 810b7e8:	0810b795 	.word	0x0810b795
 810b7ec:	0810b93b 	.word	0x0810b93b
 810b7f0:	0810b795 	.word	0x0810b795
 810b7f4:	0810b843 	.word	0x0810b843
 810b7f8:	0810b795 	.word	0x0810b795
 810b7fc:	0810b795 	.word	0x0810b795
 810b800:	0810b8db 	.word	0x0810b8db
 810b804:	6833      	ldr	r3, [r6, #0]
 810b806:	1d1a      	adds	r2, r3, #4
 810b808:	681b      	ldr	r3, [r3, #0]
 810b80a:	6032      	str	r2, [r6, #0]
 810b80c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810b810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810b814:	2301      	movs	r3, #1
 810b816:	e09d      	b.n	810b954 <_printf_i+0x1e8>
 810b818:	6833      	ldr	r3, [r6, #0]
 810b81a:	6820      	ldr	r0, [r4, #0]
 810b81c:	1d19      	adds	r1, r3, #4
 810b81e:	6031      	str	r1, [r6, #0]
 810b820:	0606      	lsls	r6, r0, #24
 810b822:	d501      	bpl.n	810b828 <_printf_i+0xbc>
 810b824:	681d      	ldr	r5, [r3, #0]
 810b826:	e003      	b.n	810b830 <_printf_i+0xc4>
 810b828:	0645      	lsls	r5, r0, #25
 810b82a:	d5fb      	bpl.n	810b824 <_printf_i+0xb8>
 810b82c:	f9b3 5000 	ldrsh.w	r5, [r3]
 810b830:	2d00      	cmp	r5, #0
 810b832:	da03      	bge.n	810b83c <_printf_i+0xd0>
 810b834:	232d      	movs	r3, #45	@ 0x2d
 810b836:	426d      	negs	r5, r5
 810b838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810b83c:	4859      	ldr	r0, [pc, #356]	@ (810b9a4 <_printf_i+0x238>)
 810b83e:	230a      	movs	r3, #10
 810b840:	e011      	b.n	810b866 <_printf_i+0xfa>
 810b842:	6821      	ldr	r1, [r4, #0]
 810b844:	6833      	ldr	r3, [r6, #0]
 810b846:	0608      	lsls	r0, r1, #24
 810b848:	f853 5b04 	ldr.w	r5, [r3], #4
 810b84c:	d402      	bmi.n	810b854 <_printf_i+0xe8>
 810b84e:	0649      	lsls	r1, r1, #25
 810b850:	bf48      	it	mi
 810b852:	b2ad      	uxthmi	r5, r5
 810b854:	2f6f      	cmp	r7, #111	@ 0x6f
 810b856:	4853      	ldr	r0, [pc, #332]	@ (810b9a4 <_printf_i+0x238>)
 810b858:	6033      	str	r3, [r6, #0]
 810b85a:	bf14      	ite	ne
 810b85c:	230a      	movne	r3, #10
 810b85e:	2308      	moveq	r3, #8
 810b860:	2100      	movs	r1, #0
 810b862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810b866:	6866      	ldr	r6, [r4, #4]
 810b868:	60a6      	str	r6, [r4, #8]
 810b86a:	2e00      	cmp	r6, #0
 810b86c:	bfa2      	ittt	ge
 810b86e:	6821      	ldrge	r1, [r4, #0]
 810b870:	f021 0104 	bicge.w	r1, r1, #4
 810b874:	6021      	strge	r1, [r4, #0]
 810b876:	b90d      	cbnz	r5, 810b87c <_printf_i+0x110>
 810b878:	2e00      	cmp	r6, #0
 810b87a:	d04b      	beq.n	810b914 <_printf_i+0x1a8>
 810b87c:	4616      	mov	r6, r2
 810b87e:	fbb5 f1f3 	udiv	r1, r5, r3
 810b882:	fb03 5711 	mls	r7, r3, r1, r5
 810b886:	5dc7      	ldrb	r7, [r0, r7]
 810b888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810b88c:	462f      	mov	r7, r5
 810b88e:	42bb      	cmp	r3, r7
 810b890:	460d      	mov	r5, r1
 810b892:	d9f4      	bls.n	810b87e <_printf_i+0x112>
 810b894:	2b08      	cmp	r3, #8
 810b896:	d10b      	bne.n	810b8b0 <_printf_i+0x144>
 810b898:	6823      	ldr	r3, [r4, #0]
 810b89a:	07df      	lsls	r7, r3, #31
 810b89c:	d508      	bpl.n	810b8b0 <_printf_i+0x144>
 810b89e:	6923      	ldr	r3, [r4, #16]
 810b8a0:	6861      	ldr	r1, [r4, #4]
 810b8a2:	4299      	cmp	r1, r3
 810b8a4:	bfde      	ittt	le
 810b8a6:	2330      	movle	r3, #48	@ 0x30
 810b8a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 810b8ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 810b8b0:	1b92      	subs	r2, r2, r6
 810b8b2:	6122      	str	r2, [r4, #16]
 810b8b4:	f8cd a000 	str.w	sl, [sp]
 810b8b8:	464b      	mov	r3, r9
 810b8ba:	aa03      	add	r2, sp, #12
 810b8bc:	4621      	mov	r1, r4
 810b8be:	4640      	mov	r0, r8
 810b8c0:	f7ff fee6 	bl	810b690 <_printf_common>
 810b8c4:	3001      	adds	r0, #1
 810b8c6:	d14a      	bne.n	810b95e <_printf_i+0x1f2>
 810b8c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810b8cc:	b004      	add	sp, #16
 810b8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b8d2:	6823      	ldr	r3, [r4, #0]
 810b8d4:	f043 0320 	orr.w	r3, r3, #32
 810b8d8:	6023      	str	r3, [r4, #0]
 810b8da:	4833      	ldr	r0, [pc, #204]	@ (810b9a8 <_printf_i+0x23c>)
 810b8dc:	2778      	movs	r7, #120	@ 0x78
 810b8de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810b8e2:	6823      	ldr	r3, [r4, #0]
 810b8e4:	6831      	ldr	r1, [r6, #0]
 810b8e6:	061f      	lsls	r7, r3, #24
 810b8e8:	f851 5b04 	ldr.w	r5, [r1], #4
 810b8ec:	d402      	bmi.n	810b8f4 <_printf_i+0x188>
 810b8ee:	065f      	lsls	r7, r3, #25
 810b8f0:	bf48      	it	mi
 810b8f2:	b2ad      	uxthmi	r5, r5
 810b8f4:	6031      	str	r1, [r6, #0]
 810b8f6:	07d9      	lsls	r1, r3, #31
 810b8f8:	bf44      	itt	mi
 810b8fa:	f043 0320 	orrmi.w	r3, r3, #32
 810b8fe:	6023      	strmi	r3, [r4, #0]
 810b900:	b11d      	cbz	r5, 810b90a <_printf_i+0x19e>
 810b902:	2310      	movs	r3, #16
 810b904:	e7ac      	b.n	810b860 <_printf_i+0xf4>
 810b906:	4827      	ldr	r0, [pc, #156]	@ (810b9a4 <_printf_i+0x238>)
 810b908:	e7e9      	b.n	810b8de <_printf_i+0x172>
 810b90a:	6823      	ldr	r3, [r4, #0]
 810b90c:	f023 0320 	bic.w	r3, r3, #32
 810b910:	6023      	str	r3, [r4, #0]
 810b912:	e7f6      	b.n	810b902 <_printf_i+0x196>
 810b914:	4616      	mov	r6, r2
 810b916:	e7bd      	b.n	810b894 <_printf_i+0x128>
 810b918:	6833      	ldr	r3, [r6, #0]
 810b91a:	6825      	ldr	r5, [r4, #0]
 810b91c:	6961      	ldr	r1, [r4, #20]
 810b91e:	1d18      	adds	r0, r3, #4
 810b920:	6030      	str	r0, [r6, #0]
 810b922:	062e      	lsls	r6, r5, #24
 810b924:	681b      	ldr	r3, [r3, #0]
 810b926:	d501      	bpl.n	810b92c <_printf_i+0x1c0>
 810b928:	6019      	str	r1, [r3, #0]
 810b92a:	e002      	b.n	810b932 <_printf_i+0x1c6>
 810b92c:	0668      	lsls	r0, r5, #25
 810b92e:	d5fb      	bpl.n	810b928 <_printf_i+0x1bc>
 810b930:	8019      	strh	r1, [r3, #0]
 810b932:	2300      	movs	r3, #0
 810b934:	6123      	str	r3, [r4, #16]
 810b936:	4616      	mov	r6, r2
 810b938:	e7bc      	b.n	810b8b4 <_printf_i+0x148>
 810b93a:	6833      	ldr	r3, [r6, #0]
 810b93c:	1d1a      	adds	r2, r3, #4
 810b93e:	6032      	str	r2, [r6, #0]
 810b940:	681e      	ldr	r6, [r3, #0]
 810b942:	6862      	ldr	r2, [r4, #4]
 810b944:	2100      	movs	r1, #0
 810b946:	4630      	mov	r0, r6
 810b948:	f7f4 fce2 	bl	8100310 <memchr>
 810b94c:	b108      	cbz	r0, 810b952 <_printf_i+0x1e6>
 810b94e:	1b80      	subs	r0, r0, r6
 810b950:	6060      	str	r0, [r4, #4]
 810b952:	6863      	ldr	r3, [r4, #4]
 810b954:	6123      	str	r3, [r4, #16]
 810b956:	2300      	movs	r3, #0
 810b958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810b95c:	e7aa      	b.n	810b8b4 <_printf_i+0x148>
 810b95e:	6923      	ldr	r3, [r4, #16]
 810b960:	4632      	mov	r2, r6
 810b962:	4649      	mov	r1, r9
 810b964:	4640      	mov	r0, r8
 810b966:	47d0      	blx	sl
 810b968:	3001      	adds	r0, #1
 810b96a:	d0ad      	beq.n	810b8c8 <_printf_i+0x15c>
 810b96c:	6823      	ldr	r3, [r4, #0]
 810b96e:	079b      	lsls	r3, r3, #30
 810b970:	d413      	bmi.n	810b99a <_printf_i+0x22e>
 810b972:	68e0      	ldr	r0, [r4, #12]
 810b974:	9b03      	ldr	r3, [sp, #12]
 810b976:	4298      	cmp	r0, r3
 810b978:	bfb8      	it	lt
 810b97a:	4618      	movlt	r0, r3
 810b97c:	e7a6      	b.n	810b8cc <_printf_i+0x160>
 810b97e:	2301      	movs	r3, #1
 810b980:	4632      	mov	r2, r6
 810b982:	4649      	mov	r1, r9
 810b984:	4640      	mov	r0, r8
 810b986:	47d0      	blx	sl
 810b988:	3001      	adds	r0, #1
 810b98a:	d09d      	beq.n	810b8c8 <_printf_i+0x15c>
 810b98c:	3501      	adds	r5, #1
 810b98e:	68e3      	ldr	r3, [r4, #12]
 810b990:	9903      	ldr	r1, [sp, #12]
 810b992:	1a5b      	subs	r3, r3, r1
 810b994:	42ab      	cmp	r3, r5
 810b996:	dcf2      	bgt.n	810b97e <_printf_i+0x212>
 810b998:	e7eb      	b.n	810b972 <_printf_i+0x206>
 810b99a:	2500      	movs	r5, #0
 810b99c:	f104 0619 	add.w	r6, r4, #25
 810b9a0:	e7f5      	b.n	810b98e <_printf_i+0x222>
 810b9a2:	bf00      	nop
 810b9a4:	0810c2f3 	.word	0x0810c2f3
 810b9a8:	0810c304 	.word	0x0810c304

0810b9ac <__sflush_r>:
 810b9ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810b9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b9b4:	0716      	lsls	r6, r2, #28
 810b9b6:	4605      	mov	r5, r0
 810b9b8:	460c      	mov	r4, r1
 810b9ba:	d454      	bmi.n	810ba66 <__sflush_r+0xba>
 810b9bc:	684b      	ldr	r3, [r1, #4]
 810b9be:	2b00      	cmp	r3, #0
 810b9c0:	dc02      	bgt.n	810b9c8 <__sflush_r+0x1c>
 810b9c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 810b9c4:	2b00      	cmp	r3, #0
 810b9c6:	dd48      	ble.n	810ba5a <__sflush_r+0xae>
 810b9c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810b9ca:	2e00      	cmp	r6, #0
 810b9cc:	d045      	beq.n	810ba5a <__sflush_r+0xae>
 810b9ce:	2300      	movs	r3, #0
 810b9d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 810b9d4:	682f      	ldr	r7, [r5, #0]
 810b9d6:	6a21      	ldr	r1, [r4, #32]
 810b9d8:	602b      	str	r3, [r5, #0]
 810b9da:	d030      	beq.n	810ba3e <__sflush_r+0x92>
 810b9dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810b9de:	89a3      	ldrh	r3, [r4, #12]
 810b9e0:	0759      	lsls	r1, r3, #29
 810b9e2:	d505      	bpl.n	810b9f0 <__sflush_r+0x44>
 810b9e4:	6863      	ldr	r3, [r4, #4]
 810b9e6:	1ad2      	subs	r2, r2, r3
 810b9e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810b9ea:	b10b      	cbz	r3, 810b9f0 <__sflush_r+0x44>
 810b9ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810b9ee:	1ad2      	subs	r2, r2, r3
 810b9f0:	2300      	movs	r3, #0
 810b9f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810b9f4:	6a21      	ldr	r1, [r4, #32]
 810b9f6:	4628      	mov	r0, r5
 810b9f8:	47b0      	blx	r6
 810b9fa:	1c43      	adds	r3, r0, #1
 810b9fc:	89a3      	ldrh	r3, [r4, #12]
 810b9fe:	d106      	bne.n	810ba0e <__sflush_r+0x62>
 810ba00:	6829      	ldr	r1, [r5, #0]
 810ba02:	291d      	cmp	r1, #29
 810ba04:	d82b      	bhi.n	810ba5e <__sflush_r+0xb2>
 810ba06:	4a2a      	ldr	r2, [pc, #168]	@ (810bab0 <__sflush_r+0x104>)
 810ba08:	410a      	asrs	r2, r1
 810ba0a:	07d6      	lsls	r6, r2, #31
 810ba0c:	d427      	bmi.n	810ba5e <__sflush_r+0xb2>
 810ba0e:	2200      	movs	r2, #0
 810ba10:	6062      	str	r2, [r4, #4]
 810ba12:	04d9      	lsls	r1, r3, #19
 810ba14:	6922      	ldr	r2, [r4, #16]
 810ba16:	6022      	str	r2, [r4, #0]
 810ba18:	d504      	bpl.n	810ba24 <__sflush_r+0x78>
 810ba1a:	1c42      	adds	r2, r0, #1
 810ba1c:	d101      	bne.n	810ba22 <__sflush_r+0x76>
 810ba1e:	682b      	ldr	r3, [r5, #0]
 810ba20:	b903      	cbnz	r3, 810ba24 <__sflush_r+0x78>
 810ba22:	6560      	str	r0, [r4, #84]	@ 0x54
 810ba24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810ba26:	602f      	str	r7, [r5, #0]
 810ba28:	b1b9      	cbz	r1, 810ba5a <__sflush_r+0xae>
 810ba2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810ba2e:	4299      	cmp	r1, r3
 810ba30:	d002      	beq.n	810ba38 <__sflush_r+0x8c>
 810ba32:	4628      	mov	r0, r5
 810ba34:	f7ff fb48 	bl	810b0c8 <_free_r>
 810ba38:	2300      	movs	r3, #0
 810ba3a:	6363      	str	r3, [r4, #52]	@ 0x34
 810ba3c:	e00d      	b.n	810ba5a <__sflush_r+0xae>
 810ba3e:	2301      	movs	r3, #1
 810ba40:	4628      	mov	r0, r5
 810ba42:	47b0      	blx	r6
 810ba44:	4602      	mov	r2, r0
 810ba46:	1c50      	adds	r0, r2, #1
 810ba48:	d1c9      	bne.n	810b9de <__sflush_r+0x32>
 810ba4a:	682b      	ldr	r3, [r5, #0]
 810ba4c:	2b00      	cmp	r3, #0
 810ba4e:	d0c6      	beq.n	810b9de <__sflush_r+0x32>
 810ba50:	2b1d      	cmp	r3, #29
 810ba52:	d001      	beq.n	810ba58 <__sflush_r+0xac>
 810ba54:	2b16      	cmp	r3, #22
 810ba56:	d11e      	bne.n	810ba96 <__sflush_r+0xea>
 810ba58:	602f      	str	r7, [r5, #0]
 810ba5a:	2000      	movs	r0, #0
 810ba5c:	e022      	b.n	810baa4 <__sflush_r+0xf8>
 810ba5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ba62:	b21b      	sxth	r3, r3
 810ba64:	e01b      	b.n	810ba9e <__sflush_r+0xf2>
 810ba66:	690f      	ldr	r7, [r1, #16]
 810ba68:	2f00      	cmp	r7, #0
 810ba6a:	d0f6      	beq.n	810ba5a <__sflush_r+0xae>
 810ba6c:	0793      	lsls	r3, r2, #30
 810ba6e:	680e      	ldr	r6, [r1, #0]
 810ba70:	bf08      	it	eq
 810ba72:	694b      	ldreq	r3, [r1, #20]
 810ba74:	600f      	str	r7, [r1, #0]
 810ba76:	bf18      	it	ne
 810ba78:	2300      	movne	r3, #0
 810ba7a:	eba6 0807 	sub.w	r8, r6, r7
 810ba7e:	608b      	str	r3, [r1, #8]
 810ba80:	f1b8 0f00 	cmp.w	r8, #0
 810ba84:	dde9      	ble.n	810ba5a <__sflush_r+0xae>
 810ba86:	6a21      	ldr	r1, [r4, #32]
 810ba88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810ba8a:	4643      	mov	r3, r8
 810ba8c:	463a      	mov	r2, r7
 810ba8e:	4628      	mov	r0, r5
 810ba90:	47b0      	blx	r6
 810ba92:	2800      	cmp	r0, #0
 810ba94:	dc08      	bgt.n	810baa8 <__sflush_r+0xfc>
 810ba96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ba9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810ba9e:	81a3      	strh	r3, [r4, #12]
 810baa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810baa8:	4407      	add	r7, r0
 810baaa:	eba8 0800 	sub.w	r8, r8, r0
 810baae:	e7e7      	b.n	810ba80 <__sflush_r+0xd4>
 810bab0:	dfbffffe 	.word	0xdfbffffe

0810bab4 <_fflush_r>:
 810bab4:	b538      	push	{r3, r4, r5, lr}
 810bab6:	690b      	ldr	r3, [r1, #16]
 810bab8:	4605      	mov	r5, r0
 810baba:	460c      	mov	r4, r1
 810babc:	b913      	cbnz	r3, 810bac4 <_fflush_r+0x10>
 810babe:	2500      	movs	r5, #0
 810bac0:	4628      	mov	r0, r5
 810bac2:	bd38      	pop	{r3, r4, r5, pc}
 810bac4:	b118      	cbz	r0, 810bace <_fflush_r+0x1a>
 810bac6:	6a03      	ldr	r3, [r0, #32]
 810bac8:	b90b      	cbnz	r3, 810bace <_fflush_r+0x1a>
 810baca:	f7ff fa35 	bl	810af38 <__sinit>
 810bace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bad2:	2b00      	cmp	r3, #0
 810bad4:	d0f3      	beq.n	810babe <_fflush_r+0xa>
 810bad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810bad8:	07d0      	lsls	r0, r2, #31
 810bada:	d404      	bmi.n	810bae6 <_fflush_r+0x32>
 810badc:	0599      	lsls	r1, r3, #22
 810bade:	d402      	bmi.n	810bae6 <_fflush_r+0x32>
 810bae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810bae2:	f7ff fada 	bl	810b09a <__retarget_lock_acquire_recursive>
 810bae6:	4628      	mov	r0, r5
 810bae8:	4621      	mov	r1, r4
 810baea:	f7ff ff5f 	bl	810b9ac <__sflush_r>
 810baee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810baf0:	07da      	lsls	r2, r3, #31
 810baf2:	4605      	mov	r5, r0
 810baf4:	d4e4      	bmi.n	810bac0 <_fflush_r+0xc>
 810baf6:	89a3      	ldrh	r3, [r4, #12]
 810baf8:	059b      	lsls	r3, r3, #22
 810bafa:	d4e1      	bmi.n	810bac0 <_fflush_r+0xc>
 810bafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810bafe:	f7ff facd 	bl	810b09c <__retarget_lock_release_recursive>
 810bb02:	e7dd      	b.n	810bac0 <_fflush_r+0xc>

0810bb04 <__sread>:
 810bb04:	b510      	push	{r4, lr}
 810bb06:	460c      	mov	r4, r1
 810bb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810bb0c:	f000 f9f0 	bl	810bef0 <_read_r>
 810bb10:	2800      	cmp	r0, #0
 810bb12:	bfab      	itete	ge
 810bb14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810bb16:	89a3      	ldrhlt	r3, [r4, #12]
 810bb18:	181b      	addge	r3, r3, r0
 810bb1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810bb1e:	bfac      	ite	ge
 810bb20:	6563      	strge	r3, [r4, #84]	@ 0x54
 810bb22:	81a3      	strhlt	r3, [r4, #12]
 810bb24:	bd10      	pop	{r4, pc}

0810bb26 <__swrite>:
 810bb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bb2a:	461f      	mov	r7, r3
 810bb2c:	898b      	ldrh	r3, [r1, #12]
 810bb2e:	05db      	lsls	r3, r3, #23
 810bb30:	4605      	mov	r5, r0
 810bb32:	460c      	mov	r4, r1
 810bb34:	4616      	mov	r6, r2
 810bb36:	d505      	bpl.n	810bb44 <__swrite+0x1e>
 810bb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810bb3c:	2302      	movs	r3, #2
 810bb3e:	2200      	movs	r2, #0
 810bb40:	f000 f994 	bl	810be6c <_lseek_r>
 810bb44:	89a3      	ldrh	r3, [r4, #12]
 810bb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810bb4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810bb4e:	81a3      	strh	r3, [r4, #12]
 810bb50:	4632      	mov	r2, r6
 810bb52:	463b      	mov	r3, r7
 810bb54:	4628      	mov	r0, r5
 810bb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810bb5a:	f000 b9ef 	b.w	810bf3c <_write_r>

0810bb5e <__sseek>:
 810bb5e:	b510      	push	{r4, lr}
 810bb60:	460c      	mov	r4, r1
 810bb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810bb66:	f000 f981 	bl	810be6c <_lseek_r>
 810bb6a:	1c43      	adds	r3, r0, #1
 810bb6c:	89a3      	ldrh	r3, [r4, #12]
 810bb6e:	bf15      	itete	ne
 810bb70:	6560      	strne	r0, [r4, #84]	@ 0x54
 810bb72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810bb76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810bb7a:	81a3      	strheq	r3, [r4, #12]
 810bb7c:	bf18      	it	ne
 810bb7e:	81a3      	strhne	r3, [r4, #12]
 810bb80:	bd10      	pop	{r4, pc}

0810bb82 <__sclose>:
 810bb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810bb86:	f000 b93f 	b.w	810be08 <_close_r>

0810bb8a <_realloc_r>:
 810bb8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bb8e:	4680      	mov	r8, r0
 810bb90:	4615      	mov	r5, r2
 810bb92:	460c      	mov	r4, r1
 810bb94:	b921      	cbnz	r1, 810bba0 <_realloc_r+0x16>
 810bb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810bb9a:	4611      	mov	r1, r2
 810bb9c:	f7ff b894 	b.w	810acc8 <_malloc_r>
 810bba0:	b92a      	cbnz	r2, 810bbae <_realloc_r+0x24>
 810bba2:	f7ff fa91 	bl	810b0c8 <_free_r>
 810bba6:	2400      	movs	r4, #0
 810bba8:	4620      	mov	r0, r4
 810bbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bbae:	f000 f9d7 	bl	810bf60 <_malloc_usable_size_r>
 810bbb2:	4285      	cmp	r5, r0
 810bbb4:	4606      	mov	r6, r0
 810bbb6:	d802      	bhi.n	810bbbe <_realloc_r+0x34>
 810bbb8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810bbbc:	d8f4      	bhi.n	810bba8 <_realloc_r+0x1e>
 810bbbe:	4629      	mov	r1, r5
 810bbc0:	4640      	mov	r0, r8
 810bbc2:	f7ff f881 	bl	810acc8 <_malloc_r>
 810bbc6:	4607      	mov	r7, r0
 810bbc8:	2800      	cmp	r0, #0
 810bbca:	d0ec      	beq.n	810bba6 <_realloc_r+0x1c>
 810bbcc:	42b5      	cmp	r5, r6
 810bbce:	462a      	mov	r2, r5
 810bbd0:	4621      	mov	r1, r4
 810bbd2:	bf28      	it	cs
 810bbd4:	4632      	movcs	r2, r6
 810bbd6:	f7ff fa62 	bl	810b09e <memcpy>
 810bbda:	4621      	mov	r1, r4
 810bbdc:	4640      	mov	r0, r8
 810bbde:	f7ff fa73 	bl	810b0c8 <_free_r>
 810bbe2:	463c      	mov	r4, r7
 810bbe4:	e7e0      	b.n	810bba8 <_realloc_r+0x1e>

0810bbe6 <__swbuf_r>:
 810bbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bbe8:	460e      	mov	r6, r1
 810bbea:	4614      	mov	r4, r2
 810bbec:	4605      	mov	r5, r0
 810bbee:	b118      	cbz	r0, 810bbf8 <__swbuf_r+0x12>
 810bbf0:	6a03      	ldr	r3, [r0, #32]
 810bbf2:	b90b      	cbnz	r3, 810bbf8 <__swbuf_r+0x12>
 810bbf4:	f7ff f9a0 	bl	810af38 <__sinit>
 810bbf8:	69a3      	ldr	r3, [r4, #24]
 810bbfa:	60a3      	str	r3, [r4, #8]
 810bbfc:	89a3      	ldrh	r3, [r4, #12]
 810bbfe:	071a      	lsls	r2, r3, #28
 810bc00:	d501      	bpl.n	810bc06 <__swbuf_r+0x20>
 810bc02:	6923      	ldr	r3, [r4, #16]
 810bc04:	b943      	cbnz	r3, 810bc18 <__swbuf_r+0x32>
 810bc06:	4621      	mov	r1, r4
 810bc08:	4628      	mov	r0, r5
 810bc0a:	f000 f82b 	bl	810bc64 <__swsetup_r>
 810bc0e:	b118      	cbz	r0, 810bc18 <__swbuf_r+0x32>
 810bc10:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 810bc14:	4638      	mov	r0, r7
 810bc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810bc18:	6823      	ldr	r3, [r4, #0]
 810bc1a:	6922      	ldr	r2, [r4, #16]
 810bc1c:	1a98      	subs	r0, r3, r2
 810bc1e:	6963      	ldr	r3, [r4, #20]
 810bc20:	b2f6      	uxtb	r6, r6
 810bc22:	4283      	cmp	r3, r0
 810bc24:	4637      	mov	r7, r6
 810bc26:	dc05      	bgt.n	810bc34 <__swbuf_r+0x4e>
 810bc28:	4621      	mov	r1, r4
 810bc2a:	4628      	mov	r0, r5
 810bc2c:	f7ff ff42 	bl	810bab4 <_fflush_r>
 810bc30:	2800      	cmp	r0, #0
 810bc32:	d1ed      	bne.n	810bc10 <__swbuf_r+0x2a>
 810bc34:	68a3      	ldr	r3, [r4, #8]
 810bc36:	3b01      	subs	r3, #1
 810bc38:	60a3      	str	r3, [r4, #8]
 810bc3a:	6823      	ldr	r3, [r4, #0]
 810bc3c:	1c5a      	adds	r2, r3, #1
 810bc3e:	6022      	str	r2, [r4, #0]
 810bc40:	701e      	strb	r6, [r3, #0]
 810bc42:	6962      	ldr	r2, [r4, #20]
 810bc44:	1c43      	adds	r3, r0, #1
 810bc46:	429a      	cmp	r2, r3
 810bc48:	d004      	beq.n	810bc54 <__swbuf_r+0x6e>
 810bc4a:	89a3      	ldrh	r3, [r4, #12]
 810bc4c:	07db      	lsls	r3, r3, #31
 810bc4e:	d5e1      	bpl.n	810bc14 <__swbuf_r+0x2e>
 810bc50:	2e0a      	cmp	r6, #10
 810bc52:	d1df      	bne.n	810bc14 <__swbuf_r+0x2e>
 810bc54:	4621      	mov	r1, r4
 810bc56:	4628      	mov	r0, r5
 810bc58:	f7ff ff2c 	bl	810bab4 <_fflush_r>
 810bc5c:	2800      	cmp	r0, #0
 810bc5e:	d0d9      	beq.n	810bc14 <__swbuf_r+0x2e>
 810bc60:	e7d6      	b.n	810bc10 <__swbuf_r+0x2a>
	...

0810bc64 <__swsetup_r>:
 810bc64:	b538      	push	{r3, r4, r5, lr}
 810bc66:	4b29      	ldr	r3, [pc, #164]	@ (810bd0c <__swsetup_r+0xa8>)
 810bc68:	4605      	mov	r5, r0
 810bc6a:	6818      	ldr	r0, [r3, #0]
 810bc6c:	460c      	mov	r4, r1
 810bc6e:	b118      	cbz	r0, 810bc78 <__swsetup_r+0x14>
 810bc70:	6a03      	ldr	r3, [r0, #32]
 810bc72:	b90b      	cbnz	r3, 810bc78 <__swsetup_r+0x14>
 810bc74:	f7ff f960 	bl	810af38 <__sinit>
 810bc78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bc7c:	0719      	lsls	r1, r3, #28
 810bc7e:	d422      	bmi.n	810bcc6 <__swsetup_r+0x62>
 810bc80:	06da      	lsls	r2, r3, #27
 810bc82:	d407      	bmi.n	810bc94 <__swsetup_r+0x30>
 810bc84:	2209      	movs	r2, #9
 810bc86:	602a      	str	r2, [r5, #0]
 810bc88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810bc8c:	81a3      	strh	r3, [r4, #12]
 810bc8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810bc92:	e033      	b.n	810bcfc <__swsetup_r+0x98>
 810bc94:	0758      	lsls	r0, r3, #29
 810bc96:	d512      	bpl.n	810bcbe <__swsetup_r+0x5a>
 810bc98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810bc9a:	b141      	cbz	r1, 810bcae <__swsetup_r+0x4a>
 810bc9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810bca0:	4299      	cmp	r1, r3
 810bca2:	d002      	beq.n	810bcaa <__swsetup_r+0x46>
 810bca4:	4628      	mov	r0, r5
 810bca6:	f7ff fa0f 	bl	810b0c8 <_free_r>
 810bcaa:	2300      	movs	r3, #0
 810bcac:	6363      	str	r3, [r4, #52]	@ 0x34
 810bcae:	89a3      	ldrh	r3, [r4, #12]
 810bcb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 810bcb4:	81a3      	strh	r3, [r4, #12]
 810bcb6:	2300      	movs	r3, #0
 810bcb8:	6063      	str	r3, [r4, #4]
 810bcba:	6923      	ldr	r3, [r4, #16]
 810bcbc:	6023      	str	r3, [r4, #0]
 810bcbe:	89a3      	ldrh	r3, [r4, #12]
 810bcc0:	f043 0308 	orr.w	r3, r3, #8
 810bcc4:	81a3      	strh	r3, [r4, #12]
 810bcc6:	6923      	ldr	r3, [r4, #16]
 810bcc8:	b94b      	cbnz	r3, 810bcde <__swsetup_r+0x7a>
 810bcca:	89a3      	ldrh	r3, [r4, #12]
 810bccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810bcd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810bcd4:	d003      	beq.n	810bcde <__swsetup_r+0x7a>
 810bcd6:	4621      	mov	r1, r4
 810bcd8:	4628      	mov	r0, r5
 810bcda:	f000 f83f 	bl	810bd5c <__smakebuf_r>
 810bcde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bce2:	f013 0201 	ands.w	r2, r3, #1
 810bce6:	d00a      	beq.n	810bcfe <__swsetup_r+0x9a>
 810bce8:	2200      	movs	r2, #0
 810bcea:	60a2      	str	r2, [r4, #8]
 810bcec:	6962      	ldr	r2, [r4, #20]
 810bcee:	4252      	negs	r2, r2
 810bcf0:	61a2      	str	r2, [r4, #24]
 810bcf2:	6922      	ldr	r2, [r4, #16]
 810bcf4:	b942      	cbnz	r2, 810bd08 <__swsetup_r+0xa4>
 810bcf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810bcfa:	d1c5      	bne.n	810bc88 <__swsetup_r+0x24>
 810bcfc:	bd38      	pop	{r3, r4, r5, pc}
 810bcfe:	0799      	lsls	r1, r3, #30
 810bd00:	bf58      	it	pl
 810bd02:	6962      	ldrpl	r2, [r4, #20]
 810bd04:	60a2      	str	r2, [r4, #8]
 810bd06:	e7f4      	b.n	810bcf2 <__swsetup_r+0x8e>
 810bd08:	2000      	movs	r0, #0
 810bd0a:	e7f7      	b.n	810bcfc <__swsetup_r+0x98>
 810bd0c:	100000c8 	.word	0x100000c8

0810bd10 <__swhatbuf_r>:
 810bd10:	b570      	push	{r4, r5, r6, lr}
 810bd12:	460c      	mov	r4, r1
 810bd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810bd18:	2900      	cmp	r1, #0
 810bd1a:	b096      	sub	sp, #88	@ 0x58
 810bd1c:	4615      	mov	r5, r2
 810bd1e:	461e      	mov	r6, r3
 810bd20:	da0d      	bge.n	810bd3e <__swhatbuf_r+0x2e>
 810bd22:	89a3      	ldrh	r3, [r4, #12]
 810bd24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810bd28:	f04f 0100 	mov.w	r1, #0
 810bd2c:	bf14      	ite	ne
 810bd2e:	2340      	movne	r3, #64	@ 0x40
 810bd30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 810bd34:	2000      	movs	r0, #0
 810bd36:	6031      	str	r1, [r6, #0]
 810bd38:	602b      	str	r3, [r5, #0]
 810bd3a:	b016      	add	sp, #88	@ 0x58
 810bd3c:	bd70      	pop	{r4, r5, r6, pc}
 810bd3e:	466a      	mov	r2, sp
 810bd40:	f000 f872 	bl	810be28 <_fstat_r>
 810bd44:	2800      	cmp	r0, #0
 810bd46:	dbec      	blt.n	810bd22 <__swhatbuf_r+0x12>
 810bd48:	9901      	ldr	r1, [sp, #4]
 810bd4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810bd4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810bd52:	4259      	negs	r1, r3
 810bd54:	4159      	adcs	r1, r3
 810bd56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810bd5a:	e7eb      	b.n	810bd34 <__swhatbuf_r+0x24>

0810bd5c <__smakebuf_r>:
 810bd5c:	898b      	ldrh	r3, [r1, #12]
 810bd5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810bd60:	079d      	lsls	r5, r3, #30
 810bd62:	4606      	mov	r6, r0
 810bd64:	460c      	mov	r4, r1
 810bd66:	d507      	bpl.n	810bd78 <__smakebuf_r+0x1c>
 810bd68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 810bd6c:	6023      	str	r3, [r4, #0]
 810bd6e:	6123      	str	r3, [r4, #16]
 810bd70:	2301      	movs	r3, #1
 810bd72:	6163      	str	r3, [r4, #20]
 810bd74:	b003      	add	sp, #12
 810bd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810bd78:	ab01      	add	r3, sp, #4
 810bd7a:	466a      	mov	r2, sp
 810bd7c:	f7ff ffc8 	bl	810bd10 <__swhatbuf_r>
 810bd80:	9f00      	ldr	r7, [sp, #0]
 810bd82:	4605      	mov	r5, r0
 810bd84:	4639      	mov	r1, r7
 810bd86:	4630      	mov	r0, r6
 810bd88:	f7fe ff9e 	bl	810acc8 <_malloc_r>
 810bd8c:	b948      	cbnz	r0, 810bda2 <__smakebuf_r+0x46>
 810bd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810bd92:	059a      	lsls	r2, r3, #22
 810bd94:	d4ee      	bmi.n	810bd74 <__smakebuf_r+0x18>
 810bd96:	f023 0303 	bic.w	r3, r3, #3
 810bd9a:	f043 0302 	orr.w	r3, r3, #2
 810bd9e:	81a3      	strh	r3, [r4, #12]
 810bda0:	e7e2      	b.n	810bd68 <__smakebuf_r+0xc>
 810bda2:	89a3      	ldrh	r3, [r4, #12]
 810bda4:	6020      	str	r0, [r4, #0]
 810bda6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810bdaa:	81a3      	strh	r3, [r4, #12]
 810bdac:	9b01      	ldr	r3, [sp, #4]
 810bdae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810bdb2:	b15b      	cbz	r3, 810bdcc <__smakebuf_r+0x70>
 810bdb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810bdb8:	4630      	mov	r0, r6
 810bdba:	f000 f847 	bl	810be4c <_isatty_r>
 810bdbe:	b128      	cbz	r0, 810bdcc <__smakebuf_r+0x70>
 810bdc0:	89a3      	ldrh	r3, [r4, #12]
 810bdc2:	f023 0303 	bic.w	r3, r3, #3
 810bdc6:	f043 0301 	orr.w	r3, r3, #1
 810bdca:	81a3      	strh	r3, [r4, #12]
 810bdcc:	89a3      	ldrh	r3, [r4, #12]
 810bdce:	431d      	orrs	r5, r3
 810bdd0:	81a5      	strh	r5, [r4, #12]
 810bdd2:	e7cf      	b.n	810bd74 <__smakebuf_r+0x18>

0810bdd4 <memmove>:
 810bdd4:	4288      	cmp	r0, r1
 810bdd6:	b510      	push	{r4, lr}
 810bdd8:	eb01 0402 	add.w	r4, r1, r2
 810bddc:	d902      	bls.n	810bde4 <memmove+0x10>
 810bdde:	4284      	cmp	r4, r0
 810bde0:	4623      	mov	r3, r4
 810bde2:	d807      	bhi.n	810bdf4 <memmove+0x20>
 810bde4:	1e43      	subs	r3, r0, #1
 810bde6:	42a1      	cmp	r1, r4
 810bde8:	d008      	beq.n	810bdfc <memmove+0x28>
 810bdea:	f811 2b01 	ldrb.w	r2, [r1], #1
 810bdee:	f803 2f01 	strb.w	r2, [r3, #1]!
 810bdf2:	e7f8      	b.n	810bde6 <memmove+0x12>
 810bdf4:	4402      	add	r2, r0
 810bdf6:	4601      	mov	r1, r0
 810bdf8:	428a      	cmp	r2, r1
 810bdfa:	d100      	bne.n	810bdfe <memmove+0x2a>
 810bdfc:	bd10      	pop	{r4, pc}
 810bdfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810be02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810be06:	e7f7      	b.n	810bdf8 <memmove+0x24>

0810be08 <_close_r>:
 810be08:	b538      	push	{r3, r4, r5, lr}
 810be0a:	4d06      	ldr	r5, [pc, #24]	@ (810be24 <_close_r+0x1c>)
 810be0c:	2300      	movs	r3, #0
 810be0e:	4604      	mov	r4, r0
 810be10:	4608      	mov	r0, r1
 810be12:	602b      	str	r3, [r5, #0]
 810be14:	f7f4 ffb4 	bl	8100d80 <_close>
 810be18:	1c43      	adds	r3, r0, #1
 810be1a:	d102      	bne.n	810be22 <_close_r+0x1a>
 810be1c:	682b      	ldr	r3, [r5, #0]
 810be1e:	b103      	cbz	r3, 810be22 <_close_r+0x1a>
 810be20:	6023      	str	r3, [r4, #0]
 810be22:	bd38      	pop	{r3, r4, r5, pc}
 810be24:	10004dbc 	.word	0x10004dbc

0810be28 <_fstat_r>:
 810be28:	b538      	push	{r3, r4, r5, lr}
 810be2a:	4d07      	ldr	r5, [pc, #28]	@ (810be48 <_fstat_r+0x20>)
 810be2c:	2300      	movs	r3, #0
 810be2e:	4604      	mov	r4, r0
 810be30:	4608      	mov	r0, r1
 810be32:	4611      	mov	r1, r2
 810be34:	602b      	str	r3, [r5, #0]
 810be36:	f7f4 ffaf 	bl	8100d98 <_fstat>
 810be3a:	1c43      	adds	r3, r0, #1
 810be3c:	d102      	bne.n	810be44 <_fstat_r+0x1c>
 810be3e:	682b      	ldr	r3, [r5, #0]
 810be40:	b103      	cbz	r3, 810be44 <_fstat_r+0x1c>
 810be42:	6023      	str	r3, [r4, #0]
 810be44:	bd38      	pop	{r3, r4, r5, pc}
 810be46:	bf00      	nop
 810be48:	10004dbc 	.word	0x10004dbc

0810be4c <_isatty_r>:
 810be4c:	b538      	push	{r3, r4, r5, lr}
 810be4e:	4d06      	ldr	r5, [pc, #24]	@ (810be68 <_isatty_r+0x1c>)
 810be50:	2300      	movs	r3, #0
 810be52:	4604      	mov	r4, r0
 810be54:	4608      	mov	r0, r1
 810be56:	602b      	str	r3, [r5, #0]
 810be58:	f7f4 ffae 	bl	8100db8 <_isatty>
 810be5c:	1c43      	adds	r3, r0, #1
 810be5e:	d102      	bne.n	810be66 <_isatty_r+0x1a>
 810be60:	682b      	ldr	r3, [r5, #0]
 810be62:	b103      	cbz	r3, 810be66 <_isatty_r+0x1a>
 810be64:	6023      	str	r3, [r4, #0]
 810be66:	bd38      	pop	{r3, r4, r5, pc}
 810be68:	10004dbc 	.word	0x10004dbc

0810be6c <_lseek_r>:
 810be6c:	b538      	push	{r3, r4, r5, lr}
 810be6e:	4d07      	ldr	r5, [pc, #28]	@ (810be8c <_lseek_r+0x20>)
 810be70:	4604      	mov	r4, r0
 810be72:	4608      	mov	r0, r1
 810be74:	4611      	mov	r1, r2
 810be76:	2200      	movs	r2, #0
 810be78:	602a      	str	r2, [r5, #0]
 810be7a:	461a      	mov	r2, r3
 810be7c:	f7f4 ffa7 	bl	8100dce <_lseek>
 810be80:	1c43      	adds	r3, r0, #1
 810be82:	d102      	bne.n	810be8a <_lseek_r+0x1e>
 810be84:	682b      	ldr	r3, [r5, #0]
 810be86:	b103      	cbz	r3, 810be8a <_lseek_r+0x1e>
 810be88:	6023      	str	r3, [r4, #0]
 810be8a:	bd38      	pop	{r3, r4, r5, pc}
 810be8c:	10004dbc 	.word	0x10004dbc

0810be90 <_raise_r>:
 810be90:	291f      	cmp	r1, #31
 810be92:	b538      	push	{r3, r4, r5, lr}
 810be94:	4605      	mov	r5, r0
 810be96:	460c      	mov	r4, r1
 810be98:	d904      	bls.n	810bea4 <_raise_r+0x14>
 810be9a:	2316      	movs	r3, #22
 810be9c:	6003      	str	r3, [r0, #0]
 810be9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810bea2:	bd38      	pop	{r3, r4, r5, pc}
 810bea4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810bea6:	b112      	cbz	r2, 810beae <_raise_r+0x1e>
 810bea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810beac:	b94b      	cbnz	r3, 810bec2 <_raise_r+0x32>
 810beae:	4628      	mov	r0, r5
 810beb0:	f000 f842 	bl	810bf38 <_getpid_r>
 810beb4:	4622      	mov	r2, r4
 810beb6:	4601      	mov	r1, r0
 810beb8:	4628      	mov	r0, r5
 810beba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810bebe:	f000 b829 	b.w	810bf14 <_kill_r>
 810bec2:	2b01      	cmp	r3, #1
 810bec4:	d00a      	beq.n	810bedc <_raise_r+0x4c>
 810bec6:	1c59      	adds	r1, r3, #1
 810bec8:	d103      	bne.n	810bed2 <_raise_r+0x42>
 810beca:	2316      	movs	r3, #22
 810becc:	6003      	str	r3, [r0, #0]
 810bece:	2001      	movs	r0, #1
 810bed0:	e7e7      	b.n	810bea2 <_raise_r+0x12>
 810bed2:	2100      	movs	r1, #0
 810bed4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810bed8:	4620      	mov	r0, r4
 810beda:	4798      	blx	r3
 810bedc:	2000      	movs	r0, #0
 810bede:	e7e0      	b.n	810bea2 <_raise_r+0x12>

0810bee0 <raise>:
 810bee0:	4b02      	ldr	r3, [pc, #8]	@ (810beec <raise+0xc>)
 810bee2:	4601      	mov	r1, r0
 810bee4:	6818      	ldr	r0, [r3, #0]
 810bee6:	f7ff bfd3 	b.w	810be90 <_raise_r>
 810beea:	bf00      	nop
 810beec:	100000c8 	.word	0x100000c8

0810bef0 <_read_r>:
 810bef0:	b538      	push	{r3, r4, r5, lr}
 810bef2:	4d07      	ldr	r5, [pc, #28]	@ (810bf10 <_read_r+0x20>)
 810bef4:	4604      	mov	r4, r0
 810bef6:	4608      	mov	r0, r1
 810bef8:	4611      	mov	r1, r2
 810befa:	2200      	movs	r2, #0
 810befc:	602a      	str	r2, [r5, #0]
 810befe:	461a      	mov	r2, r3
 810bf00:	f7f4 ff05 	bl	8100d0e <_read>
 810bf04:	1c43      	adds	r3, r0, #1
 810bf06:	d102      	bne.n	810bf0e <_read_r+0x1e>
 810bf08:	682b      	ldr	r3, [r5, #0]
 810bf0a:	b103      	cbz	r3, 810bf0e <_read_r+0x1e>
 810bf0c:	6023      	str	r3, [r4, #0]
 810bf0e:	bd38      	pop	{r3, r4, r5, pc}
 810bf10:	10004dbc 	.word	0x10004dbc

0810bf14 <_kill_r>:
 810bf14:	b538      	push	{r3, r4, r5, lr}
 810bf16:	4d07      	ldr	r5, [pc, #28]	@ (810bf34 <_kill_r+0x20>)
 810bf18:	2300      	movs	r3, #0
 810bf1a:	4604      	mov	r4, r0
 810bf1c:	4608      	mov	r0, r1
 810bf1e:	4611      	mov	r1, r2
 810bf20:	602b      	str	r3, [r5, #0]
 810bf22:	f7f4 fed9 	bl	8100cd8 <_kill>
 810bf26:	1c43      	adds	r3, r0, #1
 810bf28:	d102      	bne.n	810bf30 <_kill_r+0x1c>
 810bf2a:	682b      	ldr	r3, [r5, #0]
 810bf2c:	b103      	cbz	r3, 810bf30 <_kill_r+0x1c>
 810bf2e:	6023      	str	r3, [r4, #0]
 810bf30:	bd38      	pop	{r3, r4, r5, pc}
 810bf32:	bf00      	nop
 810bf34:	10004dbc 	.word	0x10004dbc

0810bf38 <_getpid_r>:
 810bf38:	f7f4 bec6 	b.w	8100cc8 <_getpid>

0810bf3c <_write_r>:
 810bf3c:	b538      	push	{r3, r4, r5, lr}
 810bf3e:	4d07      	ldr	r5, [pc, #28]	@ (810bf5c <_write_r+0x20>)
 810bf40:	4604      	mov	r4, r0
 810bf42:	4608      	mov	r0, r1
 810bf44:	4611      	mov	r1, r2
 810bf46:	2200      	movs	r2, #0
 810bf48:	602a      	str	r2, [r5, #0]
 810bf4a:	461a      	mov	r2, r3
 810bf4c:	f7f4 fefc 	bl	8100d48 <_write>
 810bf50:	1c43      	adds	r3, r0, #1
 810bf52:	d102      	bne.n	810bf5a <_write_r+0x1e>
 810bf54:	682b      	ldr	r3, [r5, #0]
 810bf56:	b103      	cbz	r3, 810bf5a <_write_r+0x1e>
 810bf58:	6023      	str	r3, [r4, #0]
 810bf5a:	bd38      	pop	{r3, r4, r5, pc}
 810bf5c:	10004dbc 	.word	0x10004dbc

0810bf60 <_malloc_usable_size_r>:
 810bf60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810bf64:	1f18      	subs	r0, r3, #4
 810bf66:	2b00      	cmp	r3, #0
 810bf68:	bfbc      	itt	lt
 810bf6a:	580b      	ldrlt	r3, [r1, r0]
 810bf6c:	18c0      	addlt	r0, r0, r3
 810bf6e:	4770      	bx	lr

0810bf70 <_init>:
 810bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bf72:	bf00      	nop
 810bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bf76:	bc08      	pop	{r3}
 810bf78:	469e      	mov	lr, r3
 810bf7a:	4770      	bx	lr

0810bf7c <_fini>:
 810bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bf7e:	bf00      	nop
 810bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810bf82:	bc08      	pop	{r3}
 810bf84:	469e      	mov	lr, r3
 810bf86:	4770      	bx	lr
